
BNO055_stm32_f303re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  08009f60  08009f60  00019f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5f8  0800a5f8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a5f8  0800a5f8  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a5f8  0800a5f8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5f8  0800a5f8  0001a5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5fc  0800a5fc  0001a5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000334  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000518  20000518  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012a29  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b36  00000000  00000000  00032c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001078  00000000  00000000  000357b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cca  00000000  00000000  00036830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023795  00000000  00000000  000374fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017ba7  00000000  00000000  0005ac8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce694  00000000  00000000  00072836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005a68  00000000  00000000  00140ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00146934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009f48 	.word	0x08009f48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08009f48 	.word	0x08009f48

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <bno055_set_i2c_handler>:
    .mag_id = 0,
    .gyr_id = 0,
    .bl_rev_id = 0
};

void bno055_set_i2c_handler(I2C_HandleTypeDef* hi2c){
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
    i2c_dev = hi2c;
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <bno055_set_i2c_handler+0x1c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000200 	.word	0x20000200

08000d24 <bno055_writeData>:

uint8_t bno055_writeData(uint8_t* txdata) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af02      	add	r7, sp, #8
 8000d2a:	6078      	str	r0, [r7, #4]
    uint8_t status;
    status = HAL_I2C_Master_Transmit(i2c_dev, BNO055_I2C_ADDR_LO << 1, txdata, sizeof(txdata), 10);
 8000d2c:	4b5a      	ldr	r3, [pc, #360]	; (8000e98 <bno055_writeData+0x174>)
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	230a      	movs	r3, #10
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2304      	movs	r3, #4
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	2150      	movs	r1, #80	; 0x50
 8000d3a:	f001 fcff 	bl	800273c <HAL_I2C_Master_Transmit>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 8000d42:	7dfb      	ldrb	r3, [r7, #23]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d101      	bne.n	8000d4c <bno055_writeData+0x28>
        return 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e0a1      	b.n	8000e90 <bno055_writeData+0x16c>
    }

    if (status == HAL_ERROR) {
 8000d4c:	7dfb      	ldrb	r3, [r7, #23]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d103      	bne.n	8000d5a <bno055_writeData+0x36>
        printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000d52:	4852      	ldr	r0, [pc, #328]	; (8000e9c <bno055_writeData+0x178>)
 8000d54:	f005 fc1e 	bl	8006594 <puts>
 8000d58:	e012      	b.n	8000d80 <bno055_writeData+0x5c>
    } else if (status == HAL_TIMEOUT) {
 8000d5a:	7dfb      	ldrb	r3, [r7, #23]
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d103      	bne.n	8000d68 <bno055_writeData+0x44>
        printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000d60:	484f      	ldr	r0, [pc, #316]	; (8000ea0 <bno055_writeData+0x17c>)
 8000d62:	f005 fc17 	bl	8006594 <puts>
 8000d66:	e00b      	b.n	8000d80 <bno055_writeData+0x5c>
    } else if (status == HAL_BUSY) {
 8000d68:	7dfb      	ldrb	r3, [r7, #23]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d103      	bne.n	8000d76 <bno055_writeData+0x52>
        printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000d6e:	484d      	ldr	r0, [pc, #308]	; (8000ea4 <bno055_writeData+0x180>)
 8000d70:	f005 fc10 	bl	8006594 <puts>
 8000d74:	e004      	b.n	8000d80 <bno055_writeData+0x5c>
    } else {
        printf("Unknown status data %d", status);
 8000d76:	7dfb      	ldrb	r3, [r7, #23]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	484b      	ldr	r0, [pc, #300]	; (8000ea8 <bno055_writeData+0x184>)
 8000d7c:	f005 fba4 	bl	80064c8 <iprintf>
    }

    uint32_t error = HAL_I2C_GetError(i2c_dev);
 8000d80:	4b45      	ldr	r3, [pc, #276]	; (8000e98 <bno055_writeData+0x174>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 fed1 	bl	8002b2c <HAL_I2C_GetError>
 8000d8a:	6138      	str	r0, [r7, #16]
    if (error == HAL_I2C_ERROR_NONE) {
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <bno055_writeData+0x72>
        return 1;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e07c      	b.n	8000e90 <bno055_writeData+0x16c>
    } else if (error == HAL_I2C_ERROR_BERR) {
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d103      	bne.n	8000da4 <bno055_writeData+0x80>
        printf("HAL_I2C_ERROR_BERR\r\n");
 8000d9c:	4843      	ldr	r0, [pc, #268]	; (8000eac <bno055_writeData+0x188>)
 8000d9e:	f005 fbf9 	bl	8006594 <puts>
 8000da2:	e021      	b.n	8000de8 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_ARLO) {
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d103      	bne.n	8000db2 <bno055_writeData+0x8e>
        printf("HAL_I2C_ERROR_ARLO\r\n");
 8000daa:	4841      	ldr	r0, [pc, #260]	; (8000eb0 <bno055_writeData+0x18c>)
 8000dac:	f005 fbf2 	bl	8006594 <puts>
 8000db0:	e01a      	b.n	8000de8 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_AF) {
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d103      	bne.n	8000dc0 <bno055_writeData+0x9c>
        printf("HAL_I2C_ERROR_AF\r\n");
 8000db8:	483e      	ldr	r0, [pc, #248]	; (8000eb4 <bno055_writeData+0x190>)
 8000dba:	f005 fbeb 	bl	8006594 <puts>
 8000dbe:	e013      	b.n	8000de8 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_OVR) {
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	2b08      	cmp	r3, #8
 8000dc4:	d103      	bne.n	8000dce <bno055_writeData+0xaa>
        printf("HAL_I2C_ERROR_OVR\r\n");
 8000dc6:	483c      	ldr	r0, [pc, #240]	; (8000eb8 <bno055_writeData+0x194>)
 8000dc8:	f005 fbe4 	bl	8006594 <puts>
 8000dcc:	e00c      	b.n	8000de8 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_DMA) {
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	2b10      	cmp	r3, #16
 8000dd2:	d103      	bne.n	8000ddc <bno055_writeData+0xb8>
        printf("HAL_I2C_ERROR_DMA\r\n");
 8000dd4:	4839      	ldr	r0, [pc, #228]	; (8000ebc <bno055_writeData+0x198>)
 8000dd6:	f005 fbdd 	bl	8006594 <puts>
 8000dda:	e005      	b.n	8000de8 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	2b20      	cmp	r3, #32
 8000de0:	d102      	bne.n	8000de8 <bno055_writeData+0xc4>
        printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000de2:	4837      	ldr	r0, [pc, #220]	; (8000ec0 <bno055_writeData+0x19c>)
 8000de4:	f005 fbd6 	bl	8006594 <puts>
    }

    HAL_I2C_StateTypeDef state = HAL_I2C_GetState(i2c_dev);
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <bno055_writeData+0x174>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 fe8f 	bl	8002b10 <HAL_I2C_GetState>
 8000df2:	4603      	mov	r3, r0
 8000df4:	73fb      	strb	r3, [r7, #15]
    if (state == HAL_I2C_STATE_RESET) {
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d103      	bne.n	8000e04 <bno055_writeData+0xe0>
        printf("HAL_I2C_STATE_RESET\r\n");
 8000dfc:	4831      	ldr	r0, [pc, #196]	; (8000ec4 <bno055_writeData+0x1a0>)
 8000dfe:	f005 fbc9 	bl	8006594 <puts>
 8000e02:	e044      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_READY) {
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	2b20      	cmp	r3, #32
 8000e08:	d103      	bne.n	8000e12 <bno055_writeData+0xee>
        printf("HAL_I2C_STATE_RESET\r\n");
 8000e0a:	482e      	ldr	r0, [pc, #184]	; (8000ec4 <bno055_writeData+0x1a0>)
 8000e0c:	f005 fbc2 	bl	8006594 <puts>
 8000e10:	e03d      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY) {
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	2b24      	cmp	r3, #36	; 0x24
 8000e16:	d103      	bne.n	8000e20 <bno055_writeData+0xfc>
        printf("HAL_I2C_STATE_BUSY\r\n");
 8000e18:	482b      	ldr	r0, [pc, #172]	; (8000ec8 <bno055_writeData+0x1a4>)
 8000e1a:	f005 fbbb 	bl	8006594 <puts>
 8000e1e:	e036      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b21      	cmp	r3, #33	; 0x21
 8000e24:	d103      	bne.n	8000e2e <bno055_writeData+0x10a>
        printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000e26:	4829      	ldr	r0, [pc, #164]	; (8000ecc <bno055_writeData+0x1a8>)
 8000e28:	f005 fbb4 	bl	8006594 <puts>
 8000e2c:	e02f      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	2b22      	cmp	r3, #34	; 0x22
 8000e32:	d103      	bne.n	8000e3c <bno055_writeData+0x118>
        printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000e34:	4826      	ldr	r0, [pc, #152]	; (8000ed0 <bno055_writeData+0x1ac>)
 8000e36:	f005 fbad 	bl	8006594 <puts>
 8000e3a:	e028      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_LISTEN) {
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	2b28      	cmp	r3, #40	; 0x28
 8000e40:	d103      	bne.n	8000e4a <bno055_writeData+0x126>
        printf("HAL_I2C_STATE_LISTEN\r\n");
 8000e42:	4824      	ldr	r0, [pc, #144]	; (8000ed4 <bno055_writeData+0x1b0>)
 8000e44:	f005 fba6 	bl	8006594 <puts>
 8000e48:	e021      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	2b29      	cmp	r3, #41	; 0x29
 8000e4e:	d103      	bne.n	8000e58 <bno055_writeData+0x134>
        printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000e50:	4821      	ldr	r0, [pc, #132]	; (8000ed8 <bno055_writeData+0x1b4>)
 8000e52:	f005 fb9f 	bl	8006594 <puts>
 8000e56:	e01a      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8000e5c:	d103      	bne.n	8000e66 <bno055_writeData+0x142>
        printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000e5e:	481f      	ldr	r0, [pc, #124]	; (8000edc <bno055_writeData+0x1b8>)
 8000e60:	f005 fb98 	bl	8006594 <puts>
 8000e64:	e013      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_ABORT) {
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b60      	cmp	r3, #96	; 0x60
 8000e6a:	d103      	bne.n	8000e74 <bno055_writeData+0x150>
        printf("HAL_I2C_STATE_ABORT\r\n");
 8000e6c:	481c      	ldr	r0, [pc, #112]	; (8000ee0 <bno055_writeData+0x1bc>)
 8000e6e:	f005 fb91 	bl	8006594 <puts>
 8000e72:	e00c      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	2ba0      	cmp	r3, #160	; 0xa0
 8000e78:	d103      	bne.n	8000e82 <bno055_writeData+0x15e>
        printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000e7a:	481a      	ldr	r0, [pc, #104]	; (8000ee4 <bno055_writeData+0x1c0>)
 8000e7c:	f005 fb8a 	bl	8006594 <puts>
 8000e80:	e005      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_ERROR) {
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	2be0      	cmp	r3, #224	; 0xe0
 8000e86:	d102      	bne.n	8000e8e <bno055_writeData+0x16a>
        printf("HAL_I2C_STATE_ERROR\r\n");
 8000e88:	4817      	ldr	r0, [pc, #92]	; (8000ee8 <bno055_writeData+0x1c4>)
 8000e8a:	f005 fb83 	bl	8006594 <puts>
    }
    return 1;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000200 	.word	0x20000200
 8000e9c:	08009f60 	.word	0x08009f60
 8000ea0:	08009f84 	.word	0x08009f84
 8000ea4:	08009fac 	.word	0x08009fac
 8000ea8:	08009fd0 	.word	0x08009fd0
 8000eac:	08009fe8 	.word	0x08009fe8
 8000eb0:	08009ffc 	.word	0x08009ffc
 8000eb4:	0800a010 	.word	0x0800a010
 8000eb8:	0800a024 	.word	0x0800a024
 8000ebc:	0800a038 	.word	0x0800a038
 8000ec0:	0800a04c 	.word	0x0800a04c
 8000ec4:	0800a064 	.word	0x0800a064
 8000ec8:	0800a07c 	.word	0x0800a07c
 8000ecc:	0800a090 	.word	0x0800a090
 8000ed0:	0800a0a8 	.word	0x0800a0a8
 8000ed4:	0800a0c0 	.word	0x0800a0c0
 8000ed8:	0800a0d8 	.word	0x0800a0d8
 8000edc:	0800a0f8 	.word	0x0800a0f8
 8000ee0:	0800a118 	.word	0x0800a118
 8000ee4:	0800a130 	.word	0x0800a130
 8000ee8:	0800a148 	.word	0x0800a148

08000eec <bno055_readData>:


uint8_t bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
	status = HAL_I2C_Master_Transmit(i2c_dev, BNO055_I2C_ADDR_LO << 1, &reg, 1, 10);
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <bno055_readData+0x68>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	1dfa      	adds	r2, r7, #7
 8000f02:	230a      	movs	r3, #10
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2301      	movs	r3, #1
 8000f08:	2150      	movs	r1, #80	; 0x50
 8000f0a:	f001 fc17 	bl	800273c <HAL_I2C_Master_Transmit>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <bno055_readData+0x30>
		return 1;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e017      	b.n	8000f4c <bno055_readData+0x60>
	}
    bno055_delay(10);
 8000f1c:	200a      	movs	r0, #10
 8000f1e:	f000 f81b 	bl	8000f58 <bno055_delay>
    status = HAL_I2C_Master_Receive(i2c_dev, BNO055_I2C_ADDR_LO << 1, data, len, 10);
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <bno055_readData+0x68>)
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	220a      	movs	r2, #10
 8000f2c:	9200      	str	r2, [sp, #0]
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	2150      	movs	r1, #80	; 0x50
 8000f32:	f001 fcf7 	bl	8002924 <HAL_I2C_Master_Receive>
 8000f36:	4603      	mov	r3, r0
 8000f38:	73fb      	strb	r3, [r7, #15]
    bno055_delay(10);
 8000f3a:	200a      	movs	r0, #10
 8000f3c:	f000 f80c 	bl	8000f58 <bno055_delay>
    if (status == HAL_OK) {
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <bno055_readData+0x5e>
		return 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <bno055_readData+0x60>
	}
	else{
		return 1;
 8000f4a:	2301      	movs	r3, #1
	}
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000200 	.word	0x20000200

08000f58 <bno055_delay>:


void bno055_delay(uint32_t ms){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 ff43 	bl	8001dec <HAL_Delay>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <bno055_init>:

BNO055_FUNC_RETURN bno055_init(bno055_conf_t * bno055_conf, bno055_verification_t * bno055_verification){
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b090      	sub	sp, #64	; 0x40
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
    BNO055_FUNC_RETURN ret = ERROR_DEFAULT;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t conf_page0 [2] = {BNO055_PAGE_ID, 0x00};
 8000f7e:	2307      	movs	r3, #7
 8000f80:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uint8_t op_mode_conf [2] = {BNO055_OPR_MODE, OPERATION_MODE_CONFIG};
 8000f82:	233d      	movs	r3, #61	; 0x3d
 8000f84:	873b      	strh	r3, [r7, #56]	; 0x38

    ret += bno055_writeData(conf_page0);
 8000f86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff feca 	bl	8000d24 <bno055_writeData>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f98:	4413      	add	r3, r2
 8000f9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 8000f9e:	200a      	movs	r0, #10
 8000fa0:	f7ff ffda 	bl	8000f58 <bno055_delay>

    ret +=bno055_writeData(op_mode_conf);
 8000fa4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff febb 	bl	8000d24 <bno055_writeData>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000fb6:	4413      	add	r3, r2
 8000fb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(550);
 8000fbc:	f240 2026 	movw	r0, #550	; 0x226
 8000fc0:	f7ff ffca 	bl	8000f58 <bno055_delay>

	uint8_t conf_page1 [2] = {BNO055_PAGE_ID, 0x01};
 8000fc4:	f240 1307 	movw	r3, #263	; 0x107
 8000fc8:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t acc_conf [2] = {BNO055_ACC_CONFIG, bno055_conf->acc_operation_mode << 5 | bno055_conf->acc_bandwidth << 2 | bno055_conf->acc_g_range };
 8000fca:	2308      	movs	r3, #8
 8000fcc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	799b      	ldrb	r3, [r3, #6]
 8000fd4:	015b      	lsls	r3, r3, #5
 8000fd6:	b25a      	sxtb	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	795b      	ldrb	r3, [r3, #5]
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b25a      	sxtb	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	791b      	ldrb	r3, [r3, #4]
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t gyr_conf0 [2] = {BNO055_GYRO_CONFIG_0, bno055_conf->gyr_bandwidth << 3 | bno055_conf->gyr_range };
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7a1b      	ldrb	r3, [r3, #8]
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	b25a      	sxtb	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	79db      	ldrb	r3, [r3, #7]
 8001006:	b25b      	sxtb	r3, r3
 8001008:	4313      	orrs	r3, r2
 800100a:	b25b      	sxtb	r3, r3
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t gyr_conf1 [2] = {BNO055_GYRO_CONFIG_1, bno055_conf->gyr_op_mode };
 8001012:	230b      	movs	r3, #11
 8001014:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7a5b      	ldrb	r3, [r3, #9]
 800101c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t mag_conf [2] = {BNO055_MAG_CONFIG, bno055_conf->mag_pwr_mode << 5 | bno055_conf->mag_op_mode << 3 | bno055_conf->mag_data_rate };
 8001020:	2309      	movs	r3, #9
 8001022:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7b1b      	ldrb	r3, [r3, #12]
 800102a:	015b      	lsls	r3, r3, #5
 800102c:	b25a      	sxtb	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7adb      	ldrb	r3, [r3, #11]
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	b25b      	sxtb	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b25a      	sxtb	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7a9b      	ldrb	r3, [r3, #10]
 800103e:	b25b      	sxtb	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b25b      	sxtb	r3, r3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	ret += bno055_writeData(conf_page1);
 800104a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fe68 	bl	8000d24 <bno055_writeData>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800105c:	4413      	add	r3, r2
 800105e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 8001062:	200a      	movs	r0, #10
 8001064:	f7ff ff78 	bl	8000f58 <bno055_delay>


	ret += bno055_writeData(acc_conf);
 8001068:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fe59 	bl	8000d24 <bno055_writeData>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800107a:	4413      	add	r3, r2
 800107c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 8001080:	200a      	movs	r0, #10
 8001082:	f7ff ff69 	bl	8000f58 <bno055_delay>

	ret += bno055_writeData(gyr_conf0);
 8001086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fe4a 	bl	8000d24 <bno055_writeData>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001098:	4413      	add	r3, r2
 800109a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 800109e:	200a      	movs	r0, #10
 80010a0:	f7ff ff5a 	bl	8000f58 <bno055_delay>

	ret += bno055_writeData(gyr_conf1);
 80010a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fe3b 	bl	8000d24 <bno055_writeData>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010b6:	4413      	add	r3, r2
 80010b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 80010bc:	200a      	movs	r0, #10
 80010be:	f7ff ff4b 	bl	8000f58 <bno055_delay>

	ret += bno055_writeData(mag_conf);
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fe2c 	bl	8000d24 <bno055_writeData>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010d4:	4413      	add	r3, r2
 80010d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 80010da:	200a      	movs	r0, #10
 80010dc:	f7ff ff3c 	bl	8000f58 <bno055_delay>


    uint8_t pwr_mode [2] = {BNO055_PWR_MODE, bno055_conf->pwr_mode};
 80010e0:	233e      	movs	r3, #62	; 0x3e
 80010e2:	f887 3020 	strb.w	r3, [r7, #32]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    uint8_t op_mode [2] = {BNO055_OPR_MODE, bno055_conf->op_mode};
 80010ee:	233d      	movs	r3, #61	; 0x3d
 80010f0:	773b      	strb	r3, [r7, #28]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	785b      	ldrb	r3, [r3, #1]
 80010f6:	777b      	strb	r3, [r7, #29]
    uint8_t axis_remap_conf [2] = {BNO055_AXIS_MAP_CONFIG, bno055_conf->axis_remap_conf};
 80010f8:	2341      	movs	r3, #65	; 0x41
 80010fa:	763b      	strb	r3, [r7, #24]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	789b      	ldrb	r3, [r3, #2]
 8001100:	767b      	strb	r3, [r7, #25]
    uint8_t axis_remap_sign [2] = {BNO055_AXIS_MAP_SIGN, bno055_conf->axis_remap_sign};
 8001102:	2342      	movs	r3, #66	; 0x42
 8001104:	753b      	strb	r3, [r7, #20]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	78db      	ldrb	r3, [r3, #3]
 800110a:	757b      	strb	r3, [r7, #21]

    uint8_t unit_sel [2] = {BNO055_UNIT_SEL, bno055_conf->unit_sel};
 800110c:	233b      	movs	r3, #59	; 0x3b
 800110e:	743b      	strb	r3, [r7, #16]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7b5b      	ldrb	r3, [r3, #13]
 8001114:	747b      	strb	r3, [r7, #17]

    ret += bno055_writeData(conf_page0);
 8001116:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fe02 	bl	8000d24 <bno055_writeData>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001128:	4413      	add	r3, r2
 800112a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 800112e:	200a      	movs	r0, #10
 8001130:	f7ff ff12 	bl	8000f58 <bno055_delay>

	ret += bno055_writeData(pwr_mode);
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fdf3 	bl	8000d24 <bno055_writeData>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001146:	4413      	add	r3, r2
 8001148:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 800114c:	200a      	movs	r0, #10
 800114e:	f7ff ff03 	bl	8000f58 <bno055_delay>

    ret += bno055_writeData(axis_remap_conf);
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fde4 	bl	8000d24 <bno055_writeData>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001164:	4413      	add	r3, r2
 8001166:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 800116a:	200a      	movs	r0, #10
 800116c:	f7ff fef4 	bl	8000f58 <bno055_delay>

    ret += bno055_writeData(axis_remap_sign);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fdd5 	bl	8000d24 <bno055_writeData>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001182:	4413      	add	r3, r2
 8001184:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 8001188:	200a      	movs	r0, #10
 800118a:	f7ff fee5 	bl	8000f58 <bno055_delay>

    ret += bno055_writeData(unit_sel);
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fdc6 	bl	8000d24 <bno055_writeData>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011a0:	4413      	add	r3, r2
 80011a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 80011a6:	200a      	movs	r0, #10
 80011a8:	f7ff fed6 	bl	8000f58 <bno055_delay>

    ret += bno055_writeData(op_mode);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fdb7 	bl	8000d24 <bno055_writeData>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011be:	4413      	add	r3, r2
 80011c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 80011c4:	200a      	movs	r0, #10
 80011c6:	f7ff fec7 	bl	8000f58 <bno055_delay>

    uint8_t sw_id[2] = {0, 0};
 80011ca:	2300      	movs	r3, #0
 80011cc:	81bb      	strh	r3, [r7, #12]
    uint8_t data = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	72fb      	strb	r3, [r7, #11]

    ret += bno055_readData(BNO055_CHIP_ID, &data, 1);
 80011d2:	f107 030b 	add.w	r3, r7, #11
 80011d6:	2201      	movs	r2, #1
 80011d8:	4619      	mov	r1, r3
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fe86 	bl	8000eec <bno055_readData>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011e8:	4413      	add	r3, r2
 80011ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->chip_id = data;
 80011ee:	7afa      	ldrb	r2, [r7, #11]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	701a      	strb	r2, [r3, #0]
    bno055_delay(10);
 80011f4:	200a      	movs	r0, #10
 80011f6:	f7ff feaf 	bl	8000f58 <bno055_delay>

    ret += bno055_readData(BNO055_ACC_ID, &data, 1);
 80011fa:	f107 030b 	add.w	r3, r7, #11
 80011fe:	2201      	movs	r2, #1
 8001200:	4619      	mov	r1, r3
 8001202:	2001      	movs	r0, #1
 8001204:	f7ff fe72 	bl	8000eec <bno055_readData>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001210:	4413      	add	r3, r2
 8001212:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->acc_id = data;
 8001216:	7afa      	ldrb	r2, [r7, #11]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	715a      	strb	r2, [r3, #5]
    bno055_delay(10);
 800121c:	200a      	movs	r0, #10
 800121e:	f7ff fe9b 	bl	8000f58 <bno055_delay>

    ret += bno055_readData(BNO055_MAG_ID, &data, 1);
 8001222:	f107 030b 	add.w	r3, r7, #11
 8001226:	2201      	movs	r2, #1
 8001228:	4619      	mov	r1, r3
 800122a:	2002      	movs	r0, #2
 800122c:	f7ff fe5e 	bl	8000eec <bno055_readData>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001238:	4413      	add	r3, r2
 800123a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->mag_id = data;
 800123e:	7afa      	ldrb	r2, [r7, #11]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	719a      	strb	r2, [r3, #6]
    bno055_delay(10);
 8001244:	200a      	movs	r0, #10
 8001246:	f7ff fe87 	bl	8000f58 <bno055_delay>

    ret += bno055_readData(BNO055_GYR_ID, &data, 1);
 800124a:	f107 030b 	add.w	r3, r7, #11
 800124e:	2201      	movs	r2, #1
 8001250:	4619      	mov	r1, r3
 8001252:	2003      	movs	r0, #3
 8001254:	f7ff fe4a 	bl	8000eec <bno055_readData>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001260:	4413      	add	r3, r2
 8001262:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->gyr_id = data;
 8001266:	7afa      	ldrb	r2, [r7, #11]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	71da      	strb	r2, [r3, #7]
    bno055_delay(10);
 800126c:	200a      	movs	r0, #10
 800126e:	f7ff fe73 	bl	8000f58 <bno055_delay>

    ret += bno055_readData(BNO055_BL_REV_ID, &data, 1);
 8001272:	f107 030b 	add.w	r3, r7, #11
 8001276:	2201      	movs	r2, #1
 8001278:	4619      	mov	r1, r3
 800127a:	2006      	movs	r0, #6
 800127c:	f7ff fe36 	bl	8000eec <bno055_readData>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001288:	4413      	add	r3, r2
 800128a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->bl_rev_id = data;
 800128e:	7afa      	ldrb	r2, [r7, #11]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	721a      	strb	r2, [r3, #8]
    bno055_delay(10);
 8001294:	200a      	movs	r0, #10
 8001296:	f7ff fe5f 	bl	8000f58 <bno055_delay>

    ret += bno055_readData(BNO055_SW_REV_ID_LSB, sw_id, 2);
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	2202      	movs	r2, #2
 80012a0:	4619      	mov	r1, r3
 80012a2:	2004      	movs	r0, #4
 80012a4:	f7ff fe22 	bl	8000eec <bno055_readData>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80012b0:	4413      	add	r3, r2
 80012b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->sw_rev_id = (uint16_t)((sw_id[1] << 8)|(sw_id[0]));
 80012b6:	7b7b      	ldrb	r3, [r7, #13]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	7b3b      	ldrb	r3, [r7, #12]
 80012be:	b21b      	sxth	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	805a      	strh	r2, [r3, #2]
    bno055_delay(10);
 80012ca:	200a      	movs	r0, #10
 80012cc:	f7ff fe44 	bl	8000f58 <bno055_delay>

    ret += bno055_readData(BNO055_PAGE_ID, &data, 1);
 80012d0:	f107 030b 	add.w	r3, r7, #11
 80012d4:	2201      	movs	r2, #1
 80012d6:	4619      	mov	r1, r3
 80012d8:	2007      	movs	r0, #7
 80012da:	f7ff fe07 	bl	8000eec <bno055_readData>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80012e6:	4413      	add	r3, r2
 80012e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->page_id = data;
 80012ec:	7afa      	ldrb	r2, [r7, #11]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	711a      	strb	r2, [r3, #4]
    bno055_delay(100);
 80012f2:	2064      	movs	r0, #100	; 0x64
 80012f4:	f7ff fe30 	bl	8000f58 <bno055_delay>

    return ret;
 80012f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3740      	adds	r7, #64	; 0x40
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <bno055_read_euler_h>:
    gyr_xyz->y = (float)(uint16_t)((data[3] << 8)|(data[2]));
    gyr_xyz->z = (float)(uint16_t)((data[5] << 8)|(data[4]));
    return ret;
}

BNO055_FUNC_RETURN bno055_read_euler_h(uint16_t* euler_h){
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    BNO055_FUNC_RETURN ret = ERROR_DEFAULT;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2] = {0,0};
 8001310:	2300      	movs	r3, #0
 8001312:	81bb      	strh	r3, [r7, #12]
    ret += bno055_readData(BNO055_EUL_HEADING_LSB, data, 2);
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	2202      	movs	r2, #2
 800131a:	4619      	mov	r1, r3
 800131c:	201a      	movs	r0, #26
 800131e:	f7ff fde5 	bl	8000eec <bno055_readData>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	4413      	add	r3, r2
 800132a:	73fb      	strb	r3, [r7, #15]
    *euler_h = (uint16_t)((data[1] << 8)|(data[0]));
 800132c:	7b7b      	ldrb	r3, [r7, #13]
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	b21a      	sxth	r2, r3
 8001332:	7b3b      	ldrb	r3, [r7, #12]
 8001334:	b21b      	sxth	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b21b      	sxth	r3, r3
 800133a:	b29a      	uxth	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	801a      	strh	r2, [r3, #0]
    return ret;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <bno055_read_euler_r>:
BNO055_FUNC_RETURN bno055_read_euler_r(uint16_t* euler_r){
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
    BNO055_FUNC_RETURN ret = ERROR_DEFAULT;
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2] = {0,0};
 8001356:	2300      	movs	r3, #0
 8001358:	81bb      	strh	r3, [r7, #12]
    ret += bno055_readData(BNO055_EUL_ROLL_LSB, data, 2);
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	2202      	movs	r2, #2
 8001360:	4619      	mov	r1, r3
 8001362:	201c      	movs	r0, #28
 8001364:	f7ff fdc2 	bl	8000eec <bno055_readData>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	4413      	add	r3, r2
 8001370:	73fb      	strb	r3, [r7, #15]
    *euler_r = (uint16_t)((data[1] << 8)|(data[0]));
 8001372:	7b7b      	ldrb	r3, [r7, #13]
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	b21a      	sxth	r2, r3
 8001378:	7b3b      	ldrb	r3, [r7, #12]
 800137a:	b21b      	sxth	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b21b      	sxth	r3, r3
 8001380:	b29a      	uxth	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	801a      	strh	r2, [r3, #0]
    return ret;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <bno055_read_euler_p>:
BNO055_FUNC_RETURN bno055_read_euler_p(uint16_t* euler_p){
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
    BNO055_FUNC_RETURN ret = ERROR_DEFAULT;
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2] = {0,0};
 800139c:	2300      	movs	r3, #0
 800139e:	81bb      	strh	r3, [r7, #12]
    ret += bno055_readData(BNO055_EUL_PITCH_LSB, data, 2);
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	2202      	movs	r2, #2
 80013a6:	4619      	mov	r1, r3
 80013a8:	201e      	movs	r0, #30
 80013aa:	f7ff fd9f 	bl	8000eec <bno055_readData>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	4413      	add	r3, r2
 80013b6:	73fb      	strb	r3, [r7, #15]
    *euler_p = (uint16_t)((data[1] << 8)|(data[0]));
 80013b8:	7b7b      	ldrb	r3, [r7, #13]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b21a      	sxth	r2, r3
 80013be:	7b3b      	ldrb	r3, [r7, #12]
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	4313      	orrs	r3, r2
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	801a      	strh	r2, [r3, #0]
    return ret;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_DMA_Init+0x48>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <MX_DMA_Init+0x48>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6153      	str	r3, [r2, #20]
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <MX_DMA_Init+0x48>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2010      	movs	r0, #16
 80013fc:	f000 fdf5 	bl	8001fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001400:	2010      	movs	r0, #16
 8001402:	f000 fe0e 	bl	8002022 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	2011      	movs	r0, #17
 800140c:	f000 fded 	bl	8001fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001410:	2011      	movs	r0, #17
 8001412:	f000 fe06 	bl	8002022 <HAL_NVIC_EnableIRQ>

}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000

08001424 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <MX_GPIO_Init+0xc4>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	4a2a      	ldr	r2, [pc, #168]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001440:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001444:	6153      	str	r3, [r2, #20]
 8001446:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001452:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a24      	ldr	r2, [pc, #144]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001458:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800145c:	6153      	str	r3, [r2, #20]
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <MX_GPIO_Init+0xc4>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	4a1e      	ldr	r2, [pc, #120]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001474:	6153      	str	r3, [r2, #20]
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148c:	6153      	str	r3, [r2, #20]
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <MX_GPIO_Init+0xc4>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2120      	movs	r1, #32
 800149e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a2:	f001 f889 	bl	80025b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	480b      	ldr	r0, [pc, #44]	; (80014ec <MX_GPIO_Init+0xc8>)
 80014be:	f000 fef1 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014c2:	2320      	movs	r3, #32
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014dc:	f000 fee2 	bl	80022a4 <HAL_GPIO_Init>

}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021000 	.word	0x40021000
 80014ec:	48000800 	.word	0x48000800

080014f0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <MX_I2C1_Init+0x74>)
 80014f6:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <MX_I2C1_Init+0x78>)
 80014f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_I2C1_Init+0x74>)
 80014fc:	4a1b      	ldr	r2, [pc, #108]	; (800156c <MX_I2C1_Init+0x7c>)
 80014fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <MX_I2C1_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001506:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_I2C1_Init+0x74>)
 8001508:	2201      	movs	r2, #1
 800150a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_I2C1_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_I2C1_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MX_I2C1_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_I2C1_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_I2C1_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800152a:	480e      	ldr	r0, [pc, #56]	; (8001564 <MX_I2C1_Init+0x74>)
 800152c:	f001 f876 	bl	800261c <HAL_I2C_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001536:	f000 f9d1 	bl	80018dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800153a:	2100      	movs	r1, #0
 800153c:	4809      	ldr	r0, [pc, #36]	; (8001564 <MX_I2C1_Init+0x74>)
 800153e:	f001 fd93 	bl	8003068 <HAL_I2CEx_ConfigAnalogFilter>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001548:	f000 f9c8 	bl	80018dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800154c:	2100      	movs	r1, #0
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_I2C1_Init+0x74>)
 8001550:	f001 fdd5 	bl	80030fe <HAL_I2CEx_ConfigDigitalFilter>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800155a:	f000 f9bf 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000210 	.word	0x20000210
 8001568:	40005400 	.word	0x40005400
 800156c:	2000090e 	.word	0x2000090e

08001570 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a4c      	ldr	r2, [pc, #304]	; (80016c0 <HAL_I2C_MspInit+0x150>)
 800158e:	4293      	cmp	r3, r2
 8001590:	f040 8092 	bne.w	80016b8 <HAL_I2C_MspInit+0x148>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001594:	4b4b      	ldr	r3, [pc, #300]	; (80016c4 <HAL_I2C_MspInit+0x154>)
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	4a4a      	ldr	r2, [pc, #296]	; (80016c4 <HAL_I2C_MspInit+0x154>)
 800159a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159e:	6153      	str	r3, [r2, #20]
 80015a0:	4b48      	ldr	r3, [pc, #288]	; (80016c4 <HAL_I2C_MspInit+0x154>)
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ac:	4b45      	ldr	r3, [pc, #276]	; (80016c4 <HAL_I2C_MspInit+0x154>)
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	4a44      	ldr	r2, [pc, #272]	; (80016c4 <HAL_I2C_MspInit+0x154>)
 80015b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b6:	6153      	str	r3, [r2, #20]
 80015b8:	4b42      	ldr	r3, [pc, #264]	; (80016c4 <HAL_I2C_MspInit+0x154>)
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ca:	2312      	movs	r3, #18
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015d6:	2304      	movs	r3, #4
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e4:	f000 fe5e 	bl	80022a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ec:	2312      	movs	r3, #18
 80015ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015f8:	2304      	movs	r3, #4
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	4831      	ldr	r0, [pc, #196]	; (80016c8 <HAL_I2C_MspInit+0x158>)
 8001604:	f000 fe4e 	bl	80022a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001608:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <HAL_I2C_MspInit+0x154>)
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	4a2d      	ldr	r2, [pc, #180]	; (80016c4 <HAL_I2C_MspInit+0x154>)
 800160e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001612:	61d3      	str	r3, [r2, #28]
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_I2C_MspInit+0x154>)
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001620:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <HAL_I2C_MspInit+0x15c>)
 8001622:	4a2b      	ldr	r2, [pc, #172]	; (80016d0 <HAL_I2C_MspInit+0x160>)
 8001624:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001626:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_I2C_MspInit+0x15c>)
 8001628:	2200      	movs	r2, #0
 800162a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_I2C_MspInit+0x15c>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <HAL_I2C_MspInit+0x15c>)
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001638:	4b24      	ldr	r3, [pc, #144]	; (80016cc <HAL_I2C_MspInit+0x15c>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800163e:	4b23      	ldr	r3, [pc, #140]	; (80016cc <HAL_I2C_MspInit+0x15c>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HAL_I2C_MspInit+0x15c>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <HAL_I2C_MspInit+0x15c>)
 800164c:	2200      	movs	r2, #0
 800164e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001650:	481e      	ldr	r0, [pc, #120]	; (80016cc <HAL_I2C_MspInit+0x15c>)
 8001652:	f000 fd00 	bl	8002056 <HAL_DMA_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 800165c:	f000 f93e 	bl	80018dc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <HAL_I2C_MspInit+0x15c>)
 8001664:	63da      	str	r2, [r3, #60]	; 0x3c
 8001666:	4a19      	ldr	r2, [pc, #100]	; (80016cc <HAL_I2C_MspInit+0x15c>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_I2C_MspInit+0x164>)
 800166e:	4a1a      	ldr	r2, [pc, #104]	; (80016d8 <HAL_I2C_MspInit+0x168>)
 8001670:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_I2C_MspInit+0x164>)
 8001674:	2210      	movs	r2, #16
 8001676:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <HAL_I2C_MspInit+0x164>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_I2C_MspInit+0x164>)
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_I2C_MspInit+0x164>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_I2C_MspInit+0x164>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001690:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <HAL_I2C_MspInit+0x164>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_I2C_MspInit+0x164>)
 8001698:	2200      	movs	r2, #0
 800169a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800169c:	480d      	ldr	r0, [pc, #52]	; (80016d4 <HAL_I2C_MspInit+0x164>)
 800169e:	f000 fcda 	bl	8002056 <HAL_DMA_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_I2C_MspInit+0x13c>
    {
      Error_Handler();
 80016a8:	f000 f918 	bl	80018dc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <HAL_I2C_MspInit+0x164>)
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38
 80016b2:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <HAL_I2C_MspInit+0x164>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	; 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40005400 	.word	0x40005400
 80016c4:	40021000 	.word	0x40021000
 80016c8:	48000400 	.word	0x48000400
 80016cc:	20000264 	.word	0x20000264
 80016d0:	40020080 	.word	0x40020080
 80016d4:	200002a8 	.word	0x200002a8
 80016d8:	4002006c 	.word	0x4002006c

080016dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016e0:	b0a4      	sub	sp, #144	; 0x90
 80016e2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e4:	f000 fb1c 	bl	8001d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e8:	f000 f882 	bl	80017f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ec:	f7ff fe9a 	bl	8001424 <MX_GPIO_Init>
  MX_DMA_Init();
 80016f0:	f7ff fe72 	bl	80013d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016f4:	f000 fa78 	bl	8001be8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016f8:	f7ff fefa 	bl	80014f0 <MX_I2C1_Init>
  MX_TIM17_Init();
 80016fc:	f000 fa2e 	bl	8001b5c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  bno055_set_i2c_handler(&hi2c1);
 8001700:	4834      	ldr	r0, [pc, #208]	; (80017d4 <main+0xf8>)
 8001702:	f7ff faff 	bl	8000d04 <bno055_set_i2c_handler>
  /* USER CODE END 2 */
  // Initialize BNO055 configuration
  ret = bno055_init(&default_bno055_config, &default_bno055_verification);
 8001706:	4934      	ldr	r1, [pc, #208]	; (80017d8 <main+0xfc>)
 8001708:	4834      	ldr	r0, [pc, #208]	; (80017dc <main+0x100>)
 800170a:	f7ff fc30 	bl	8000f6e <bno055_init>
 800170e:	4603      	mov	r3, r0
 8001710:	461a      	mov	r2, r3
 8001712:	4b33      	ldr	r3, [pc, #204]	; (80017e0 <main+0x104>)
 8001714:	701a      	strb	r2, [r3, #0]
  float f_gyro_x, f_gyro_y, f_gyro_z;
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8001716:	2064      	movs	r0, #100	; 0x64
 8001718:	f000 fb68 	bl	8001dec <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800171c:	2120      	movs	r1, #32
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f000 ff61 	bl	80025e8 <HAL_GPIO_TogglePin>
	  bno055_read_euler_h(&gyro_x);
 8001726:	1dbb      	adds	r3, r7, #6
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fdeb 	bl	8001304 <bno055_read_euler_h>
	  bno055_read_euler_r(&gyro_y);
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fe0a 	bl	800134a <bno055_read_euler_r>
	  bno055_read_euler_p(&gyro_z);
 8001736:	1cbb      	adds	r3, r7, #2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fe29 	bl	8001390 <bno055_read_euler_p>

	  f_gyro_x = gyro_x / 1600.0f;
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001748:	eddf 6a26 	vldr	s13, [pc, #152]	; 80017e4 <main+0x108>
 800174c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001750:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	  f_gyro_y = gyro_y / 1600.0f;
 8001754:	88bb      	ldrh	r3, [r7, #4]
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800175e:	eddf 6a21 	vldr	s13, [pc, #132]	; 80017e4 <main+0x108>
 8001762:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001766:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	  f_gyro_z = gyro_z / 1600.0f;
 800176a:	887b      	ldrh	r3, [r7, #2]
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001774:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80017e4 <main+0x108>
 8001778:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	  /*
	  snprintf(buffer, sizeof(buffer), "Gyro: X=%d Y=%d Z=%d\r\n", gyro_x, gyro_y, gyro_z);
	  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
	  */

	  snprintf(buffer, sizeof(buffer), "Gyro Degrees: X=%.2f Y=%.2f Z=%.2f\r\n", f_gyro_x, f_gyro_y, f_gyro_z);
 8001780:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001782:	f7fe fee9 	bl	8000558 <__aeabi_f2d>
 8001786:	4604      	mov	r4, r0
 8001788:	460d      	mov	r5, r1
 800178a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800178c:	f7fe fee4 	bl	8000558 <__aeabi_f2d>
 8001790:	4680      	mov	r8, r0
 8001792:	4689      	mov	r9, r1
 8001794:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001796:	f7fe fedf 	bl	8000558 <__aeabi_f2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	f107 0008 	add.w	r0, r7, #8
 80017a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017a6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017aa:	e9cd 4500 	strd	r4, r5, [sp]
 80017ae:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <main+0x10c>)
 80017b0:	2164      	movs	r1, #100	; 0x64
 80017b2:	f004 fef7 	bl	80065a4 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fd60 	bl	8000280 <strlen>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	f107 0108 	add.w	r1, r7, #8
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
 80017cc:	4807      	ldr	r0, [pc, #28]	; (80017ec <main+0x110>)
 80017ce:	f003 facf 	bl	8004d70 <HAL_UART_Transmit>
	  HAL_Delay(100);
 80017d2:	e7a0      	b.n	8001716 <main+0x3a>
 80017d4:	20000210 	.word	0x20000210
 80017d8:	20000204 	.word	0x20000204
 80017dc:	20000000 	.word	0x20000000
 80017e0:	200002ec 	.word	0x200002ec
 80017e4:	44c80000 	.word	0x44c80000
 80017e8:	0800a170 	.word	0x0800a170
 80017ec:	20000340 	.word	0x20000340

080017f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b0a6      	sub	sp, #152	; 0x98
 80017f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017fa:	2228      	movs	r2, #40	; 0x28
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 fffc 	bl	80067fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001804:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2258      	movs	r2, #88	; 0x58
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f004 ffee 	bl	80067fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001820:	2302      	movs	r3, #2
 8001822:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001824:	2301      	movs	r3, #1
 8001826:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001828:	2310      	movs	r3, #16
 800182a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182e:	2302      	movs	r3, #2
 8001830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001834:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001838:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800183c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001840:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800184a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800184e:	4618      	mov	r0, r3
 8001850:	f001 fca2 	bl	8003198 <HAL_RCC_OscConfig>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800185a:	f000 f83f 	bl	80018dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185e:	230f      	movs	r3, #15
 8001860:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001862:	2302      	movs	r3, #2
 8001864:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800186a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800186e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001874:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001878:	2102      	movs	r1, #2
 800187a:	4618      	mov	r0, r3
 800187c:	f002 fce0 	bl	8004240 <HAL_RCC_ClockConfig>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001886:	f000 f829 	bl	80018dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <SystemClock_Config+0xc4>)
 800188c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8001896:	2300      	movs	r3, #0
 8001898:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	4618      	mov	r0, r3
 800189e:	f002 ff05 	bl	80046ac <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80018a8:	f000 f818 	bl	80018dc <Error_Handler>
  }
}
 80018ac:	bf00      	nop
 80018ae:	3798      	adds	r7, #152	; 0x98
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	01000022 	.word	0x01000022

080018b8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80018c0:	1d39      	adds	r1, r7, #4
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
 80018c6:	2201      	movs	r2, #1
 80018c8:	4803      	ldr	r0, [pc, #12]	; (80018d8 <__io_putchar+0x20>)
 80018ca:	f003 fa51 	bl	8004d70 <HAL_UART_Transmit>
  return ch;
 80018ce:	687b      	ldr	r3, [r7, #4]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000340 	.word	0x20000340

080018dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e0:	b672      	cpsid	i
}
 80018e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <Error_Handler+0x8>
	...

080018e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <HAL_MspInit+0x44>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	4a0e      	ldr	r2, [pc, #56]	; (800192c <HAL_MspInit+0x44>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6193      	str	r3, [r2, #24]
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_MspInit+0x44>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_MspInit+0x44>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4a08      	ldr	r2, [pc, #32]	; (800192c <HAL_MspInit+0x44>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001910:	61d3      	str	r3, [r2, #28]
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_MspInit+0x44>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800191e:	2007      	movs	r0, #7
 8001920:	f000 fb58 	bl	8001fd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000

08001930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <NMI_Handler+0x4>

08001936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <HardFault_Handler+0x4>

0800193c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <MemManage_Handler+0x4>

08001942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <BusFault_Handler+0x4>

08001948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <UsageFault_Handler+0x4>

0800194e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197c:	f000 fa16 	bl	8001dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <DMA1_Channel6_IRQHandler+0x10>)
 800198a:	f000 fbab 	bl	80020e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200002a8 	.word	0x200002a8

08001998 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <DMA1_Channel7_IRQHandler+0x10>)
 800199e:	f000 fba1 	bl	80020e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000264 	.word	0x20000264

080019ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return 1;
 80019b0:	2301      	movs	r3, #1
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_kill>:

int _kill(int pid, int sig)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019c6:	f004 ff6b 	bl	80068a0 <__errno>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2216      	movs	r2, #22
 80019ce:	601a      	str	r2, [r3, #0]
  return -1;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <_exit>:

void _exit (int status)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ffe7 	bl	80019bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ee:	e7fe      	b.n	80019ee <_exit+0x12>

080019f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	e00a      	b.n	8001a18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a02:	f3af 8000 	nop.w
 8001a06:	4601      	mov	r1, r0
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	60ba      	str	r2, [r7, #8]
 8001a0e:	b2ca      	uxtb	r2, r1
 8001a10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dbf0      	blt.n	8001a02 <_read+0x12>
  }

  return len;
 8001a20:	687b      	ldr	r3, [r7, #4]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e009      	b.n	8001a50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	60ba      	str	r2, [r7, #8]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff37 	bl	80018b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	dbf1      	blt.n	8001a3c <_write+0x12>
  }
  return len;
 8001a58:	687b      	ldr	r3, [r7, #4]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_close>:

int _close(int file)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a8a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <_isatty>:

int _isatty(int file)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad4:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <_sbrk+0x5c>)
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <_sbrk+0x60>)
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <_sbrk+0x64>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <_sbrk+0x64>)
 8001aea:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <_sbrk+0x68>)
 8001aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d207      	bcs.n	8001b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001afc:	f004 fed0 	bl	80068a0 <__errno>
 8001b00:	4603      	mov	r3, r0
 8001b02:	220c      	movs	r2, #12
 8001b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	e009      	b.n	8001b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <_sbrk+0x64>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <_sbrk+0x64>)
 8001b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20010000 	.word	0x20010000
 8001b2c:	00000400 	.word	0x00000400
 8001b30:	200002f0 	.word	0x200002f0
 8001b34:	20000518 	.word	0x20000518

08001b38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <SystemInit+0x20>)
 8001b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b42:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <SystemInit+0x20>)
 8001b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_TIM17_Init+0x44>)
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <MX_TIM17_Init+0x48>)
 8001b64:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_TIM17_Init+0x44>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_TIM17_Init+0x44>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <MX_TIM17_Init+0x44>)
 8001b74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b78:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_TIM17_Init+0x44>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <MX_TIM17_Init+0x44>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_TIM17_Init+0x44>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001b8c:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <MX_TIM17_Init+0x44>)
 8001b8e:	f002 ffab 	bl	8004ae8 <HAL_TIM_Base_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001b98:	f7ff fea0 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200002f4 	.word	0x200002f4
 8001ba4:	40014800 	.word	0x40014800

08001ba8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_TIM_Base_MspInit+0x38>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_TIM_Base_MspInit+0x3c>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <HAL_TIM_Base_MspInit+0x3c>)
 8001bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc4:	6193      	str	r3, [r2, #24]
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <HAL_TIM_Base_MspInit+0x3c>)
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40014800 	.word	0x40014800
 8001be4:	40021000 	.word	0x40021000

08001be8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <MX_USART2_UART_Init+0x58>)
 8001bee:	4a15      	ldr	r2, [pc, #84]	; (8001c44 <MX_USART2_UART_Init+0x5c>)
 8001bf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <MX_USART2_UART_Init+0x58>)
 8001bf4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001bf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <MX_USART2_UART_Init+0x58>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <MX_USART2_UART_Init+0x58>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <MX_USART2_UART_Init+0x58>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <MX_USART2_UART_Init+0x58>)
 8001c0e:	220c      	movs	r2, #12
 8001c10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <MX_USART2_UART_Init+0x58>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <MX_USART2_UART_Init+0x58>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <MX_USART2_UART_Init+0x58>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <MX_USART2_UART_Init+0x58>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_USART2_UART_Init+0x58>)
 8001c2c:	f003 f852 	bl	8004cd4 <HAL_UART_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c36:	f7ff fe51 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000340 	.word	0x20000340
 8001c44:	40004400 	.word	0x40004400

08001c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <HAL_UART_MspInit+0x7c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d128      	bne.n	8001cbc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <HAL_UART_MspInit+0x80>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <HAL_UART_MspInit+0x80>)
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	61d3      	str	r3, [r2, #28]
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <HAL_UART_MspInit+0x80>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_UART_MspInit+0x80>)
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <HAL_UART_MspInit+0x80>)
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8c:	6153      	str	r3, [r2, #20]
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_UART_MspInit+0x80>)
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c9a:	230c      	movs	r3, #12
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001caa:	2307      	movs	r3, #7
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb8:	f000 faf4 	bl	80022a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	; 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40004400 	.word	0x40004400
 8001cc8:	40021000 	.word	0x40021000

08001ccc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d04 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd0:	f7ff ff32 	bl	8001b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd4:	480c      	ldr	r0, [pc, #48]	; (8001d08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cd6:	490d      	ldr	r1, [pc, #52]	; (8001d0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <LoopForever+0xe>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cec:	4c0a      	ldr	r4, [pc, #40]	; (8001d18 <LoopForever+0x16>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f004 fdd7 	bl	80068ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cfe:	f7ff fced 	bl	80016dc <main>

08001d02 <LoopForever>:

LoopForever:
    b LoopForever
 8001d02:	e7fe      	b.n	8001d02 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d04:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d0c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001d10:	0800a600 	.word	0x0800a600
  ldr r2, =_sbss
 8001d14:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001d18:	20000518 	.word	0x20000518

08001d1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC1_2_IRQHandler>
	...

08001d20 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <HAL_Init+0x28>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <HAL_Init+0x28>)
 8001d2a:	f043 0310 	orr.w	r3, r3, #16
 8001d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f000 f94f 	bl	8001fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f000 f808 	bl	8001d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d3c:	f7ff fdd4 	bl	80018e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40022000 	.word	0x40022000

08001d4c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_InitTick+0x54>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_InitTick+0x58>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 f967 	bl	800203e <HAL_SYSTICK_Config>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00e      	b.n	8001d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b0f      	cmp	r3, #15
 8001d7e:	d80a      	bhi.n	8001d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d80:	2200      	movs	r2, #0
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	f000 f92f 	bl	8001fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d8c:	4a06      	ldr	r2, [pc, #24]	; (8001da8 <HAL_InitTick+0x5c>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e000      	b.n	8001d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000010 	.word	0x20000010
 8001da4:	20000018 	.word	0x20000018
 8001da8:	20000014 	.word	0x20000014

08001dac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_IncTick+0x20>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_IncTick+0x24>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <HAL_IncTick+0x24>)
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000018 	.word	0x20000018
 8001dd0:	200003c8 	.word	0x200003c8

08001dd4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_GetTick+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	200003c8 	.word	0x200003c8

08001dec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df4:	f7ff ffee 	bl	8001dd4 <HAL_GetTick>
 8001df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d005      	beq.n	8001e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_Delay+0x44>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001e12:	bf00      	nop
 8001e14:	f7ff ffde 	bl	8001dd4 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d8f7      	bhi.n	8001e14 <HAL_Delay+0x28>
  {
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000018 	.word	0x20000018

08001e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e50:	4013      	ands	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e66:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	60d3      	str	r3, [r2, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <__NVIC_GetPriorityGrouping+0x18>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	f003 0307 	and.w	r3, r3, #7
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	db0b      	blt.n	8001ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	4907      	ldr	r1, [pc, #28]	; (8001ed0 <__NVIC_EnableIRQ+0x38>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	2001      	movs	r0, #1
 8001eba:	fa00 f202 	lsl.w	r2, r0, r2
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000e100 	.word	0xe000e100

08001ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db0a      	blt.n	8001efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	490c      	ldr	r1, [pc, #48]	; (8001f20 <__NVIC_SetPriority+0x4c>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001efc:	e00a      	b.n	8001f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4908      	ldr	r1, [pc, #32]	; (8001f24 <__NVIC_SetPriority+0x50>)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3b04      	subs	r3, #4
 8001f0c:	0112      	lsls	r2, r2, #4
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	761a      	strb	r2, [r3, #24]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f1c3 0307 	rsb	r3, r3, #7
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	bf28      	it	cs
 8001f46:	2304      	movcs	r3, #4
 8001f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d902      	bls.n	8001f58 <NVIC_EncodePriority+0x30>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3b03      	subs	r3, #3
 8001f56:	e000      	b.n	8001f5a <NVIC_EncodePriority+0x32>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43d9      	mvns	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	4313      	orrs	r3, r2
         );
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa0:	d301      	bcc.n	8001fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00f      	b.n	8001fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <SysTick_Config+0x40>)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fae:	210f      	movs	r1, #15
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f7ff ff8e 	bl	8001ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <SysTick_Config+0x40>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <SysTick_Config+0x40>)
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	e000e010 	.word	0xe000e010

08001fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ff29 	bl	8001e34 <__NVIC_SetPriorityGrouping>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ffc:	f7ff ff3e 	bl	8001e7c <__NVIC_GetPriorityGrouping>
 8002000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	6978      	ldr	r0, [r7, #20]
 8002008:	f7ff ff8e 	bl	8001f28 <NVIC_EncodePriority>
 800200c:	4602      	mov	r2, r0
 800200e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff5d 	bl	8001ed4 <__NVIC_SetPriority>
}
 800201a:	bf00      	nop
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff31 	bl	8001e98 <__NVIC_EnableIRQ>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ffa2 	bl	8001f90 <SysTick_Config>
 800204c:	4603      	mov	r3, r0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e037      	b.n	80020dc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002082:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002086:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002090:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f8b4 	bl	800222c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}  
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	2204      	movs	r2, #4
 8002102:	409a      	lsls	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d024      	beq.n	8002156 <HAL_DMA_IRQHandler+0x72>
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	d01f      	beq.n	8002156 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0204 	bic.w	r2, r2, #4
 8002132:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213c:	2104      	movs	r1, #4
 800213e:	fa01 f202 	lsl.w	r2, r1, r2
 8002142:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	2b00      	cmp	r3, #0
 800214a:	d06a      	beq.n	8002222 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002154:	e065      	b.n	8002222 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	2202      	movs	r2, #2
 800215c:	409a      	lsls	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d02c      	beq.n	80021c0 <HAL_DMA_IRQHandler+0xdc>
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d027      	beq.n	80021c0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10b      	bne.n	8002196 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 020a 	bic.w	r2, r2, #10
 800218c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219e:	2102      	movs	r1, #2
 80021a0:	fa01 f202 	lsl.w	r2, r1, r2
 80021a4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d035      	beq.n	8002222 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80021be:	e030      	b.n	8002222 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	2208      	movs	r2, #8
 80021c6:	409a      	lsls	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d028      	beq.n	8002222 <HAL_DMA_IRQHandler+0x13e>
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d023      	beq.n	8002222 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 020e 	bic.w	r2, r2, #14
 80021e8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	2101      	movs	r1, #1
 80021f4:	fa01 f202 	lsl.w	r2, r1, r2
 80021f8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	2b00      	cmp	r3, #0
 8002216:	d004      	beq.n	8002222 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4798      	blx	r3
    }
  }
}  
 8002220:	e7ff      	b.n	8002222 <HAL_DMA_IRQHandler+0x13e>
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <DMA_CalcBaseAndBitshift+0x60>)
 800223c:	429a      	cmp	r2, r3
 800223e:	d80f      	bhi.n	8002260 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <DMA_CalcBaseAndBitshift+0x64>)
 8002248:	4413      	add	r3, r2
 800224a:	4a12      	ldr	r2, [pc, #72]	; (8002294 <DMA_CalcBaseAndBitshift+0x68>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	009a      	lsls	r2, r3, #2
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <DMA_CalcBaseAndBitshift+0x6c>)
 800225c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800225e:	e00e      	b.n	800227e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <DMA_CalcBaseAndBitshift+0x70>)
 8002268:	4413      	add	r3, r2
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <DMA_CalcBaseAndBitshift+0x68>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	009a      	lsls	r2, r3, #2
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a09      	ldr	r2, [pc, #36]	; (80022a0 <DMA_CalcBaseAndBitshift+0x74>)
 800227c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40020407 	.word	0x40020407
 8002290:	bffdfff8 	.word	0xbffdfff8
 8002294:	cccccccd 	.word	0xcccccccd
 8002298:	40020000 	.word	0x40020000
 800229c:	bffdfbf8 	.word	0xbffdfbf8
 80022a0:	40020400 	.word	0x40020400

080022a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b2:	e160      	b.n	8002576 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2101      	movs	r1, #1
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	fa01 f303 	lsl.w	r3, r1, r3
 80022c0:	4013      	ands	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8152 	beq.w	8002570 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d005      	beq.n	80022e4 <HAL_GPIO_Init+0x40>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d130      	bne.n	8002346 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800231a:	2201      	movs	r2, #1
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	f003 0201 	and.w	r2, r3, #1
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b03      	cmp	r3, #3
 8002350:	d017      	beq.n	8002382 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d123      	bne.n	80023d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3208      	adds	r2, #8
 8002396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	220f      	movs	r2, #15
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	08da      	lsrs	r2, r3, #3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3208      	adds	r2, #8
 80023d0:	6939      	ldr	r1, [r7, #16]
 80023d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	2203      	movs	r2, #3
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 0203 	and.w	r2, r3, #3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 80ac 	beq.w	8002570 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002418:	4b5e      	ldr	r3, [pc, #376]	; (8002594 <HAL_GPIO_Init+0x2f0>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	4a5d      	ldr	r2, [pc, #372]	; (8002594 <HAL_GPIO_Init+0x2f0>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6193      	str	r3, [r2, #24]
 8002424:	4b5b      	ldr	r3, [pc, #364]	; (8002594 <HAL_GPIO_Init+0x2f0>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002430:	4a59      	ldr	r2, [pc, #356]	; (8002598 <HAL_GPIO_Init+0x2f4>)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3302      	adds	r3, #2
 8002438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	220f      	movs	r2, #15
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800245a:	d025      	beq.n	80024a8 <HAL_GPIO_Init+0x204>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a4f      	ldr	r2, [pc, #316]	; (800259c <HAL_GPIO_Init+0x2f8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d01f      	beq.n	80024a4 <HAL_GPIO_Init+0x200>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a4e      	ldr	r2, [pc, #312]	; (80025a0 <HAL_GPIO_Init+0x2fc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d019      	beq.n	80024a0 <HAL_GPIO_Init+0x1fc>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a4d      	ldr	r2, [pc, #308]	; (80025a4 <HAL_GPIO_Init+0x300>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d013      	beq.n	800249c <HAL_GPIO_Init+0x1f8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a4c      	ldr	r2, [pc, #304]	; (80025a8 <HAL_GPIO_Init+0x304>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00d      	beq.n	8002498 <HAL_GPIO_Init+0x1f4>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a4b      	ldr	r2, [pc, #300]	; (80025ac <HAL_GPIO_Init+0x308>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d007      	beq.n	8002494 <HAL_GPIO_Init+0x1f0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a4a      	ldr	r2, [pc, #296]	; (80025b0 <HAL_GPIO_Init+0x30c>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d101      	bne.n	8002490 <HAL_GPIO_Init+0x1ec>
 800248c:	2306      	movs	r3, #6
 800248e:	e00c      	b.n	80024aa <HAL_GPIO_Init+0x206>
 8002490:	2307      	movs	r3, #7
 8002492:	e00a      	b.n	80024aa <HAL_GPIO_Init+0x206>
 8002494:	2305      	movs	r3, #5
 8002496:	e008      	b.n	80024aa <HAL_GPIO_Init+0x206>
 8002498:	2304      	movs	r3, #4
 800249a:	e006      	b.n	80024aa <HAL_GPIO_Init+0x206>
 800249c:	2303      	movs	r3, #3
 800249e:	e004      	b.n	80024aa <HAL_GPIO_Init+0x206>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e002      	b.n	80024aa <HAL_GPIO_Init+0x206>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_GPIO_Init+0x206>
 80024a8:	2300      	movs	r3, #0
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	f002 0203 	and.w	r2, r2, #3
 80024b0:	0092      	lsls	r2, r2, #2
 80024b2:	4093      	lsls	r3, r2
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024ba:	4937      	ldr	r1, [pc, #220]	; (8002598 <HAL_GPIO_Init+0x2f4>)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	3302      	adds	r3, #2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c8:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <HAL_GPIO_Init+0x310>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024ec:	4a31      	ldr	r2, [pc, #196]	; (80025b4 <HAL_GPIO_Init+0x310>)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f2:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <HAL_GPIO_Init+0x310>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002516:	4a27      	ldr	r2, [pc, #156]	; (80025b4 <HAL_GPIO_Init+0x310>)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800251c:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <HAL_GPIO_Init+0x310>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	43db      	mvns	r3, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002540:	4a1c      	ldr	r2, [pc, #112]	; (80025b4 <HAL_GPIO_Init+0x310>)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002546:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <HAL_GPIO_Init+0x310>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800256a:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <HAL_GPIO_Init+0x310>)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	3301      	adds	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	f47f ae97 	bne.w	80022b4 <HAL_GPIO_Init+0x10>
  }
}
 8002586:	bf00      	nop
 8002588:	bf00      	nop
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	40021000 	.word	0x40021000
 8002598:	40010000 	.word	0x40010000
 800259c:	48000400 	.word	0x48000400
 80025a0:	48000800 	.word	0x48000800
 80025a4:	48000c00 	.word	0x48000c00
 80025a8:	48001000 	.word	0x48001000
 80025ac:	48001400 	.word	0x48001400
 80025b0:	48001800 	.word	0x48001800
 80025b4:	40010400 	.word	0x40010400

080025b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
 80025c4:	4613      	mov	r3, r2
 80025c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c8:	787b      	ldrb	r3, [r7, #1]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025d4:	e002      	b.n	80025dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4013      	ands	r3, r2
 8002600:	041a      	lsls	r2, r3, #16
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	43d9      	mvns	r1, r3
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	400b      	ands	r3, r1
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	619a      	str	r2, [r3, #24]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e081      	b.n	8002732 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe ff94 	bl	8001570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2224      	movs	r2, #36	; 0x24
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800266c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800267c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d107      	bne.n	8002696 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	e006      	b.n	80026a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d104      	bne.n	80026b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69d9      	ldr	r1, [r3, #28]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1a      	ldr	r2, [r3, #32]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af02      	add	r7, sp, #8
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	461a      	mov	r2, r3
 8002748:	460b      	mov	r3, r1
 800274a:	817b      	strh	r3, [r7, #10]
 800274c:	4613      	mov	r3, r2
 800274e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b20      	cmp	r3, #32
 800275a:	f040 80da 	bne.w	8002912 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_I2C_Master_Transmit+0x30>
 8002768:	2302      	movs	r3, #2
 800276a:	e0d3      	b.n	8002914 <HAL_I2C_Master_Transmit+0x1d8>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002774:	f7ff fb2e 	bl	8001dd4 <HAL_GetTick>
 8002778:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2319      	movs	r3, #25
 8002780:	2201      	movs	r2, #1
 8002782:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 fa00 	bl	8002b8c <I2C_WaitOnFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0be      	b.n	8002914 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2221      	movs	r2, #33	; 0x21
 800279a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2210      	movs	r2, #16
 80027a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	893a      	ldrh	r2, [r7, #8]
 80027b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2bff      	cmp	r3, #255	; 0xff
 80027c6:	d90e      	bls.n	80027e6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	22ff      	movs	r2, #255	; 0xff
 80027cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	8979      	ldrh	r1, [r7, #10]
 80027d6:	4b51      	ldr	r3, [pc, #324]	; (800291c <HAL_I2C_Master_Transmit+0x1e0>)
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 fc10 	bl	8003004 <I2C_TransferConfig>
 80027e4:	e06c      	b.n	80028c0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	8979      	ldrh	r1, [r7, #10]
 80027f8:	4b48      	ldr	r3, [pc, #288]	; (800291c <HAL_I2C_Master_Transmit+0x1e0>)
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 fbff 	bl	8003004 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002806:	e05b      	b.n	80028c0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	6a39      	ldr	r1, [r7, #32]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fa0c 	bl	8002c2a <I2C_WaitOnTXISFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e07b      	b.n	8002914 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	781a      	ldrb	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d034      	beq.n	80028c0 <HAL_I2C_Master_Transmit+0x184>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	2b00      	cmp	r3, #0
 800285c:	d130      	bne.n	80028c0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	2200      	movs	r2, #0
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f98f 	bl	8002b8c <I2C_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e04d      	b.n	8002914 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	2bff      	cmp	r3, #255	; 0xff
 8002880:	d90e      	bls.n	80028a0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	22ff      	movs	r2, #255	; 0xff
 8002886:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	b2da      	uxtb	r2, r3
 800288e:	8979      	ldrh	r1, [r7, #10]
 8002890:	2300      	movs	r3, #0
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fbb3 	bl	8003004 <I2C_TransferConfig>
 800289e:	e00f      	b.n	80028c0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	8979      	ldrh	r1, [r7, #10]
 80028b2:	2300      	movs	r3, #0
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 fba2 	bl	8003004 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d19e      	bne.n	8002808 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	6a39      	ldr	r1, [r7, #32]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f9f2 	bl	8002cb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e01a      	b.n	8002914 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2220      	movs	r2, #32
 80028e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_I2C_Master_Transmit+0x1e4>)
 80028f2:	400b      	ands	r3, r1
 80028f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e000      	b.n	8002914 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002912:	2302      	movs	r3, #2
  }
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	80002000 	.word	0x80002000
 8002920:	fe00e800 	.word	0xfe00e800

08002924 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	607a      	str	r2, [r7, #4]
 800292e:	461a      	mov	r2, r3
 8002930:	460b      	mov	r3, r1
 8002932:	817b      	strh	r3, [r7, #10]
 8002934:	4613      	mov	r3, r2
 8002936:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b20      	cmp	r3, #32
 8002942:	f040 80db 	bne.w	8002afc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_I2C_Master_Receive+0x30>
 8002950:	2302      	movs	r3, #2
 8002952:	e0d4      	b.n	8002afe <HAL_I2C_Master_Receive+0x1da>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800295c:	f7ff fa3a 	bl	8001dd4 <HAL_GetTick>
 8002960:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	2319      	movs	r3, #25
 8002968:	2201      	movs	r2, #1
 800296a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 f90c 	bl	8002b8c <I2C_WaitOnFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0bf      	b.n	8002afe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2222      	movs	r2, #34	; 0x22
 8002982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2210      	movs	r2, #16
 800298a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	893a      	ldrh	r2, [r7, #8]
 800299e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2bff      	cmp	r3, #255	; 0xff
 80029ae:	d90e      	bls.n	80029ce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	22ff      	movs	r2, #255	; 0xff
 80029b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	8979      	ldrh	r1, [r7, #10]
 80029be:	4b52      	ldr	r3, [pc, #328]	; (8002b08 <HAL_I2C_Master_Receive+0x1e4>)
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fb1c 	bl	8003004 <I2C_TransferConfig>
 80029cc:	e06d      	b.n	8002aaa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	8979      	ldrh	r1, [r7, #10]
 80029e0:	4b49      	ldr	r3, [pc, #292]	; (8002b08 <HAL_I2C_Master_Receive+0x1e4>)
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 fb0b 	bl	8003004 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80029ee:	e05c      	b.n	8002aaa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	6a39      	ldr	r1, [r7, #32]
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f9a3 	bl	8002d40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e07c      	b.n	8002afe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d034      	beq.n	8002aaa <HAL_I2C_Master_Receive+0x186>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d130      	bne.n	8002aaa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2180      	movs	r1, #128	; 0x80
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f89a 	bl	8002b8c <I2C_WaitOnFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e04d      	b.n	8002afe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2bff      	cmp	r3, #255	; 0xff
 8002a6a:	d90e      	bls.n	8002a8a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	22ff      	movs	r2, #255	; 0xff
 8002a70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	8979      	ldrh	r1, [r7, #10]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 fabe 	bl	8003004 <I2C_TransferConfig>
 8002a88:	e00f      	b.n	8002aaa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	8979      	ldrh	r1, [r7, #10]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 faad 	bl	8003004 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d19d      	bne.n	80029f0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	6a39      	ldr	r1, [r7, #32]
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f8fd 	bl	8002cb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e01a      	b.n	8002afe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2220      	movs	r2, #32
 8002ace:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6859      	ldr	r1, [r3, #4]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <HAL_I2C_Master_Receive+0x1e8>)
 8002adc:	400b      	ands	r3, r1
 8002ade:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e000      	b.n	8002afe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	80002400 	.word	0x80002400
 8002b0c:	fe00e800 	.word	0xfe00e800

08002b10 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1e:	b2db      	uxtb	r3, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d103      	bne.n	8002b62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d007      	beq.n	8002b80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	619a      	str	r2, [r3, #24]
  }
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b9c:	e031      	b.n	8002c02 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba4:	d02d      	beq.n	8002c02 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba6:	f7ff f915 	bl	8001dd4 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d302      	bcc.n	8002bbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d122      	bne.n	8002c02 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d113      	bne.n	8002c02 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f043 0220 	orr.w	r2, r3, #32
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e00f      	b.n	8002c22 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	699a      	ldr	r2, [r3, #24]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d0be      	beq.n	8002b9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c36:	e033      	b.n	8002ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f901 	bl	8002e44 <I2C_IsErrorOccurred>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e031      	b.n	8002cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c52:	d025      	beq.n	8002ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c54:	f7ff f8be 	bl	8001dd4 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d302      	bcc.n	8002c6a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d11a      	bne.n	8002ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d013      	beq.n	8002ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	f043 0220 	orr.w	r2, r3, #32
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e007      	b.n	8002cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d1c4      	bne.n	8002c38 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cc4:	e02f      	b.n	8002d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f8ba 	bl	8002e44 <I2C_IsErrorOccurred>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e02d      	b.n	8002d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cda:	f7ff f87b 	bl	8001dd4 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d302      	bcc.n	8002cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d11a      	bne.n	8002d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	d013      	beq.n	8002d26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e007      	b.n	8002d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d1c8      	bne.n	8002cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d4c:	e06b      	b.n	8002e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f876 	bl	8002e44 <I2C_IsErrorOccurred>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e069      	b.n	8002e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	d138      	bne.n	8002de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d105      	bne.n	8002d8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e055      	b.n	8002e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b10      	cmp	r3, #16
 8002d96:	d107      	bne.n	8002da8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2204      	movs	r2, #4
 8002da4:	645a      	str	r2, [r3, #68]	; 0x44
 8002da6:	e002      	b.n	8002dae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2220      	movs	r2, #32
 8002db4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002dc2:	400b      	ands	r3, r1
 8002dc4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e029      	b.n	8002e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de2:	f7fe fff7 	bl	8001dd4 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d116      	bne.n	8002e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d00f      	beq.n	8002e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f043 0220 	orr.w	r2, r3, #32
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e007      	b.n	8002e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d18c      	bne.n	8002d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	fe00e800 	.word	0xfe00e800

08002e44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	; 0x28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d068      	beq.n	8002f42 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2210      	movs	r2, #16
 8002e76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e78:	e049      	b.n	8002f0e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d045      	beq.n	8002f0e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e82:	f7fe ffa7 	bl	8001dd4 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d302      	bcc.n	8002e98 <I2C_IsErrorOccurred+0x54>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d13a      	bne.n	8002f0e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eaa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eba:	d121      	bne.n	8002f00 <I2C_IsErrorOccurred+0xbc>
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ec2:	d01d      	beq.n	8002f00 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ec4:	7cfb      	ldrb	r3, [r7, #19]
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	d01a      	beq.n	8002f00 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ed8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002eda:	f7fe ff7b 	bl	8001dd4 <HAL_GetTick>
 8002ede:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ee0:	e00e      	b.n	8002f00 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ee2:	f7fe ff77 	bl	8001dd4 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b19      	cmp	r3, #25
 8002eee:	d907      	bls.n	8002f00 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	f043 0320 	orr.w	r3, r3, #32
 8002ef6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002efe:	e006      	b.n	8002f0e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	d1e9      	bne.n	8002ee2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d003      	beq.n	8002f24 <I2C_IsErrorOccurred+0xe0>
 8002f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0aa      	beq.n	8002e7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d103      	bne.n	8002f34 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2220      	movs	r2, #32
 8002f32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	f043 0304 	orr.w	r3, r3, #4
 8002f3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00b      	beq.n	8002f6c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00b      	beq.n	8002f8e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	f043 0308 	orr.w	r3, r3, #8
 8002f7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00b      	beq.n	8002fb0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	f043 0302 	orr.w	r3, r3, #2
 8002f9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01c      	beq.n	8002ff2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f7ff fdc3 	bl	8002b44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <I2C_IsErrorOccurred+0x1bc>)
 8002fca:	400b      	ands	r3, r1
 8002fcc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3728      	adds	r7, #40	; 0x28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	fe00e800 	.word	0xfe00e800

08003004 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	460b      	mov	r3, r1
 8003010:	817b      	strh	r3, [r7, #10]
 8003012:	4613      	mov	r3, r2
 8003014:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003016:	897b      	ldrh	r3, [r7, #10]
 8003018:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800301c:	7a7b      	ldrb	r3, [r7, #9]
 800301e:	041b      	lsls	r3, r3, #16
 8003020:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003024:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	4313      	orrs	r3, r2
 800302e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003032:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	0d5b      	lsrs	r3, r3, #21
 800303e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <I2C_TransferConfig+0x60>)
 8003044:	430b      	orrs	r3, r1
 8003046:	43db      	mvns	r3, r3
 8003048:	ea02 0103 	and.w	r1, r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	430a      	orrs	r2, r1
 8003054:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003056:	bf00      	nop
 8003058:	371c      	adds	r7, #28
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	03ff63ff 	.word	0x03ff63ff

08003068 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b20      	cmp	r3, #32
 800307c:	d138      	bne.n	80030f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003088:	2302      	movs	r3, #2
 800308a:	e032      	b.n	80030f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2224      	movs	r2, #36	; 0x24
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6819      	ldr	r1, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e000      	b.n	80030f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030f0:	2302      	movs	r3, #2
  }
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030fe:	b480      	push	{r7}
 8003100:	b085      	sub	sp, #20
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b20      	cmp	r3, #32
 8003112:	d139      	bne.n	8003188 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800311e:	2302      	movs	r3, #2
 8003120:	e033      	b.n	800318a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2224      	movs	r2, #36	; 0x24
 800312e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0201 	bic.w	r2, r2, #1
 8003140:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003150:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	e000      	b.n	800318a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003188:	2302      	movs	r3, #2
  }
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800319e:	af00      	add	r7, sp, #0
 80031a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031a8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	f001 b83a 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 816f 	beq.w	80034b2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031d4:	4bb5      	ldr	r3, [pc, #724]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d00c      	beq.n	80031fa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031e0:	4bb2      	ldr	r3, [pc, #712]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d15c      	bne.n	80032a6 <HAL_RCC_OscConfig+0x10e>
 80031ec:	4baf      	ldr	r3, [pc, #700]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f8:	d155      	bne.n	80032a6 <HAL_RCC_OscConfig+0x10e>
 80031fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031fe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800320e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003212:	fab3 f383 	clz	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	095b      	lsrs	r3, r3, #5
 800321a:	b2db      	uxtb	r3, r3
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	d102      	bne.n	800322c <HAL_RCC_OscConfig+0x94>
 8003226:	4ba1      	ldr	r3, [pc, #644]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	e015      	b.n	8003258 <HAL_RCC_OscConfig+0xc0>
 800322c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003230:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003238:	fa93 f3a3 	rbit	r3, r3
 800323c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003244:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003248:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800324c:	fa93 f3a3 	rbit	r3, r3
 8003250:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003254:	4b95      	ldr	r3, [pc, #596]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800325c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003260:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003264:	fa92 f2a2 	rbit	r2, r2
 8003268:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800326c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003270:	fab2 f282 	clz	r2, r2
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	f042 0220 	orr.w	r2, r2, #32
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	f002 021f 	and.w	r2, r2, #31
 8003280:	2101      	movs	r1, #1
 8003282:	fa01 f202 	lsl.w	r2, r1, r2
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8111 	beq.w	80034b0 <HAL_RCC_OscConfig+0x318>
 800328e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003292:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	f040 8108 	bne.w	80034b0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	f000 bfc6 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b6:	d106      	bne.n	80032c6 <HAL_RCC_OscConfig+0x12e>
 80032b8:	4b7c      	ldr	r3, [pc, #496]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a7b      	ldr	r2, [pc, #492]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80032be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	e036      	b.n	8003334 <HAL_RCC_OscConfig+0x19c>
 80032c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x158>
 80032d6:	4b75      	ldr	r3, [pc, #468]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a74      	ldr	r2, [pc, #464]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80032dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b72      	ldr	r3, [pc, #456]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a71      	ldr	r2, [pc, #452]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80032e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e021      	b.n	8003334 <HAL_RCC_OscConfig+0x19c>
 80032f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x184>
 8003302:	4b6a      	ldr	r3, [pc, #424]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a69      	ldr	r2, [pc, #420]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b67      	ldr	r3, [pc, #412]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a66      	ldr	r2, [pc, #408]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e00b      	b.n	8003334 <HAL_RCC_OscConfig+0x19c>
 800331c:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a62      	ldr	r2, [pc, #392]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4b60      	ldr	r3, [pc, #384]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a5f      	ldr	r2, [pc, #380]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 800332e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003332:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003334:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003338:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d059      	beq.n	80033f8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe fd46 	bl	8001dd4 <HAL_GetTick>
 8003348:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334c:	e00a      	b.n	8003364 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800334e:	f7fe fd41 	bl	8001dd4 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d902      	bls.n	8003364 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	f000 bf67 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>
 8003364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003368:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003378:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337c:	fab3 f383 	clz	r3, r3
 8003380:	b2db      	uxtb	r3, r3
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	b2db      	uxtb	r3, r3
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b01      	cmp	r3, #1
 800338e:	d102      	bne.n	8003396 <HAL_RCC_OscConfig+0x1fe>
 8003390:	4b46      	ldr	r3, [pc, #280]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	e015      	b.n	80033c2 <HAL_RCC_OscConfig+0x22a>
 8003396:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800339a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80033aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80033b2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80033be:	4b3b      	ldr	r3, [pc, #236]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033c6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80033ca:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80033ce:	fa92 f2a2 	rbit	r2, r2
 80033d2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80033d6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80033da:	fab2 f282 	clz	r2, r2
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	f042 0220 	orr.w	r2, r2, #32
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	f002 021f 	and.w	r2, r2, #31
 80033ea:	2101      	movs	r1, #1
 80033ec:	fa01 f202 	lsl.w	r2, r1, r2
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0ab      	beq.n	800334e <HAL_RCC_OscConfig+0x1b6>
 80033f6:	e05c      	b.n	80034b2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fe fcec 	bl	8001dd4 <HAL_GetTick>
 80033fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003402:	f7fe fce7 	bl	8001dd4 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	; 0x64
 8003410:	d902      	bls.n	8003418 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	f000 bf0d 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>
 8003418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800341c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003424:	fa93 f3a3 	rbit	r3, r3
 8003428:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800342c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003430:	fab3 f383 	clz	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b01      	cmp	r3, #1
 8003442:	d102      	bne.n	800344a <HAL_RCC_OscConfig+0x2b2>
 8003444:	4b19      	ldr	r3, [pc, #100]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	e015      	b.n	8003476 <HAL_RCC_OscConfig+0x2de>
 800344a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800344e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003452:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800345e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003462:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003466:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <HAL_RCC_OscConfig+0x314>)
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800347a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800347e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003482:	fa92 f2a2 	rbit	r2, r2
 8003486:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800348a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800348e:	fab2 f282 	clz	r2, r2
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	f042 0220 	orr.w	r2, r2, #32
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	f002 021f 	and.w	r2, r2, #31
 800349e:	2101      	movs	r1, #1
 80034a0:	fa01 f202 	lsl.w	r2, r1, r2
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1ab      	bne.n	8003402 <HAL_RCC_OscConfig+0x26a>
 80034aa:	e002      	b.n	80034b2 <HAL_RCC_OscConfig+0x31a>
 80034ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 817f 	beq.w	80037c6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80034c8:	4ba7      	ldr	r3, [pc, #668]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 030c 	and.w	r3, r3, #12
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00c      	beq.n	80034ee <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034d4:	4ba4      	ldr	r3, [pc, #656]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d173      	bne.n	80035c8 <HAL_RCC_OscConfig+0x430>
 80034e0:	4ba1      	ldr	r3, [pc, #644]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80034e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ec:	d16c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x430>
 80034ee:	2302      	movs	r3, #2
 80034f0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80034f8:	fa93 f3a3 	rbit	r3, r3
 80034fc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003500:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003504:	fab3 f383 	clz	r3, r3
 8003508:	b2db      	uxtb	r3, r3
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	d102      	bne.n	800351e <HAL_RCC_OscConfig+0x386>
 8003518:	4b93      	ldr	r3, [pc, #588]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	e013      	b.n	8003546 <HAL_RCC_OscConfig+0x3ae>
 800351e:	2302      	movs	r3, #2
 8003520:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003528:	fa93 f3a3 	rbit	r3, r3
 800352c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003530:	2302      	movs	r3, #2
 8003532:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003536:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003542:	4b89      	ldr	r3, [pc, #548]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	2202      	movs	r2, #2
 8003548:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800354c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003550:	fa92 f2a2 	rbit	r2, r2
 8003554:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003558:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800355c:	fab2 f282 	clz	r2, r2
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	f042 0220 	orr.w	r2, r2, #32
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	f002 021f 	and.w	r2, r2, #31
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f202 	lsl.w	r2, r1, r2
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_RCC_OscConfig+0x3f6>
 8003578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800357c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d002      	beq.n	800358e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	f000 be52 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358e:	4b76      	ldr	r3, [pc, #472]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800359a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	21f8      	movs	r1, #248	; 0xf8
 80035a4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80035ac:	fa91 f1a1 	rbit	r1, r1
 80035b0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80035b4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80035b8:	fab1 f181 	clz	r1, r1
 80035bc:	b2c9      	uxtb	r1, r1
 80035be:	408b      	lsls	r3, r1
 80035c0:	4969      	ldr	r1, [pc, #420]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c6:	e0fe      	b.n	80037c6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8088 	beq.w	80036ea <HAL_RCC_OscConfig+0x552>
 80035da:	2301      	movs	r3, #1
 80035dc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80035ec:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f0:	fab3 f383 	clz	r3, r3
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	461a      	mov	r2, r3
 8003602:	2301      	movs	r3, #1
 8003604:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7fe fbe5 	bl	8001dd4 <HAL_GetTick>
 800360a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	e00a      	b.n	8003626 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003610:	f7fe fbe0 	bl	8001dd4 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d902      	bls.n	8003626 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	f000 be06 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>
 8003626:	2302      	movs	r3, #2
 8003628:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003638:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363c:	fab3 f383 	clz	r3, r3
 8003640:	b2db      	uxtb	r3, r3
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	d102      	bne.n	8003656 <HAL_RCC_OscConfig+0x4be>
 8003650:	4b45      	ldr	r3, [pc, #276]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	e013      	b.n	800367e <HAL_RCC_OscConfig+0x4e6>
 8003656:	2302      	movs	r3, #2
 8003658:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003660:	fa93 f3a3 	rbit	r3, r3
 8003664:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003668:	2302      	movs	r3, #2
 800366a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800366e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800367a:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	2202      	movs	r2, #2
 8003680:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003684:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003688:	fa92 f2a2 	rbit	r2, r2
 800368c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003690:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003694:	fab2 f282 	clz	r2, r2
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	f042 0220 	orr.w	r2, r2, #32
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	f002 021f 	and.w	r2, r2, #31
 80036a4:	2101      	movs	r1, #1
 80036a6:	fa01 f202 	lsl.w	r2, r1, r2
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0af      	beq.n	8003610 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b0:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	21f8      	movs	r1, #248	; 0xf8
 80036c6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80036ce:	fa91 f1a1 	rbit	r1, r1
 80036d2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80036d6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80036da:	fab1 f181 	clz	r1, r1
 80036de:	b2c9      	uxtb	r1, r1
 80036e0:	408b      	lsls	r3, r1
 80036e2:	4921      	ldr	r1, [pc, #132]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	600b      	str	r3, [r1, #0]
 80036e8:	e06d      	b.n	80037c6 <HAL_RCC_OscConfig+0x62e>
 80036ea:	2301      	movs	r3, #1
 80036ec:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80036fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003700:	fab3 f383 	clz	r3, r3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800370a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	461a      	mov	r2, r3
 8003712:	2300      	movs	r3, #0
 8003714:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7fe fb5d 	bl	8001dd4 <HAL_GetTick>
 800371a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371e:	e00a      	b.n	8003736 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003720:	f7fe fb58 	bl	8001dd4 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d902      	bls.n	8003736 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	f000 bd7e 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>
 8003736:	2302      	movs	r3, #2
 8003738:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003748:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374c:	fab3 f383 	clz	r3, r3
 8003750:	b2db      	uxtb	r3, r3
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b01      	cmp	r3, #1
 800375e:	d105      	bne.n	800376c <HAL_RCC_OscConfig+0x5d4>
 8003760:	4b01      	ldr	r3, [pc, #4]	; (8003768 <HAL_RCC_OscConfig+0x5d0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	e016      	b.n	8003794 <HAL_RCC_OscConfig+0x5fc>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	2302      	movs	r3, #2
 800376e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003776:	fa93 f3a3 	rbit	r3, r3
 800377a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800377e:	2302      	movs	r3, #2
 8003780:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003784:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003788:	fa93 f3a3 	rbit	r3, r3
 800378c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003790:	4bbf      	ldr	r3, [pc, #764]	; (8003a90 <HAL_RCC_OscConfig+0x8f8>)
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2202      	movs	r2, #2
 8003796:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800379a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800379e:	fa92 f2a2 	rbit	r2, r2
 80037a2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80037a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80037aa:	fab2 f282 	clz	r2, r2
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	f042 0220 	orr.w	r2, r2, #32
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	f002 021f 	and.w	r2, r2, #31
 80037ba:	2101      	movs	r1, #1
 80037bc:	fa01 f202 	lsl.w	r2, r1, r2
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1ac      	bne.n	8003720 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 8113 	beq.w	8003a02 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d07c      	beq.n	80038e6 <HAL_RCC_OscConfig+0x74e>
 80037ec:	2301      	movs	r3, #1
 80037ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80037fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	4ba2      	ldr	r3, [pc, #648]	; (8003a94 <HAL_RCC_OscConfig+0x8fc>)
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	461a      	mov	r2, r3
 8003812:	2301      	movs	r3, #1
 8003814:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003816:	f7fe fadd 	bl	8001dd4 <HAL_GetTick>
 800381a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003820:	f7fe fad8 	bl	8001dd4 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d902      	bls.n	8003836 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	f000 bcfe 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>
 8003836:	2302      	movs	r3, #2
 8003838:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003840:	fa93 f2a3 	rbit	r2, r3
 8003844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003848:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003856:	2202      	movs	r2, #2
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800385e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	fa93 f2a3 	rbit	r2, r3
 8003868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800386c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003876:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800387a:	2202      	movs	r2, #2
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003882:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	fa93 f2a3 	rbit	r2, r3
 800388c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003890:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003894:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003896:	4b7e      	ldr	r3, [pc, #504]	; (8003a90 <HAL_RCC_OscConfig+0x8f8>)
 8003898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800389a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800389e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038a2:	2102      	movs	r1, #2
 80038a4:	6019      	str	r1, [r3, #0]
 80038a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	fa93 f1a3 	rbit	r1, r3
 80038b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80038bc:	6019      	str	r1, [r3, #0]
  return result;
 80038be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	fab3 f383 	clz	r3, r3
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	2101      	movs	r1, #1
 80038da:	fa01 f303 	lsl.w	r3, r1, r3
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d09d      	beq.n	8003820 <HAL_RCC_OscConfig+0x688>
 80038e4:	e08d      	b.n	8003a02 <HAL_RCC_OscConfig+0x86a>
 80038e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80038ee:	2201      	movs	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	fa93 f2a3 	rbit	r2, r3
 8003900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003904:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003908:	601a      	str	r2, [r3, #0]
  return result;
 800390a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800390e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003912:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003914:	fab3 f383 	clz	r3, r3
 8003918:	b2db      	uxtb	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	4b5d      	ldr	r3, [pc, #372]	; (8003a94 <HAL_RCC_OscConfig+0x8fc>)
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	461a      	mov	r2, r3
 8003924:	2300      	movs	r3, #0
 8003926:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003928:	f7fe fa54 	bl	8001dd4 <HAL_GetTick>
 800392c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003932:	f7fe fa4f 	bl	8001dd4 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d902      	bls.n	8003948 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	f000 bc75 	b.w	8004232 <HAL_RCC_OscConfig+0x109a>
 8003948:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800394c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003950:	2202      	movs	r2, #2
 8003952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003958:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	fa93 f2a3 	rbit	r2, r3
 8003962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003966:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003974:	2202      	movs	r2, #2
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800397c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	fa93 f2a3 	rbit	r2, r3
 8003986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800398a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003994:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003998:	2202      	movs	r2, #2
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	fa93 f2a3 	rbit	r2, r3
 80039aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80039b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b4:	4b36      	ldr	r3, [pc, #216]	; (8003a90 <HAL_RCC_OscConfig+0x8f8>)
 80039b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80039c0:	2102      	movs	r1, #2
 80039c2:	6019      	str	r1, [r3, #0]
 80039c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	fa93 f1a3 	rbit	r1, r3
 80039d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80039da:	6019      	str	r1, [r3, #0]
  return result;
 80039dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	fab3 f383 	clz	r3, r3
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	f003 031f 	and.w	r3, r3, #31
 80039f6:	2101      	movs	r1, #1
 80039f8:	fa01 f303 	lsl.w	r3, r1, r3
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d197      	bne.n	8003932 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 81a5 	beq.w	8003d62 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a1e:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <HAL_RCC_OscConfig+0x8f8>)
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d116      	bne.n	8003a58 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a2a:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_RCC_OscConfig+0x8f8>)
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <HAL_RCC_OscConfig+0x8f8>)
 8003a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a34:	61d3      	str	r3, [r2, #28]
 8003a36:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <HAL_RCC_OscConfig+0x8f8>)
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a50:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a58:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <HAL_RCC_OscConfig+0x900>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d121      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <HAL_RCC_OscConfig+0x900>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a0b      	ldr	r2, [pc, #44]	; (8003a98 <HAL_RCC_OscConfig+0x900>)
 8003a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a70:	f7fe f9b0 	bl	8001dd4 <HAL_GetTick>
 8003a74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a78:	e010      	b.n	8003a9c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7a:	f7fe f9ab 	bl	8001dd4 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d908      	bls.n	8003a9c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e3d1      	b.n	8004232 <HAL_RCC_OscConfig+0x109a>
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000
 8003a94:	10908120 	.word	0x10908120
 8003a98:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9c:	4b8d      	ldr	r3, [pc, #564]	; (8003cd4 <HAL_RCC_OscConfig+0xb3c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0e8      	beq.n	8003a7a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x92e>
 8003ab8:	4b87      	ldr	r3, [pc, #540]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4a86      	ldr	r2, [pc, #536]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6213      	str	r3, [r2, #32]
 8003ac4:	e035      	b.n	8003b32 <HAL_RCC_OscConfig+0x99a>
 8003ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x958>
 8003ad6:	4b80      	ldr	r3, [pc, #512]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	4a7f      	ldr	r2, [pc, #508]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	6213      	str	r3, [r2, #32]
 8003ae2:	4b7d      	ldr	r3, [pc, #500]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	4a7c      	ldr	r2, [pc, #496]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003ae8:	f023 0304 	bic.w	r3, r3, #4
 8003aec:	6213      	str	r3, [r2, #32]
 8003aee:	e020      	b.n	8003b32 <HAL_RCC_OscConfig+0x99a>
 8003af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003af4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b05      	cmp	r3, #5
 8003afe:	d10c      	bne.n	8003b1a <HAL_RCC_OscConfig+0x982>
 8003b00:	4b75      	ldr	r3, [pc, #468]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	4a74      	ldr	r2, [pc, #464]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003b06:	f043 0304 	orr.w	r3, r3, #4
 8003b0a:	6213      	str	r3, [r2, #32]
 8003b0c:	4b72      	ldr	r3, [pc, #456]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	4a71      	ldr	r2, [pc, #452]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6213      	str	r3, [r2, #32]
 8003b18:	e00b      	b.n	8003b32 <HAL_RCC_OscConfig+0x99a>
 8003b1a:	4b6f      	ldr	r3, [pc, #444]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	4a6e      	ldr	r2, [pc, #440]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	6213      	str	r3, [r2, #32]
 8003b26:	4b6c      	ldr	r3, [pc, #432]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	4a6b      	ldr	r2, [pc, #428]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 8081 	beq.w	8003c46 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b44:	f7fe f946 	bl	8001dd4 <HAL_GetTick>
 8003b48:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4c:	e00b      	b.n	8003b66 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b4e:	f7fe f941 	bl	8001dd4 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e365      	b.n	8004232 <HAL_RCC_OscConfig+0x109a>
 8003b66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b6a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003b6e:	2202      	movs	r2, #2
 8003b70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	fa93 f2a3 	rbit	r2, r3
 8003b80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b8e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b92:	2202      	movs	r2, #2
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b9a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	fa93 f2a3 	rbit	r2, r3
 8003ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ba8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003bac:	601a      	str	r2, [r3, #0]
  return result;
 8003bae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bb2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003bb6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb8:	fab3 f383 	clz	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	f043 0302 	orr.w	r3, r3, #2
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d102      	bne.n	8003bd2 <HAL_RCC_OscConfig+0xa3a>
 8003bcc:	4b42      	ldr	r3, [pc, #264]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	e013      	b.n	8003bfa <HAL_RCC_OscConfig+0xa62>
 8003bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003bda:	2202      	movs	r2, #2
 8003bdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	fa93 f2a3 	rbit	r2, r3
 8003bec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bf0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	4b38      	ldr	r3, [pc, #224]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003bfe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c02:	2102      	movs	r1, #2
 8003c04:	6011      	str	r1, [r2, #0]
 8003c06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c0a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	fa92 f1a2 	rbit	r1, r2
 8003c14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c18:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003c1c:	6011      	str	r1, [r2, #0]
  return result;
 8003c1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c22:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	fab2 f282 	clz	r2, r2
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	f002 021f 	and.w	r2, r2, #31
 8003c38:	2101      	movs	r1, #1
 8003c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d084      	beq.n	8003b4e <HAL_RCC_OscConfig+0x9b6>
 8003c44:	e083      	b.n	8003d4e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c46:	f7fe f8c5 	bl	8001dd4 <HAL_GetTick>
 8003c4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4e:	e00b      	b.n	8003c68 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fe f8c0 	bl	8001dd4 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e2e4      	b.n	8004232 <HAL_RCC_OscConfig+0x109a>
 8003c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c6c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003c70:	2202      	movs	r2, #2
 8003c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c78:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	fa93 f2a3 	rbit	r2, r3
 8003c82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c86:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c90:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c94:	2202      	movs	r2, #2
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c9c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	fa93 f2a3 	rbit	r2, r3
 8003ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003caa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003cae:	601a      	str	r2, [r3, #0]
  return result;
 8003cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cb4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003cb8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cba:	fab3 f383 	clz	r3, r3
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	095b      	lsrs	r3, r3, #5
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f043 0302 	orr.w	r3, r3, #2
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d106      	bne.n	8003cdc <HAL_RCC_OscConfig+0xb44>
 8003cce:	4b02      	ldr	r3, [pc, #8]	; (8003cd8 <HAL_RCC_OscConfig+0xb40>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	e017      	b.n	8003d04 <HAL_RCC_OscConfig+0xb6c>
 8003cd4:	40007000 	.word	0x40007000
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	fa93 f2a3 	rbit	r2, r3
 8003cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cfa:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	4bb3      	ldr	r3, [pc, #716]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d08:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	6011      	str	r1, [r2, #0]
 8003d10:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d14:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	fa92 f1a2 	rbit	r1, r2
 8003d1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d22:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003d26:	6011      	str	r1, [r2, #0]
  return result;
 8003d28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d2c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	fab2 f282 	clz	r2, r2
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	f002 021f 	and.w	r2, r2, #31
 8003d42:	2101      	movs	r1, #1
 8003d44:	fa01 f202 	lsl.w	r2, r1, r2
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d180      	bne.n	8003c50 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d4e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d105      	bne.n	8003d62 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d56:	4b9e      	ldr	r3, [pc, #632]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	4a9d      	ldr	r2, [pc, #628]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d60:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 825e 	beq.w	8004230 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d74:	4b96      	ldr	r3, [pc, #600]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 030c 	and.w	r3, r3, #12
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	f000 821f 	beq.w	80041c0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	f040 8170 	bne.w	8004074 <HAL_RCC_OscConfig+0xedc>
 8003d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d98:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	fa93 f2a3 	rbit	r2, r3
 8003db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003db4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003db8:	601a      	str	r2, [r3, #0]
  return result;
 8003dba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dbe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003dc2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc4:	fab3 f383 	clz	r3, r3
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dda:	f7fd fffb 	bl	8001dd4 <HAL_GetTick>
 8003dde:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de2:	e009      	b.n	8003df8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fd fff6 	bl	8001dd4 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e21c      	b.n	8004232 <HAL_RCC_OscConfig+0x109a>
 8003df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dfc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e0a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	fa93 f2a3 	rbit	r2, r3
 8003e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e18:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e1c:	601a      	str	r2, [r3, #0]
  return result;
 8003e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e22:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e28:	fab3 f383 	clz	r3, r3
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d102      	bne.n	8003e42 <HAL_RCC_OscConfig+0xcaa>
 8003e3c:	4b64      	ldr	r3, [pc, #400]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	e027      	b.n	8003e92 <HAL_RCC_OscConfig+0xcfa>
 8003e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e46:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003e4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e54:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	fa93 f2a3 	rbit	r2, r3
 8003e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e62:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e6c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003e70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e7a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	fa93 f2a3 	rbit	r2, r3
 8003e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e88:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	4b50      	ldr	r3, [pc, #320]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e96:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e9a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e9e:	6011      	str	r1, [r2, #0]
 8003ea0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ea4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	fa92 f1a2 	rbit	r1, r2
 8003eae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003eb2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003eb6:	6011      	str	r1, [r2, #0]
  return result;
 8003eb8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ebc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	fab2 f282 	clz	r2, r2
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	f042 0220 	orr.w	r2, r2, #32
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	f002 021f 	and.w	r2, r2, #31
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d182      	bne.n	8003de4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ede:	4b3c      	ldr	r3, [pc, #240]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	f023 020f 	bic.w	r2, r3, #15
 8003ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	4937      	ldr	r1, [pc, #220]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003ef8:	4b35      	ldr	r3, [pc, #212]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6a19      	ldr	r1, [r3, #32]
 8003f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	492d      	ldr	r1, [pc, #180]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	604b      	str	r3, [r1, #4]
 8003f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f24:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f32:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	fa93 f2a3 	rbit	r2, r3
 8003f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f40:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003f44:	601a      	str	r2, [r3, #0]
  return result;
 8003f46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f4a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003f4e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f50:	fab3 f383 	clz	r3, r3
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	461a      	mov	r2, r3
 8003f62:	2301      	movs	r3, #1
 8003f64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f66:	f7fd ff35 	bl	8001dd4 <HAL_GetTick>
 8003f6a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f6e:	e009      	b.n	8003f84 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fd ff30 	bl	8001dd4 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e156      	b.n	8004232 <HAL_RCC_OscConfig+0x109a>
 8003f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f88:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f96:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	fa93 f2a3 	rbit	r2, r3
 8003fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fa4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003fa8:	601a      	str	r2, [r3, #0]
  return result;
 8003faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fae:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003fb2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fb4:	fab3 f383 	clz	r3, r3
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d105      	bne.n	8003fd4 <HAL_RCC_OscConfig+0xe3c>
 8003fc8:	4b01      	ldr	r3, [pc, #4]	; (8003fd0 <HAL_RCC_OscConfig+0xe38>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	e02a      	b.n	8004024 <HAL_RCC_OscConfig+0xe8c>
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003fdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fe6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	fa93 f2a3 	rbit	r2, r3
 8003ff0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ffe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004002:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800400c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	fa93 f2a3 	rbit	r2, r3
 8004016:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800401a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	4b86      	ldr	r3, [pc, #536]	; (800423c <HAL_RCC_OscConfig+0x10a4>)
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004028:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800402c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004030:	6011      	str	r1, [r2, #0]
 8004032:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004036:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	fa92 f1a2 	rbit	r1, r2
 8004040:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004044:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004048:	6011      	str	r1, [r2, #0]
  return result;
 800404a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800404e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	fab2 f282 	clz	r2, r2
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	f042 0220 	orr.w	r2, r2, #32
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	f002 021f 	and.w	r2, r2, #31
 8004064:	2101      	movs	r1, #1
 8004066:	fa01 f202 	lsl.w	r2, r1, r2
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	f43f af7f 	beq.w	8003f70 <HAL_RCC_OscConfig+0xdd8>
 8004072:	e0dd      	b.n	8004230 <HAL_RCC_OscConfig+0x1098>
 8004074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004078:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800407c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004086:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	fa93 f2a3 	rbit	r2, r3
 8004090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004094:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004098:	601a      	str	r2, [r3, #0]
  return result;
 800409a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800409e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80040a2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a4:	fab3 f383 	clz	r3, r3
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	461a      	mov	r2, r3
 80040b6:	2300      	movs	r3, #0
 80040b8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ba:	f7fd fe8b 	bl	8001dd4 <HAL_GetTick>
 80040be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c2:	e009      	b.n	80040d8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c4:	f7fd fe86 	bl	8001dd4 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e0ac      	b.n	8004232 <HAL_RCC_OscConfig+0x109a>
 80040d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80040e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	fa93 f2a3 	rbit	r2, r3
 80040f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040f8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80040fc:	601a      	str	r2, [r3, #0]
  return result;
 80040fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004102:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004106:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004108:	fab3 f383 	clz	r3, r3
 800410c:	b2db      	uxtb	r3, r3
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d102      	bne.n	8004122 <HAL_RCC_OscConfig+0xf8a>
 800411c:	4b47      	ldr	r3, [pc, #284]	; (800423c <HAL_RCC_OscConfig+0x10a4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	e027      	b.n	8004172 <HAL_RCC_OscConfig+0xfda>
 8004122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004126:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800412a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800412e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004130:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004134:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	fa93 f2a3 	rbit	r2, r3
 800413e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004142:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800414c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004150:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800415a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	fa93 f2a3 	rbit	r2, r3
 8004164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004168:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	4b33      	ldr	r3, [pc, #204]	; (800423c <HAL_RCC_OscConfig+0x10a4>)
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004176:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800417a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800417e:	6011      	str	r1, [r2, #0]
 8004180:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004184:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004188:	6812      	ldr	r2, [r2, #0]
 800418a:	fa92 f1a2 	rbit	r1, r2
 800418e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004192:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004196:	6011      	str	r1, [r2, #0]
  return result;
 8004198:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800419c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	fab2 f282 	clz	r2, r2
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	f042 0220 	orr.w	r2, r2, #32
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	f002 021f 	and.w	r2, r2, #31
 80041b2:	2101      	movs	r1, #1
 80041b4:	fa01 f202 	lsl.w	r2, r1, r2
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d182      	bne.n	80040c4 <HAL_RCC_OscConfig+0xf2c>
 80041be:	e037      	b.n	8004230 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e02e      	b.n	8004232 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCC_OscConfig+0x10a4>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80041dc:	4b17      	ldr	r3, [pc, #92]	; (800423c <HAL_RCC_OscConfig+0x10a4>)
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80041e8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80041ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d117      	bne.n	800422c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80041fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004200:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004208:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004210:	429a      	cmp	r2, r3
 8004212:	d10b      	bne.n	800422c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004214:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004218:	f003 020f 	and.w	r2, r3, #15
 800421c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004220:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40021000 	.word	0x40021000

08004240 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b09e      	sub	sp, #120	; 0x78
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800424a:	2300      	movs	r3, #0
 800424c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e162      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004258:	4b90      	ldr	r3, [pc, #576]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d910      	bls.n	8004288 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004266:	4b8d      	ldr	r3, [pc, #564]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 0207 	bic.w	r2, r3, #7
 800426e:	498b      	ldr	r1, [pc, #556]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004276:	4b89      	ldr	r3, [pc, #548]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e14a      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004294:	4b82      	ldr	r3, [pc, #520]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	497f      	ldr	r1, [pc, #508]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80dc 	beq.w	800446c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d13c      	bne.n	8004336 <HAL_RCC_ClockConfig+0xf6>
 80042bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042c4:	fa93 f3a3 	rbit	r3, r3
 80042c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80042ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042cc:	fab3 f383 	clz	r3, r3
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d102      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xa6>
 80042e0:	4b6f      	ldr	r3, [pc, #444]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	e00f      	b.n	8004306 <HAL_RCC_ClockConfig+0xc6>
 80042e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	667b      	str	r3, [r7, #100]	; 0x64
 80042f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042f8:	663b      	str	r3, [r7, #96]	; 0x60
 80042fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004302:	4b67      	ldr	r3, [pc, #412]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800430a:	65ba      	str	r2, [r7, #88]	; 0x58
 800430c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800430e:	fa92 f2a2 	rbit	r2, r2
 8004312:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004314:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004316:	fab2 f282 	clz	r2, r2
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	f042 0220 	orr.w	r2, r2, #32
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	f002 021f 	and.w	r2, r2, #31
 8004326:	2101      	movs	r1, #1
 8004328:	fa01 f202 	lsl.w	r2, r1, r2
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d17b      	bne.n	800442a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e0f3      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d13c      	bne.n	80043b8 <HAL_RCC_ClockConfig+0x178>
 800433e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004342:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800434c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434e:	fab3 f383 	clz	r3, r3
 8004352:	b2db      	uxtb	r3, r3
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	b2db      	uxtb	r3, r3
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d102      	bne.n	8004368 <HAL_RCC_ClockConfig+0x128>
 8004362:	4b4f      	ldr	r3, [pc, #316]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	e00f      	b.n	8004388 <HAL_RCC_ClockConfig+0x148>
 8004368:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800436c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004370:	fa93 f3a3 	rbit	r3, r3
 8004374:	647b      	str	r3, [r7, #68]	; 0x44
 8004376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800437a:	643b      	str	r3, [r7, #64]	; 0x40
 800437c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004384:	4b46      	ldr	r3, [pc, #280]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800438c:	63ba      	str	r2, [r7, #56]	; 0x38
 800438e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004390:	fa92 f2a2 	rbit	r2, r2
 8004394:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004398:	fab2 f282 	clz	r2, r2
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	f042 0220 	orr.w	r2, r2, #32
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	f002 021f 	and.w	r2, r2, #31
 80043a8:	2101      	movs	r1, #1
 80043aa:	fa01 f202 	lsl.w	r2, r1, r2
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d13a      	bne.n	800442a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0b2      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
 80043b8:	2302      	movs	r3, #2
 80043ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	fa93 f3a3 	rbit	r3, r3
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c6:	fab3 f383 	clz	r3, r3
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d102      	bne.n	80043e0 <HAL_RCC_ClockConfig+0x1a0>
 80043da:	4b31      	ldr	r3, [pc, #196]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	e00d      	b.n	80043fc <HAL_RCC_ClockConfig+0x1bc>
 80043e0:	2302      	movs	r3, #2
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	fa93 f3a3 	rbit	r3, r3
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
 80043ec:	2302      	movs	r3, #2
 80043ee:	623b      	str	r3, [r7, #32]
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	4b29      	ldr	r3, [pc, #164]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	2202      	movs	r2, #2
 80043fe:	61ba      	str	r2, [r7, #24]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	fa92 f2a2 	rbit	r2, r2
 8004406:	617a      	str	r2, [r7, #20]
  return result;
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	fab2 f282 	clz	r2, r2
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	f042 0220 	orr.w	r2, r2, #32
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	f002 021f 	and.w	r2, r2, #31
 800441a:	2101      	movs	r1, #1
 800441c:	fa01 f202 	lsl.w	r2, r1, r2
 8004420:	4013      	ands	r3, r2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e079      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800442a:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f023 0203 	bic.w	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	491a      	ldr	r1, [pc, #104]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 8004438:	4313      	orrs	r3, r2
 800443a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800443c:	f7fd fcca 	bl	8001dd4 <HAL_GetTick>
 8004440:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004442:	e00a      	b.n	800445a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004444:	f7fd fcc6 	bl	8001dd4 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004452:	4293      	cmp	r3, r2
 8004454:	d901      	bls.n	800445a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e061      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445a:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f003 020c 	and.w	r2, r3, #12
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	429a      	cmp	r2, r3
 800446a:	d1eb      	bne.n	8004444 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d214      	bcs.n	80044a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 0207 	bic.w	r2, r3, #7
 8004482:	4906      	ldr	r1, [pc, #24]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800448a:	4b04      	ldr	r3, [pc, #16]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e040      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
 800449c:	40022000 	.word	0x40022000
 80044a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b0:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <HAL_RCC_ClockConfig+0x2e8>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	491a      	ldr	r1, [pc, #104]	; (8004528 <HAL_RCC_ClockConfig+0x2e8>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ce:	4b16      	ldr	r3, [pc, #88]	; (8004528 <HAL_RCC_ClockConfig+0x2e8>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4912      	ldr	r1, [pc, #72]	; (8004528 <HAL_RCC_ClockConfig+0x2e8>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044e2:	f000 f829 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 80044e6:	4601      	mov	r1, r0
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <HAL_RCC_ClockConfig+0x2e8>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044f0:	22f0      	movs	r2, #240	; 0xf0
 80044f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	fa92 f2a2 	rbit	r2, r2
 80044fa:	60fa      	str	r2, [r7, #12]
  return result;
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	fab2 f282 	clz	r2, r2
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	40d3      	lsrs	r3, r2
 8004506:	4a09      	ldr	r2, [pc, #36]	; (800452c <HAL_RCC_ClockConfig+0x2ec>)
 8004508:	5cd3      	ldrb	r3, [r2, r3]
 800450a:	fa21 f303 	lsr.w	r3, r1, r3
 800450e:	4a08      	ldr	r2, [pc, #32]	; (8004530 <HAL_RCC_ClockConfig+0x2f0>)
 8004510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004512:	4b08      	ldr	r3, [pc, #32]	; (8004534 <HAL_RCC_ClockConfig+0x2f4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7fd fc18 	bl	8001d4c <HAL_InitTick>
  
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3778      	adds	r7, #120	; 0x78
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	0800a198 	.word	0x0800a198
 8004530:	20000010 	.word	0x20000010
 8004534:	20000014 	.word	0x20000014

08004538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004538:	b480      	push	{r7}
 800453a:	b08b      	sub	sp, #44	; 0x2c
 800453c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	2300      	movs	r3, #0
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	2300      	movs	r3, #0
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004552:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b04      	cmp	r3, #4
 8004560:	d002      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x30>
 8004562:	2b08      	cmp	r3, #8
 8004564:	d003      	beq.n	800456e <HAL_RCC_GetSysClockFreq+0x36>
 8004566:	e03f      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004568:	4b25      	ldr	r3, [pc, #148]	; (8004600 <HAL_RCC_GetSysClockFreq+0xc8>)
 800456a:	623b      	str	r3, [r7, #32]
      break;
 800456c:	e03f      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004574:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004578:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	fa92 f2a2 	rbit	r2, r2
 8004580:	607a      	str	r2, [r7, #4]
  return result;
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	fab2 f282 	clz	r2, r2
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	40d3      	lsrs	r3, r2
 800458c:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <HAL_RCC_GetSysClockFreq+0xcc>)
 800458e:	5cd3      	ldrb	r3, [r2, r3]
 8004590:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004592:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	220f      	movs	r2, #15
 800459c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	fa92 f2a2 	rbit	r2, r2
 80045a4:	60fa      	str	r2, [r7, #12]
  return result;
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	fab2 f282 	clz	r2, r2
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	40d3      	lsrs	r3, r2
 80045b0:	4a15      	ldr	r2, [pc, #84]	; (8004608 <HAL_RCC_GetSysClockFreq+0xd0>)
 80045b2:	5cd3      	ldrb	r3, [r2, r3]
 80045b4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045c0:	4a0f      	ldr	r2, [pc, #60]	; (8004600 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
 80045d0:	e007      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045d2:	4a0b      	ldr	r2, [pc, #44]	; (8004600 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	fb02 f303 	mul.w	r3, r2, r3
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	623b      	str	r3, [r7, #32]
      break;
 80045e6:	e002      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045ea:	623b      	str	r3, [r7, #32]
      break;
 80045ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ee:	6a3b      	ldr	r3, [r7, #32]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	372c      	adds	r7, #44	; 0x2c
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	40021000 	.word	0x40021000
 8004600:	007a1200 	.word	0x007a1200
 8004604:	0800a1b0 	.word	0x0800a1b0
 8004608:	0800a1c0 	.word	0x0800a1c0

0800460c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_RCC_GetHCLKFreq+0x14>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000010 	.word	0x20000010

08004624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800462a:	f7ff ffef 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800462e:	4601      	mov	r1, r0
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004638:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800463c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	fa92 f2a2 	rbit	r2, r2
 8004644:	603a      	str	r2, [r7, #0]
  return result;
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	fab2 f282 	clz	r2, r2
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	40d3      	lsrs	r3, r2
 8004650:	4a04      	ldr	r2, [pc, #16]	; (8004664 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004652:	5cd3      	ldrb	r3, [r2, r3]
 8004654:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	0800a1a8 	.word	0x0800a1a8

08004668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800466e:	f7ff ffcd 	bl	800460c <HAL_RCC_GetHCLKFreq>
 8004672:	4601      	mov	r1, r0
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800467c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004680:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	fa92 f2a2 	rbit	r2, r2
 8004688:	603a      	str	r2, [r7, #0]
  return result;
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	fab2 f282 	clz	r2, r2
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	40d3      	lsrs	r3, r2
 8004694:	4a04      	ldr	r2, [pc, #16]	; (80046a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004696:	5cd3      	ldrb	r3, [r2, r3]
 8004698:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40021000 	.word	0x40021000
 80046a8:	0800a1a8 	.word	0x0800a1a8

080046ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b092      	sub	sp, #72	; 0x48
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 80d4 	beq.w	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d0:	4b4e      	ldr	r3, [pc, #312]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10e      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046dc:	4b4b      	ldr	r3, [pc, #300]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	4a4a      	ldr	r2, [pc, #296]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e6:	61d3      	str	r3, [r2, #28]
 80046e8:	4b48      	ldr	r3, [pc, #288]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fa:	4b45      	ldr	r3, [pc, #276]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d118      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004706:	4b42      	ldr	r3, [pc, #264]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a41      	ldr	r2, [pc, #260]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800470c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004710:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004712:	f7fd fb5f 	bl	8001dd4 <HAL_GetTick>
 8004716:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004718:	e008      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471a:	f7fd fb5b 	bl	8001dd4 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b64      	cmp	r3, #100	; 0x64
 8004726:	d901      	bls.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e1d6      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472c:	4b38      	ldr	r3, [pc, #224]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0f0      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004738:	4b34      	ldr	r3, [pc, #208]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004740:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8084 	beq.w	8004852 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004752:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004754:	429a      	cmp	r2, r3
 8004756:	d07c      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004758:	4b2c      	ldr	r3, [pc, #176]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004762:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004766:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004772:	fab3 f383 	clz	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	4b26      	ldr	r3, [pc, #152]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	461a      	mov	r2, r3
 8004782:	2301      	movs	r3, #1
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800478a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478e:	fa93 f3a3 	rbit	r3, r3
 8004792:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004796:	fab3 f383 	clz	r3, r3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	4b1d      	ldr	r3, [pc, #116]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	461a      	mov	r2, r3
 80047a6:	2300      	movs	r3, #0
 80047a8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047aa:	4a18      	ldr	r2, [pc, #96]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d04b      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ba:	f7fd fb0b 	bl	8001dd4 <HAL_GetTick>
 80047be:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c0:	e00a      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fd fb07 	bl	8001dd4 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e180      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80047d8:	2302      	movs	r3, #2
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	fa93 f3a3 	rbit	r3, r3
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
 80047e4:	2302      	movs	r3, #2
 80047e6:	623b      	str	r3, [r7, #32]
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	fa93 f3a3 	rbit	r3, r3
 80047ee:	61fb      	str	r3, [r7, #28]
  return result;
 80047f0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f043 0302 	orr.w	r3, r3, #2
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d108      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004806:	4b01      	ldr	r3, [pc, #4]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	e00d      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800480c:	40021000 	.word	0x40021000
 8004810:	40007000 	.word	0x40007000
 8004814:	10908100 	.word	0x10908100
 8004818:	2302      	movs	r3, #2
 800481a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	fa93 f3a3 	rbit	r3, r3
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	4b9a      	ldr	r3, [pc, #616]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	2202      	movs	r2, #2
 800482a:	613a      	str	r2, [r7, #16]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	fa92 f2a2 	rbit	r2, r2
 8004832:	60fa      	str	r2, [r7, #12]
  return result;
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	fab2 f282 	clz	r2, r2
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	f002 021f 	and.w	r2, r2, #31
 8004846:	2101      	movs	r1, #1
 8004848:	fa01 f202 	lsl.w	r2, r1, r2
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0b7      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004852:	4b8f      	ldr	r3, [pc, #572]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	498c      	ldr	r1, [pc, #560]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004860:	4313      	orrs	r3, r2
 8004862:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004864:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004868:	2b01      	cmp	r3, #1
 800486a:	d105      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800486c:	4b88      	ldr	r3, [pc, #544]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	4a87      	ldr	r2, [pc, #540]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004876:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004884:	4b82      	ldr	r3, [pc, #520]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	f023 0203 	bic.w	r2, r3, #3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	497f      	ldr	r1, [pc, #508]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048a2:	4b7b      	ldr	r3, [pc, #492]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	4978      	ldr	r1, [pc, #480]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d008      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048c0:	4b73      	ldr	r3, [pc, #460]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	4970      	ldr	r1, [pc, #448]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048de:	4b6c      	ldr	r3, [pc, #432]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	f023 0210 	bic.w	r2, r3, #16
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	4969      	ldr	r1, [pc, #420]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80048fc:	4b64      	ldr	r3, [pc, #400]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004908:	4961      	ldr	r1, [pc, #388]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800490a:	4313      	orrs	r3, r2
 800490c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800491a:	4b5d      	ldr	r3, [pc, #372]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	f023 0220 	bic.w	r2, r3, #32
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	495a      	ldr	r1, [pc, #360]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004928:	4313      	orrs	r3, r2
 800492a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004938:	4b55      	ldr	r3, [pc, #340]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	4952      	ldr	r1, [pc, #328]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004956:	4b4e      	ldr	r3, [pc, #312]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	494b      	ldr	r1, [pc, #300]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004964:	4313      	orrs	r3, r2
 8004966:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004974:	4b46      	ldr	r3, [pc, #280]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	4943      	ldr	r1, [pc, #268]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004982:	4313      	orrs	r3, r2
 8004984:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004992:	4b3f      	ldr	r3, [pc, #252]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	493c      	ldr	r1, [pc, #240]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049b0:	4b37      	ldr	r3, [pc, #220]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	4934      	ldr	r1, [pc, #208]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80049ce:	4b30      	ldr	r3, [pc, #192]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	492d      	ldr	r1, [pc, #180]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049ec:	4b28      	ldr	r3, [pc, #160]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f8:	4925      	ldr	r1, [pc, #148]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d008      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004a0a:	4b21      	ldr	r3, [pc, #132]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	491e      	ldr	r1, [pc, #120]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004a28:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	4916      	ldr	r1, [pc, #88]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d008      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004a46:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a52:	490f      	ldr	r1, [pc, #60]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d008      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a64:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a70:	4907      	ldr	r1, [pc, #28]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00c      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004a82:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a86:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	e002      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004a8e:	bf00      	nop
 8004a90:	40021000 	.word	0x40021000
 8004a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a96:	4913      	ldr	r1, [pc, #76]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004aa8:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab4:	490b      	ldr	r1, [pc, #44]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d008      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004ac6:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad2:	4904      	ldr	r1, [pc, #16]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3748      	adds	r7, #72	; 0x48
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e049      	b.n	8004b8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fd f84a 	bl	8001ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f000 f836 	bl	8004b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a42      	ldr	r2, [pc, #264]	; (8004cb4 <TIM_Base_SetConfig+0x11c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <TIM_Base_SetConfig+0x40>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb6:	d00f      	beq.n	8004bd8 <TIM_Base_SetConfig+0x40>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a3f      	ldr	r2, [pc, #252]	; (8004cb8 <TIM_Base_SetConfig+0x120>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00b      	beq.n	8004bd8 <TIM_Base_SetConfig+0x40>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a3e      	ldr	r2, [pc, #248]	; (8004cbc <TIM_Base_SetConfig+0x124>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d007      	beq.n	8004bd8 <TIM_Base_SetConfig+0x40>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a3d      	ldr	r2, [pc, #244]	; (8004cc0 <TIM_Base_SetConfig+0x128>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d003      	beq.n	8004bd8 <TIM_Base_SetConfig+0x40>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a3c      	ldr	r2, [pc, #240]	; (8004cc4 <TIM_Base_SetConfig+0x12c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d108      	bne.n	8004bea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a31      	ldr	r2, [pc, #196]	; (8004cb4 <TIM_Base_SetConfig+0x11c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d01f      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf8:	d01b      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a2e      	ldr	r2, [pc, #184]	; (8004cb8 <TIM_Base_SetConfig+0x120>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d017      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a2d      	ldr	r2, [pc, #180]	; (8004cbc <TIM_Base_SetConfig+0x124>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d013      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a2c      	ldr	r2, [pc, #176]	; (8004cc0 <TIM_Base_SetConfig+0x128>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00f      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a2c      	ldr	r2, [pc, #176]	; (8004cc8 <TIM_Base_SetConfig+0x130>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00b      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a2b      	ldr	r2, [pc, #172]	; (8004ccc <TIM_Base_SetConfig+0x134>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d007      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a2a      	ldr	r2, [pc, #168]	; (8004cd0 <TIM_Base_SetConfig+0x138>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d003      	beq.n	8004c32 <TIM_Base_SetConfig+0x9a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a25      	ldr	r2, [pc, #148]	; (8004cc4 <TIM_Base_SetConfig+0x12c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d108      	bne.n	8004c44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a12      	ldr	r2, [pc, #72]	; (8004cb4 <TIM_Base_SetConfig+0x11c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <TIM_Base_SetConfig+0x100>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a13      	ldr	r2, [pc, #76]	; (8004cc0 <TIM_Base_SetConfig+0x128>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00f      	beq.n	8004c98 <TIM_Base_SetConfig+0x100>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a13      	ldr	r2, [pc, #76]	; (8004cc8 <TIM_Base_SetConfig+0x130>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00b      	beq.n	8004c98 <TIM_Base_SetConfig+0x100>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a12      	ldr	r2, [pc, #72]	; (8004ccc <TIM_Base_SetConfig+0x134>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d007      	beq.n	8004c98 <TIM_Base_SetConfig+0x100>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a11      	ldr	r2, [pc, #68]	; (8004cd0 <TIM_Base_SetConfig+0x138>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <TIM_Base_SetConfig+0x100>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a0c      	ldr	r2, [pc, #48]	; (8004cc4 <TIM_Base_SetConfig+0x12c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d103      	bne.n	8004ca0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	615a      	str	r2, [r3, #20]
}
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40012c00 	.word	0x40012c00
 8004cb8:	40000400 	.word	0x40000400
 8004cbc:	40000800 	.word	0x40000800
 8004cc0:	40013400 	.word	0x40013400
 8004cc4:	40015000 	.word	0x40015000
 8004cc8:	40014000 	.word	0x40014000
 8004ccc:	40014400 	.word	0x40014400
 8004cd0:	40014800 	.word	0x40014800

08004cd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e040      	b.n	8004d68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fc ffa6 	bl	8001c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2224      	movs	r2, #36	; 0x24
 8004d00:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0201 	bic.w	r2, r2, #1
 8004d10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f8b6 	bl	8004e84 <UART_SetConfig>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e022      	b.n	8004d68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fa7e 	bl	800522c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fb05 	bl	8005370 <UART_CheckIdleState>
 8004d66:	4603      	mov	r3, r0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08a      	sub	sp, #40	; 0x28
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	d178      	bne.n	8004e7a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_UART_Transmit+0x24>
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e071      	b.n	8004e7c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2221      	movs	r2, #33	; 0x21
 8004da4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004da6:	f7fd f815 	bl	8001dd4 <HAL_GetTick>
 8004daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	88fa      	ldrh	r2, [r7, #6]
 8004db0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	88fa      	ldrh	r2, [r7, #6]
 8004db8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc4:	d108      	bne.n	8004dd8 <HAL_UART_Transmit+0x68>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d104      	bne.n	8004dd8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	e003      	b.n	8004de0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004de0:	e030      	b.n	8004e44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2200      	movs	r2, #0
 8004dea:	2180      	movs	r1, #128	; 0x80
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 fb67 	bl	80054c0 <UART_WaitOnFlagUntilTimeout>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d004      	beq.n	8004e02 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e03c      	b.n	8004e7c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10b      	bne.n	8004e20 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	881a      	ldrh	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e14:	b292      	uxth	r2, r2
 8004e16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	3302      	adds	r3, #2
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	e008      	b.n	8004e32 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	781a      	ldrb	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	b292      	uxth	r2, r2
 8004e2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1c8      	bne.n	8004de2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2200      	movs	r2, #0
 8004e58:	2140      	movs	r1, #64	; 0x40
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fb30 	bl	80054c0 <UART_WaitOnFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d004      	beq.n	8004e70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e005      	b.n	8004e7c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	e000      	b.n	8004e7c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004e7a:	2302      	movs	r3, #2
  }
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3720      	adds	r7, #32
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	4b92      	ldr	r3, [pc, #584]	; (80050f8 <UART_SetConfig+0x274>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6812      	ldr	r2, [r2, #0]
 8004eb6:	6979      	ldr	r1, [r7, #20]
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a80      	ldr	r2, [pc, #512]	; (80050fc <UART_SetConfig+0x278>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d120      	bne.n	8004f42 <UART_SetConfig+0xbe>
 8004f00:	4b7f      	ldr	r3, [pc, #508]	; (8005100 <UART_SetConfig+0x27c>)
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	f003 0303 	and.w	r3, r3, #3
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d817      	bhi.n	8004f3c <UART_SetConfig+0xb8>
 8004f0c:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <UART_SetConfig+0x90>)
 8004f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f12:	bf00      	nop
 8004f14:	08004f25 	.word	0x08004f25
 8004f18:	08004f31 	.word	0x08004f31
 8004f1c:	08004f37 	.word	0x08004f37
 8004f20:	08004f2b 	.word	0x08004f2b
 8004f24:	2301      	movs	r3, #1
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	e0b5      	b.n	8005096 <UART_SetConfig+0x212>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	77fb      	strb	r3, [r7, #31]
 8004f2e:	e0b2      	b.n	8005096 <UART_SetConfig+0x212>
 8004f30:	2304      	movs	r3, #4
 8004f32:	77fb      	strb	r3, [r7, #31]
 8004f34:	e0af      	b.n	8005096 <UART_SetConfig+0x212>
 8004f36:	2308      	movs	r3, #8
 8004f38:	77fb      	strb	r3, [r7, #31]
 8004f3a:	e0ac      	b.n	8005096 <UART_SetConfig+0x212>
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	77fb      	strb	r3, [r7, #31]
 8004f40:	e0a9      	b.n	8005096 <UART_SetConfig+0x212>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a6f      	ldr	r2, [pc, #444]	; (8005104 <UART_SetConfig+0x280>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d124      	bne.n	8004f96 <UART_SetConfig+0x112>
 8004f4c:	4b6c      	ldr	r3, [pc, #432]	; (8005100 <UART_SetConfig+0x27c>)
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f58:	d011      	beq.n	8004f7e <UART_SetConfig+0xfa>
 8004f5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f5e:	d817      	bhi.n	8004f90 <UART_SetConfig+0x10c>
 8004f60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f64:	d011      	beq.n	8004f8a <UART_SetConfig+0x106>
 8004f66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f6a:	d811      	bhi.n	8004f90 <UART_SetConfig+0x10c>
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <UART_SetConfig+0xf4>
 8004f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f74:	d006      	beq.n	8004f84 <UART_SetConfig+0x100>
 8004f76:	e00b      	b.n	8004f90 <UART_SetConfig+0x10c>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	e08b      	b.n	8005096 <UART_SetConfig+0x212>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	77fb      	strb	r3, [r7, #31]
 8004f82:	e088      	b.n	8005096 <UART_SetConfig+0x212>
 8004f84:	2304      	movs	r3, #4
 8004f86:	77fb      	strb	r3, [r7, #31]
 8004f88:	e085      	b.n	8005096 <UART_SetConfig+0x212>
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	77fb      	strb	r3, [r7, #31]
 8004f8e:	e082      	b.n	8005096 <UART_SetConfig+0x212>
 8004f90:	2310      	movs	r3, #16
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e07f      	b.n	8005096 <UART_SetConfig+0x212>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a5b      	ldr	r2, [pc, #364]	; (8005108 <UART_SetConfig+0x284>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d124      	bne.n	8004fea <UART_SetConfig+0x166>
 8004fa0:	4b57      	ldr	r3, [pc, #348]	; (8005100 <UART_SetConfig+0x27c>)
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004fa8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004fac:	d011      	beq.n	8004fd2 <UART_SetConfig+0x14e>
 8004fae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004fb2:	d817      	bhi.n	8004fe4 <UART_SetConfig+0x160>
 8004fb4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fb8:	d011      	beq.n	8004fde <UART_SetConfig+0x15a>
 8004fba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fbe:	d811      	bhi.n	8004fe4 <UART_SetConfig+0x160>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <UART_SetConfig+0x148>
 8004fc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fc8:	d006      	beq.n	8004fd8 <UART_SetConfig+0x154>
 8004fca:	e00b      	b.n	8004fe4 <UART_SetConfig+0x160>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	e061      	b.n	8005096 <UART_SetConfig+0x212>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	77fb      	strb	r3, [r7, #31]
 8004fd6:	e05e      	b.n	8005096 <UART_SetConfig+0x212>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	77fb      	strb	r3, [r7, #31]
 8004fdc:	e05b      	b.n	8005096 <UART_SetConfig+0x212>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	77fb      	strb	r3, [r7, #31]
 8004fe2:	e058      	b.n	8005096 <UART_SetConfig+0x212>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	77fb      	strb	r3, [r7, #31]
 8004fe8:	e055      	b.n	8005096 <UART_SetConfig+0x212>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a47      	ldr	r2, [pc, #284]	; (800510c <UART_SetConfig+0x288>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d124      	bne.n	800503e <UART_SetConfig+0x1ba>
 8004ff4:	4b42      	ldr	r3, [pc, #264]	; (8005100 <UART_SetConfig+0x27c>)
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004ffc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005000:	d011      	beq.n	8005026 <UART_SetConfig+0x1a2>
 8005002:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005006:	d817      	bhi.n	8005038 <UART_SetConfig+0x1b4>
 8005008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800500c:	d011      	beq.n	8005032 <UART_SetConfig+0x1ae>
 800500e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005012:	d811      	bhi.n	8005038 <UART_SetConfig+0x1b4>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <UART_SetConfig+0x19c>
 8005018:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800501c:	d006      	beq.n	800502c <UART_SetConfig+0x1a8>
 800501e:	e00b      	b.n	8005038 <UART_SetConfig+0x1b4>
 8005020:	2300      	movs	r3, #0
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	e037      	b.n	8005096 <UART_SetConfig+0x212>
 8005026:	2302      	movs	r3, #2
 8005028:	77fb      	strb	r3, [r7, #31]
 800502a:	e034      	b.n	8005096 <UART_SetConfig+0x212>
 800502c:	2304      	movs	r3, #4
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e031      	b.n	8005096 <UART_SetConfig+0x212>
 8005032:	2308      	movs	r3, #8
 8005034:	77fb      	strb	r3, [r7, #31]
 8005036:	e02e      	b.n	8005096 <UART_SetConfig+0x212>
 8005038:	2310      	movs	r3, #16
 800503a:	77fb      	strb	r3, [r7, #31]
 800503c:	e02b      	b.n	8005096 <UART_SetConfig+0x212>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a33      	ldr	r2, [pc, #204]	; (8005110 <UART_SetConfig+0x28c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d124      	bne.n	8005092 <UART_SetConfig+0x20e>
 8005048:	4b2d      	ldr	r3, [pc, #180]	; (8005100 <UART_SetConfig+0x27c>)
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005050:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005054:	d011      	beq.n	800507a <UART_SetConfig+0x1f6>
 8005056:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800505a:	d817      	bhi.n	800508c <UART_SetConfig+0x208>
 800505c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005060:	d011      	beq.n	8005086 <UART_SetConfig+0x202>
 8005062:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005066:	d811      	bhi.n	800508c <UART_SetConfig+0x208>
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <UART_SetConfig+0x1f0>
 800506c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005070:	d006      	beq.n	8005080 <UART_SetConfig+0x1fc>
 8005072:	e00b      	b.n	800508c <UART_SetConfig+0x208>
 8005074:	2300      	movs	r3, #0
 8005076:	77fb      	strb	r3, [r7, #31]
 8005078:	e00d      	b.n	8005096 <UART_SetConfig+0x212>
 800507a:	2302      	movs	r3, #2
 800507c:	77fb      	strb	r3, [r7, #31]
 800507e:	e00a      	b.n	8005096 <UART_SetConfig+0x212>
 8005080:	2304      	movs	r3, #4
 8005082:	77fb      	strb	r3, [r7, #31]
 8005084:	e007      	b.n	8005096 <UART_SetConfig+0x212>
 8005086:	2308      	movs	r3, #8
 8005088:	77fb      	strb	r3, [r7, #31]
 800508a:	e004      	b.n	8005096 <UART_SetConfig+0x212>
 800508c:	2310      	movs	r3, #16
 800508e:	77fb      	strb	r3, [r7, #31]
 8005090:	e001      	b.n	8005096 <UART_SetConfig+0x212>
 8005092:	2310      	movs	r3, #16
 8005094:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800509e:	d16b      	bne.n	8005178 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80050a0:	7ffb      	ldrb	r3, [r7, #31]
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d838      	bhi.n	8005118 <UART_SetConfig+0x294>
 80050a6:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <UART_SetConfig+0x228>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	080050d1 	.word	0x080050d1
 80050b0:	080050d9 	.word	0x080050d9
 80050b4:	080050e1 	.word	0x080050e1
 80050b8:	08005119 	.word	0x08005119
 80050bc:	080050e7 	.word	0x080050e7
 80050c0:	08005119 	.word	0x08005119
 80050c4:	08005119 	.word	0x08005119
 80050c8:	08005119 	.word	0x08005119
 80050cc:	080050ef 	.word	0x080050ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d0:	f7ff faa8 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 80050d4:	61b8      	str	r0, [r7, #24]
        break;
 80050d6:	e024      	b.n	8005122 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050d8:	f7ff fac6 	bl	8004668 <HAL_RCC_GetPCLK2Freq>
 80050dc:	61b8      	str	r0, [r7, #24]
        break;
 80050de:	e020      	b.n	8005122 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e0:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <UART_SetConfig+0x290>)
 80050e2:	61bb      	str	r3, [r7, #24]
        break;
 80050e4:	e01d      	b.n	8005122 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050e6:	f7ff fa27 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 80050ea:	61b8      	str	r0, [r7, #24]
        break;
 80050ec:	e019      	b.n	8005122 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050f2:	61bb      	str	r3, [r7, #24]
        break;
 80050f4:	e015      	b.n	8005122 <UART_SetConfig+0x29e>
 80050f6:	bf00      	nop
 80050f8:	efff69f3 	.word	0xefff69f3
 80050fc:	40013800 	.word	0x40013800
 8005100:	40021000 	.word	0x40021000
 8005104:	40004400 	.word	0x40004400
 8005108:	40004800 	.word	0x40004800
 800510c:	40004c00 	.word	0x40004c00
 8005110:	40005000 	.word	0x40005000
 8005114:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	77bb      	strb	r3, [r7, #30]
        break;
 8005120:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d073      	beq.n	8005210 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	005a      	lsls	r2, r3, #1
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	085b      	lsrs	r3, r3, #1
 8005132:	441a      	add	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b0f      	cmp	r3, #15
 8005142:	d916      	bls.n	8005172 <UART_SetConfig+0x2ee>
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514a:	d212      	bcs.n	8005172 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	b29b      	uxth	r3, r3
 8005150:	f023 030f 	bic.w	r3, r3, #15
 8005154:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	085b      	lsrs	r3, r3, #1
 800515a:	b29b      	uxth	r3, r3
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	b29a      	uxth	r2, r3
 8005162:	89fb      	ldrh	r3, [r7, #14]
 8005164:	4313      	orrs	r3, r2
 8005166:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	89fa      	ldrh	r2, [r7, #14]
 800516e:	60da      	str	r2, [r3, #12]
 8005170:	e04e      	b.n	8005210 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	77bb      	strb	r3, [r7, #30]
 8005176:	e04b      	b.n	8005210 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005178:	7ffb      	ldrb	r3, [r7, #31]
 800517a:	2b08      	cmp	r3, #8
 800517c:	d827      	bhi.n	80051ce <UART_SetConfig+0x34a>
 800517e:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <UART_SetConfig+0x300>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	080051a9 	.word	0x080051a9
 8005188:	080051b1 	.word	0x080051b1
 800518c:	080051b9 	.word	0x080051b9
 8005190:	080051cf 	.word	0x080051cf
 8005194:	080051bf 	.word	0x080051bf
 8005198:	080051cf 	.word	0x080051cf
 800519c:	080051cf 	.word	0x080051cf
 80051a0:	080051cf 	.word	0x080051cf
 80051a4:	080051c7 	.word	0x080051c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a8:	f7ff fa3c 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 80051ac:	61b8      	str	r0, [r7, #24]
        break;
 80051ae:	e013      	b.n	80051d8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051b0:	f7ff fa5a 	bl	8004668 <HAL_RCC_GetPCLK2Freq>
 80051b4:	61b8      	str	r0, [r7, #24]
        break;
 80051b6:	e00f      	b.n	80051d8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b8:	4b1b      	ldr	r3, [pc, #108]	; (8005228 <UART_SetConfig+0x3a4>)
 80051ba:	61bb      	str	r3, [r7, #24]
        break;
 80051bc:	e00c      	b.n	80051d8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051be:	f7ff f9bb 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 80051c2:	61b8      	str	r0, [r7, #24]
        break;
 80051c4:	e008      	b.n	80051d8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ca:	61bb      	str	r3, [r7, #24]
        break;
 80051cc:	e004      	b.n	80051d8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	77bb      	strb	r3, [r7, #30]
        break;
 80051d6:	bf00      	nop
    }

    if (pclk != 0U)
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d018      	beq.n	8005210 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	085a      	lsrs	r2, r3, #1
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	441a      	add	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	2b0f      	cmp	r3, #15
 80051f6:	d909      	bls.n	800520c <UART_SetConfig+0x388>
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fe:	d205      	bcs.n	800520c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	b29a      	uxth	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60da      	str	r2, [r3, #12]
 800520a:	e001      	b.n	8005210 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800521c:	7fbb      	ldrb	r3, [r7, #30]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	007a1200 	.word	0x007a1200

0800522c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01a      	beq.n	8005342 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800532a:	d10a      	bne.n	8005342 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
  }
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b098      	sub	sp, #96	; 0x60
 8005374:	af02      	add	r7, sp, #8
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005380:	f7fc fd28 	bl	8001dd4 <HAL_GetTick>
 8005384:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b08      	cmp	r3, #8
 8005392:	d12e      	bne.n	80053f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800539c:	2200      	movs	r2, #0
 800539e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f88c 	bl	80054c0 <UART_WaitOnFlagUntilTimeout>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d021      	beq.n	80053f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053c2:	653b      	str	r3, [r7, #80]	; 0x50
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053cc:	647b      	str	r3, [r7, #68]	; 0x44
 80053ce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e6      	bne.n	80053ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2220      	movs	r2, #32
 80053e4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e062      	b.n	80054b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d149      	bne.n	8005494 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005408:	2200      	movs	r2, #0
 800540a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f856 	bl	80054c0 <UART_WaitOnFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d03c      	beq.n	8005494 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	623b      	str	r3, [r7, #32]
   return(result);
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800542e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	461a      	mov	r2, r3
 8005436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005438:	633b      	str	r3, [r7, #48]	; 0x30
 800543a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800543e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e6      	bne.n	800541a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3308      	adds	r3, #8
 8005452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	60fb      	str	r3, [r7, #12]
   return(result);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0301 	bic.w	r3, r3, #1
 8005462:	64bb      	str	r3, [r7, #72]	; 0x48
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3308      	adds	r3, #8
 800546a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800546c:	61fa      	str	r2, [r7, #28]
 800546e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	69b9      	ldr	r1, [r7, #24]
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	617b      	str	r3, [r7, #20]
   return(result);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e5      	bne.n	800544c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2220      	movs	r2, #32
 8005484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e011      	b.n	80054b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2220      	movs	r2, #32
 8005498:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3758      	adds	r7, #88	; 0x58
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	603b      	str	r3, [r7, #0]
 80054cc:	4613      	mov	r3, r2
 80054ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d0:	e049      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d8:	d045      	beq.n	8005566 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054da:	f7fc fc7b 	bl	8001dd4 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d302      	bcc.n	80054f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e048      	b.n	8005586 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d031      	beq.n	8005566 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b08      	cmp	r3, #8
 800550e:	d110      	bne.n	8005532 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2208      	movs	r2, #8
 8005516:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f838 	bl	800558e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2208      	movs	r2, #8
 8005522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e029      	b.n	8005586 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800553c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005540:	d111      	bne.n	8005566 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800554a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 f81e 	bl	800558e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e00f      	b.n	8005586 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69da      	ldr	r2, [r3, #28]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4013      	ands	r3, r2
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	429a      	cmp	r2, r3
 8005574:	bf0c      	ite	eq
 8005576:	2301      	moveq	r3, #1
 8005578:	2300      	movne	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	429a      	cmp	r2, r3
 8005582:	d0a6      	beq.n	80054d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800558e:	b480      	push	{r7}
 8005590:	b095      	sub	sp, #84	; 0x54
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b4:	643b      	str	r3, [r7, #64]	; 0x40
 80055b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e6      	bne.n	8005596 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3308      	adds	r3, #8
 80055ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f023 0301 	bic.w	r3, r3, #1
 80055de:	64bb      	str	r3, [r7, #72]	; 0x48
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3308      	adds	r3, #8
 80055e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e5      	bne.n	80055c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005600:	2b01      	cmp	r3, #1
 8005602:	d118      	bne.n	8005636 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	60bb      	str	r3, [r7, #8]
   return(result);
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f023 0310 	bic.w	r3, r3, #16
 8005618:	647b      	str	r3, [r7, #68]	; 0x44
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005622:	61bb      	str	r3, [r7, #24]
 8005624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6979      	ldr	r1, [r7, #20]
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	613b      	str	r3, [r7, #16]
   return(result);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e6      	bne.n	8005604 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	669a      	str	r2, [r3, #104]	; 0x68
}
 800564a:	bf00      	nop
 800564c:	3754      	adds	r7, #84	; 0x54
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <__cvt>:
 8005656:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800565a:	ec55 4b10 	vmov	r4, r5, d0
 800565e:	2d00      	cmp	r5, #0
 8005660:	460e      	mov	r6, r1
 8005662:	4619      	mov	r1, r3
 8005664:	462b      	mov	r3, r5
 8005666:	bfbb      	ittet	lt
 8005668:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800566c:	461d      	movlt	r5, r3
 800566e:	2300      	movge	r3, #0
 8005670:	232d      	movlt	r3, #45	; 0x2d
 8005672:	700b      	strb	r3, [r1, #0]
 8005674:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005676:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800567a:	4691      	mov	r9, r2
 800567c:	f023 0820 	bic.w	r8, r3, #32
 8005680:	bfbc      	itt	lt
 8005682:	4622      	movlt	r2, r4
 8005684:	4614      	movlt	r4, r2
 8005686:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800568a:	d005      	beq.n	8005698 <__cvt+0x42>
 800568c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005690:	d100      	bne.n	8005694 <__cvt+0x3e>
 8005692:	3601      	adds	r6, #1
 8005694:	2102      	movs	r1, #2
 8005696:	e000      	b.n	800569a <__cvt+0x44>
 8005698:	2103      	movs	r1, #3
 800569a:	ab03      	add	r3, sp, #12
 800569c:	9301      	str	r3, [sp, #4]
 800569e:	ab02      	add	r3, sp, #8
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	ec45 4b10 	vmov	d0, r4, r5
 80056a6:	4653      	mov	r3, sl
 80056a8:	4632      	mov	r2, r6
 80056aa:	f001 f9b5 	bl	8006a18 <_dtoa_r>
 80056ae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056b2:	4607      	mov	r7, r0
 80056b4:	d102      	bne.n	80056bc <__cvt+0x66>
 80056b6:	f019 0f01 	tst.w	r9, #1
 80056ba:	d022      	beq.n	8005702 <__cvt+0xac>
 80056bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056c0:	eb07 0906 	add.w	r9, r7, r6
 80056c4:	d110      	bne.n	80056e8 <__cvt+0x92>
 80056c6:	783b      	ldrb	r3, [r7, #0]
 80056c8:	2b30      	cmp	r3, #48	; 0x30
 80056ca:	d10a      	bne.n	80056e2 <__cvt+0x8c>
 80056cc:	2200      	movs	r2, #0
 80056ce:	2300      	movs	r3, #0
 80056d0:	4620      	mov	r0, r4
 80056d2:	4629      	mov	r1, r5
 80056d4:	f7fb fa00 	bl	8000ad8 <__aeabi_dcmpeq>
 80056d8:	b918      	cbnz	r0, 80056e2 <__cvt+0x8c>
 80056da:	f1c6 0601 	rsb	r6, r6, #1
 80056de:	f8ca 6000 	str.w	r6, [sl]
 80056e2:	f8da 3000 	ldr.w	r3, [sl]
 80056e6:	4499      	add	r9, r3
 80056e8:	2200      	movs	r2, #0
 80056ea:	2300      	movs	r3, #0
 80056ec:	4620      	mov	r0, r4
 80056ee:	4629      	mov	r1, r5
 80056f0:	f7fb f9f2 	bl	8000ad8 <__aeabi_dcmpeq>
 80056f4:	b108      	cbz	r0, 80056fa <__cvt+0xa4>
 80056f6:	f8cd 900c 	str.w	r9, [sp, #12]
 80056fa:	2230      	movs	r2, #48	; 0x30
 80056fc:	9b03      	ldr	r3, [sp, #12]
 80056fe:	454b      	cmp	r3, r9
 8005700:	d307      	bcc.n	8005712 <__cvt+0xbc>
 8005702:	9b03      	ldr	r3, [sp, #12]
 8005704:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005706:	1bdb      	subs	r3, r3, r7
 8005708:	4638      	mov	r0, r7
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	b004      	add	sp, #16
 800570e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005712:	1c59      	adds	r1, r3, #1
 8005714:	9103      	str	r1, [sp, #12]
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	e7f0      	b.n	80056fc <__cvt+0xa6>

0800571a <__exponent>:
 800571a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800571c:	4603      	mov	r3, r0
 800571e:	2900      	cmp	r1, #0
 8005720:	bfb8      	it	lt
 8005722:	4249      	neglt	r1, r1
 8005724:	f803 2b02 	strb.w	r2, [r3], #2
 8005728:	bfb4      	ite	lt
 800572a:	222d      	movlt	r2, #45	; 0x2d
 800572c:	222b      	movge	r2, #43	; 0x2b
 800572e:	2909      	cmp	r1, #9
 8005730:	7042      	strb	r2, [r0, #1]
 8005732:	dd2a      	ble.n	800578a <__exponent+0x70>
 8005734:	f10d 0207 	add.w	r2, sp, #7
 8005738:	4617      	mov	r7, r2
 800573a:	260a      	movs	r6, #10
 800573c:	4694      	mov	ip, r2
 800573e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005742:	fb06 1415 	mls	r4, r6, r5, r1
 8005746:	3430      	adds	r4, #48	; 0x30
 8005748:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800574c:	460c      	mov	r4, r1
 800574e:	2c63      	cmp	r4, #99	; 0x63
 8005750:	f102 32ff 	add.w	r2, r2, #4294967295
 8005754:	4629      	mov	r1, r5
 8005756:	dcf1      	bgt.n	800573c <__exponent+0x22>
 8005758:	3130      	adds	r1, #48	; 0x30
 800575a:	f1ac 0402 	sub.w	r4, ip, #2
 800575e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005762:	1c41      	adds	r1, r0, #1
 8005764:	4622      	mov	r2, r4
 8005766:	42ba      	cmp	r2, r7
 8005768:	d30a      	bcc.n	8005780 <__exponent+0x66>
 800576a:	f10d 0209 	add.w	r2, sp, #9
 800576e:	eba2 020c 	sub.w	r2, r2, ip
 8005772:	42bc      	cmp	r4, r7
 8005774:	bf88      	it	hi
 8005776:	2200      	movhi	r2, #0
 8005778:	4413      	add	r3, r2
 800577a:	1a18      	subs	r0, r3, r0
 800577c:	b003      	add	sp, #12
 800577e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005780:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005784:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005788:	e7ed      	b.n	8005766 <__exponent+0x4c>
 800578a:	2330      	movs	r3, #48	; 0x30
 800578c:	3130      	adds	r1, #48	; 0x30
 800578e:	7083      	strb	r3, [r0, #2]
 8005790:	70c1      	strb	r1, [r0, #3]
 8005792:	1d03      	adds	r3, r0, #4
 8005794:	e7f1      	b.n	800577a <__exponent+0x60>
	...

08005798 <_printf_float>:
 8005798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579c:	ed2d 8b02 	vpush	{d8}
 80057a0:	b08d      	sub	sp, #52	; 0x34
 80057a2:	460c      	mov	r4, r1
 80057a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80057a8:	4616      	mov	r6, r2
 80057aa:	461f      	mov	r7, r3
 80057ac:	4605      	mov	r5, r0
 80057ae:	f001 f82d 	bl	800680c <_localeconv_r>
 80057b2:	f8d0 a000 	ldr.w	sl, [r0]
 80057b6:	4650      	mov	r0, sl
 80057b8:	f7fa fd62 	bl	8000280 <strlen>
 80057bc:	2300      	movs	r3, #0
 80057be:	930a      	str	r3, [sp, #40]	; 0x28
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	9305      	str	r3, [sp, #20]
 80057c4:	f8d8 3000 	ldr.w	r3, [r8]
 80057c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80057cc:	3307      	adds	r3, #7
 80057ce:	f023 0307 	bic.w	r3, r3, #7
 80057d2:	f103 0208 	add.w	r2, r3, #8
 80057d6:	f8c8 2000 	str.w	r2, [r8]
 80057da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057e2:	9307      	str	r3, [sp, #28]
 80057e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80057e8:	ee08 0a10 	vmov	s16, r0
 80057ec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80057f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057f4:	4b9e      	ldr	r3, [pc, #632]	; (8005a70 <_printf_float+0x2d8>)
 80057f6:	f04f 32ff 	mov.w	r2, #4294967295
 80057fa:	f7fb f99f 	bl	8000b3c <__aeabi_dcmpun>
 80057fe:	bb88      	cbnz	r0, 8005864 <_printf_float+0xcc>
 8005800:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005804:	4b9a      	ldr	r3, [pc, #616]	; (8005a70 <_printf_float+0x2d8>)
 8005806:	f04f 32ff 	mov.w	r2, #4294967295
 800580a:	f7fb f979 	bl	8000b00 <__aeabi_dcmple>
 800580e:	bb48      	cbnz	r0, 8005864 <_printf_float+0xcc>
 8005810:	2200      	movs	r2, #0
 8005812:	2300      	movs	r3, #0
 8005814:	4640      	mov	r0, r8
 8005816:	4649      	mov	r1, r9
 8005818:	f7fb f968 	bl	8000aec <__aeabi_dcmplt>
 800581c:	b110      	cbz	r0, 8005824 <_printf_float+0x8c>
 800581e:	232d      	movs	r3, #45	; 0x2d
 8005820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005824:	4a93      	ldr	r2, [pc, #588]	; (8005a74 <_printf_float+0x2dc>)
 8005826:	4b94      	ldr	r3, [pc, #592]	; (8005a78 <_printf_float+0x2e0>)
 8005828:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800582c:	bf94      	ite	ls
 800582e:	4690      	movls	r8, r2
 8005830:	4698      	movhi	r8, r3
 8005832:	2303      	movs	r3, #3
 8005834:	6123      	str	r3, [r4, #16]
 8005836:	9b05      	ldr	r3, [sp, #20]
 8005838:	f023 0304 	bic.w	r3, r3, #4
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	f04f 0900 	mov.w	r9, #0
 8005842:	9700      	str	r7, [sp, #0]
 8005844:	4633      	mov	r3, r6
 8005846:	aa0b      	add	r2, sp, #44	; 0x2c
 8005848:	4621      	mov	r1, r4
 800584a:	4628      	mov	r0, r5
 800584c:	f000 f9da 	bl	8005c04 <_printf_common>
 8005850:	3001      	adds	r0, #1
 8005852:	f040 8090 	bne.w	8005976 <_printf_float+0x1de>
 8005856:	f04f 30ff 	mov.w	r0, #4294967295
 800585a:	b00d      	add	sp, #52	; 0x34
 800585c:	ecbd 8b02 	vpop	{d8}
 8005860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005864:	4642      	mov	r2, r8
 8005866:	464b      	mov	r3, r9
 8005868:	4640      	mov	r0, r8
 800586a:	4649      	mov	r1, r9
 800586c:	f7fb f966 	bl	8000b3c <__aeabi_dcmpun>
 8005870:	b140      	cbz	r0, 8005884 <_printf_float+0xec>
 8005872:	464b      	mov	r3, r9
 8005874:	2b00      	cmp	r3, #0
 8005876:	bfbc      	itt	lt
 8005878:	232d      	movlt	r3, #45	; 0x2d
 800587a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800587e:	4a7f      	ldr	r2, [pc, #508]	; (8005a7c <_printf_float+0x2e4>)
 8005880:	4b7f      	ldr	r3, [pc, #508]	; (8005a80 <_printf_float+0x2e8>)
 8005882:	e7d1      	b.n	8005828 <_printf_float+0x90>
 8005884:	6863      	ldr	r3, [r4, #4]
 8005886:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800588a:	9206      	str	r2, [sp, #24]
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	d13f      	bne.n	8005910 <_printf_float+0x178>
 8005890:	2306      	movs	r3, #6
 8005892:	6063      	str	r3, [r4, #4]
 8005894:	9b05      	ldr	r3, [sp, #20]
 8005896:	6861      	ldr	r1, [r4, #4]
 8005898:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800589c:	2300      	movs	r3, #0
 800589e:	9303      	str	r3, [sp, #12]
 80058a0:	ab0a      	add	r3, sp, #40	; 0x28
 80058a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80058a6:	ab09      	add	r3, sp, #36	; 0x24
 80058a8:	ec49 8b10 	vmov	d0, r8, r9
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	6022      	str	r2, [r4, #0]
 80058b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058b4:	4628      	mov	r0, r5
 80058b6:	f7ff fece 	bl	8005656 <__cvt>
 80058ba:	9b06      	ldr	r3, [sp, #24]
 80058bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058be:	2b47      	cmp	r3, #71	; 0x47
 80058c0:	4680      	mov	r8, r0
 80058c2:	d108      	bne.n	80058d6 <_printf_float+0x13e>
 80058c4:	1cc8      	adds	r0, r1, #3
 80058c6:	db02      	blt.n	80058ce <_printf_float+0x136>
 80058c8:	6863      	ldr	r3, [r4, #4]
 80058ca:	4299      	cmp	r1, r3
 80058cc:	dd41      	ble.n	8005952 <_printf_float+0x1ba>
 80058ce:	f1ab 0302 	sub.w	r3, fp, #2
 80058d2:	fa5f fb83 	uxtb.w	fp, r3
 80058d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058da:	d820      	bhi.n	800591e <_printf_float+0x186>
 80058dc:	3901      	subs	r1, #1
 80058de:	465a      	mov	r2, fp
 80058e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058e4:	9109      	str	r1, [sp, #36]	; 0x24
 80058e6:	f7ff ff18 	bl	800571a <__exponent>
 80058ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058ec:	1813      	adds	r3, r2, r0
 80058ee:	2a01      	cmp	r2, #1
 80058f0:	4681      	mov	r9, r0
 80058f2:	6123      	str	r3, [r4, #16]
 80058f4:	dc02      	bgt.n	80058fc <_printf_float+0x164>
 80058f6:	6822      	ldr	r2, [r4, #0]
 80058f8:	07d2      	lsls	r2, r2, #31
 80058fa:	d501      	bpl.n	8005900 <_printf_float+0x168>
 80058fc:	3301      	adds	r3, #1
 80058fe:	6123      	str	r3, [r4, #16]
 8005900:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005904:	2b00      	cmp	r3, #0
 8005906:	d09c      	beq.n	8005842 <_printf_float+0xaa>
 8005908:	232d      	movs	r3, #45	; 0x2d
 800590a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800590e:	e798      	b.n	8005842 <_printf_float+0xaa>
 8005910:	9a06      	ldr	r2, [sp, #24]
 8005912:	2a47      	cmp	r2, #71	; 0x47
 8005914:	d1be      	bne.n	8005894 <_printf_float+0xfc>
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1bc      	bne.n	8005894 <_printf_float+0xfc>
 800591a:	2301      	movs	r3, #1
 800591c:	e7b9      	b.n	8005892 <_printf_float+0xfa>
 800591e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005922:	d118      	bne.n	8005956 <_printf_float+0x1be>
 8005924:	2900      	cmp	r1, #0
 8005926:	6863      	ldr	r3, [r4, #4]
 8005928:	dd0b      	ble.n	8005942 <_printf_float+0x1aa>
 800592a:	6121      	str	r1, [r4, #16]
 800592c:	b913      	cbnz	r3, 8005934 <_printf_float+0x19c>
 800592e:	6822      	ldr	r2, [r4, #0]
 8005930:	07d0      	lsls	r0, r2, #31
 8005932:	d502      	bpl.n	800593a <_printf_float+0x1a2>
 8005934:	3301      	adds	r3, #1
 8005936:	440b      	add	r3, r1
 8005938:	6123      	str	r3, [r4, #16]
 800593a:	65a1      	str	r1, [r4, #88]	; 0x58
 800593c:	f04f 0900 	mov.w	r9, #0
 8005940:	e7de      	b.n	8005900 <_printf_float+0x168>
 8005942:	b913      	cbnz	r3, 800594a <_printf_float+0x1b2>
 8005944:	6822      	ldr	r2, [r4, #0]
 8005946:	07d2      	lsls	r2, r2, #31
 8005948:	d501      	bpl.n	800594e <_printf_float+0x1b6>
 800594a:	3302      	adds	r3, #2
 800594c:	e7f4      	b.n	8005938 <_printf_float+0x1a0>
 800594e:	2301      	movs	r3, #1
 8005950:	e7f2      	b.n	8005938 <_printf_float+0x1a0>
 8005952:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005958:	4299      	cmp	r1, r3
 800595a:	db05      	blt.n	8005968 <_printf_float+0x1d0>
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	6121      	str	r1, [r4, #16]
 8005960:	07d8      	lsls	r0, r3, #31
 8005962:	d5ea      	bpl.n	800593a <_printf_float+0x1a2>
 8005964:	1c4b      	adds	r3, r1, #1
 8005966:	e7e7      	b.n	8005938 <_printf_float+0x1a0>
 8005968:	2900      	cmp	r1, #0
 800596a:	bfd4      	ite	le
 800596c:	f1c1 0202 	rsble	r2, r1, #2
 8005970:	2201      	movgt	r2, #1
 8005972:	4413      	add	r3, r2
 8005974:	e7e0      	b.n	8005938 <_printf_float+0x1a0>
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	055a      	lsls	r2, r3, #21
 800597a:	d407      	bmi.n	800598c <_printf_float+0x1f4>
 800597c:	6923      	ldr	r3, [r4, #16]
 800597e:	4642      	mov	r2, r8
 8005980:	4631      	mov	r1, r6
 8005982:	4628      	mov	r0, r5
 8005984:	47b8      	blx	r7
 8005986:	3001      	adds	r0, #1
 8005988:	d12c      	bne.n	80059e4 <_printf_float+0x24c>
 800598a:	e764      	b.n	8005856 <_printf_float+0xbe>
 800598c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005990:	f240 80e0 	bls.w	8005b54 <_printf_float+0x3bc>
 8005994:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005998:	2200      	movs	r2, #0
 800599a:	2300      	movs	r3, #0
 800599c:	f7fb f89c 	bl	8000ad8 <__aeabi_dcmpeq>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d034      	beq.n	8005a0e <_printf_float+0x276>
 80059a4:	4a37      	ldr	r2, [pc, #220]	; (8005a84 <_printf_float+0x2ec>)
 80059a6:	2301      	movs	r3, #1
 80059a8:	4631      	mov	r1, r6
 80059aa:	4628      	mov	r0, r5
 80059ac:	47b8      	blx	r7
 80059ae:	3001      	adds	r0, #1
 80059b0:	f43f af51 	beq.w	8005856 <_printf_float+0xbe>
 80059b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059b8:	429a      	cmp	r2, r3
 80059ba:	db02      	blt.n	80059c2 <_printf_float+0x22a>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	07d8      	lsls	r0, r3, #31
 80059c0:	d510      	bpl.n	80059e4 <_printf_float+0x24c>
 80059c2:	ee18 3a10 	vmov	r3, s16
 80059c6:	4652      	mov	r2, sl
 80059c8:	4631      	mov	r1, r6
 80059ca:	4628      	mov	r0, r5
 80059cc:	47b8      	blx	r7
 80059ce:	3001      	adds	r0, #1
 80059d0:	f43f af41 	beq.w	8005856 <_printf_float+0xbe>
 80059d4:	f04f 0800 	mov.w	r8, #0
 80059d8:	f104 091a 	add.w	r9, r4, #26
 80059dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059de:	3b01      	subs	r3, #1
 80059e0:	4543      	cmp	r3, r8
 80059e2:	dc09      	bgt.n	80059f8 <_printf_float+0x260>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	079b      	lsls	r3, r3, #30
 80059e8:	f100 8107 	bmi.w	8005bfa <_printf_float+0x462>
 80059ec:	68e0      	ldr	r0, [r4, #12]
 80059ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059f0:	4298      	cmp	r0, r3
 80059f2:	bfb8      	it	lt
 80059f4:	4618      	movlt	r0, r3
 80059f6:	e730      	b.n	800585a <_printf_float+0xc2>
 80059f8:	2301      	movs	r3, #1
 80059fa:	464a      	mov	r2, r9
 80059fc:	4631      	mov	r1, r6
 80059fe:	4628      	mov	r0, r5
 8005a00:	47b8      	blx	r7
 8005a02:	3001      	adds	r0, #1
 8005a04:	f43f af27 	beq.w	8005856 <_printf_float+0xbe>
 8005a08:	f108 0801 	add.w	r8, r8, #1
 8005a0c:	e7e6      	b.n	80059dc <_printf_float+0x244>
 8005a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	dc39      	bgt.n	8005a88 <_printf_float+0x2f0>
 8005a14:	4a1b      	ldr	r2, [pc, #108]	; (8005a84 <_printf_float+0x2ec>)
 8005a16:	2301      	movs	r3, #1
 8005a18:	4631      	mov	r1, r6
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	47b8      	blx	r7
 8005a1e:	3001      	adds	r0, #1
 8005a20:	f43f af19 	beq.w	8005856 <_printf_float+0xbe>
 8005a24:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	d102      	bne.n	8005a32 <_printf_float+0x29a>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	07d9      	lsls	r1, r3, #31
 8005a30:	d5d8      	bpl.n	80059e4 <_printf_float+0x24c>
 8005a32:	ee18 3a10 	vmov	r3, s16
 8005a36:	4652      	mov	r2, sl
 8005a38:	4631      	mov	r1, r6
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	47b8      	blx	r7
 8005a3e:	3001      	adds	r0, #1
 8005a40:	f43f af09 	beq.w	8005856 <_printf_float+0xbe>
 8005a44:	f04f 0900 	mov.w	r9, #0
 8005a48:	f104 0a1a 	add.w	sl, r4, #26
 8005a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a4e:	425b      	negs	r3, r3
 8005a50:	454b      	cmp	r3, r9
 8005a52:	dc01      	bgt.n	8005a58 <_printf_float+0x2c0>
 8005a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a56:	e792      	b.n	800597e <_printf_float+0x1e6>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	4652      	mov	r2, sl
 8005a5c:	4631      	mov	r1, r6
 8005a5e:	4628      	mov	r0, r5
 8005a60:	47b8      	blx	r7
 8005a62:	3001      	adds	r0, #1
 8005a64:	f43f aef7 	beq.w	8005856 <_printf_float+0xbe>
 8005a68:	f109 0901 	add.w	r9, r9, #1
 8005a6c:	e7ee      	b.n	8005a4c <_printf_float+0x2b4>
 8005a6e:	bf00      	nop
 8005a70:	7fefffff 	.word	0x7fefffff
 8005a74:	0800a1d0 	.word	0x0800a1d0
 8005a78:	0800a1d4 	.word	0x0800a1d4
 8005a7c:	0800a1d8 	.word	0x0800a1d8
 8005a80:	0800a1dc 	.word	0x0800a1dc
 8005a84:	0800a1e0 	.word	0x0800a1e0
 8005a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	bfa8      	it	ge
 8005a90:	461a      	movge	r2, r3
 8005a92:	2a00      	cmp	r2, #0
 8005a94:	4691      	mov	r9, r2
 8005a96:	dc37      	bgt.n	8005b08 <_printf_float+0x370>
 8005a98:	f04f 0b00 	mov.w	fp, #0
 8005a9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aa0:	f104 021a 	add.w	r2, r4, #26
 8005aa4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005aa6:	9305      	str	r3, [sp, #20]
 8005aa8:	eba3 0309 	sub.w	r3, r3, r9
 8005aac:	455b      	cmp	r3, fp
 8005aae:	dc33      	bgt.n	8005b18 <_printf_float+0x380>
 8005ab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	db3b      	blt.n	8005b30 <_printf_float+0x398>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	07da      	lsls	r2, r3, #31
 8005abc:	d438      	bmi.n	8005b30 <_printf_float+0x398>
 8005abe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005ac2:	eba2 0903 	sub.w	r9, r2, r3
 8005ac6:	9b05      	ldr	r3, [sp, #20]
 8005ac8:	1ad2      	subs	r2, r2, r3
 8005aca:	4591      	cmp	r9, r2
 8005acc:	bfa8      	it	ge
 8005ace:	4691      	movge	r9, r2
 8005ad0:	f1b9 0f00 	cmp.w	r9, #0
 8005ad4:	dc35      	bgt.n	8005b42 <_printf_float+0x3aa>
 8005ad6:	f04f 0800 	mov.w	r8, #0
 8005ada:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ade:	f104 0a1a 	add.w	sl, r4, #26
 8005ae2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ae6:	1a9b      	subs	r3, r3, r2
 8005ae8:	eba3 0309 	sub.w	r3, r3, r9
 8005aec:	4543      	cmp	r3, r8
 8005aee:	f77f af79 	ble.w	80059e4 <_printf_float+0x24c>
 8005af2:	2301      	movs	r3, #1
 8005af4:	4652      	mov	r2, sl
 8005af6:	4631      	mov	r1, r6
 8005af8:	4628      	mov	r0, r5
 8005afa:	47b8      	blx	r7
 8005afc:	3001      	adds	r0, #1
 8005afe:	f43f aeaa 	beq.w	8005856 <_printf_float+0xbe>
 8005b02:	f108 0801 	add.w	r8, r8, #1
 8005b06:	e7ec      	b.n	8005ae2 <_printf_float+0x34a>
 8005b08:	4613      	mov	r3, r2
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	4628      	mov	r0, r5
 8005b10:	47b8      	blx	r7
 8005b12:	3001      	adds	r0, #1
 8005b14:	d1c0      	bne.n	8005a98 <_printf_float+0x300>
 8005b16:	e69e      	b.n	8005856 <_printf_float+0xbe>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	9205      	str	r2, [sp, #20]
 8005b20:	47b8      	blx	r7
 8005b22:	3001      	adds	r0, #1
 8005b24:	f43f ae97 	beq.w	8005856 <_printf_float+0xbe>
 8005b28:	9a05      	ldr	r2, [sp, #20]
 8005b2a:	f10b 0b01 	add.w	fp, fp, #1
 8005b2e:	e7b9      	b.n	8005aa4 <_printf_float+0x30c>
 8005b30:	ee18 3a10 	vmov	r3, s16
 8005b34:	4652      	mov	r2, sl
 8005b36:	4631      	mov	r1, r6
 8005b38:	4628      	mov	r0, r5
 8005b3a:	47b8      	blx	r7
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d1be      	bne.n	8005abe <_printf_float+0x326>
 8005b40:	e689      	b.n	8005856 <_printf_float+0xbe>
 8005b42:	9a05      	ldr	r2, [sp, #20]
 8005b44:	464b      	mov	r3, r9
 8005b46:	4442      	add	r2, r8
 8005b48:	4631      	mov	r1, r6
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	47b8      	blx	r7
 8005b4e:	3001      	adds	r0, #1
 8005b50:	d1c1      	bne.n	8005ad6 <_printf_float+0x33e>
 8005b52:	e680      	b.n	8005856 <_printf_float+0xbe>
 8005b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b56:	2a01      	cmp	r2, #1
 8005b58:	dc01      	bgt.n	8005b5e <_printf_float+0x3c6>
 8005b5a:	07db      	lsls	r3, r3, #31
 8005b5c:	d53a      	bpl.n	8005bd4 <_printf_float+0x43c>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	4642      	mov	r2, r8
 8005b62:	4631      	mov	r1, r6
 8005b64:	4628      	mov	r0, r5
 8005b66:	47b8      	blx	r7
 8005b68:	3001      	adds	r0, #1
 8005b6a:	f43f ae74 	beq.w	8005856 <_printf_float+0xbe>
 8005b6e:	ee18 3a10 	vmov	r3, s16
 8005b72:	4652      	mov	r2, sl
 8005b74:	4631      	mov	r1, r6
 8005b76:	4628      	mov	r0, r5
 8005b78:	47b8      	blx	r7
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	f43f ae6b 	beq.w	8005856 <_printf_float+0xbe>
 8005b80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b84:	2200      	movs	r2, #0
 8005b86:	2300      	movs	r3, #0
 8005b88:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005b8c:	f7fa ffa4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b90:	b9d8      	cbnz	r0, 8005bca <_printf_float+0x432>
 8005b92:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b96:	f108 0201 	add.w	r2, r8, #1
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	47b8      	blx	r7
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d10e      	bne.n	8005bc2 <_printf_float+0x42a>
 8005ba4:	e657      	b.n	8005856 <_printf_float+0xbe>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	4652      	mov	r2, sl
 8005baa:	4631      	mov	r1, r6
 8005bac:	4628      	mov	r0, r5
 8005bae:	47b8      	blx	r7
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	f43f ae50 	beq.w	8005856 <_printf_float+0xbe>
 8005bb6:	f108 0801 	add.w	r8, r8, #1
 8005bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	4543      	cmp	r3, r8
 8005bc0:	dcf1      	bgt.n	8005ba6 <_printf_float+0x40e>
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bc8:	e6da      	b.n	8005980 <_printf_float+0x1e8>
 8005bca:	f04f 0800 	mov.w	r8, #0
 8005bce:	f104 0a1a 	add.w	sl, r4, #26
 8005bd2:	e7f2      	b.n	8005bba <_printf_float+0x422>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	4642      	mov	r2, r8
 8005bd8:	e7df      	b.n	8005b9a <_printf_float+0x402>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	464a      	mov	r2, r9
 8005bde:	4631      	mov	r1, r6
 8005be0:	4628      	mov	r0, r5
 8005be2:	47b8      	blx	r7
 8005be4:	3001      	adds	r0, #1
 8005be6:	f43f ae36 	beq.w	8005856 <_printf_float+0xbe>
 8005bea:	f108 0801 	add.w	r8, r8, #1
 8005bee:	68e3      	ldr	r3, [r4, #12]
 8005bf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bf2:	1a5b      	subs	r3, r3, r1
 8005bf4:	4543      	cmp	r3, r8
 8005bf6:	dcf0      	bgt.n	8005bda <_printf_float+0x442>
 8005bf8:	e6f8      	b.n	80059ec <_printf_float+0x254>
 8005bfa:	f04f 0800 	mov.w	r8, #0
 8005bfe:	f104 0919 	add.w	r9, r4, #25
 8005c02:	e7f4      	b.n	8005bee <_printf_float+0x456>

08005c04 <_printf_common>:
 8005c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c08:	4616      	mov	r6, r2
 8005c0a:	4699      	mov	r9, r3
 8005c0c:	688a      	ldr	r2, [r1, #8]
 8005c0e:	690b      	ldr	r3, [r1, #16]
 8005c10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c14:	4293      	cmp	r3, r2
 8005c16:	bfb8      	it	lt
 8005c18:	4613      	movlt	r3, r2
 8005c1a:	6033      	str	r3, [r6, #0]
 8005c1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c20:	4607      	mov	r7, r0
 8005c22:	460c      	mov	r4, r1
 8005c24:	b10a      	cbz	r2, 8005c2a <_printf_common+0x26>
 8005c26:	3301      	adds	r3, #1
 8005c28:	6033      	str	r3, [r6, #0]
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	0699      	lsls	r1, r3, #26
 8005c2e:	bf42      	ittt	mi
 8005c30:	6833      	ldrmi	r3, [r6, #0]
 8005c32:	3302      	addmi	r3, #2
 8005c34:	6033      	strmi	r3, [r6, #0]
 8005c36:	6825      	ldr	r5, [r4, #0]
 8005c38:	f015 0506 	ands.w	r5, r5, #6
 8005c3c:	d106      	bne.n	8005c4c <_printf_common+0x48>
 8005c3e:	f104 0a19 	add.w	sl, r4, #25
 8005c42:	68e3      	ldr	r3, [r4, #12]
 8005c44:	6832      	ldr	r2, [r6, #0]
 8005c46:	1a9b      	subs	r3, r3, r2
 8005c48:	42ab      	cmp	r3, r5
 8005c4a:	dc26      	bgt.n	8005c9a <_printf_common+0x96>
 8005c4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c50:	1e13      	subs	r3, r2, #0
 8005c52:	6822      	ldr	r2, [r4, #0]
 8005c54:	bf18      	it	ne
 8005c56:	2301      	movne	r3, #1
 8005c58:	0692      	lsls	r2, r2, #26
 8005c5a:	d42b      	bmi.n	8005cb4 <_printf_common+0xb0>
 8005c5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c60:	4649      	mov	r1, r9
 8005c62:	4638      	mov	r0, r7
 8005c64:	47c0      	blx	r8
 8005c66:	3001      	adds	r0, #1
 8005c68:	d01e      	beq.n	8005ca8 <_printf_common+0xa4>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	6922      	ldr	r2, [r4, #16]
 8005c6e:	f003 0306 	and.w	r3, r3, #6
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	bf02      	ittt	eq
 8005c76:	68e5      	ldreq	r5, [r4, #12]
 8005c78:	6833      	ldreq	r3, [r6, #0]
 8005c7a:	1aed      	subeq	r5, r5, r3
 8005c7c:	68a3      	ldr	r3, [r4, #8]
 8005c7e:	bf0c      	ite	eq
 8005c80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c84:	2500      	movne	r5, #0
 8005c86:	4293      	cmp	r3, r2
 8005c88:	bfc4      	itt	gt
 8005c8a:	1a9b      	subgt	r3, r3, r2
 8005c8c:	18ed      	addgt	r5, r5, r3
 8005c8e:	2600      	movs	r6, #0
 8005c90:	341a      	adds	r4, #26
 8005c92:	42b5      	cmp	r5, r6
 8005c94:	d11a      	bne.n	8005ccc <_printf_common+0xc8>
 8005c96:	2000      	movs	r0, #0
 8005c98:	e008      	b.n	8005cac <_printf_common+0xa8>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	4652      	mov	r2, sl
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	4638      	mov	r0, r7
 8005ca2:	47c0      	blx	r8
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d103      	bne.n	8005cb0 <_printf_common+0xac>
 8005ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb0:	3501      	adds	r5, #1
 8005cb2:	e7c6      	b.n	8005c42 <_printf_common+0x3e>
 8005cb4:	18e1      	adds	r1, r4, r3
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	2030      	movs	r0, #48	; 0x30
 8005cba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cbe:	4422      	add	r2, r4
 8005cc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cc8:	3302      	adds	r3, #2
 8005cca:	e7c7      	b.n	8005c5c <_printf_common+0x58>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	4622      	mov	r2, r4
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	47c0      	blx	r8
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	d0e6      	beq.n	8005ca8 <_printf_common+0xa4>
 8005cda:	3601      	adds	r6, #1
 8005cdc:	e7d9      	b.n	8005c92 <_printf_common+0x8e>
	...

08005ce0 <_printf_i>:
 8005ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce4:	7e0f      	ldrb	r7, [r1, #24]
 8005ce6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ce8:	2f78      	cmp	r7, #120	; 0x78
 8005cea:	4691      	mov	r9, r2
 8005cec:	4680      	mov	r8, r0
 8005cee:	460c      	mov	r4, r1
 8005cf0:	469a      	mov	sl, r3
 8005cf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cf6:	d807      	bhi.n	8005d08 <_printf_i+0x28>
 8005cf8:	2f62      	cmp	r7, #98	; 0x62
 8005cfa:	d80a      	bhi.n	8005d12 <_printf_i+0x32>
 8005cfc:	2f00      	cmp	r7, #0
 8005cfe:	f000 80d4 	beq.w	8005eaa <_printf_i+0x1ca>
 8005d02:	2f58      	cmp	r7, #88	; 0x58
 8005d04:	f000 80c0 	beq.w	8005e88 <_printf_i+0x1a8>
 8005d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d10:	e03a      	b.n	8005d88 <_printf_i+0xa8>
 8005d12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d16:	2b15      	cmp	r3, #21
 8005d18:	d8f6      	bhi.n	8005d08 <_printf_i+0x28>
 8005d1a:	a101      	add	r1, pc, #4	; (adr r1, 8005d20 <_printf_i+0x40>)
 8005d1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d20:	08005d79 	.word	0x08005d79
 8005d24:	08005d8d 	.word	0x08005d8d
 8005d28:	08005d09 	.word	0x08005d09
 8005d2c:	08005d09 	.word	0x08005d09
 8005d30:	08005d09 	.word	0x08005d09
 8005d34:	08005d09 	.word	0x08005d09
 8005d38:	08005d8d 	.word	0x08005d8d
 8005d3c:	08005d09 	.word	0x08005d09
 8005d40:	08005d09 	.word	0x08005d09
 8005d44:	08005d09 	.word	0x08005d09
 8005d48:	08005d09 	.word	0x08005d09
 8005d4c:	08005e91 	.word	0x08005e91
 8005d50:	08005db9 	.word	0x08005db9
 8005d54:	08005e4b 	.word	0x08005e4b
 8005d58:	08005d09 	.word	0x08005d09
 8005d5c:	08005d09 	.word	0x08005d09
 8005d60:	08005eb3 	.word	0x08005eb3
 8005d64:	08005d09 	.word	0x08005d09
 8005d68:	08005db9 	.word	0x08005db9
 8005d6c:	08005d09 	.word	0x08005d09
 8005d70:	08005d09 	.word	0x08005d09
 8005d74:	08005e53 	.word	0x08005e53
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	1d1a      	adds	r2, r3, #4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	602a      	str	r2, [r5, #0]
 8005d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e09f      	b.n	8005ecc <_printf_i+0x1ec>
 8005d8c:	6820      	ldr	r0, [r4, #0]
 8005d8e:	682b      	ldr	r3, [r5, #0]
 8005d90:	0607      	lsls	r7, r0, #24
 8005d92:	f103 0104 	add.w	r1, r3, #4
 8005d96:	6029      	str	r1, [r5, #0]
 8005d98:	d501      	bpl.n	8005d9e <_printf_i+0xbe>
 8005d9a:	681e      	ldr	r6, [r3, #0]
 8005d9c:	e003      	b.n	8005da6 <_printf_i+0xc6>
 8005d9e:	0646      	lsls	r6, r0, #25
 8005da0:	d5fb      	bpl.n	8005d9a <_printf_i+0xba>
 8005da2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005da6:	2e00      	cmp	r6, #0
 8005da8:	da03      	bge.n	8005db2 <_printf_i+0xd2>
 8005daa:	232d      	movs	r3, #45	; 0x2d
 8005dac:	4276      	negs	r6, r6
 8005dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005db2:	485a      	ldr	r0, [pc, #360]	; (8005f1c <_printf_i+0x23c>)
 8005db4:	230a      	movs	r3, #10
 8005db6:	e012      	b.n	8005dde <_printf_i+0xfe>
 8005db8:	682b      	ldr	r3, [r5, #0]
 8005dba:	6820      	ldr	r0, [r4, #0]
 8005dbc:	1d19      	adds	r1, r3, #4
 8005dbe:	6029      	str	r1, [r5, #0]
 8005dc0:	0605      	lsls	r5, r0, #24
 8005dc2:	d501      	bpl.n	8005dc8 <_printf_i+0xe8>
 8005dc4:	681e      	ldr	r6, [r3, #0]
 8005dc6:	e002      	b.n	8005dce <_printf_i+0xee>
 8005dc8:	0641      	lsls	r1, r0, #25
 8005dca:	d5fb      	bpl.n	8005dc4 <_printf_i+0xe4>
 8005dcc:	881e      	ldrh	r6, [r3, #0]
 8005dce:	4853      	ldr	r0, [pc, #332]	; (8005f1c <_printf_i+0x23c>)
 8005dd0:	2f6f      	cmp	r7, #111	; 0x6f
 8005dd2:	bf0c      	ite	eq
 8005dd4:	2308      	moveq	r3, #8
 8005dd6:	230a      	movne	r3, #10
 8005dd8:	2100      	movs	r1, #0
 8005dda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dde:	6865      	ldr	r5, [r4, #4]
 8005de0:	60a5      	str	r5, [r4, #8]
 8005de2:	2d00      	cmp	r5, #0
 8005de4:	bfa2      	ittt	ge
 8005de6:	6821      	ldrge	r1, [r4, #0]
 8005de8:	f021 0104 	bicge.w	r1, r1, #4
 8005dec:	6021      	strge	r1, [r4, #0]
 8005dee:	b90e      	cbnz	r6, 8005df4 <_printf_i+0x114>
 8005df0:	2d00      	cmp	r5, #0
 8005df2:	d04b      	beq.n	8005e8c <_printf_i+0x1ac>
 8005df4:	4615      	mov	r5, r2
 8005df6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dfa:	fb03 6711 	mls	r7, r3, r1, r6
 8005dfe:	5dc7      	ldrb	r7, [r0, r7]
 8005e00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e04:	4637      	mov	r7, r6
 8005e06:	42bb      	cmp	r3, r7
 8005e08:	460e      	mov	r6, r1
 8005e0a:	d9f4      	bls.n	8005df6 <_printf_i+0x116>
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d10b      	bne.n	8005e28 <_printf_i+0x148>
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	07de      	lsls	r6, r3, #31
 8005e14:	d508      	bpl.n	8005e28 <_printf_i+0x148>
 8005e16:	6923      	ldr	r3, [r4, #16]
 8005e18:	6861      	ldr	r1, [r4, #4]
 8005e1a:	4299      	cmp	r1, r3
 8005e1c:	bfde      	ittt	le
 8005e1e:	2330      	movle	r3, #48	; 0x30
 8005e20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e28:	1b52      	subs	r2, r2, r5
 8005e2a:	6122      	str	r2, [r4, #16]
 8005e2c:	f8cd a000 	str.w	sl, [sp]
 8005e30:	464b      	mov	r3, r9
 8005e32:	aa03      	add	r2, sp, #12
 8005e34:	4621      	mov	r1, r4
 8005e36:	4640      	mov	r0, r8
 8005e38:	f7ff fee4 	bl	8005c04 <_printf_common>
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d14a      	bne.n	8005ed6 <_printf_i+0x1f6>
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295
 8005e44:	b004      	add	sp, #16
 8005e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	f043 0320 	orr.w	r3, r3, #32
 8005e50:	6023      	str	r3, [r4, #0]
 8005e52:	4833      	ldr	r0, [pc, #204]	; (8005f20 <_printf_i+0x240>)
 8005e54:	2778      	movs	r7, #120	; 0x78
 8005e56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	6829      	ldr	r1, [r5, #0]
 8005e5e:	061f      	lsls	r7, r3, #24
 8005e60:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e64:	d402      	bmi.n	8005e6c <_printf_i+0x18c>
 8005e66:	065f      	lsls	r7, r3, #25
 8005e68:	bf48      	it	mi
 8005e6a:	b2b6      	uxthmi	r6, r6
 8005e6c:	07df      	lsls	r7, r3, #31
 8005e6e:	bf48      	it	mi
 8005e70:	f043 0320 	orrmi.w	r3, r3, #32
 8005e74:	6029      	str	r1, [r5, #0]
 8005e76:	bf48      	it	mi
 8005e78:	6023      	strmi	r3, [r4, #0]
 8005e7a:	b91e      	cbnz	r6, 8005e84 <_printf_i+0x1a4>
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	f023 0320 	bic.w	r3, r3, #32
 8005e82:	6023      	str	r3, [r4, #0]
 8005e84:	2310      	movs	r3, #16
 8005e86:	e7a7      	b.n	8005dd8 <_printf_i+0xf8>
 8005e88:	4824      	ldr	r0, [pc, #144]	; (8005f1c <_printf_i+0x23c>)
 8005e8a:	e7e4      	b.n	8005e56 <_printf_i+0x176>
 8005e8c:	4615      	mov	r5, r2
 8005e8e:	e7bd      	b.n	8005e0c <_printf_i+0x12c>
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	6826      	ldr	r6, [r4, #0]
 8005e94:	6961      	ldr	r1, [r4, #20]
 8005e96:	1d18      	adds	r0, r3, #4
 8005e98:	6028      	str	r0, [r5, #0]
 8005e9a:	0635      	lsls	r5, r6, #24
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	d501      	bpl.n	8005ea4 <_printf_i+0x1c4>
 8005ea0:	6019      	str	r1, [r3, #0]
 8005ea2:	e002      	b.n	8005eaa <_printf_i+0x1ca>
 8005ea4:	0670      	lsls	r0, r6, #25
 8005ea6:	d5fb      	bpl.n	8005ea0 <_printf_i+0x1c0>
 8005ea8:	8019      	strh	r1, [r3, #0]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	6123      	str	r3, [r4, #16]
 8005eae:	4615      	mov	r5, r2
 8005eb0:	e7bc      	b.n	8005e2c <_printf_i+0x14c>
 8005eb2:	682b      	ldr	r3, [r5, #0]
 8005eb4:	1d1a      	adds	r2, r3, #4
 8005eb6:	602a      	str	r2, [r5, #0]
 8005eb8:	681d      	ldr	r5, [r3, #0]
 8005eba:	6862      	ldr	r2, [r4, #4]
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f7fa f98e 	bl	80001e0 <memchr>
 8005ec4:	b108      	cbz	r0, 8005eca <_printf_i+0x1ea>
 8005ec6:	1b40      	subs	r0, r0, r5
 8005ec8:	6060      	str	r0, [r4, #4]
 8005eca:	6863      	ldr	r3, [r4, #4]
 8005ecc:	6123      	str	r3, [r4, #16]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ed4:	e7aa      	b.n	8005e2c <_printf_i+0x14c>
 8005ed6:	6923      	ldr	r3, [r4, #16]
 8005ed8:	462a      	mov	r2, r5
 8005eda:	4649      	mov	r1, r9
 8005edc:	4640      	mov	r0, r8
 8005ede:	47d0      	blx	sl
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d0ad      	beq.n	8005e40 <_printf_i+0x160>
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	079b      	lsls	r3, r3, #30
 8005ee8:	d413      	bmi.n	8005f12 <_printf_i+0x232>
 8005eea:	68e0      	ldr	r0, [r4, #12]
 8005eec:	9b03      	ldr	r3, [sp, #12]
 8005eee:	4298      	cmp	r0, r3
 8005ef0:	bfb8      	it	lt
 8005ef2:	4618      	movlt	r0, r3
 8005ef4:	e7a6      	b.n	8005e44 <_printf_i+0x164>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	4632      	mov	r2, r6
 8005efa:	4649      	mov	r1, r9
 8005efc:	4640      	mov	r0, r8
 8005efe:	47d0      	blx	sl
 8005f00:	3001      	adds	r0, #1
 8005f02:	d09d      	beq.n	8005e40 <_printf_i+0x160>
 8005f04:	3501      	adds	r5, #1
 8005f06:	68e3      	ldr	r3, [r4, #12]
 8005f08:	9903      	ldr	r1, [sp, #12]
 8005f0a:	1a5b      	subs	r3, r3, r1
 8005f0c:	42ab      	cmp	r3, r5
 8005f0e:	dcf2      	bgt.n	8005ef6 <_printf_i+0x216>
 8005f10:	e7eb      	b.n	8005eea <_printf_i+0x20a>
 8005f12:	2500      	movs	r5, #0
 8005f14:	f104 0619 	add.w	r6, r4, #25
 8005f18:	e7f5      	b.n	8005f06 <_printf_i+0x226>
 8005f1a:	bf00      	nop
 8005f1c:	0800a1e2 	.word	0x0800a1e2
 8005f20:	0800a1f3 	.word	0x0800a1f3

08005f24 <_scanf_float>:
 8005f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f28:	b087      	sub	sp, #28
 8005f2a:	4617      	mov	r7, r2
 8005f2c:	9303      	str	r3, [sp, #12]
 8005f2e:	688b      	ldr	r3, [r1, #8]
 8005f30:	1e5a      	subs	r2, r3, #1
 8005f32:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005f36:	bf83      	ittte	hi
 8005f38:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005f3c:	195b      	addhi	r3, r3, r5
 8005f3e:	9302      	strhi	r3, [sp, #8]
 8005f40:	2300      	movls	r3, #0
 8005f42:	bf86      	itte	hi
 8005f44:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005f48:	608b      	strhi	r3, [r1, #8]
 8005f4a:	9302      	strls	r3, [sp, #8]
 8005f4c:	680b      	ldr	r3, [r1, #0]
 8005f4e:	468b      	mov	fp, r1
 8005f50:	2500      	movs	r5, #0
 8005f52:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005f56:	f84b 3b1c 	str.w	r3, [fp], #28
 8005f5a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005f5e:	4680      	mov	r8, r0
 8005f60:	460c      	mov	r4, r1
 8005f62:	465e      	mov	r6, fp
 8005f64:	46aa      	mov	sl, r5
 8005f66:	46a9      	mov	r9, r5
 8005f68:	9501      	str	r5, [sp, #4]
 8005f6a:	68a2      	ldr	r2, [r4, #8]
 8005f6c:	b152      	cbz	r2, 8005f84 <_scanf_float+0x60>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	2b4e      	cmp	r3, #78	; 0x4e
 8005f74:	d864      	bhi.n	8006040 <_scanf_float+0x11c>
 8005f76:	2b40      	cmp	r3, #64	; 0x40
 8005f78:	d83c      	bhi.n	8005ff4 <_scanf_float+0xd0>
 8005f7a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005f7e:	b2c8      	uxtb	r0, r1
 8005f80:	280e      	cmp	r0, #14
 8005f82:	d93a      	bls.n	8005ffa <_scanf_float+0xd6>
 8005f84:	f1b9 0f00 	cmp.w	r9, #0
 8005f88:	d003      	beq.n	8005f92 <_scanf_float+0x6e>
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f96:	f1ba 0f01 	cmp.w	sl, #1
 8005f9a:	f200 8113 	bhi.w	80061c4 <_scanf_float+0x2a0>
 8005f9e:	455e      	cmp	r6, fp
 8005fa0:	f200 8105 	bhi.w	80061ae <_scanf_float+0x28a>
 8005fa4:	2501      	movs	r5, #1
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	b007      	add	sp, #28
 8005faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005fb2:	2a0d      	cmp	r2, #13
 8005fb4:	d8e6      	bhi.n	8005f84 <_scanf_float+0x60>
 8005fb6:	a101      	add	r1, pc, #4	; (adr r1, 8005fbc <_scanf_float+0x98>)
 8005fb8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005fbc:	080060fb 	.word	0x080060fb
 8005fc0:	08005f85 	.word	0x08005f85
 8005fc4:	08005f85 	.word	0x08005f85
 8005fc8:	08005f85 	.word	0x08005f85
 8005fcc:	0800615b 	.word	0x0800615b
 8005fd0:	08006133 	.word	0x08006133
 8005fd4:	08005f85 	.word	0x08005f85
 8005fd8:	08005f85 	.word	0x08005f85
 8005fdc:	08006109 	.word	0x08006109
 8005fe0:	08005f85 	.word	0x08005f85
 8005fe4:	08005f85 	.word	0x08005f85
 8005fe8:	08005f85 	.word	0x08005f85
 8005fec:	08005f85 	.word	0x08005f85
 8005ff0:	080060c1 	.word	0x080060c1
 8005ff4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005ff8:	e7db      	b.n	8005fb2 <_scanf_float+0x8e>
 8005ffa:	290e      	cmp	r1, #14
 8005ffc:	d8c2      	bhi.n	8005f84 <_scanf_float+0x60>
 8005ffe:	a001      	add	r0, pc, #4	; (adr r0, 8006004 <_scanf_float+0xe0>)
 8006000:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006004:	080060b3 	.word	0x080060b3
 8006008:	08005f85 	.word	0x08005f85
 800600c:	080060b3 	.word	0x080060b3
 8006010:	08006147 	.word	0x08006147
 8006014:	08005f85 	.word	0x08005f85
 8006018:	08006061 	.word	0x08006061
 800601c:	0800609d 	.word	0x0800609d
 8006020:	0800609d 	.word	0x0800609d
 8006024:	0800609d 	.word	0x0800609d
 8006028:	0800609d 	.word	0x0800609d
 800602c:	0800609d 	.word	0x0800609d
 8006030:	0800609d 	.word	0x0800609d
 8006034:	0800609d 	.word	0x0800609d
 8006038:	0800609d 	.word	0x0800609d
 800603c:	0800609d 	.word	0x0800609d
 8006040:	2b6e      	cmp	r3, #110	; 0x6e
 8006042:	d809      	bhi.n	8006058 <_scanf_float+0x134>
 8006044:	2b60      	cmp	r3, #96	; 0x60
 8006046:	d8b2      	bhi.n	8005fae <_scanf_float+0x8a>
 8006048:	2b54      	cmp	r3, #84	; 0x54
 800604a:	d077      	beq.n	800613c <_scanf_float+0x218>
 800604c:	2b59      	cmp	r3, #89	; 0x59
 800604e:	d199      	bne.n	8005f84 <_scanf_float+0x60>
 8006050:	2d07      	cmp	r5, #7
 8006052:	d197      	bne.n	8005f84 <_scanf_float+0x60>
 8006054:	2508      	movs	r5, #8
 8006056:	e029      	b.n	80060ac <_scanf_float+0x188>
 8006058:	2b74      	cmp	r3, #116	; 0x74
 800605a:	d06f      	beq.n	800613c <_scanf_float+0x218>
 800605c:	2b79      	cmp	r3, #121	; 0x79
 800605e:	e7f6      	b.n	800604e <_scanf_float+0x12a>
 8006060:	6821      	ldr	r1, [r4, #0]
 8006062:	05c8      	lsls	r0, r1, #23
 8006064:	d51a      	bpl.n	800609c <_scanf_float+0x178>
 8006066:	9b02      	ldr	r3, [sp, #8]
 8006068:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800606c:	6021      	str	r1, [r4, #0]
 800606e:	f109 0901 	add.w	r9, r9, #1
 8006072:	b11b      	cbz	r3, 800607c <_scanf_float+0x158>
 8006074:	3b01      	subs	r3, #1
 8006076:	3201      	adds	r2, #1
 8006078:	9302      	str	r3, [sp, #8]
 800607a:	60a2      	str	r2, [r4, #8]
 800607c:	68a3      	ldr	r3, [r4, #8]
 800607e:	3b01      	subs	r3, #1
 8006080:	60a3      	str	r3, [r4, #8]
 8006082:	6923      	ldr	r3, [r4, #16]
 8006084:	3301      	adds	r3, #1
 8006086:	6123      	str	r3, [r4, #16]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	3b01      	subs	r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	607b      	str	r3, [r7, #4]
 8006090:	f340 8084 	ble.w	800619c <_scanf_float+0x278>
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	3301      	adds	r3, #1
 8006098:	603b      	str	r3, [r7, #0]
 800609a:	e766      	b.n	8005f6a <_scanf_float+0x46>
 800609c:	eb1a 0f05 	cmn.w	sl, r5
 80060a0:	f47f af70 	bne.w	8005f84 <_scanf_float+0x60>
 80060a4:	6822      	ldr	r2, [r4, #0]
 80060a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80060aa:	6022      	str	r2, [r4, #0]
 80060ac:	f806 3b01 	strb.w	r3, [r6], #1
 80060b0:	e7e4      	b.n	800607c <_scanf_float+0x158>
 80060b2:	6822      	ldr	r2, [r4, #0]
 80060b4:	0610      	lsls	r0, r2, #24
 80060b6:	f57f af65 	bpl.w	8005f84 <_scanf_float+0x60>
 80060ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060be:	e7f4      	b.n	80060aa <_scanf_float+0x186>
 80060c0:	f1ba 0f00 	cmp.w	sl, #0
 80060c4:	d10e      	bne.n	80060e4 <_scanf_float+0x1c0>
 80060c6:	f1b9 0f00 	cmp.w	r9, #0
 80060ca:	d10e      	bne.n	80060ea <_scanf_float+0x1c6>
 80060cc:	6822      	ldr	r2, [r4, #0]
 80060ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80060d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80060d6:	d108      	bne.n	80060ea <_scanf_float+0x1c6>
 80060d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80060dc:	6022      	str	r2, [r4, #0]
 80060de:	f04f 0a01 	mov.w	sl, #1
 80060e2:	e7e3      	b.n	80060ac <_scanf_float+0x188>
 80060e4:	f1ba 0f02 	cmp.w	sl, #2
 80060e8:	d055      	beq.n	8006196 <_scanf_float+0x272>
 80060ea:	2d01      	cmp	r5, #1
 80060ec:	d002      	beq.n	80060f4 <_scanf_float+0x1d0>
 80060ee:	2d04      	cmp	r5, #4
 80060f0:	f47f af48 	bne.w	8005f84 <_scanf_float+0x60>
 80060f4:	3501      	adds	r5, #1
 80060f6:	b2ed      	uxtb	r5, r5
 80060f8:	e7d8      	b.n	80060ac <_scanf_float+0x188>
 80060fa:	f1ba 0f01 	cmp.w	sl, #1
 80060fe:	f47f af41 	bne.w	8005f84 <_scanf_float+0x60>
 8006102:	f04f 0a02 	mov.w	sl, #2
 8006106:	e7d1      	b.n	80060ac <_scanf_float+0x188>
 8006108:	b97d      	cbnz	r5, 800612a <_scanf_float+0x206>
 800610a:	f1b9 0f00 	cmp.w	r9, #0
 800610e:	f47f af3c 	bne.w	8005f8a <_scanf_float+0x66>
 8006112:	6822      	ldr	r2, [r4, #0]
 8006114:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006118:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800611c:	f47f af39 	bne.w	8005f92 <_scanf_float+0x6e>
 8006120:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006124:	6022      	str	r2, [r4, #0]
 8006126:	2501      	movs	r5, #1
 8006128:	e7c0      	b.n	80060ac <_scanf_float+0x188>
 800612a:	2d03      	cmp	r5, #3
 800612c:	d0e2      	beq.n	80060f4 <_scanf_float+0x1d0>
 800612e:	2d05      	cmp	r5, #5
 8006130:	e7de      	b.n	80060f0 <_scanf_float+0x1cc>
 8006132:	2d02      	cmp	r5, #2
 8006134:	f47f af26 	bne.w	8005f84 <_scanf_float+0x60>
 8006138:	2503      	movs	r5, #3
 800613a:	e7b7      	b.n	80060ac <_scanf_float+0x188>
 800613c:	2d06      	cmp	r5, #6
 800613e:	f47f af21 	bne.w	8005f84 <_scanf_float+0x60>
 8006142:	2507      	movs	r5, #7
 8006144:	e7b2      	b.n	80060ac <_scanf_float+0x188>
 8006146:	6822      	ldr	r2, [r4, #0]
 8006148:	0591      	lsls	r1, r2, #22
 800614a:	f57f af1b 	bpl.w	8005f84 <_scanf_float+0x60>
 800614e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006152:	6022      	str	r2, [r4, #0]
 8006154:	f8cd 9004 	str.w	r9, [sp, #4]
 8006158:	e7a8      	b.n	80060ac <_scanf_float+0x188>
 800615a:	6822      	ldr	r2, [r4, #0]
 800615c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006160:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006164:	d006      	beq.n	8006174 <_scanf_float+0x250>
 8006166:	0550      	lsls	r0, r2, #21
 8006168:	f57f af0c 	bpl.w	8005f84 <_scanf_float+0x60>
 800616c:	f1b9 0f00 	cmp.w	r9, #0
 8006170:	f43f af0f 	beq.w	8005f92 <_scanf_float+0x6e>
 8006174:	0591      	lsls	r1, r2, #22
 8006176:	bf58      	it	pl
 8006178:	9901      	ldrpl	r1, [sp, #4]
 800617a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800617e:	bf58      	it	pl
 8006180:	eba9 0101 	subpl.w	r1, r9, r1
 8006184:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006188:	bf58      	it	pl
 800618a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800618e:	6022      	str	r2, [r4, #0]
 8006190:	f04f 0900 	mov.w	r9, #0
 8006194:	e78a      	b.n	80060ac <_scanf_float+0x188>
 8006196:	f04f 0a03 	mov.w	sl, #3
 800619a:	e787      	b.n	80060ac <_scanf_float+0x188>
 800619c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80061a0:	4639      	mov	r1, r7
 80061a2:	4640      	mov	r0, r8
 80061a4:	4798      	blx	r3
 80061a6:	2800      	cmp	r0, #0
 80061a8:	f43f aedf 	beq.w	8005f6a <_scanf_float+0x46>
 80061ac:	e6ea      	b.n	8005f84 <_scanf_float+0x60>
 80061ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061b6:	463a      	mov	r2, r7
 80061b8:	4640      	mov	r0, r8
 80061ba:	4798      	blx	r3
 80061bc:	6923      	ldr	r3, [r4, #16]
 80061be:	3b01      	subs	r3, #1
 80061c0:	6123      	str	r3, [r4, #16]
 80061c2:	e6ec      	b.n	8005f9e <_scanf_float+0x7a>
 80061c4:	1e6b      	subs	r3, r5, #1
 80061c6:	2b06      	cmp	r3, #6
 80061c8:	d825      	bhi.n	8006216 <_scanf_float+0x2f2>
 80061ca:	2d02      	cmp	r5, #2
 80061cc:	d836      	bhi.n	800623c <_scanf_float+0x318>
 80061ce:	455e      	cmp	r6, fp
 80061d0:	f67f aee8 	bls.w	8005fa4 <_scanf_float+0x80>
 80061d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061dc:	463a      	mov	r2, r7
 80061de:	4640      	mov	r0, r8
 80061e0:	4798      	blx	r3
 80061e2:	6923      	ldr	r3, [r4, #16]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	6123      	str	r3, [r4, #16]
 80061e8:	e7f1      	b.n	80061ce <_scanf_float+0x2aa>
 80061ea:	9802      	ldr	r0, [sp, #8]
 80061ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80061f4:	9002      	str	r0, [sp, #8]
 80061f6:	463a      	mov	r2, r7
 80061f8:	4640      	mov	r0, r8
 80061fa:	4798      	blx	r3
 80061fc:	6923      	ldr	r3, [r4, #16]
 80061fe:	3b01      	subs	r3, #1
 8006200:	6123      	str	r3, [r4, #16]
 8006202:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006206:	fa5f fa8a 	uxtb.w	sl, sl
 800620a:	f1ba 0f02 	cmp.w	sl, #2
 800620e:	d1ec      	bne.n	80061ea <_scanf_float+0x2c6>
 8006210:	3d03      	subs	r5, #3
 8006212:	b2ed      	uxtb	r5, r5
 8006214:	1b76      	subs	r6, r6, r5
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	05da      	lsls	r2, r3, #23
 800621a:	d52f      	bpl.n	800627c <_scanf_float+0x358>
 800621c:	055b      	lsls	r3, r3, #21
 800621e:	d510      	bpl.n	8006242 <_scanf_float+0x31e>
 8006220:	455e      	cmp	r6, fp
 8006222:	f67f aebf 	bls.w	8005fa4 <_scanf_float+0x80>
 8006226:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800622a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800622e:	463a      	mov	r2, r7
 8006230:	4640      	mov	r0, r8
 8006232:	4798      	blx	r3
 8006234:	6923      	ldr	r3, [r4, #16]
 8006236:	3b01      	subs	r3, #1
 8006238:	6123      	str	r3, [r4, #16]
 800623a:	e7f1      	b.n	8006220 <_scanf_float+0x2fc>
 800623c:	46aa      	mov	sl, r5
 800623e:	9602      	str	r6, [sp, #8]
 8006240:	e7df      	b.n	8006202 <_scanf_float+0x2de>
 8006242:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006246:	6923      	ldr	r3, [r4, #16]
 8006248:	2965      	cmp	r1, #101	; 0x65
 800624a:	f103 33ff 	add.w	r3, r3, #4294967295
 800624e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006252:	6123      	str	r3, [r4, #16]
 8006254:	d00c      	beq.n	8006270 <_scanf_float+0x34c>
 8006256:	2945      	cmp	r1, #69	; 0x45
 8006258:	d00a      	beq.n	8006270 <_scanf_float+0x34c>
 800625a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800625e:	463a      	mov	r2, r7
 8006260:	4640      	mov	r0, r8
 8006262:	4798      	blx	r3
 8006264:	6923      	ldr	r3, [r4, #16]
 8006266:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800626a:	3b01      	subs	r3, #1
 800626c:	1eb5      	subs	r5, r6, #2
 800626e:	6123      	str	r3, [r4, #16]
 8006270:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006274:	463a      	mov	r2, r7
 8006276:	4640      	mov	r0, r8
 8006278:	4798      	blx	r3
 800627a:	462e      	mov	r6, r5
 800627c:	6825      	ldr	r5, [r4, #0]
 800627e:	f015 0510 	ands.w	r5, r5, #16
 8006282:	d158      	bne.n	8006336 <_scanf_float+0x412>
 8006284:	7035      	strb	r5, [r6, #0]
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800628c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006290:	d11c      	bne.n	80062cc <_scanf_float+0x3a8>
 8006292:	9b01      	ldr	r3, [sp, #4]
 8006294:	454b      	cmp	r3, r9
 8006296:	eba3 0209 	sub.w	r2, r3, r9
 800629a:	d124      	bne.n	80062e6 <_scanf_float+0x3c2>
 800629c:	2200      	movs	r2, #0
 800629e:	4659      	mov	r1, fp
 80062a0:	4640      	mov	r0, r8
 80062a2:	f002 fd65 	bl	8008d70 <_strtod_r>
 80062a6:	9b03      	ldr	r3, [sp, #12]
 80062a8:	6821      	ldr	r1, [r4, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f011 0f02 	tst.w	r1, #2
 80062b0:	ec57 6b10 	vmov	r6, r7, d0
 80062b4:	f103 0204 	add.w	r2, r3, #4
 80062b8:	d020      	beq.n	80062fc <_scanf_float+0x3d8>
 80062ba:	9903      	ldr	r1, [sp, #12]
 80062bc:	600a      	str	r2, [r1, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	e9c3 6700 	strd	r6, r7, [r3]
 80062c4:	68e3      	ldr	r3, [r4, #12]
 80062c6:	3301      	adds	r3, #1
 80062c8:	60e3      	str	r3, [r4, #12]
 80062ca:	e66c      	b.n	8005fa6 <_scanf_float+0x82>
 80062cc:	9b04      	ldr	r3, [sp, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0e4      	beq.n	800629c <_scanf_float+0x378>
 80062d2:	9905      	ldr	r1, [sp, #20]
 80062d4:	230a      	movs	r3, #10
 80062d6:	462a      	mov	r2, r5
 80062d8:	3101      	adds	r1, #1
 80062da:	4640      	mov	r0, r8
 80062dc:	f002 fdd0 	bl	8008e80 <_strtol_r>
 80062e0:	9b04      	ldr	r3, [sp, #16]
 80062e2:	9e05      	ldr	r6, [sp, #20]
 80062e4:	1ac2      	subs	r2, r0, r3
 80062e6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80062ea:	429e      	cmp	r6, r3
 80062ec:	bf28      	it	cs
 80062ee:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80062f2:	4912      	ldr	r1, [pc, #72]	; (800633c <_scanf_float+0x418>)
 80062f4:	4630      	mov	r0, r6
 80062f6:	f000 f989 	bl	800660c <siprintf>
 80062fa:	e7cf      	b.n	800629c <_scanf_float+0x378>
 80062fc:	f011 0f04 	tst.w	r1, #4
 8006300:	9903      	ldr	r1, [sp, #12]
 8006302:	600a      	str	r2, [r1, #0]
 8006304:	d1db      	bne.n	80062be <_scanf_float+0x39a>
 8006306:	f8d3 8000 	ldr.w	r8, [r3]
 800630a:	ee10 2a10 	vmov	r2, s0
 800630e:	ee10 0a10 	vmov	r0, s0
 8006312:	463b      	mov	r3, r7
 8006314:	4639      	mov	r1, r7
 8006316:	f7fa fc11 	bl	8000b3c <__aeabi_dcmpun>
 800631a:	b128      	cbz	r0, 8006328 <_scanf_float+0x404>
 800631c:	4808      	ldr	r0, [pc, #32]	; (8006340 <_scanf_float+0x41c>)
 800631e:	f000 faed 	bl	80068fc <nanf>
 8006322:	ed88 0a00 	vstr	s0, [r8]
 8006326:	e7cd      	b.n	80062c4 <_scanf_float+0x3a0>
 8006328:	4630      	mov	r0, r6
 800632a:	4639      	mov	r1, r7
 800632c:	f7fa fc64 	bl	8000bf8 <__aeabi_d2f>
 8006330:	f8c8 0000 	str.w	r0, [r8]
 8006334:	e7c6      	b.n	80062c4 <_scanf_float+0x3a0>
 8006336:	2500      	movs	r5, #0
 8006338:	e635      	b.n	8005fa6 <_scanf_float+0x82>
 800633a:	bf00      	nop
 800633c:	0800a204 	.word	0x0800a204
 8006340:	0800a595 	.word	0x0800a595

08006344 <std>:
 8006344:	2300      	movs	r3, #0
 8006346:	b510      	push	{r4, lr}
 8006348:	4604      	mov	r4, r0
 800634a:	e9c0 3300 	strd	r3, r3, [r0]
 800634e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006352:	6083      	str	r3, [r0, #8]
 8006354:	8181      	strh	r1, [r0, #12]
 8006356:	6643      	str	r3, [r0, #100]	; 0x64
 8006358:	81c2      	strh	r2, [r0, #14]
 800635a:	6183      	str	r3, [r0, #24]
 800635c:	4619      	mov	r1, r3
 800635e:	2208      	movs	r2, #8
 8006360:	305c      	adds	r0, #92	; 0x5c
 8006362:	f000 fa4b 	bl	80067fc <memset>
 8006366:	4b0d      	ldr	r3, [pc, #52]	; (800639c <std+0x58>)
 8006368:	6263      	str	r3, [r4, #36]	; 0x24
 800636a:	4b0d      	ldr	r3, [pc, #52]	; (80063a0 <std+0x5c>)
 800636c:	62a3      	str	r3, [r4, #40]	; 0x28
 800636e:	4b0d      	ldr	r3, [pc, #52]	; (80063a4 <std+0x60>)
 8006370:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006372:	4b0d      	ldr	r3, [pc, #52]	; (80063a8 <std+0x64>)
 8006374:	6323      	str	r3, [r4, #48]	; 0x30
 8006376:	4b0d      	ldr	r3, [pc, #52]	; (80063ac <std+0x68>)
 8006378:	6224      	str	r4, [r4, #32]
 800637a:	429c      	cmp	r4, r3
 800637c:	d006      	beq.n	800638c <std+0x48>
 800637e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006382:	4294      	cmp	r4, r2
 8006384:	d002      	beq.n	800638c <std+0x48>
 8006386:	33d0      	adds	r3, #208	; 0xd0
 8006388:	429c      	cmp	r4, r3
 800638a:	d105      	bne.n	8006398 <std+0x54>
 800638c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006394:	f000 baae 	b.w	80068f4 <__retarget_lock_init_recursive>
 8006398:	bd10      	pop	{r4, pc}
 800639a:	bf00      	nop
 800639c:	0800664d 	.word	0x0800664d
 80063a0:	0800666f 	.word	0x0800666f
 80063a4:	080066a7 	.word	0x080066a7
 80063a8:	080066cb 	.word	0x080066cb
 80063ac:	200003cc 	.word	0x200003cc

080063b0 <stdio_exit_handler>:
 80063b0:	4a02      	ldr	r2, [pc, #8]	; (80063bc <stdio_exit_handler+0xc>)
 80063b2:	4903      	ldr	r1, [pc, #12]	; (80063c0 <stdio_exit_handler+0x10>)
 80063b4:	4803      	ldr	r0, [pc, #12]	; (80063c4 <stdio_exit_handler+0x14>)
 80063b6:	f000 b869 	b.w	800648c <_fwalk_sglue>
 80063ba:	bf00      	nop
 80063bc:	2000001c 	.word	0x2000001c
 80063c0:	080094c9 	.word	0x080094c9
 80063c4:	20000028 	.word	0x20000028

080063c8 <cleanup_stdio>:
 80063c8:	6841      	ldr	r1, [r0, #4]
 80063ca:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <cleanup_stdio+0x34>)
 80063cc:	4299      	cmp	r1, r3
 80063ce:	b510      	push	{r4, lr}
 80063d0:	4604      	mov	r4, r0
 80063d2:	d001      	beq.n	80063d8 <cleanup_stdio+0x10>
 80063d4:	f003 f878 	bl	80094c8 <_fflush_r>
 80063d8:	68a1      	ldr	r1, [r4, #8]
 80063da:	4b09      	ldr	r3, [pc, #36]	; (8006400 <cleanup_stdio+0x38>)
 80063dc:	4299      	cmp	r1, r3
 80063de:	d002      	beq.n	80063e6 <cleanup_stdio+0x1e>
 80063e0:	4620      	mov	r0, r4
 80063e2:	f003 f871 	bl	80094c8 <_fflush_r>
 80063e6:	68e1      	ldr	r1, [r4, #12]
 80063e8:	4b06      	ldr	r3, [pc, #24]	; (8006404 <cleanup_stdio+0x3c>)
 80063ea:	4299      	cmp	r1, r3
 80063ec:	d004      	beq.n	80063f8 <cleanup_stdio+0x30>
 80063ee:	4620      	mov	r0, r4
 80063f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063f4:	f003 b868 	b.w	80094c8 <_fflush_r>
 80063f8:	bd10      	pop	{r4, pc}
 80063fa:	bf00      	nop
 80063fc:	200003cc 	.word	0x200003cc
 8006400:	20000434 	.word	0x20000434
 8006404:	2000049c 	.word	0x2000049c

08006408 <global_stdio_init.part.0>:
 8006408:	b510      	push	{r4, lr}
 800640a:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <global_stdio_init.part.0+0x30>)
 800640c:	4c0b      	ldr	r4, [pc, #44]	; (800643c <global_stdio_init.part.0+0x34>)
 800640e:	4a0c      	ldr	r2, [pc, #48]	; (8006440 <global_stdio_init.part.0+0x38>)
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	4620      	mov	r0, r4
 8006414:	2200      	movs	r2, #0
 8006416:	2104      	movs	r1, #4
 8006418:	f7ff ff94 	bl	8006344 <std>
 800641c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006420:	2201      	movs	r2, #1
 8006422:	2109      	movs	r1, #9
 8006424:	f7ff ff8e 	bl	8006344 <std>
 8006428:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800642c:	2202      	movs	r2, #2
 800642e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006432:	2112      	movs	r1, #18
 8006434:	f7ff bf86 	b.w	8006344 <std>
 8006438:	20000504 	.word	0x20000504
 800643c:	200003cc 	.word	0x200003cc
 8006440:	080063b1 	.word	0x080063b1

08006444 <__sfp_lock_acquire>:
 8006444:	4801      	ldr	r0, [pc, #4]	; (800644c <__sfp_lock_acquire+0x8>)
 8006446:	f000 ba56 	b.w	80068f6 <__retarget_lock_acquire_recursive>
 800644a:	bf00      	nop
 800644c:	2000050d 	.word	0x2000050d

08006450 <__sfp_lock_release>:
 8006450:	4801      	ldr	r0, [pc, #4]	; (8006458 <__sfp_lock_release+0x8>)
 8006452:	f000 ba51 	b.w	80068f8 <__retarget_lock_release_recursive>
 8006456:	bf00      	nop
 8006458:	2000050d 	.word	0x2000050d

0800645c <__sinit>:
 800645c:	b510      	push	{r4, lr}
 800645e:	4604      	mov	r4, r0
 8006460:	f7ff fff0 	bl	8006444 <__sfp_lock_acquire>
 8006464:	6a23      	ldr	r3, [r4, #32]
 8006466:	b11b      	cbz	r3, 8006470 <__sinit+0x14>
 8006468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800646c:	f7ff bff0 	b.w	8006450 <__sfp_lock_release>
 8006470:	4b04      	ldr	r3, [pc, #16]	; (8006484 <__sinit+0x28>)
 8006472:	6223      	str	r3, [r4, #32]
 8006474:	4b04      	ldr	r3, [pc, #16]	; (8006488 <__sinit+0x2c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1f5      	bne.n	8006468 <__sinit+0xc>
 800647c:	f7ff ffc4 	bl	8006408 <global_stdio_init.part.0>
 8006480:	e7f2      	b.n	8006468 <__sinit+0xc>
 8006482:	bf00      	nop
 8006484:	080063c9 	.word	0x080063c9
 8006488:	20000504 	.word	0x20000504

0800648c <_fwalk_sglue>:
 800648c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006490:	4607      	mov	r7, r0
 8006492:	4688      	mov	r8, r1
 8006494:	4614      	mov	r4, r2
 8006496:	2600      	movs	r6, #0
 8006498:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800649c:	f1b9 0901 	subs.w	r9, r9, #1
 80064a0:	d505      	bpl.n	80064ae <_fwalk_sglue+0x22>
 80064a2:	6824      	ldr	r4, [r4, #0]
 80064a4:	2c00      	cmp	r4, #0
 80064a6:	d1f7      	bne.n	8006498 <_fwalk_sglue+0xc>
 80064a8:	4630      	mov	r0, r6
 80064aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ae:	89ab      	ldrh	r3, [r5, #12]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d907      	bls.n	80064c4 <_fwalk_sglue+0x38>
 80064b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064b8:	3301      	adds	r3, #1
 80064ba:	d003      	beq.n	80064c4 <_fwalk_sglue+0x38>
 80064bc:	4629      	mov	r1, r5
 80064be:	4638      	mov	r0, r7
 80064c0:	47c0      	blx	r8
 80064c2:	4306      	orrs	r6, r0
 80064c4:	3568      	adds	r5, #104	; 0x68
 80064c6:	e7e9      	b.n	800649c <_fwalk_sglue+0x10>

080064c8 <iprintf>:
 80064c8:	b40f      	push	{r0, r1, r2, r3}
 80064ca:	b507      	push	{r0, r1, r2, lr}
 80064cc:	4906      	ldr	r1, [pc, #24]	; (80064e8 <iprintf+0x20>)
 80064ce:	ab04      	add	r3, sp, #16
 80064d0:	6808      	ldr	r0, [r1, #0]
 80064d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80064d6:	6881      	ldr	r1, [r0, #8]
 80064d8:	9301      	str	r3, [sp, #4]
 80064da:	f002 fe55 	bl	8009188 <_vfiprintf_r>
 80064de:	b003      	add	sp, #12
 80064e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80064e4:	b004      	add	sp, #16
 80064e6:	4770      	bx	lr
 80064e8:	20000074 	.word	0x20000074

080064ec <_puts_r>:
 80064ec:	6a03      	ldr	r3, [r0, #32]
 80064ee:	b570      	push	{r4, r5, r6, lr}
 80064f0:	6884      	ldr	r4, [r0, #8]
 80064f2:	4605      	mov	r5, r0
 80064f4:	460e      	mov	r6, r1
 80064f6:	b90b      	cbnz	r3, 80064fc <_puts_r+0x10>
 80064f8:	f7ff ffb0 	bl	800645c <__sinit>
 80064fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064fe:	07db      	lsls	r3, r3, #31
 8006500:	d405      	bmi.n	800650e <_puts_r+0x22>
 8006502:	89a3      	ldrh	r3, [r4, #12]
 8006504:	0598      	lsls	r0, r3, #22
 8006506:	d402      	bmi.n	800650e <_puts_r+0x22>
 8006508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800650a:	f000 f9f4 	bl	80068f6 <__retarget_lock_acquire_recursive>
 800650e:	89a3      	ldrh	r3, [r4, #12]
 8006510:	0719      	lsls	r1, r3, #28
 8006512:	d513      	bpl.n	800653c <_puts_r+0x50>
 8006514:	6923      	ldr	r3, [r4, #16]
 8006516:	b18b      	cbz	r3, 800653c <_puts_r+0x50>
 8006518:	3e01      	subs	r6, #1
 800651a:	68a3      	ldr	r3, [r4, #8]
 800651c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006520:	3b01      	subs	r3, #1
 8006522:	60a3      	str	r3, [r4, #8]
 8006524:	b9e9      	cbnz	r1, 8006562 <_puts_r+0x76>
 8006526:	2b00      	cmp	r3, #0
 8006528:	da2e      	bge.n	8006588 <_puts_r+0x9c>
 800652a:	4622      	mov	r2, r4
 800652c:	210a      	movs	r1, #10
 800652e:	4628      	mov	r0, r5
 8006530:	f000 f8cf 	bl	80066d2 <__swbuf_r>
 8006534:	3001      	adds	r0, #1
 8006536:	d007      	beq.n	8006548 <_puts_r+0x5c>
 8006538:	250a      	movs	r5, #10
 800653a:	e007      	b.n	800654c <_puts_r+0x60>
 800653c:	4621      	mov	r1, r4
 800653e:	4628      	mov	r0, r5
 8006540:	f000 f904 	bl	800674c <__swsetup_r>
 8006544:	2800      	cmp	r0, #0
 8006546:	d0e7      	beq.n	8006518 <_puts_r+0x2c>
 8006548:	f04f 35ff 	mov.w	r5, #4294967295
 800654c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800654e:	07da      	lsls	r2, r3, #31
 8006550:	d405      	bmi.n	800655e <_puts_r+0x72>
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	059b      	lsls	r3, r3, #22
 8006556:	d402      	bmi.n	800655e <_puts_r+0x72>
 8006558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800655a:	f000 f9cd 	bl	80068f8 <__retarget_lock_release_recursive>
 800655e:	4628      	mov	r0, r5
 8006560:	bd70      	pop	{r4, r5, r6, pc}
 8006562:	2b00      	cmp	r3, #0
 8006564:	da04      	bge.n	8006570 <_puts_r+0x84>
 8006566:	69a2      	ldr	r2, [r4, #24]
 8006568:	429a      	cmp	r2, r3
 800656a:	dc06      	bgt.n	800657a <_puts_r+0x8e>
 800656c:	290a      	cmp	r1, #10
 800656e:	d004      	beq.n	800657a <_puts_r+0x8e>
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	6022      	str	r2, [r4, #0]
 8006576:	7019      	strb	r1, [r3, #0]
 8006578:	e7cf      	b.n	800651a <_puts_r+0x2e>
 800657a:	4622      	mov	r2, r4
 800657c:	4628      	mov	r0, r5
 800657e:	f000 f8a8 	bl	80066d2 <__swbuf_r>
 8006582:	3001      	adds	r0, #1
 8006584:	d1c9      	bne.n	800651a <_puts_r+0x2e>
 8006586:	e7df      	b.n	8006548 <_puts_r+0x5c>
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	250a      	movs	r5, #10
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	6022      	str	r2, [r4, #0]
 8006590:	701d      	strb	r5, [r3, #0]
 8006592:	e7db      	b.n	800654c <_puts_r+0x60>

08006594 <puts>:
 8006594:	4b02      	ldr	r3, [pc, #8]	; (80065a0 <puts+0xc>)
 8006596:	4601      	mov	r1, r0
 8006598:	6818      	ldr	r0, [r3, #0]
 800659a:	f7ff bfa7 	b.w	80064ec <_puts_r>
 800659e:	bf00      	nop
 80065a0:	20000074 	.word	0x20000074

080065a4 <sniprintf>:
 80065a4:	b40c      	push	{r2, r3}
 80065a6:	b530      	push	{r4, r5, lr}
 80065a8:	4b17      	ldr	r3, [pc, #92]	; (8006608 <sniprintf+0x64>)
 80065aa:	1e0c      	subs	r4, r1, #0
 80065ac:	681d      	ldr	r5, [r3, #0]
 80065ae:	b09d      	sub	sp, #116	; 0x74
 80065b0:	da08      	bge.n	80065c4 <sniprintf+0x20>
 80065b2:	238b      	movs	r3, #139	; 0x8b
 80065b4:	602b      	str	r3, [r5, #0]
 80065b6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ba:	b01d      	add	sp, #116	; 0x74
 80065bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065c0:	b002      	add	sp, #8
 80065c2:	4770      	bx	lr
 80065c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80065c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80065cc:	bf14      	ite	ne
 80065ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 80065d2:	4623      	moveq	r3, r4
 80065d4:	9304      	str	r3, [sp, #16]
 80065d6:	9307      	str	r3, [sp, #28]
 80065d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065dc:	9002      	str	r0, [sp, #8]
 80065de:	9006      	str	r0, [sp, #24]
 80065e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80065e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80065e6:	ab21      	add	r3, sp, #132	; 0x84
 80065e8:	a902      	add	r1, sp, #8
 80065ea:	4628      	mov	r0, r5
 80065ec:	9301      	str	r3, [sp, #4]
 80065ee:	f002 fca3 	bl	8008f38 <_svfiprintf_r>
 80065f2:	1c43      	adds	r3, r0, #1
 80065f4:	bfbc      	itt	lt
 80065f6:	238b      	movlt	r3, #139	; 0x8b
 80065f8:	602b      	strlt	r3, [r5, #0]
 80065fa:	2c00      	cmp	r4, #0
 80065fc:	d0dd      	beq.n	80065ba <sniprintf+0x16>
 80065fe:	9b02      	ldr	r3, [sp, #8]
 8006600:	2200      	movs	r2, #0
 8006602:	701a      	strb	r2, [r3, #0]
 8006604:	e7d9      	b.n	80065ba <sniprintf+0x16>
 8006606:	bf00      	nop
 8006608:	20000074 	.word	0x20000074

0800660c <siprintf>:
 800660c:	b40e      	push	{r1, r2, r3}
 800660e:	b500      	push	{lr}
 8006610:	b09c      	sub	sp, #112	; 0x70
 8006612:	ab1d      	add	r3, sp, #116	; 0x74
 8006614:	9002      	str	r0, [sp, #8]
 8006616:	9006      	str	r0, [sp, #24]
 8006618:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800661c:	4809      	ldr	r0, [pc, #36]	; (8006644 <siprintf+0x38>)
 800661e:	9107      	str	r1, [sp, #28]
 8006620:	9104      	str	r1, [sp, #16]
 8006622:	4909      	ldr	r1, [pc, #36]	; (8006648 <siprintf+0x3c>)
 8006624:	f853 2b04 	ldr.w	r2, [r3], #4
 8006628:	9105      	str	r1, [sp, #20]
 800662a:	6800      	ldr	r0, [r0, #0]
 800662c:	9301      	str	r3, [sp, #4]
 800662e:	a902      	add	r1, sp, #8
 8006630:	f002 fc82 	bl	8008f38 <_svfiprintf_r>
 8006634:	9b02      	ldr	r3, [sp, #8]
 8006636:	2200      	movs	r2, #0
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	b01c      	add	sp, #112	; 0x70
 800663c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006640:	b003      	add	sp, #12
 8006642:	4770      	bx	lr
 8006644:	20000074 	.word	0x20000074
 8006648:	ffff0208 	.word	0xffff0208

0800664c <__sread>:
 800664c:	b510      	push	{r4, lr}
 800664e:	460c      	mov	r4, r1
 8006650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006654:	f000 f900 	bl	8006858 <_read_r>
 8006658:	2800      	cmp	r0, #0
 800665a:	bfab      	itete	ge
 800665c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800665e:	89a3      	ldrhlt	r3, [r4, #12]
 8006660:	181b      	addge	r3, r3, r0
 8006662:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006666:	bfac      	ite	ge
 8006668:	6563      	strge	r3, [r4, #84]	; 0x54
 800666a:	81a3      	strhlt	r3, [r4, #12]
 800666c:	bd10      	pop	{r4, pc}

0800666e <__swrite>:
 800666e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006672:	461f      	mov	r7, r3
 8006674:	898b      	ldrh	r3, [r1, #12]
 8006676:	05db      	lsls	r3, r3, #23
 8006678:	4605      	mov	r5, r0
 800667a:	460c      	mov	r4, r1
 800667c:	4616      	mov	r6, r2
 800667e:	d505      	bpl.n	800668c <__swrite+0x1e>
 8006680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006684:	2302      	movs	r3, #2
 8006686:	2200      	movs	r2, #0
 8006688:	f000 f8d4 	bl	8006834 <_lseek_r>
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006696:	81a3      	strh	r3, [r4, #12]
 8006698:	4632      	mov	r2, r6
 800669a:	463b      	mov	r3, r7
 800669c:	4628      	mov	r0, r5
 800669e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066a2:	f000 b8eb 	b.w	800687c <_write_r>

080066a6 <__sseek>:
 80066a6:	b510      	push	{r4, lr}
 80066a8:	460c      	mov	r4, r1
 80066aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ae:	f000 f8c1 	bl	8006834 <_lseek_r>
 80066b2:	1c43      	adds	r3, r0, #1
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	bf15      	itete	ne
 80066b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80066ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066c2:	81a3      	strheq	r3, [r4, #12]
 80066c4:	bf18      	it	ne
 80066c6:	81a3      	strhne	r3, [r4, #12]
 80066c8:	bd10      	pop	{r4, pc}

080066ca <__sclose>:
 80066ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ce:	f000 b8a1 	b.w	8006814 <_close_r>

080066d2 <__swbuf_r>:
 80066d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d4:	460e      	mov	r6, r1
 80066d6:	4614      	mov	r4, r2
 80066d8:	4605      	mov	r5, r0
 80066da:	b118      	cbz	r0, 80066e4 <__swbuf_r+0x12>
 80066dc:	6a03      	ldr	r3, [r0, #32]
 80066de:	b90b      	cbnz	r3, 80066e4 <__swbuf_r+0x12>
 80066e0:	f7ff febc 	bl	800645c <__sinit>
 80066e4:	69a3      	ldr	r3, [r4, #24]
 80066e6:	60a3      	str	r3, [r4, #8]
 80066e8:	89a3      	ldrh	r3, [r4, #12]
 80066ea:	071a      	lsls	r2, r3, #28
 80066ec:	d525      	bpl.n	800673a <__swbuf_r+0x68>
 80066ee:	6923      	ldr	r3, [r4, #16]
 80066f0:	b31b      	cbz	r3, 800673a <__swbuf_r+0x68>
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	6922      	ldr	r2, [r4, #16]
 80066f6:	1a98      	subs	r0, r3, r2
 80066f8:	6963      	ldr	r3, [r4, #20]
 80066fa:	b2f6      	uxtb	r6, r6
 80066fc:	4283      	cmp	r3, r0
 80066fe:	4637      	mov	r7, r6
 8006700:	dc04      	bgt.n	800670c <__swbuf_r+0x3a>
 8006702:	4621      	mov	r1, r4
 8006704:	4628      	mov	r0, r5
 8006706:	f002 fedf 	bl	80094c8 <_fflush_r>
 800670a:	b9e0      	cbnz	r0, 8006746 <__swbuf_r+0x74>
 800670c:	68a3      	ldr	r3, [r4, #8]
 800670e:	3b01      	subs	r3, #1
 8006710:	60a3      	str	r3, [r4, #8]
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	6022      	str	r2, [r4, #0]
 8006718:	701e      	strb	r6, [r3, #0]
 800671a:	6962      	ldr	r2, [r4, #20]
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	429a      	cmp	r2, r3
 8006720:	d004      	beq.n	800672c <__swbuf_r+0x5a>
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	07db      	lsls	r3, r3, #31
 8006726:	d506      	bpl.n	8006736 <__swbuf_r+0x64>
 8006728:	2e0a      	cmp	r6, #10
 800672a:	d104      	bne.n	8006736 <__swbuf_r+0x64>
 800672c:	4621      	mov	r1, r4
 800672e:	4628      	mov	r0, r5
 8006730:	f002 feca 	bl	80094c8 <_fflush_r>
 8006734:	b938      	cbnz	r0, 8006746 <__swbuf_r+0x74>
 8006736:	4638      	mov	r0, r7
 8006738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800673a:	4621      	mov	r1, r4
 800673c:	4628      	mov	r0, r5
 800673e:	f000 f805 	bl	800674c <__swsetup_r>
 8006742:	2800      	cmp	r0, #0
 8006744:	d0d5      	beq.n	80066f2 <__swbuf_r+0x20>
 8006746:	f04f 37ff 	mov.w	r7, #4294967295
 800674a:	e7f4      	b.n	8006736 <__swbuf_r+0x64>

0800674c <__swsetup_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4b2a      	ldr	r3, [pc, #168]	; (80067f8 <__swsetup_r+0xac>)
 8006750:	4605      	mov	r5, r0
 8006752:	6818      	ldr	r0, [r3, #0]
 8006754:	460c      	mov	r4, r1
 8006756:	b118      	cbz	r0, 8006760 <__swsetup_r+0x14>
 8006758:	6a03      	ldr	r3, [r0, #32]
 800675a:	b90b      	cbnz	r3, 8006760 <__swsetup_r+0x14>
 800675c:	f7ff fe7e 	bl	800645c <__sinit>
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006766:	0718      	lsls	r0, r3, #28
 8006768:	d422      	bmi.n	80067b0 <__swsetup_r+0x64>
 800676a:	06d9      	lsls	r1, r3, #27
 800676c:	d407      	bmi.n	800677e <__swsetup_r+0x32>
 800676e:	2309      	movs	r3, #9
 8006770:	602b      	str	r3, [r5, #0]
 8006772:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006776:	81a3      	strh	r3, [r4, #12]
 8006778:	f04f 30ff 	mov.w	r0, #4294967295
 800677c:	e034      	b.n	80067e8 <__swsetup_r+0x9c>
 800677e:	0758      	lsls	r0, r3, #29
 8006780:	d512      	bpl.n	80067a8 <__swsetup_r+0x5c>
 8006782:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006784:	b141      	cbz	r1, 8006798 <__swsetup_r+0x4c>
 8006786:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800678a:	4299      	cmp	r1, r3
 800678c:	d002      	beq.n	8006794 <__swsetup_r+0x48>
 800678e:	4628      	mov	r0, r5
 8006790:	f000 ff34 	bl	80075fc <_free_r>
 8006794:	2300      	movs	r3, #0
 8006796:	6363      	str	r3, [r4, #52]	; 0x34
 8006798:	89a3      	ldrh	r3, [r4, #12]
 800679a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800679e:	81a3      	strh	r3, [r4, #12]
 80067a0:	2300      	movs	r3, #0
 80067a2:	6063      	str	r3, [r4, #4]
 80067a4:	6923      	ldr	r3, [r4, #16]
 80067a6:	6023      	str	r3, [r4, #0]
 80067a8:	89a3      	ldrh	r3, [r4, #12]
 80067aa:	f043 0308 	orr.w	r3, r3, #8
 80067ae:	81a3      	strh	r3, [r4, #12]
 80067b0:	6923      	ldr	r3, [r4, #16]
 80067b2:	b94b      	cbnz	r3, 80067c8 <__swsetup_r+0x7c>
 80067b4:	89a3      	ldrh	r3, [r4, #12]
 80067b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067be:	d003      	beq.n	80067c8 <__swsetup_r+0x7c>
 80067c0:	4621      	mov	r1, r4
 80067c2:	4628      	mov	r0, r5
 80067c4:	f002 fece 	bl	8009564 <__smakebuf_r>
 80067c8:	89a0      	ldrh	r0, [r4, #12]
 80067ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067ce:	f010 0301 	ands.w	r3, r0, #1
 80067d2:	d00a      	beq.n	80067ea <__swsetup_r+0x9e>
 80067d4:	2300      	movs	r3, #0
 80067d6:	60a3      	str	r3, [r4, #8]
 80067d8:	6963      	ldr	r3, [r4, #20]
 80067da:	425b      	negs	r3, r3
 80067dc:	61a3      	str	r3, [r4, #24]
 80067de:	6923      	ldr	r3, [r4, #16]
 80067e0:	b943      	cbnz	r3, 80067f4 <__swsetup_r+0xa8>
 80067e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067e6:	d1c4      	bne.n	8006772 <__swsetup_r+0x26>
 80067e8:	bd38      	pop	{r3, r4, r5, pc}
 80067ea:	0781      	lsls	r1, r0, #30
 80067ec:	bf58      	it	pl
 80067ee:	6963      	ldrpl	r3, [r4, #20]
 80067f0:	60a3      	str	r3, [r4, #8]
 80067f2:	e7f4      	b.n	80067de <__swsetup_r+0x92>
 80067f4:	2000      	movs	r0, #0
 80067f6:	e7f7      	b.n	80067e8 <__swsetup_r+0x9c>
 80067f8:	20000074 	.word	0x20000074

080067fc <memset>:
 80067fc:	4402      	add	r2, r0
 80067fe:	4603      	mov	r3, r0
 8006800:	4293      	cmp	r3, r2
 8006802:	d100      	bne.n	8006806 <memset+0xa>
 8006804:	4770      	bx	lr
 8006806:	f803 1b01 	strb.w	r1, [r3], #1
 800680a:	e7f9      	b.n	8006800 <memset+0x4>

0800680c <_localeconv_r>:
 800680c:	4800      	ldr	r0, [pc, #0]	; (8006810 <_localeconv_r+0x4>)
 800680e:	4770      	bx	lr
 8006810:	20000168 	.word	0x20000168

08006814 <_close_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	4d06      	ldr	r5, [pc, #24]	; (8006830 <_close_r+0x1c>)
 8006818:	2300      	movs	r3, #0
 800681a:	4604      	mov	r4, r0
 800681c:	4608      	mov	r0, r1
 800681e:	602b      	str	r3, [r5, #0]
 8006820:	f7fb f91f 	bl	8001a62 <_close>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d102      	bne.n	800682e <_close_r+0x1a>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b103      	cbz	r3, 800682e <_close_r+0x1a>
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	20000508 	.word	0x20000508

08006834 <_lseek_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4d07      	ldr	r5, [pc, #28]	; (8006854 <_lseek_r+0x20>)
 8006838:	4604      	mov	r4, r0
 800683a:	4608      	mov	r0, r1
 800683c:	4611      	mov	r1, r2
 800683e:	2200      	movs	r2, #0
 8006840:	602a      	str	r2, [r5, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	f7fb f934 	bl	8001ab0 <_lseek>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	d102      	bne.n	8006852 <_lseek_r+0x1e>
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	b103      	cbz	r3, 8006852 <_lseek_r+0x1e>
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	20000508 	.word	0x20000508

08006858 <_read_r>:
 8006858:	b538      	push	{r3, r4, r5, lr}
 800685a:	4d07      	ldr	r5, [pc, #28]	; (8006878 <_read_r+0x20>)
 800685c:	4604      	mov	r4, r0
 800685e:	4608      	mov	r0, r1
 8006860:	4611      	mov	r1, r2
 8006862:	2200      	movs	r2, #0
 8006864:	602a      	str	r2, [r5, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	f7fb f8c2 	bl	80019f0 <_read>
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	d102      	bne.n	8006876 <_read_r+0x1e>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	b103      	cbz	r3, 8006876 <_read_r+0x1e>
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	bd38      	pop	{r3, r4, r5, pc}
 8006878:	20000508 	.word	0x20000508

0800687c <_write_r>:
 800687c:	b538      	push	{r3, r4, r5, lr}
 800687e:	4d07      	ldr	r5, [pc, #28]	; (800689c <_write_r+0x20>)
 8006880:	4604      	mov	r4, r0
 8006882:	4608      	mov	r0, r1
 8006884:	4611      	mov	r1, r2
 8006886:	2200      	movs	r2, #0
 8006888:	602a      	str	r2, [r5, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	f7fb f8cd 	bl	8001a2a <_write>
 8006890:	1c43      	adds	r3, r0, #1
 8006892:	d102      	bne.n	800689a <_write_r+0x1e>
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	b103      	cbz	r3, 800689a <_write_r+0x1e>
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	bd38      	pop	{r3, r4, r5, pc}
 800689c:	20000508 	.word	0x20000508

080068a0 <__errno>:
 80068a0:	4b01      	ldr	r3, [pc, #4]	; (80068a8 <__errno+0x8>)
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	20000074 	.word	0x20000074

080068ac <__libc_init_array>:
 80068ac:	b570      	push	{r4, r5, r6, lr}
 80068ae:	4d0d      	ldr	r5, [pc, #52]	; (80068e4 <__libc_init_array+0x38>)
 80068b0:	4c0d      	ldr	r4, [pc, #52]	; (80068e8 <__libc_init_array+0x3c>)
 80068b2:	1b64      	subs	r4, r4, r5
 80068b4:	10a4      	asrs	r4, r4, #2
 80068b6:	2600      	movs	r6, #0
 80068b8:	42a6      	cmp	r6, r4
 80068ba:	d109      	bne.n	80068d0 <__libc_init_array+0x24>
 80068bc:	4d0b      	ldr	r5, [pc, #44]	; (80068ec <__libc_init_array+0x40>)
 80068be:	4c0c      	ldr	r4, [pc, #48]	; (80068f0 <__libc_init_array+0x44>)
 80068c0:	f003 fb42 	bl	8009f48 <_init>
 80068c4:	1b64      	subs	r4, r4, r5
 80068c6:	10a4      	asrs	r4, r4, #2
 80068c8:	2600      	movs	r6, #0
 80068ca:	42a6      	cmp	r6, r4
 80068cc:	d105      	bne.n	80068da <__libc_init_array+0x2e>
 80068ce:	bd70      	pop	{r4, r5, r6, pc}
 80068d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068d4:	4798      	blx	r3
 80068d6:	3601      	adds	r6, #1
 80068d8:	e7ee      	b.n	80068b8 <__libc_init_array+0xc>
 80068da:	f855 3b04 	ldr.w	r3, [r5], #4
 80068de:	4798      	blx	r3
 80068e0:	3601      	adds	r6, #1
 80068e2:	e7f2      	b.n	80068ca <__libc_init_array+0x1e>
 80068e4:	0800a5f8 	.word	0x0800a5f8
 80068e8:	0800a5f8 	.word	0x0800a5f8
 80068ec:	0800a5f8 	.word	0x0800a5f8
 80068f0:	0800a5fc 	.word	0x0800a5fc

080068f4 <__retarget_lock_init_recursive>:
 80068f4:	4770      	bx	lr

080068f6 <__retarget_lock_acquire_recursive>:
 80068f6:	4770      	bx	lr

080068f8 <__retarget_lock_release_recursive>:
 80068f8:	4770      	bx	lr
	...

080068fc <nanf>:
 80068fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006904 <nanf+0x8>
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	7fc00000 	.word	0x7fc00000

08006908 <quorem>:
 8006908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800690c:	6903      	ldr	r3, [r0, #16]
 800690e:	690c      	ldr	r4, [r1, #16]
 8006910:	42a3      	cmp	r3, r4
 8006912:	4607      	mov	r7, r0
 8006914:	db7e      	blt.n	8006a14 <quorem+0x10c>
 8006916:	3c01      	subs	r4, #1
 8006918:	f101 0814 	add.w	r8, r1, #20
 800691c:	f100 0514 	add.w	r5, r0, #20
 8006920:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800692a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800692e:	3301      	adds	r3, #1
 8006930:	429a      	cmp	r2, r3
 8006932:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006936:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800693a:	fbb2 f6f3 	udiv	r6, r2, r3
 800693e:	d331      	bcc.n	80069a4 <quorem+0x9c>
 8006940:	f04f 0e00 	mov.w	lr, #0
 8006944:	4640      	mov	r0, r8
 8006946:	46ac      	mov	ip, r5
 8006948:	46f2      	mov	sl, lr
 800694a:	f850 2b04 	ldr.w	r2, [r0], #4
 800694e:	b293      	uxth	r3, r2
 8006950:	fb06 e303 	mla	r3, r6, r3, lr
 8006954:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006958:	0c1a      	lsrs	r2, r3, #16
 800695a:	b29b      	uxth	r3, r3
 800695c:	ebaa 0303 	sub.w	r3, sl, r3
 8006960:	f8dc a000 	ldr.w	sl, [ip]
 8006964:	fa13 f38a 	uxtah	r3, r3, sl
 8006968:	fb06 220e 	mla	r2, r6, lr, r2
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	9b00      	ldr	r3, [sp, #0]
 8006970:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006974:	b292      	uxth	r2, r2
 8006976:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800697a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800697e:	f8bd 3000 	ldrh.w	r3, [sp]
 8006982:	4581      	cmp	r9, r0
 8006984:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006988:	f84c 3b04 	str.w	r3, [ip], #4
 800698c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006990:	d2db      	bcs.n	800694a <quorem+0x42>
 8006992:	f855 300b 	ldr.w	r3, [r5, fp]
 8006996:	b92b      	cbnz	r3, 80069a4 <quorem+0x9c>
 8006998:	9b01      	ldr	r3, [sp, #4]
 800699a:	3b04      	subs	r3, #4
 800699c:	429d      	cmp	r5, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	d32c      	bcc.n	80069fc <quorem+0xf4>
 80069a2:	613c      	str	r4, [r7, #16]
 80069a4:	4638      	mov	r0, r7
 80069a6:	f001 f9ef 	bl	8007d88 <__mcmp>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	db22      	blt.n	80069f4 <quorem+0xec>
 80069ae:	3601      	adds	r6, #1
 80069b0:	4629      	mov	r1, r5
 80069b2:	2000      	movs	r0, #0
 80069b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80069b8:	f8d1 c000 	ldr.w	ip, [r1]
 80069bc:	b293      	uxth	r3, r2
 80069be:	1ac3      	subs	r3, r0, r3
 80069c0:	0c12      	lsrs	r2, r2, #16
 80069c2:	fa13 f38c 	uxtah	r3, r3, ip
 80069c6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80069ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069d4:	45c1      	cmp	r9, r8
 80069d6:	f841 3b04 	str.w	r3, [r1], #4
 80069da:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069de:	d2e9      	bcs.n	80069b4 <quorem+0xac>
 80069e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069e8:	b922      	cbnz	r2, 80069f4 <quorem+0xec>
 80069ea:	3b04      	subs	r3, #4
 80069ec:	429d      	cmp	r5, r3
 80069ee:	461a      	mov	r2, r3
 80069f0:	d30a      	bcc.n	8006a08 <quorem+0x100>
 80069f2:	613c      	str	r4, [r7, #16]
 80069f4:	4630      	mov	r0, r6
 80069f6:	b003      	add	sp, #12
 80069f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	3b04      	subs	r3, #4
 8006a00:	2a00      	cmp	r2, #0
 8006a02:	d1ce      	bne.n	80069a2 <quorem+0x9a>
 8006a04:	3c01      	subs	r4, #1
 8006a06:	e7c9      	b.n	800699c <quorem+0x94>
 8006a08:	6812      	ldr	r2, [r2, #0]
 8006a0a:	3b04      	subs	r3, #4
 8006a0c:	2a00      	cmp	r2, #0
 8006a0e:	d1f0      	bne.n	80069f2 <quorem+0xea>
 8006a10:	3c01      	subs	r4, #1
 8006a12:	e7eb      	b.n	80069ec <quorem+0xe4>
 8006a14:	2000      	movs	r0, #0
 8006a16:	e7ee      	b.n	80069f6 <quorem+0xee>

08006a18 <_dtoa_r>:
 8006a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1c:	ed2d 8b04 	vpush	{d8-d9}
 8006a20:	69c5      	ldr	r5, [r0, #28]
 8006a22:	b093      	sub	sp, #76	; 0x4c
 8006a24:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a28:	ec57 6b10 	vmov	r6, r7, d0
 8006a2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a30:	9107      	str	r1, [sp, #28]
 8006a32:	4604      	mov	r4, r0
 8006a34:	920a      	str	r2, [sp, #40]	; 0x28
 8006a36:	930d      	str	r3, [sp, #52]	; 0x34
 8006a38:	b975      	cbnz	r5, 8006a58 <_dtoa_r+0x40>
 8006a3a:	2010      	movs	r0, #16
 8006a3c:	f000 fe2a 	bl	8007694 <malloc>
 8006a40:	4602      	mov	r2, r0
 8006a42:	61e0      	str	r0, [r4, #28]
 8006a44:	b920      	cbnz	r0, 8006a50 <_dtoa_r+0x38>
 8006a46:	4bae      	ldr	r3, [pc, #696]	; (8006d00 <_dtoa_r+0x2e8>)
 8006a48:	21ef      	movs	r1, #239	; 0xef
 8006a4a:	48ae      	ldr	r0, [pc, #696]	; (8006d04 <_dtoa_r+0x2ec>)
 8006a4c:	f002 fe3c 	bl	80096c8 <__assert_func>
 8006a50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a54:	6005      	str	r5, [r0, #0]
 8006a56:	60c5      	str	r5, [r0, #12]
 8006a58:	69e3      	ldr	r3, [r4, #28]
 8006a5a:	6819      	ldr	r1, [r3, #0]
 8006a5c:	b151      	cbz	r1, 8006a74 <_dtoa_r+0x5c>
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	604a      	str	r2, [r1, #4]
 8006a62:	2301      	movs	r3, #1
 8006a64:	4093      	lsls	r3, r2
 8006a66:	608b      	str	r3, [r1, #8]
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f000 ff07 	bl	800787c <_Bfree>
 8006a6e:	69e3      	ldr	r3, [r4, #28]
 8006a70:	2200      	movs	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	1e3b      	subs	r3, r7, #0
 8006a76:	bfbb      	ittet	lt
 8006a78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a7c:	9303      	strlt	r3, [sp, #12]
 8006a7e:	2300      	movge	r3, #0
 8006a80:	2201      	movlt	r2, #1
 8006a82:	bfac      	ite	ge
 8006a84:	f8c8 3000 	strge.w	r3, [r8]
 8006a88:	f8c8 2000 	strlt.w	r2, [r8]
 8006a8c:	4b9e      	ldr	r3, [pc, #632]	; (8006d08 <_dtoa_r+0x2f0>)
 8006a8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a92:	ea33 0308 	bics.w	r3, r3, r8
 8006a96:	d11b      	bne.n	8006ad0 <_dtoa_r+0xb8>
 8006a98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006aa4:	4333      	orrs	r3, r6
 8006aa6:	f000 8593 	beq.w	80075d0 <_dtoa_r+0xbb8>
 8006aaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006aac:	b963      	cbnz	r3, 8006ac8 <_dtoa_r+0xb0>
 8006aae:	4b97      	ldr	r3, [pc, #604]	; (8006d0c <_dtoa_r+0x2f4>)
 8006ab0:	e027      	b.n	8006b02 <_dtoa_r+0xea>
 8006ab2:	4b97      	ldr	r3, [pc, #604]	; (8006d10 <_dtoa_r+0x2f8>)
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006aba:	6013      	str	r3, [r2, #0]
 8006abc:	9800      	ldr	r0, [sp, #0]
 8006abe:	b013      	add	sp, #76	; 0x4c
 8006ac0:	ecbd 8b04 	vpop	{d8-d9}
 8006ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac8:	4b90      	ldr	r3, [pc, #576]	; (8006d0c <_dtoa_r+0x2f4>)
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	3303      	adds	r3, #3
 8006ace:	e7f3      	b.n	8006ab8 <_dtoa_r+0xa0>
 8006ad0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	ec51 0b17 	vmov	r0, r1, d7
 8006ada:	eeb0 8a47 	vmov.f32	s16, s14
 8006ade:	eef0 8a67 	vmov.f32	s17, s15
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f7f9 fff8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ae8:	4681      	mov	r9, r0
 8006aea:	b160      	cbz	r0, 8006b06 <_dtoa_r+0xee>
 8006aec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006aee:	2301      	movs	r3, #1
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 8568 	beq.w	80075ca <_dtoa_r+0xbb2>
 8006afa:	4b86      	ldr	r3, [pc, #536]	; (8006d14 <_dtoa_r+0x2fc>)
 8006afc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006afe:	6013      	str	r3, [r2, #0]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	e7da      	b.n	8006abc <_dtoa_r+0xa4>
 8006b06:	aa10      	add	r2, sp, #64	; 0x40
 8006b08:	a911      	add	r1, sp, #68	; 0x44
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	eeb0 0a48 	vmov.f32	s0, s16
 8006b10:	eef0 0a68 	vmov.f32	s1, s17
 8006b14:	f001 fa4e 	bl	8007fb4 <__d2b>
 8006b18:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006b1c:	4682      	mov	sl, r0
 8006b1e:	2d00      	cmp	r5, #0
 8006b20:	d07f      	beq.n	8006c22 <_dtoa_r+0x20a>
 8006b22:	ee18 3a90 	vmov	r3, s17
 8006b26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b2a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006b2e:	ec51 0b18 	vmov	r0, r1, d8
 8006b32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006b36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b3a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006b3e:	4619      	mov	r1, r3
 8006b40:	2200      	movs	r2, #0
 8006b42:	4b75      	ldr	r3, [pc, #468]	; (8006d18 <_dtoa_r+0x300>)
 8006b44:	f7f9 fba8 	bl	8000298 <__aeabi_dsub>
 8006b48:	a367      	add	r3, pc, #412	; (adr r3, 8006ce8 <_dtoa_r+0x2d0>)
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	f7f9 fd5b 	bl	8000608 <__aeabi_dmul>
 8006b52:	a367      	add	r3, pc, #412	; (adr r3, 8006cf0 <_dtoa_r+0x2d8>)
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f7f9 fba0 	bl	800029c <__adddf3>
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	4628      	mov	r0, r5
 8006b60:	460f      	mov	r7, r1
 8006b62:	f7f9 fce7 	bl	8000534 <__aeabi_i2d>
 8006b66:	a364      	add	r3, pc, #400	; (adr r3, 8006cf8 <_dtoa_r+0x2e0>)
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f7f9 fd4c 	bl	8000608 <__aeabi_dmul>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4630      	mov	r0, r6
 8006b76:	4639      	mov	r1, r7
 8006b78:	f7f9 fb90 	bl	800029c <__adddf3>
 8006b7c:	4606      	mov	r6, r0
 8006b7e:	460f      	mov	r7, r1
 8006b80:	f7f9 fff2 	bl	8000b68 <__aeabi_d2iz>
 8006b84:	2200      	movs	r2, #0
 8006b86:	4683      	mov	fp, r0
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	4639      	mov	r1, r7
 8006b8e:	f7f9 ffad 	bl	8000aec <__aeabi_dcmplt>
 8006b92:	b148      	cbz	r0, 8006ba8 <_dtoa_r+0x190>
 8006b94:	4658      	mov	r0, fp
 8006b96:	f7f9 fccd 	bl	8000534 <__aeabi_i2d>
 8006b9a:	4632      	mov	r2, r6
 8006b9c:	463b      	mov	r3, r7
 8006b9e:	f7f9 ff9b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ba2:	b908      	cbnz	r0, 8006ba8 <_dtoa_r+0x190>
 8006ba4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ba8:	f1bb 0f16 	cmp.w	fp, #22
 8006bac:	d857      	bhi.n	8006c5e <_dtoa_r+0x246>
 8006bae:	4b5b      	ldr	r3, [pc, #364]	; (8006d1c <_dtoa_r+0x304>)
 8006bb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	ec51 0b18 	vmov	r0, r1, d8
 8006bbc:	f7f9 ff96 	bl	8000aec <__aeabi_dcmplt>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d04e      	beq.n	8006c62 <_dtoa_r+0x24a>
 8006bc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bc8:	2300      	movs	r3, #0
 8006bca:	930c      	str	r3, [sp, #48]	; 0x30
 8006bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bce:	1b5b      	subs	r3, r3, r5
 8006bd0:	1e5a      	subs	r2, r3, #1
 8006bd2:	bf45      	ittet	mi
 8006bd4:	f1c3 0301 	rsbmi	r3, r3, #1
 8006bd8:	9305      	strmi	r3, [sp, #20]
 8006bda:	2300      	movpl	r3, #0
 8006bdc:	2300      	movmi	r3, #0
 8006bde:	9206      	str	r2, [sp, #24]
 8006be0:	bf54      	ite	pl
 8006be2:	9305      	strpl	r3, [sp, #20]
 8006be4:	9306      	strmi	r3, [sp, #24]
 8006be6:	f1bb 0f00 	cmp.w	fp, #0
 8006bea:	db3c      	blt.n	8006c66 <_dtoa_r+0x24e>
 8006bec:	9b06      	ldr	r3, [sp, #24]
 8006bee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006bf2:	445b      	add	r3, fp
 8006bf4:	9306      	str	r3, [sp, #24]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	9308      	str	r3, [sp, #32]
 8006bfa:	9b07      	ldr	r3, [sp, #28]
 8006bfc:	2b09      	cmp	r3, #9
 8006bfe:	d868      	bhi.n	8006cd2 <_dtoa_r+0x2ba>
 8006c00:	2b05      	cmp	r3, #5
 8006c02:	bfc4      	itt	gt
 8006c04:	3b04      	subgt	r3, #4
 8006c06:	9307      	strgt	r3, [sp, #28]
 8006c08:	9b07      	ldr	r3, [sp, #28]
 8006c0a:	f1a3 0302 	sub.w	r3, r3, #2
 8006c0e:	bfcc      	ite	gt
 8006c10:	2500      	movgt	r5, #0
 8006c12:	2501      	movle	r5, #1
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	f200 8085 	bhi.w	8006d24 <_dtoa_r+0x30c>
 8006c1a:	e8df f003 	tbb	[pc, r3]
 8006c1e:	3b2e      	.short	0x3b2e
 8006c20:	5839      	.short	0x5839
 8006c22:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c26:	441d      	add	r5, r3
 8006c28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c2c:	2b20      	cmp	r3, #32
 8006c2e:	bfc1      	itttt	gt
 8006c30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c34:	fa08 f803 	lslgt.w	r8, r8, r3
 8006c38:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006c3c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006c40:	bfd6      	itet	le
 8006c42:	f1c3 0320 	rsble	r3, r3, #32
 8006c46:	ea48 0003 	orrgt.w	r0, r8, r3
 8006c4a:	fa06 f003 	lslle.w	r0, r6, r3
 8006c4e:	f7f9 fc61 	bl	8000514 <__aeabi_ui2d>
 8006c52:	2201      	movs	r2, #1
 8006c54:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006c58:	3d01      	subs	r5, #1
 8006c5a:	920e      	str	r2, [sp, #56]	; 0x38
 8006c5c:	e76f      	b.n	8006b3e <_dtoa_r+0x126>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e7b3      	b.n	8006bca <_dtoa_r+0x1b2>
 8006c62:	900c      	str	r0, [sp, #48]	; 0x30
 8006c64:	e7b2      	b.n	8006bcc <_dtoa_r+0x1b4>
 8006c66:	9b05      	ldr	r3, [sp, #20]
 8006c68:	eba3 030b 	sub.w	r3, r3, fp
 8006c6c:	9305      	str	r3, [sp, #20]
 8006c6e:	f1cb 0300 	rsb	r3, fp, #0
 8006c72:	9308      	str	r3, [sp, #32]
 8006c74:	2300      	movs	r3, #0
 8006c76:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c78:	e7bf      	b.n	8006bfa <_dtoa_r+0x1e2>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	dc52      	bgt.n	8006d2a <_dtoa_r+0x312>
 8006c84:	2301      	movs	r3, #1
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	9304      	str	r3, [sp, #16]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	920a      	str	r2, [sp, #40]	; 0x28
 8006c8e:	e00b      	b.n	8006ca8 <_dtoa_r+0x290>
 8006c90:	2301      	movs	r3, #1
 8006c92:	e7f3      	b.n	8006c7c <_dtoa_r+0x264>
 8006c94:	2300      	movs	r3, #0
 8006c96:	9309      	str	r3, [sp, #36]	; 0x24
 8006c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c9a:	445b      	add	r3, fp
 8006c9c:	9301      	str	r3, [sp, #4]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	9304      	str	r3, [sp, #16]
 8006ca4:	bfb8      	it	lt
 8006ca6:	2301      	movlt	r3, #1
 8006ca8:	69e0      	ldr	r0, [r4, #28]
 8006caa:	2100      	movs	r1, #0
 8006cac:	2204      	movs	r2, #4
 8006cae:	f102 0614 	add.w	r6, r2, #20
 8006cb2:	429e      	cmp	r6, r3
 8006cb4:	d93d      	bls.n	8006d32 <_dtoa_r+0x31a>
 8006cb6:	6041      	str	r1, [r0, #4]
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 fd9f 	bl	80077fc <_Balloc>
 8006cbe:	9000      	str	r0, [sp, #0]
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d139      	bne.n	8006d38 <_dtoa_r+0x320>
 8006cc4:	4b16      	ldr	r3, [pc, #88]	; (8006d20 <_dtoa_r+0x308>)
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	f240 11af 	movw	r1, #431	; 0x1af
 8006ccc:	e6bd      	b.n	8006a4a <_dtoa_r+0x32>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e7e1      	b.n	8006c96 <_dtoa_r+0x27e>
 8006cd2:	2501      	movs	r5, #1
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	9307      	str	r3, [sp, #28]
 8006cd8:	9509      	str	r5, [sp, #36]	; 0x24
 8006cda:	f04f 33ff 	mov.w	r3, #4294967295
 8006cde:	9301      	str	r3, [sp, #4]
 8006ce0:	9304      	str	r3, [sp, #16]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	2312      	movs	r3, #18
 8006ce6:	e7d1      	b.n	8006c8c <_dtoa_r+0x274>
 8006ce8:	636f4361 	.word	0x636f4361
 8006cec:	3fd287a7 	.word	0x3fd287a7
 8006cf0:	8b60c8b3 	.word	0x8b60c8b3
 8006cf4:	3fc68a28 	.word	0x3fc68a28
 8006cf8:	509f79fb 	.word	0x509f79fb
 8006cfc:	3fd34413 	.word	0x3fd34413
 8006d00:	0800a216 	.word	0x0800a216
 8006d04:	0800a22d 	.word	0x0800a22d
 8006d08:	7ff00000 	.word	0x7ff00000
 8006d0c:	0800a212 	.word	0x0800a212
 8006d10:	0800a209 	.word	0x0800a209
 8006d14:	0800a1e1 	.word	0x0800a1e1
 8006d18:	3ff80000 	.word	0x3ff80000
 8006d1c:	0800a318 	.word	0x0800a318
 8006d20:	0800a285 	.word	0x0800a285
 8006d24:	2301      	movs	r3, #1
 8006d26:	9309      	str	r3, [sp, #36]	; 0x24
 8006d28:	e7d7      	b.n	8006cda <_dtoa_r+0x2c2>
 8006d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	9304      	str	r3, [sp, #16]
 8006d30:	e7ba      	b.n	8006ca8 <_dtoa_r+0x290>
 8006d32:	3101      	adds	r1, #1
 8006d34:	0052      	lsls	r2, r2, #1
 8006d36:	e7ba      	b.n	8006cae <_dtoa_r+0x296>
 8006d38:	69e3      	ldr	r3, [r4, #28]
 8006d3a:	9a00      	ldr	r2, [sp, #0]
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	9b04      	ldr	r3, [sp, #16]
 8006d40:	2b0e      	cmp	r3, #14
 8006d42:	f200 80a8 	bhi.w	8006e96 <_dtoa_r+0x47e>
 8006d46:	2d00      	cmp	r5, #0
 8006d48:	f000 80a5 	beq.w	8006e96 <_dtoa_r+0x47e>
 8006d4c:	f1bb 0f00 	cmp.w	fp, #0
 8006d50:	dd38      	ble.n	8006dc4 <_dtoa_r+0x3ac>
 8006d52:	4bc0      	ldr	r3, [pc, #768]	; (8007054 <_dtoa_r+0x63c>)
 8006d54:	f00b 020f 	and.w	r2, fp, #15
 8006d58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d5c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006d60:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006d64:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006d68:	d019      	beq.n	8006d9e <_dtoa_r+0x386>
 8006d6a:	4bbb      	ldr	r3, [pc, #748]	; (8007058 <_dtoa_r+0x640>)
 8006d6c:	ec51 0b18 	vmov	r0, r1, d8
 8006d70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d74:	f7f9 fd72 	bl	800085c <__aeabi_ddiv>
 8006d78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d7c:	f008 080f 	and.w	r8, r8, #15
 8006d80:	2503      	movs	r5, #3
 8006d82:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007058 <_dtoa_r+0x640>
 8006d86:	f1b8 0f00 	cmp.w	r8, #0
 8006d8a:	d10a      	bne.n	8006da2 <_dtoa_r+0x38a>
 8006d8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d90:	4632      	mov	r2, r6
 8006d92:	463b      	mov	r3, r7
 8006d94:	f7f9 fd62 	bl	800085c <__aeabi_ddiv>
 8006d98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d9c:	e02b      	b.n	8006df6 <_dtoa_r+0x3de>
 8006d9e:	2502      	movs	r5, #2
 8006da0:	e7ef      	b.n	8006d82 <_dtoa_r+0x36a>
 8006da2:	f018 0f01 	tst.w	r8, #1
 8006da6:	d008      	beq.n	8006dba <_dtoa_r+0x3a2>
 8006da8:	4630      	mov	r0, r6
 8006daa:	4639      	mov	r1, r7
 8006dac:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006db0:	f7f9 fc2a 	bl	8000608 <__aeabi_dmul>
 8006db4:	3501      	adds	r5, #1
 8006db6:	4606      	mov	r6, r0
 8006db8:	460f      	mov	r7, r1
 8006dba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006dbe:	f109 0908 	add.w	r9, r9, #8
 8006dc2:	e7e0      	b.n	8006d86 <_dtoa_r+0x36e>
 8006dc4:	f000 809f 	beq.w	8006f06 <_dtoa_r+0x4ee>
 8006dc8:	f1cb 0600 	rsb	r6, fp, #0
 8006dcc:	4ba1      	ldr	r3, [pc, #644]	; (8007054 <_dtoa_r+0x63c>)
 8006dce:	4fa2      	ldr	r7, [pc, #648]	; (8007058 <_dtoa_r+0x640>)
 8006dd0:	f006 020f 	and.w	r2, r6, #15
 8006dd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	ec51 0b18 	vmov	r0, r1, d8
 8006de0:	f7f9 fc12 	bl	8000608 <__aeabi_dmul>
 8006de4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006de8:	1136      	asrs	r6, r6, #4
 8006dea:	2300      	movs	r3, #0
 8006dec:	2502      	movs	r5, #2
 8006dee:	2e00      	cmp	r6, #0
 8006df0:	d17e      	bne.n	8006ef0 <_dtoa_r+0x4d8>
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1d0      	bne.n	8006d98 <_dtoa_r+0x380>
 8006df6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006df8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 8084 	beq.w	8006f0a <_dtoa_r+0x4f2>
 8006e02:	4b96      	ldr	r3, [pc, #600]	; (800705c <_dtoa_r+0x644>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	4640      	mov	r0, r8
 8006e08:	4649      	mov	r1, r9
 8006e0a:	f7f9 fe6f 	bl	8000aec <__aeabi_dcmplt>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d07b      	beq.n	8006f0a <_dtoa_r+0x4f2>
 8006e12:	9b04      	ldr	r3, [sp, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d078      	beq.n	8006f0a <_dtoa_r+0x4f2>
 8006e18:	9b01      	ldr	r3, [sp, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dd39      	ble.n	8006e92 <_dtoa_r+0x47a>
 8006e1e:	4b90      	ldr	r3, [pc, #576]	; (8007060 <_dtoa_r+0x648>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	4640      	mov	r0, r8
 8006e24:	4649      	mov	r1, r9
 8006e26:	f7f9 fbef 	bl	8000608 <__aeabi_dmul>
 8006e2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e2e:	9e01      	ldr	r6, [sp, #4]
 8006e30:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006e34:	3501      	adds	r5, #1
 8006e36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	f7f9 fb7a 	bl	8000534 <__aeabi_i2d>
 8006e40:	4642      	mov	r2, r8
 8006e42:	464b      	mov	r3, r9
 8006e44:	f7f9 fbe0 	bl	8000608 <__aeabi_dmul>
 8006e48:	4b86      	ldr	r3, [pc, #536]	; (8007064 <_dtoa_r+0x64c>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f7f9 fa26 	bl	800029c <__adddf3>
 8006e50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e58:	9303      	str	r3, [sp, #12]
 8006e5a:	2e00      	cmp	r6, #0
 8006e5c:	d158      	bne.n	8006f10 <_dtoa_r+0x4f8>
 8006e5e:	4b82      	ldr	r3, [pc, #520]	; (8007068 <_dtoa_r+0x650>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	4640      	mov	r0, r8
 8006e64:	4649      	mov	r1, r9
 8006e66:	f7f9 fa17 	bl	8000298 <__aeabi_dsub>
 8006e6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e6e:	4680      	mov	r8, r0
 8006e70:	4689      	mov	r9, r1
 8006e72:	f7f9 fe59 	bl	8000b28 <__aeabi_dcmpgt>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	f040 8296 	bne.w	80073a8 <_dtoa_r+0x990>
 8006e7c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006e80:	4640      	mov	r0, r8
 8006e82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e86:	4649      	mov	r1, r9
 8006e88:	f7f9 fe30 	bl	8000aec <__aeabi_dcmplt>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	f040 8289 	bne.w	80073a4 <_dtoa_r+0x98c>
 8006e92:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006e96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f2c0 814e 	blt.w	800713a <_dtoa_r+0x722>
 8006e9e:	f1bb 0f0e 	cmp.w	fp, #14
 8006ea2:	f300 814a 	bgt.w	800713a <_dtoa_r+0x722>
 8006ea6:	4b6b      	ldr	r3, [pc, #428]	; (8007054 <_dtoa_r+0x63c>)
 8006ea8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006eac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f280 80dc 	bge.w	8007070 <_dtoa_r+0x658>
 8006eb8:	9b04      	ldr	r3, [sp, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f300 80d8 	bgt.w	8007070 <_dtoa_r+0x658>
 8006ec0:	f040 826f 	bne.w	80073a2 <_dtoa_r+0x98a>
 8006ec4:	4b68      	ldr	r3, [pc, #416]	; (8007068 <_dtoa_r+0x650>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	4640      	mov	r0, r8
 8006eca:	4649      	mov	r1, r9
 8006ecc:	f7f9 fb9c 	bl	8000608 <__aeabi_dmul>
 8006ed0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ed4:	f7f9 fe1e 	bl	8000b14 <__aeabi_dcmpge>
 8006ed8:	9e04      	ldr	r6, [sp, #16]
 8006eda:	4637      	mov	r7, r6
 8006edc:	2800      	cmp	r0, #0
 8006ede:	f040 8245 	bne.w	800736c <_dtoa_r+0x954>
 8006ee2:	9d00      	ldr	r5, [sp, #0]
 8006ee4:	2331      	movs	r3, #49	; 0x31
 8006ee6:	f805 3b01 	strb.w	r3, [r5], #1
 8006eea:	f10b 0b01 	add.w	fp, fp, #1
 8006eee:	e241      	b.n	8007374 <_dtoa_r+0x95c>
 8006ef0:	07f2      	lsls	r2, r6, #31
 8006ef2:	d505      	bpl.n	8006f00 <_dtoa_r+0x4e8>
 8006ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef8:	f7f9 fb86 	bl	8000608 <__aeabi_dmul>
 8006efc:	3501      	adds	r5, #1
 8006efe:	2301      	movs	r3, #1
 8006f00:	1076      	asrs	r6, r6, #1
 8006f02:	3708      	adds	r7, #8
 8006f04:	e773      	b.n	8006dee <_dtoa_r+0x3d6>
 8006f06:	2502      	movs	r5, #2
 8006f08:	e775      	b.n	8006df6 <_dtoa_r+0x3de>
 8006f0a:	9e04      	ldr	r6, [sp, #16]
 8006f0c:	465f      	mov	r7, fp
 8006f0e:	e792      	b.n	8006e36 <_dtoa_r+0x41e>
 8006f10:	9900      	ldr	r1, [sp, #0]
 8006f12:	4b50      	ldr	r3, [pc, #320]	; (8007054 <_dtoa_r+0x63c>)
 8006f14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f18:	4431      	add	r1, r6
 8006f1a:	9102      	str	r1, [sp, #8]
 8006f1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f1e:	eeb0 9a47 	vmov.f32	s18, s14
 8006f22:	eef0 9a67 	vmov.f32	s19, s15
 8006f26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f2e:	2900      	cmp	r1, #0
 8006f30:	d044      	beq.n	8006fbc <_dtoa_r+0x5a4>
 8006f32:	494e      	ldr	r1, [pc, #312]	; (800706c <_dtoa_r+0x654>)
 8006f34:	2000      	movs	r0, #0
 8006f36:	f7f9 fc91 	bl	800085c <__aeabi_ddiv>
 8006f3a:	ec53 2b19 	vmov	r2, r3, d9
 8006f3e:	f7f9 f9ab 	bl	8000298 <__aeabi_dsub>
 8006f42:	9d00      	ldr	r5, [sp, #0]
 8006f44:	ec41 0b19 	vmov	d9, r0, r1
 8006f48:	4649      	mov	r1, r9
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	f7f9 fe0c 	bl	8000b68 <__aeabi_d2iz>
 8006f50:	4606      	mov	r6, r0
 8006f52:	f7f9 faef 	bl	8000534 <__aeabi_i2d>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	f7f9 f99b 	bl	8000298 <__aeabi_dsub>
 8006f62:	3630      	adds	r6, #48	; 0x30
 8006f64:	f805 6b01 	strb.w	r6, [r5], #1
 8006f68:	ec53 2b19 	vmov	r2, r3, d9
 8006f6c:	4680      	mov	r8, r0
 8006f6e:	4689      	mov	r9, r1
 8006f70:	f7f9 fdbc 	bl	8000aec <__aeabi_dcmplt>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d164      	bne.n	8007042 <_dtoa_r+0x62a>
 8006f78:	4642      	mov	r2, r8
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	4937      	ldr	r1, [pc, #220]	; (800705c <_dtoa_r+0x644>)
 8006f7e:	2000      	movs	r0, #0
 8006f80:	f7f9 f98a 	bl	8000298 <__aeabi_dsub>
 8006f84:	ec53 2b19 	vmov	r2, r3, d9
 8006f88:	f7f9 fdb0 	bl	8000aec <__aeabi_dcmplt>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	f040 80b6 	bne.w	80070fe <_dtoa_r+0x6e6>
 8006f92:	9b02      	ldr	r3, [sp, #8]
 8006f94:	429d      	cmp	r5, r3
 8006f96:	f43f af7c 	beq.w	8006e92 <_dtoa_r+0x47a>
 8006f9a:	4b31      	ldr	r3, [pc, #196]	; (8007060 <_dtoa_r+0x648>)
 8006f9c:	ec51 0b19 	vmov	r0, r1, d9
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f7f9 fb31 	bl	8000608 <__aeabi_dmul>
 8006fa6:	4b2e      	ldr	r3, [pc, #184]	; (8007060 <_dtoa_r+0x648>)
 8006fa8:	ec41 0b19 	vmov	d9, r0, r1
 8006fac:	2200      	movs	r2, #0
 8006fae:	4640      	mov	r0, r8
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	f7f9 fb29 	bl	8000608 <__aeabi_dmul>
 8006fb6:	4680      	mov	r8, r0
 8006fb8:	4689      	mov	r9, r1
 8006fba:	e7c5      	b.n	8006f48 <_dtoa_r+0x530>
 8006fbc:	ec51 0b17 	vmov	r0, r1, d7
 8006fc0:	f7f9 fb22 	bl	8000608 <__aeabi_dmul>
 8006fc4:	9b02      	ldr	r3, [sp, #8]
 8006fc6:	9d00      	ldr	r5, [sp, #0]
 8006fc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fca:	ec41 0b19 	vmov	d9, r0, r1
 8006fce:	4649      	mov	r1, r9
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	f7f9 fdc9 	bl	8000b68 <__aeabi_d2iz>
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	f7f9 faac 	bl	8000534 <__aeabi_i2d>
 8006fdc:	3630      	adds	r6, #48	; 0x30
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	f7f9 f957 	bl	8000298 <__aeabi_dsub>
 8006fea:	f805 6b01 	strb.w	r6, [r5], #1
 8006fee:	9b02      	ldr	r3, [sp, #8]
 8006ff0:	429d      	cmp	r5, r3
 8006ff2:	4680      	mov	r8, r0
 8006ff4:	4689      	mov	r9, r1
 8006ff6:	f04f 0200 	mov.w	r2, #0
 8006ffa:	d124      	bne.n	8007046 <_dtoa_r+0x62e>
 8006ffc:	4b1b      	ldr	r3, [pc, #108]	; (800706c <_dtoa_r+0x654>)
 8006ffe:	ec51 0b19 	vmov	r0, r1, d9
 8007002:	f7f9 f94b 	bl	800029c <__adddf3>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4640      	mov	r0, r8
 800700c:	4649      	mov	r1, r9
 800700e:	f7f9 fd8b 	bl	8000b28 <__aeabi_dcmpgt>
 8007012:	2800      	cmp	r0, #0
 8007014:	d173      	bne.n	80070fe <_dtoa_r+0x6e6>
 8007016:	ec53 2b19 	vmov	r2, r3, d9
 800701a:	4914      	ldr	r1, [pc, #80]	; (800706c <_dtoa_r+0x654>)
 800701c:	2000      	movs	r0, #0
 800701e:	f7f9 f93b 	bl	8000298 <__aeabi_dsub>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4640      	mov	r0, r8
 8007028:	4649      	mov	r1, r9
 800702a:	f7f9 fd5f 	bl	8000aec <__aeabi_dcmplt>
 800702e:	2800      	cmp	r0, #0
 8007030:	f43f af2f 	beq.w	8006e92 <_dtoa_r+0x47a>
 8007034:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007036:	1e6b      	subs	r3, r5, #1
 8007038:	930f      	str	r3, [sp, #60]	; 0x3c
 800703a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800703e:	2b30      	cmp	r3, #48	; 0x30
 8007040:	d0f8      	beq.n	8007034 <_dtoa_r+0x61c>
 8007042:	46bb      	mov	fp, r7
 8007044:	e04a      	b.n	80070dc <_dtoa_r+0x6c4>
 8007046:	4b06      	ldr	r3, [pc, #24]	; (8007060 <_dtoa_r+0x648>)
 8007048:	f7f9 fade 	bl	8000608 <__aeabi_dmul>
 800704c:	4680      	mov	r8, r0
 800704e:	4689      	mov	r9, r1
 8007050:	e7bd      	b.n	8006fce <_dtoa_r+0x5b6>
 8007052:	bf00      	nop
 8007054:	0800a318 	.word	0x0800a318
 8007058:	0800a2f0 	.word	0x0800a2f0
 800705c:	3ff00000 	.word	0x3ff00000
 8007060:	40240000 	.word	0x40240000
 8007064:	401c0000 	.word	0x401c0000
 8007068:	40140000 	.word	0x40140000
 800706c:	3fe00000 	.word	0x3fe00000
 8007070:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007074:	9d00      	ldr	r5, [sp, #0]
 8007076:	4642      	mov	r2, r8
 8007078:	464b      	mov	r3, r9
 800707a:	4630      	mov	r0, r6
 800707c:	4639      	mov	r1, r7
 800707e:	f7f9 fbed 	bl	800085c <__aeabi_ddiv>
 8007082:	f7f9 fd71 	bl	8000b68 <__aeabi_d2iz>
 8007086:	9001      	str	r0, [sp, #4]
 8007088:	f7f9 fa54 	bl	8000534 <__aeabi_i2d>
 800708c:	4642      	mov	r2, r8
 800708e:	464b      	mov	r3, r9
 8007090:	f7f9 faba 	bl	8000608 <__aeabi_dmul>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4630      	mov	r0, r6
 800709a:	4639      	mov	r1, r7
 800709c:	f7f9 f8fc 	bl	8000298 <__aeabi_dsub>
 80070a0:	9e01      	ldr	r6, [sp, #4]
 80070a2:	9f04      	ldr	r7, [sp, #16]
 80070a4:	3630      	adds	r6, #48	; 0x30
 80070a6:	f805 6b01 	strb.w	r6, [r5], #1
 80070aa:	9e00      	ldr	r6, [sp, #0]
 80070ac:	1bae      	subs	r6, r5, r6
 80070ae:	42b7      	cmp	r7, r6
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	d134      	bne.n	8007120 <_dtoa_r+0x708>
 80070b6:	f7f9 f8f1 	bl	800029c <__adddf3>
 80070ba:	4642      	mov	r2, r8
 80070bc:	464b      	mov	r3, r9
 80070be:	4606      	mov	r6, r0
 80070c0:	460f      	mov	r7, r1
 80070c2:	f7f9 fd31 	bl	8000b28 <__aeabi_dcmpgt>
 80070c6:	b9c8      	cbnz	r0, 80070fc <_dtoa_r+0x6e4>
 80070c8:	4642      	mov	r2, r8
 80070ca:	464b      	mov	r3, r9
 80070cc:	4630      	mov	r0, r6
 80070ce:	4639      	mov	r1, r7
 80070d0:	f7f9 fd02 	bl	8000ad8 <__aeabi_dcmpeq>
 80070d4:	b110      	cbz	r0, 80070dc <_dtoa_r+0x6c4>
 80070d6:	9b01      	ldr	r3, [sp, #4]
 80070d8:	07db      	lsls	r3, r3, #31
 80070da:	d40f      	bmi.n	80070fc <_dtoa_r+0x6e4>
 80070dc:	4651      	mov	r1, sl
 80070de:	4620      	mov	r0, r4
 80070e0:	f000 fbcc 	bl	800787c <_Bfree>
 80070e4:	2300      	movs	r3, #0
 80070e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070e8:	702b      	strb	r3, [r5, #0]
 80070ea:	f10b 0301 	add.w	r3, fp, #1
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f43f ace2 	beq.w	8006abc <_dtoa_r+0xa4>
 80070f8:	601d      	str	r5, [r3, #0]
 80070fa:	e4df      	b.n	8006abc <_dtoa_r+0xa4>
 80070fc:	465f      	mov	r7, fp
 80070fe:	462b      	mov	r3, r5
 8007100:	461d      	mov	r5, r3
 8007102:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007106:	2a39      	cmp	r2, #57	; 0x39
 8007108:	d106      	bne.n	8007118 <_dtoa_r+0x700>
 800710a:	9a00      	ldr	r2, [sp, #0]
 800710c:	429a      	cmp	r2, r3
 800710e:	d1f7      	bne.n	8007100 <_dtoa_r+0x6e8>
 8007110:	9900      	ldr	r1, [sp, #0]
 8007112:	2230      	movs	r2, #48	; 0x30
 8007114:	3701      	adds	r7, #1
 8007116:	700a      	strb	r2, [r1, #0]
 8007118:	781a      	ldrb	r2, [r3, #0]
 800711a:	3201      	adds	r2, #1
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	e790      	b.n	8007042 <_dtoa_r+0x62a>
 8007120:	4ba3      	ldr	r3, [pc, #652]	; (80073b0 <_dtoa_r+0x998>)
 8007122:	2200      	movs	r2, #0
 8007124:	f7f9 fa70 	bl	8000608 <__aeabi_dmul>
 8007128:	2200      	movs	r2, #0
 800712a:	2300      	movs	r3, #0
 800712c:	4606      	mov	r6, r0
 800712e:	460f      	mov	r7, r1
 8007130:	f7f9 fcd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007134:	2800      	cmp	r0, #0
 8007136:	d09e      	beq.n	8007076 <_dtoa_r+0x65e>
 8007138:	e7d0      	b.n	80070dc <_dtoa_r+0x6c4>
 800713a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800713c:	2a00      	cmp	r2, #0
 800713e:	f000 80ca 	beq.w	80072d6 <_dtoa_r+0x8be>
 8007142:	9a07      	ldr	r2, [sp, #28]
 8007144:	2a01      	cmp	r2, #1
 8007146:	f300 80ad 	bgt.w	80072a4 <_dtoa_r+0x88c>
 800714a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800714c:	2a00      	cmp	r2, #0
 800714e:	f000 80a5 	beq.w	800729c <_dtoa_r+0x884>
 8007152:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007156:	9e08      	ldr	r6, [sp, #32]
 8007158:	9d05      	ldr	r5, [sp, #20]
 800715a:	9a05      	ldr	r2, [sp, #20]
 800715c:	441a      	add	r2, r3
 800715e:	9205      	str	r2, [sp, #20]
 8007160:	9a06      	ldr	r2, [sp, #24]
 8007162:	2101      	movs	r1, #1
 8007164:	441a      	add	r2, r3
 8007166:	4620      	mov	r0, r4
 8007168:	9206      	str	r2, [sp, #24]
 800716a:	f000 fc87 	bl	8007a7c <__i2b>
 800716e:	4607      	mov	r7, r0
 8007170:	b165      	cbz	r5, 800718c <_dtoa_r+0x774>
 8007172:	9b06      	ldr	r3, [sp, #24]
 8007174:	2b00      	cmp	r3, #0
 8007176:	dd09      	ble.n	800718c <_dtoa_r+0x774>
 8007178:	42ab      	cmp	r3, r5
 800717a:	9a05      	ldr	r2, [sp, #20]
 800717c:	bfa8      	it	ge
 800717e:	462b      	movge	r3, r5
 8007180:	1ad2      	subs	r2, r2, r3
 8007182:	9205      	str	r2, [sp, #20]
 8007184:	9a06      	ldr	r2, [sp, #24]
 8007186:	1aed      	subs	r5, r5, r3
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	9306      	str	r3, [sp, #24]
 800718c:	9b08      	ldr	r3, [sp, #32]
 800718e:	b1f3      	cbz	r3, 80071ce <_dtoa_r+0x7b6>
 8007190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 80a3 	beq.w	80072de <_dtoa_r+0x8c6>
 8007198:	2e00      	cmp	r6, #0
 800719a:	dd10      	ble.n	80071be <_dtoa_r+0x7a6>
 800719c:	4639      	mov	r1, r7
 800719e:	4632      	mov	r2, r6
 80071a0:	4620      	mov	r0, r4
 80071a2:	f000 fd2b 	bl	8007bfc <__pow5mult>
 80071a6:	4652      	mov	r2, sl
 80071a8:	4601      	mov	r1, r0
 80071aa:	4607      	mov	r7, r0
 80071ac:	4620      	mov	r0, r4
 80071ae:	f000 fc7b 	bl	8007aa8 <__multiply>
 80071b2:	4651      	mov	r1, sl
 80071b4:	4680      	mov	r8, r0
 80071b6:	4620      	mov	r0, r4
 80071b8:	f000 fb60 	bl	800787c <_Bfree>
 80071bc:	46c2      	mov	sl, r8
 80071be:	9b08      	ldr	r3, [sp, #32]
 80071c0:	1b9a      	subs	r2, r3, r6
 80071c2:	d004      	beq.n	80071ce <_dtoa_r+0x7b6>
 80071c4:	4651      	mov	r1, sl
 80071c6:	4620      	mov	r0, r4
 80071c8:	f000 fd18 	bl	8007bfc <__pow5mult>
 80071cc:	4682      	mov	sl, r0
 80071ce:	2101      	movs	r1, #1
 80071d0:	4620      	mov	r0, r4
 80071d2:	f000 fc53 	bl	8007a7c <__i2b>
 80071d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	4606      	mov	r6, r0
 80071dc:	f340 8081 	ble.w	80072e2 <_dtoa_r+0x8ca>
 80071e0:	461a      	mov	r2, r3
 80071e2:	4601      	mov	r1, r0
 80071e4:	4620      	mov	r0, r4
 80071e6:	f000 fd09 	bl	8007bfc <__pow5mult>
 80071ea:	9b07      	ldr	r3, [sp, #28]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	4606      	mov	r6, r0
 80071f0:	dd7a      	ble.n	80072e8 <_dtoa_r+0x8d0>
 80071f2:	f04f 0800 	mov.w	r8, #0
 80071f6:	6933      	ldr	r3, [r6, #16]
 80071f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071fc:	6918      	ldr	r0, [r3, #16]
 80071fe:	f000 fbef 	bl	80079e0 <__hi0bits>
 8007202:	f1c0 0020 	rsb	r0, r0, #32
 8007206:	9b06      	ldr	r3, [sp, #24]
 8007208:	4418      	add	r0, r3
 800720a:	f010 001f 	ands.w	r0, r0, #31
 800720e:	f000 8094 	beq.w	800733a <_dtoa_r+0x922>
 8007212:	f1c0 0320 	rsb	r3, r0, #32
 8007216:	2b04      	cmp	r3, #4
 8007218:	f340 8085 	ble.w	8007326 <_dtoa_r+0x90e>
 800721c:	9b05      	ldr	r3, [sp, #20]
 800721e:	f1c0 001c 	rsb	r0, r0, #28
 8007222:	4403      	add	r3, r0
 8007224:	9305      	str	r3, [sp, #20]
 8007226:	9b06      	ldr	r3, [sp, #24]
 8007228:	4403      	add	r3, r0
 800722a:	4405      	add	r5, r0
 800722c:	9306      	str	r3, [sp, #24]
 800722e:	9b05      	ldr	r3, [sp, #20]
 8007230:	2b00      	cmp	r3, #0
 8007232:	dd05      	ble.n	8007240 <_dtoa_r+0x828>
 8007234:	4651      	mov	r1, sl
 8007236:	461a      	mov	r2, r3
 8007238:	4620      	mov	r0, r4
 800723a:	f000 fd39 	bl	8007cb0 <__lshift>
 800723e:	4682      	mov	sl, r0
 8007240:	9b06      	ldr	r3, [sp, #24]
 8007242:	2b00      	cmp	r3, #0
 8007244:	dd05      	ble.n	8007252 <_dtoa_r+0x83a>
 8007246:	4631      	mov	r1, r6
 8007248:	461a      	mov	r2, r3
 800724a:	4620      	mov	r0, r4
 800724c:	f000 fd30 	bl	8007cb0 <__lshift>
 8007250:	4606      	mov	r6, r0
 8007252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007254:	2b00      	cmp	r3, #0
 8007256:	d072      	beq.n	800733e <_dtoa_r+0x926>
 8007258:	4631      	mov	r1, r6
 800725a:	4650      	mov	r0, sl
 800725c:	f000 fd94 	bl	8007d88 <__mcmp>
 8007260:	2800      	cmp	r0, #0
 8007262:	da6c      	bge.n	800733e <_dtoa_r+0x926>
 8007264:	2300      	movs	r3, #0
 8007266:	4651      	mov	r1, sl
 8007268:	220a      	movs	r2, #10
 800726a:	4620      	mov	r0, r4
 800726c:	f000 fb28 	bl	80078c0 <__multadd>
 8007270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007272:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007276:	4682      	mov	sl, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	f000 81b0 	beq.w	80075de <_dtoa_r+0xbc6>
 800727e:	2300      	movs	r3, #0
 8007280:	4639      	mov	r1, r7
 8007282:	220a      	movs	r2, #10
 8007284:	4620      	mov	r0, r4
 8007286:	f000 fb1b 	bl	80078c0 <__multadd>
 800728a:	9b01      	ldr	r3, [sp, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	4607      	mov	r7, r0
 8007290:	f300 8096 	bgt.w	80073c0 <_dtoa_r+0x9a8>
 8007294:	9b07      	ldr	r3, [sp, #28]
 8007296:	2b02      	cmp	r3, #2
 8007298:	dc59      	bgt.n	800734e <_dtoa_r+0x936>
 800729a:	e091      	b.n	80073c0 <_dtoa_r+0x9a8>
 800729c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800729e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072a2:	e758      	b.n	8007156 <_dtoa_r+0x73e>
 80072a4:	9b04      	ldr	r3, [sp, #16]
 80072a6:	1e5e      	subs	r6, r3, #1
 80072a8:	9b08      	ldr	r3, [sp, #32]
 80072aa:	42b3      	cmp	r3, r6
 80072ac:	bfbf      	itttt	lt
 80072ae:	9b08      	ldrlt	r3, [sp, #32]
 80072b0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80072b2:	9608      	strlt	r6, [sp, #32]
 80072b4:	1af3      	sublt	r3, r6, r3
 80072b6:	bfb4      	ite	lt
 80072b8:	18d2      	addlt	r2, r2, r3
 80072ba:	1b9e      	subge	r6, r3, r6
 80072bc:	9b04      	ldr	r3, [sp, #16]
 80072be:	bfbc      	itt	lt
 80072c0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80072c2:	2600      	movlt	r6, #0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	bfb7      	itett	lt
 80072c8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80072cc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80072d0:	1a9d      	sublt	r5, r3, r2
 80072d2:	2300      	movlt	r3, #0
 80072d4:	e741      	b.n	800715a <_dtoa_r+0x742>
 80072d6:	9e08      	ldr	r6, [sp, #32]
 80072d8:	9d05      	ldr	r5, [sp, #20]
 80072da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80072dc:	e748      	b.n	8007170 <_dtoa_r+0x758>
 80072de:	9a08      	ldr	r2, [sp, #32]
 80072e0:	e770      	b.n	80071c4 <_dtoa_r+0x7ac>
 80072e2:	9b07      	ldr	r3, [sp, #28]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	dc19      	bgt.n	800731c <_dtoa_r+0x904>
 80072e8:	9b02      	ldr	r3, [sp, #8]
 80072ea:	b9bb      	cbnz	r3, 800731c <_dtoa_r+0x904>
 80072ec:	9b03      	ldr	r3, [sp, #12]
 80072ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072f2:	b99b      	cbnz	r3, 800731c <_dtoa_r+0x904>
 80072f4:	9b03      	ldr	r3, [sp, #12]
 80072f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072fa:	0d1b      	lsrs	r3, r3, #20
 80072fc:	051b      	lsls	r3, r3, #20
 80072fe:	b183      	cbz	r3, 8007322 <_dtoa_r+0x90a>
 8007300:	9b05      	ldr	r3, [sp, #20]
 8007302:	3301      	adds	r3, #1
 8007304:	9305      	str	r3, [sp, #20]
 8007306:	9b06      	ldr	r3, [sp, #24]
 8007308:	3301      	adds	r3, #1
 800730a:	9306      	str	r3, [sp, #24]
 800730c:	f04f 0801 	mov.w	r8, #1
 8007310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007312:	2b00      	cmp	r3, #0
 8007314:	f47f af6f 	bne.w	80071f6 <_dtoa_r+0x7de>
 8007318:	2001      	movs	r0, #1
 800731a:	e774      	b.n	8007206 <_dtoa_r+0x7ee>
 800731c:	f04f 0800 	mov.w	r8, #0
 8007320:	e7f6      	b.n	8007310 <_dtoa_r+0x8f8>
 8007322:	4698      	mov	r8, r3
 8007324:	e7f4      	b.n	8007310 <_dtoa_r+0x8f8>
 8007326:	d082      	beq.n	800722e <_dtoa_r+0x816>
 8007328:	9a05      	ldr	r2, [sp, #20]
 800732a:	331c      	adds	r3, #28
 800732c:	441a      	add	r2, r3
 800732e:	9205      	str	r2, [sp, #20]
 8007330:	9a06      	ldr	r2, [sp, #24]
 8007332:	441a      	add	r2, r3
 8007334:	441d      	add	r5, r3
 8007336:	9206      	str	r2, [sp, #24]
 8007338:	e779      	b.n	800722e <_dtoa_r+0x816>
 800733a:	4603      	mov	r3, r0
 800733c:	e7f4      	b.n	8007328 <_dtoa_r+0x910>
 800733e:	9b04      	ldr	r3, [sp, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	dc37      	bgt.n	80073b4 <_dtoa_r+0x99c>
 8007344:	9b07      	ldr	r3, [sp, #28]
 8007346:	2b02      	cmp	r3, #2
 8007348:	dd34      	ble.n	80073b4 <_dtoa_r+0x99c>
 800734a:	9b04      	ldr	r3, [sp, #16]
 800734c:	9301      	str	r3, [sp, #4]
 800734e:	9b01      	ldr	r3, [sp, #4]
 8007350:	b963      	cbnz	r3, 800736c <_dtoa_r+0x954>
 8007352:	4631      	mov	r1, r6
 8007354:	2205      	movs	r2, #5
 8007356:	4620      	mov	r0, r4
 8007358:	f000 fab2 	bl	80078c0 <__multadd>
 800735c:	4601      	mov	r1, r0
 800735e:	4606      	mov	r6, r0
 8007360:	4650      	mov	r0, sl
 8007362:	f000 fd11 	bl	8007d88 <__mcmp>
 8007366:	2800      	cmp	r0, #0
 8007368:	f73f adbb 	bgt.w	8006ee2 <_dtoa_r+0x4ca>
 800736c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800736e:	9d00      	ldr	r5, [sp, #0]
 8007370:	ea6f 0b03 	mvn.w	fp, r3
 8007374:	f04f 0800 	mov.w	r8, #0
 8007378:	4631      	mov	r1, r6
 800737a:	4620      	mov	r0, r4
 800737c:	f000 fa7e 	bl	800787c <_Bfree>
 8007380:	2f00      	cmp	r7, #0
 8007382:	f43f aeab 	beq.w	80070dc <_dtoa_r+0x6c4>
 8007386:	f1b8 0f00 	cmp.w	r8, #0
 800738a:	d005      	beq.n	8007398 <_dtoa_r+0x980>
 800738c:	45b8      	cmp	r8, r7
 800738e:	d003      	beq.n	8007398 <_dtoa_r+0x980>
 8007390:	4641      	mov	r1, r8
 8007392:	4620      	mov	r0, r4
 8007394:	f000 fa72 	bl	800787c <_Bfree>
 8007398:	4639      	mov	r1, r7
 800739a:	4620      	mov	r0, r4
 800739c:	f000 fa6e 	bl	800787c <_Bfree>
 80073a0:	e69c      	b.n	80070dc <_dtoa_r+0x6c4>
 80073a2:	2600      	movs	r6, #0
 80073a4:	4637      	mov	r7, r6
 80073a6:	e7e1      	b.n	800736c <_dtoa_r+0x954>
 80073a8:	46bb      	mov	fp, r7
 80073aa:	4637      	mov	r7, r6
 80073ac:	e599      	b.n	8006ee2 <_dtoa_r+0x4ca>
 80073ae:	bf00      	nop
 80073b0:	40240000 	.word	0x40240000
 80073b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 80c8 	beq.w	800754c <_dtoa_r+0xb34>
 80073bc:	9b04      	ldr	r3, [sp, #16]
 80073be:	9301      	str	r3, [sp, #4]
 80073c0:	2d00      	cmp	r5, #0
 80073c2:	dd05      	ble.n	80073d0 <_dtoa_r+0x9b8>
 80073c4:	4639      	mov	r1, r7
 80073c6:	462a      	mov	r2, r5
 80073c8:	4620      	mov	r0, r4
 80073ca:	f000 fc71 	bl	8007cb0 <__lshift>
 80073ce:	4607      	mov	r7, r0
 80073d0:	f1b8 0f00 	cmp.w	r8, #0
 80073d4:	d05b      	beq.n	800748e <_dtoa_r+0xa76>
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	4620      	mov	r0, r4
 80073da:	f000 fa0f 	bl	80077fc <_Balloc>
 80073de:	4605      	mov	r5, r0
 80073e0:	b928      	cbnz	r0, 80073ee <_dtoa_r+0x9d6>
 80073e2:	4b83      	ldr	r3, [pc, #524]	; (80075f0 <_dtoa_r+0xbd8>)
 80073e4:	4602      	mov	r2, r0
 80073e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80073ea:	f7ff bb2e 	b.w	8006a4a <_dtoa_r+0x32>
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	3202      	adds	r2, #2
 80073f2:	0092      	lsls	r2, r2, #2
 80073f4:	f107 010c 	add.w	r1, r7, #12
 80073f8:	300c      	adds	r0, #12
 80073fa:	f002 f94d 	bl	8009698 <memcpy>
 80073fe:	2201      	movs	r2, #1
 8007400:	4629      	mov	r1, r5
 8007402:	4620      	mov	r0, r4
 8007404:	f000 fc54 	bl	8007cb0 <__lshift>
 8007408:	9b00      	ldr	r3, [sp, #0]
 800740a:	3301      	adds	r3, #1
 800740c:	9304      	str	r3, [sp, #16]
 800740e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007412:	4413      	add	r3, r2
 8007414:	9308      	str	r3, [sp, #32]
 8007416:	9b02      	ldr	r3, [sp, #8]
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	46b8      	mov	r8, r7
 800741e:	9306      	str	r3, [sp, #24]
 8007420:	4607      	mov	r7, r0
 8007422:	9b04      	ldr	r3, [sp, #16]
 8007424:	4631      	mov	r1, r6
 8007426:	3b01      	subs	r3, #1
 8007428:	4650      	mov	r0, sl
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	f7ff fa6c 	bl	8006908 <quorem>
 8007430:	4641      	mov	r1, r8
 8007432:	9002      	str	r0, [sp, #8]
 8007434:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007438:	4650      	mov	r0, sl
 800743a:	f000 fca5 	bl	8007d88 <__mcmp>
 800743e:	463a      	mov	r2, r7
 8007440:	9005      	str	r0, [sp, #20]
 8007442:	4631      	mov	r1, r6
 8007444:	4620      	mov	r0, r4
 8007446:	f000 fcbb 	bl	8007dc0 <__mdiff>
 800744a:	68c2      	ldr	r2, [r0, #12]
 800744c:	4605      	mov	r5, r0
 800744e:	bb02      	cbnz	r2, 8007492 <_dtoa_r+0xa7a>
 8007450:	4601      	mov	r1, r0
 8007452:	4650      	mov	r0, sl
 8007454:	f000 fc98 	bl	8007d88 <__mcmp>
 8007458:	4602      	mov	r2, r0
 800745a:	4629      	mov	r1, r5
 800745c:	4620      	mov	r0, r4
 800745e:	9209      	str	r2, [sp, #36]	; 0x24
 8007460:	f000 fa0c 	bl	800787c <_Bfree>
 8007464:	9b07      	ldr	r3, [sp, #28]
 8007466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007468:	9d04      	ldr	r5, [sp, #16]
 800746a:	ea43 0102 	orr.w	r1, r3, r2
 800746e:	9b06      	ldr	r3, [sp, #24]
 8007470:	4319      	orrs	r1, r3
 8007472:	d110      	bne.n	8007496 <_dtoa_r+0xa7e>
 8007474:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007478:	d029      	beq.n	80074ce <_dtoa_r+0xab6>
 800747a:	9b05      	ldr	r3, [sp, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	dd02      	ble.n	8007486 <_dtoa_r+0xa6e>
 8007480:	9b02      	ldr	r3, [sp, #8]
 8007482:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007486:	9b01      	ldr	r3, [sp, #4]
 8007488:	f883 9000 	strb.w	r9, [r3]
 800748c:	e774      	b.n	8007378 <_dtoa_r+0x960>
 800748e:	4638      	mov	r0, r7
 8007490:	e7ba      	b.n	8007408 <_dtoa_r+0x9f0>
 8007492:	2201      	movs	r2, #1
 8007494:	e7e1      	b.n	800745a <_dtoa_r+0xa42>
 8007496:	9b05      	ldr	r3, [sp, #20]
 8007498:	2b00      	cmp	r3, #0
 800749a:	db04      	blt.n	80074a6 <_dtoa_r+0xa8e>
 800749c:	9907      	ldr	r1, [sp, #28]
 800749e:	430b      	orrs	r3, r1
 80074a0:	9906      	ldr	r1, [sp, #24]
 80074a2:	430b      	orrs	r3, r1
 80074a4:	d120      	bne.n	80074e8 <_dtoa_r+0xad0>
 80074a6:	2a00      	cmp	r2, #0
 80074a8:	dded      	ble.n	8007486 <_dtoa_r+0xa6e>
 80074aa:	4651      	mov	r1, sl
 80074ac:	2201      	movs	r2, #1
 80074ae:	4620      	mov	r0, r4
 80074b0:	f000 fbfe 	bl	8007cb0 <__lshift>
 80074b4:	4631      	mov	r1, r6
 80074b6:	4682      	mov	sl, r0
 80074b8:	f000 fc66 	bl	8007d88 <__mcmp>
 80074bc:	2800      	cmp	r0, #0
 80074be:	dc03      	bgt.n	80074c8 <_dtoa_r+0xab0>
 80074c0:	d1e1      	bne.n	8007486 <_dtoa_r+0xa6e>
 80074c2:	f019 0f01 	tst.w	r9, #1
 80074c6:	d0de      	beq.n	8007486 <_dtoa_r+0xa6e>
 80074c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074cc:	d1d8      	bne.n	8007480 <_dtoa_r+0xa68>
 80074ce:	9a01      	ldr	r2, [sp, #4]
 80074d0:	2339      	movs	r3, #57	; 0x39
 80074d2:	7013      	strb	r3, [r2, #0]
 80074d4:	462b      	mov	r3, r5
 80074d6:	461d      	mov	r5, r3
 80074d8:	3b01      	subs	r3, #1
 80074da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80074de:	2a39      	cmp	r2, #57	; 0x39
 80074e0:	d06c      	beq.n	80075bc <_dtoa_r+0xba4>
 80074e2:	3201      	adds	r2, #1
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	e747      	b.n	8007378 <_dtoa_r+0x960>
 80074e8:	2a00      	cmp	r2, #0
 80074ea:	dd07      	ble.n	80074fc <_dtoa_r+0xae4>
 80074ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074f0:	d0ed      	beq.n	80074ce <_dtoa_r+0xab6>
 80074f2:	9a01      	ldr	r2, [sp, #4]
 80074f4:	f109 0301 	add.w	r3, r9, #1
 80074f8:	7013      	strb	r3, [r2, #0]
 80074fa:	e73d      	b.n	8007378 <_dtoa_r+0x960>
 80074fc:	9b04      	ldr	r3, [sp, #16]
 80074fe:	9a08      	ldr	r2, [sp, #32]
 8007500:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007504:	4293      	cmp	r3, r2
 8007506:	d043      	beq.n	8007590 <_dtoa_r+0xb78>
 8007508:	4651      	mov	r1, sl
 800750a:	2300      	movs	r3, #0
 800750c:	220a      	movs	r2, #10
 800750e:	4620      	mov	r0, r4
 8007510:	f000 f9d6 	bl	80078c0 <__multadd>
 8007514:	45b8      	cmp	r8, r7
 8007516:	4682      	mov	sl, r0
 8007518:	f04f 0300 	mov.w	r3, #0
 800751c:	f04f 020a 	mov.w	r2, #10
 8007520:	4641      	mov	r1, r8
 8007522:	4620      	mov	r0, r4
 8007524:	d107      	bne.n	8007536 <_dtoa_r+0xb1e>
 8007526:	f000 f9cb 	bl	80078c0 <__multadd>
 800752a:	4680      	mov	r8, r0
 800752c:	4607      	mov	r7, r0
 800752e:	9b04      	ldr	r3, [sp, #16]
 8007530:	3301      	adds	r3, #1
 8007532:	9304      	str	r3, [sp, #16]
 8007534:	e775      	b.n	8007422 <_dtoa_r+0xa0a>
 8007536:	f000 f9c3 	bl	80078c0 <__multadd>
 800753a:	4639      	mov	r1, r7
 800753c:	4680      	mov	r8, r0
 800753e:	2300      	movs	r3, #0
 8007540:	220a      	movs	r2, #10
 8007542:	4620      	mov	r0, r4
 8007544:	f000 f9bc 	bl	80078c0 <__multadd>
 8007548:	4607      	mov	r7, r0
 800754a:	e7f0      	b.n	800752e <_dtoa_r+0xb16>
 800754c:	9b04      	ldr	r3, [sp, #16]
 800754e:	9301      	str	r3, [sp, #4]
 8007550:	9d00      	ldr	r5, [sp, #0]
 8007552:	4631      	mov	r1, r6
 8007554:	4650      	mov	r0, sl
 8007556:	f7ff f9d7 	bl	8006908 <quorem>
 800755a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800755e:	9b00      	ldr	r3, [sp, #0]
 8007560:	f805 9b01 	strb.w	r9, [r5], #1
 8007564:	1aea      	subs	r2, r5, r3
 8007566:	9b01      	ldr	r3, [sp, #4]
 8007568:	4293      	cmp	r3, r2
 800756a:	dd07      	ble.n	800757c <_dtoa_r+0xb64>
 800756c:	4651      	mov	r1, sl
 800756e:	2300      	movs	r3, #0
 8007570:	220a      	movs	r2, #10
 8007572:	4620      	mov	r0, r4
 8007574:	f000 f9a4 	bl	80078c0 <__multadd>
 8007578:	4682      	mov	sl, r0
 800757a:	e7ea      	b.n	8007552 <_dtoa_r+0xb3a>
 800757c:	9b01      	ldr	r3, [sp, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	bfc8      	it	gt
 8007582:	461d      	movgt	r5, r3
 8007584:	9b00      	ldr	r3, [sp, #0]
 8007586:	bfd8      	it	le
 8007588:	2501      	movle	r5, #1
 800758a:	441d      	add	r5, r3
 800758c:	f04f 0800 	mov.w	r8, #0
 8007590:	4651      	mov	r1, sl
 8007592:	2201      	movs	r2, #1
 8007594:	4620      	mov	r0, r4
 8007596:	f000 fb8b 	bl	8007cb0 <__lshift>
 800759a:	4631      	mov	r1, r6
 800759c:	4682      	mov	sl, r0
 800759e:	f000 fbf3 	bl	8007d88 <__mcmp>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	dc96      	bgt.n	80074d4 <_dtoa_r+0xabc>
 80075a6:	d102      	bne.n	80075ae <_dtoa_r+0xb96>
 80075a8:	f019 0f01 	tst.w	r9, #1
 80075ac:	d192      	bne.n	80074d4 <_dtoa_r+0xabc>
 80075ae:	462b      	mov	r3, r5
 80075b0:	461d      	mov	r5, r3
 80075b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075b6:	2a30      	cmp	r2, #48	; 0x30
 80075b8:	d0fa      	beq.n	80075b0 <_dtoa_r+0xb98>
 80075ba:	e6dd      	b.n	8007378 <_dtoa_r+0x960>
 80075bc:	9a00      	ldr	r2, [sp, #0]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d189      	bne.n	80074d6 <_dtoa_r+0xabe>
 80075c2:	f10b 0b01 	add.w	fp, fp, #1
 80075c6:	2331      	movs	r3, #49	; 0x31
 80075c8:	e796      	b.n	80074f8 <_dtoa_r+0xae0>
 80075ca:	4b0a      	ldr	r3, [pc, #40]	; (80075f4 <_dtoa_r+0xbdc>)
 80075cc:	f7ff ba99 	b.w	8006b02 <_dtoa_r+0xea>
 80075d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f47f aa6d 	bne.w	8006ab2 <_dtoa_r+0x9a>
 80075d8:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <_dtoa_r+0xbe0>)
 80075da:	f7ff ba92 	b.w	8006b02 <_dtoa_r+0xea>
 80075de:	9b01      	ldr	r3, [sp, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	dcb5      	bgt.n	8007550 <_dtoa_r+0xb38>
 80075e4:	9b07      	ldr	r3, [sp, #28]
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	f73f aeb1 	bgt.w	800734e <_dtoa_r+0x936>
 80075ec:	e7b0      	b.n	8007550 <_dtoa_r+0xb38>
 80075ee:	bf00      	nop
 80075f0:	0800a285 	.word	0x0800a285
 80075f4:	0800a1e0 	.word	0x0800a1e0
 80075f8:	0800a209 	.word	0x0800a209

080075fc <_free_r>:
 80075fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075fe:	2900      	cmp	r1, #0
 8007600:	d044      	beq.n	800768c <_free_r+0x90>
 8007602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007606:	9001      	str	r0, [sp, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	f1a1 0404 	sub.w	r4, r1, #4
 800760e:	bfb8      	it	lt
 8007610:	18e4      	addlt	r4, r4, r3
 8007612:	f000 f8e7 	bl	80077e4 <__malloc_lock>
 8007616:	4a1e      	ldr	r2, [pc, #120]	; (8007690 <_free_r+0x94>)
 8007618:	9801      	ldr	r0, [sp, #4]
 800761a:	6813      	ldr	r3, [r2, #0]
 800761c:	b933      	cbnz	r3, 800762c <_free_r+0x30>
 800761e:	6063      	str	r3, [r4, #4]
 8007620:	6014      	str	r4, [r2, #0]
 8007622:	b003      	add	sp, #12
 8007624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007628:	f000 b8e2 	b.w	80077f0 <__malloc_unlock>
 800762c:	42a3      	cmp	r3, r4
 800762e:	d908      	bls.n	8007642 <_free_r+0x46>
 8007630:	6825      	ldr	r5, [r4, #0]
 8007632:	1961      	adds	r1, r4, r5
 8007634:	428b      	cmp	r3, r1
 8007636:	bf01      	itttt	eq
 8007638:	6819      	ldreq	r1, [r3, #0]
 800763a:	685b      	ldreq	r3, [r3, #4]
 800763c:	1949      	addeq	r1, r1, r5
 800763e:	6021      	streq	r1, [r4, #0]
 8007640:	e7ed      	b.n	800761e <_free_r+0x22>
 8007642:	461a      	mov	r2, r3
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	b10b      	cbz	r3, 800764c <_free_r+0x50>
 8007648:	42a3      	cmp	r3, r4
 800764a:	d9fa      	bls.n	8007642 <_free_r+0x46>
 800764c:	6811      	ldr	r1, [r2, #0]
 800764e:	1855      	adds	r5, r2, r1
 8007650:	42a5      	cmp	r5, r4
 8007652:	d10b      	bne.n	800766c <_free_r+0x70>
 8007654:	6824      	ldr	r4, [r4, #0]
 8007656:	4421      	add	r1, r4
 8007658:	1854      	adds	r4, r2, r1
 800765a:	42a3      	cmp	r3, r4
 800765c:	6011      	str	r1, [r2, #0]
 800765e:	d1e0      	bne.n	8007622 <_free_r+0x26>
 8007660:	681c      	ldr	r4, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	6053      	str	r3, [r2, #4]
 8007666:	440c      	add	r4, r1
 8007668:	6014      	str	r4, [r2, #0]
 800766a:	e7da      	b.n	8007622 <_free_r+0x26>
 800766c:	d902      	bls.n	8007674 <_free_r+0x78>
 800766e:	230c      	movs	r3, #12
 8007670:	6003      	str	r3, [r0, #0]
 8007672:	e7d6      	b.n	8007622 <_free_r+0x26>
 8007674:	6825      	ldr	r5, [r4, #0]
 8007676:	1961      	adds	r1, r4, r5
 8007678:	428b      	cmp	r3, r1
 800767a:	bf04      	itt	eq
 800767c:	6819      	ldreq	r1, [r3, #0]
 800767e:	685b      	ldreq	r3, [r3, #4]
 8007680:	6063      	str	r3, [r4, #4]
 8007682:	bf04      	itt	eq
 8007684:	1949      	addeq	r1, r1, r5
 8007686:	6021      	streq	r1, [r4, #0]
 8007688:	6054      	str	r4, [r2, #4]
 800768a:	e7ca      	b.n	8007622 <_free_r+0x26>
 800768c:	b003      	add	sp, #12
 800768e:	bd30      	pop	{r4, r5, pc}
 8007690:	20000510 	.word	0x20000510

08007694 <malloc>:
 8007694:	4b02      	ldr	r3, [pc, #8]	; (80076a0 <malloc+0xc>)
 8007696:	4601      	mov	r1, r0
 8007698:	6818      	ldr	r0, [r3, #0]
 800769a:	f000 b823 	b.w	80076e4 <_malloc_r>
 800769e:	bf00      	nop
 80076a0:	20000074 	.word	0x20000074

080076a4 <sbrk_aligned>:
 80076a4:	b570      	push	{r4, r5, r6, lr}
 80076a6:	4e0e      	ldr	r6, [pc, #56]	; (80076e0 <sbrk_aligned+0x3c>)
 80076a8:	460c      	mov	r4, r1
 80076aa:	6831      	ldr	r1, [r6, #0]
 80076ac:	4605      	mov	r5, r0
 80076ae:	b911      	cbnz	r1, 80076b6 <sbrk_aligned+0x12>
 80076b0:	f001 ffe2 	bl	8009678 <_sbrk_r>
 80076b4:	6030      	str	r0, [r6, #0]
 80076b6:	4621      	mov	r1, r4
 80076b8:	4628      	mov	r0, r5
 80076ba:	f001 ffdd 	bl	8009678 <_sbrk_r>
 80076be:	1c43      	adds	r3, r0, #1
 80076c0:	d00a      	beq.n	80076d8 <sbrk_aligned+0x34>
 80076c2:	1cc4      	adds	r4, r0, #3
 80076c4:	f024 0403 	bic.w	r4, r4, #3
 80076c8:	42a0      	cmp	r0, r4
 80076ca:	d007      	beq.n	80076dc <sbrk_aligned+0x38>
 80076cc:	1a21      	subs	r1, r4, r0
 80076ce:	4628      	mov	r0, r5
 80076d0:	f001 ffd2 	bl	8009678 <_sbrk_r>
 80076d4:	3001      	adds	r0, #1
 80076d6:	d101      	bne.n	80076dc <sbrk_aligned+0x38>
 80076d8:	f04f 34ff 	mov.w	r4, #4294967295
 80076dc:	4620      	mov	r0, r4
 80076de:	bd70      	pop	{r4, r5, r6, pc}
 80076e0:	20000514 	.word	0x20000514

080076e4 <_malloc_r>:
 80076e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076e8:	1ccd      	adds	r5, r1, #3
 80076ea:	f025 0503 	bic.w	r5, r5, #3
 80076ee:	3508      	adds	r5, #8
 80076f0:	2d0c      	cmp	r5, #12
 80076f2:	bf38      	it	cc
 80076f4:	250c      	movcc	r5, #12
 80076f6:	2d00      	cmp	r5, #0
 80076f8:	4607      	mov	r7, r0
 80076fa:	db01      	blt.n	8007700 <_malloc_r+0x1c>
 80076fc:	42a9      	cmp	r1, r5
 80076fe:	d905      	bls.n	800770c <_malloc_r+0x28>
 8007700:	230c      	movs	r3, #12
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	2600      	movs	r6, #0
 8007706:	4630      	mov	r0, r6
 8007708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800770c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077e0 <_malloc_r+0xfc>
 8007710:	f000 f868 	bl	80077e4 <__malloc_lock>
 8007714:	f8d8 3000 	ldr.w	r3, [r8]
 8007718:	461c      	mov	r4, r3
 800771a:	bb5c      	cbnz	r4, 8007774 <_malloc_r+0x90>
 800771c:	4629      	mov	r1, r5
 800771e:	4638      	mov	r0, r7
 8007720:	f7ff ffc0 	bl	80076a4 <sbrk_aligned>
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	4604      	mov	r4, r0
 8007728:	d155      	bne.n	80077d6 <_malloc_r+0xf2>
 800772a:	f8d8 4000 	ldr.w	r4, [r8]
 800772e:	4626      	mov	r6, r4
 8007730:	2e00      	cmp	r6, #0
 8007732:	d145      	bne.n	80077c0 <_malloc_r+0xdc>
 8007734:	2c00      	cmp	r4, #0
 8007736:	d048      	beq.n	80077ca <_malloc_r+0xe6>
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	4631      	mov	r1, r6
 800773c:	4638      	mov	r0, r7
 800773e:	eb04 0903 	add.w	r9, r4, r3
 8007742:	f001 ff99 	bl	8009678 <_sbrk_r>
 8007746:	4581      	cmp	r9, r0
 8007748:	d13f      	bne.n	80077ca <_malloc_r+0xe6>
 800774a:	6821      	ldr	r1, [r4, #0]
 800774c:	1a6d      	subs	r5, r5, r1
 800774e:	4629      	mov	r1, r5
 8007750:	4638      	mov	r0, r7
 8007752:	f7ff ffa7 	bl	80076a4 <sbrk_aligned>
 8007756:	3001      	adds	r0, #1
 8007758:	d037      	beq.n	80077ca <_malloc_r+0xe6>
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	442b      	add	r3, r5
 800775e:	6023      	str	r3, [r4, #0]
 8007760:	f8d8 3000 	ldr.w	r3, [r8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d038      	beq.n	80077da <_malloc_r+0xf6>
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	42a2      	cmp	r2, r4
 800776c:	d12b      	bne.n	80077c6 <_malloc_r+0xe2>
 800776e:	2200      	movs	r2, #0
 8007770:	605a      	str	r2, [r3, #4]
 8007772:	e00f      	b.n	8007794 <_malloc_r+0xb0>
 8007774:	6822      	ldr	r2, [r4, #0]
 8007776:	1b52      	subs	r2, r2, r5
 8007778:	d41f      	bmi.n	80077ba <_malloc_r+0xd6>
 800777a:	2a0b      	cmp	r2, #11
 800777c:	d917      	bls.n	80077ae <_malloc_r+0xca>
 800777e:	1961      	adds	r1, r4, r5
 8007780:	42a3      	cmp	r3, r4
 8007782:	6025      	str	r5, [r4, #0]
 8007784:	bf18      	it	ne
 8007786:	6059      	strne	r1, [r3, #4]
 8007788:	6863      	ldr	r3, [r4, #4]
 800778a:	bf08      	it	eq
 800778c:	f8c8 1000 	streq.w	r1, [r8]
 8007790:	5162      	str	r2, [r4, r5]
 8007792:	604b      	str	r3, [r1, #4]
 8007794:	4638      	mov	r0, r7
 8007796:	f104 060b 	add.w	r6, r4, #11
 800779a:	f000 f829 	bl	80077f0 <__malloc_unlock>
 800779e:	f026 0607 	bic.w	r6, r6, #7
 80077a2:	1d23      	adds	r3, r4, #4
 80077a4:	1af2      	subs	r2, r6, r3
 80077a6:	d0ae      	beq.n	8007706 <_malloc_r+0x22>
 80077a8:	1b9b      	subs	r3, r3, r6
 80077aa:	50a3      	str	r3, [r4, r2]
 80077ac:	e7ab      	b.n	8007706 <_malloc_r+0x22>
 80077ae:	42a3      	cmp	r3, r4
 80077b0:	6862      	ldr	r2, [r4, #4]
 80077b2:	d1dd      	bne.n	8007770 <_malloc_r+0x8c>
 80077b4:	f8c8 2000 	str.w	r2, [r8]
 80077b8:	e7ec      	b.n	8007794 <_malloc_r+0xb0>
 80077ba:	4623      	mov	r3, r4
 80077bc:	6864      	ldr	r4, [r4, #4]
 80077be:	e7ac      	b.n	800771a <_malloc_r+0x36>
 80077c0:	4634      	mov	r4, r6
 80077c2:	6876      	ldr	r6, [r6, #4]
 80077c4:	e7b4      	b.n	8007730 <_malloc_r+0x4c>
 80077c6:	4613      	mov	r3, r2
 80077c8:	e7cc      	b.n	8007764 <_malloc_r+0x80>
 80077ca:	230c      	movs	r3, #12
 80077cc:	603b      	str	r3, [r7, #0]
 80077ce:	4638      	mov	r0, r7
 80077d0:	f000 f80e 	bl	80077f0 <__malloc_unlock>
 80077d4:	e797      	b.n	8007706 <_malloc_r+0x22>
 80077d6:	6025      	str	r5, [r4, #0]
 80077d8:	e7dc      	b.n	8007794 <_malloc_r+0xb0>
 80077da:	605b      	str	r3, [r3, #4]
 80077dc:	deff      	udf	#255	; 0xff
 80077de:	bf00      	nop
 80077e0:	20000510 	.word	0x20000510

080077e4 <__malloc_lock>:
 80077e4:	4801      	ldr	r0, [pc, #4]	; (80077ec <__malloc_lock+0x8>)
 80077e6:	f7ff b886 	b.w	80068f6 <__retarget_lock_acquire_recursive>
 80077ea:	bf00      	nop
 80077ec:	2000050c 	.word	0x2000050c

080077f0 <__malloc_unlock>:
 80077f0:	4801      	ldr	r0, [pc, #4]	; (80077f8 <__malloc_unlock+0x8>)
 80077f2:	f7ff b881 	b.w	80068f8 <__retarget_lock_release_recursive>
 80077f6:	bf00      	nop
 80077f8:	2000050c 	.word	0x2000050c

080077fc <_Balloc>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	69c6      	ldr	r6, [r0, #28]
 8007800:	4604      	mov	r4, r0
 8007802:	460d      	mov	r5, r1
 8007804:	b976      	cbnz	r6, 8007824 <_Balloc+0x28>
 8007806:	2010      	movs	r0, #16
 8007808:	f7ff ff44 	bl	8007694 <malloc>
 800780c:	4602      	mov	r2, r0
 800780e:	61e0      	str	r0, [r4, #28]
 8007810:	b920      	cbnz	r0, 800781c <_Balloc+0x20>
 8007812:	4b18      	ldr	r3, [pc, #96]	; (8007874 <_Balloc+0x78>)
 8007814:	4818      	ldr	r0, [pc, #96]	; (8007878 <_Balloc+0x7c>)
 8007816:	216b      	movs	r1, #107	; 0x6b
 8007818:	f001 ff56 	bl	80096c8 <__assert_func>
 800781c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007820:	6006      	str	r6, [r0, #0]
 8007822:	60c6      	str	r6, [r0, #12]
 8007824:	69e6      	ldr	r6, [r4, #28]
 8007826:	68f3      	ldr	r3, [r6, #12]
 8007828:	b183      	cbz	r3, 800784c <_Balloc+0x50>
 800782a:	69e3      	ldr	r3, [r4, #28]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007832:	b9b8      	cbnz	r0, 8007864 <_Balloc+0x68>
 8007834:	2101      	movs	r1, #1
 8007836:	fa01 f605 	lsl.w	r6, r1, r5
 800783a:	1d72      	adds	r2, r6, #5
 800783c:	0092      	lsls	r2, r2, #2
 800783e:	4620      	mov	r0, r4
 8007840:	f001 ff60 	bl	8009704 <_calloc_r>
 8007844:	b160      	cbz	r0, 8007860 <_Balloc+0x64>
 8007846:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800784a:	e00e      	b.n	800786a <_Balloc+0x6e>
 800784c:	2221      	movs	r2, #33	; 0x21
 800784e:	2104      	movs	r1, #4
 8007850:	4620      	mov	r0, r4
 8007852:	f001 ff57 	bl	8009704 <_calloc_r>
 8007856:	69e3      	ldr	r3, [r4, #28]
 8007858:	60f0      	str	r0, [r6, #12]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e4      	bne.n	800782a <_Balloc+0x2e>
 8007860:	2000      	movs	r0, #0
 8007862:	bd70      	pop	{r4, r5, r6, pc}
 8007864:	6802      	ldr	r2, [r0, #0]
 8007866:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800786a:	2300      	movs	r3, #0
 800786c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007870:	e7f7      	b.n	8007862 <_Balloc+0x66>
 8007872:	bf00      	nop
 8007874:	0800a216 	.word	0x0800a216
 8007878:	0800a296 	.word	0x0800a296

0800787c <_Bfree>:
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	69c6      	ldr	r6, [r0, #28]
 8007880:	4605      	mov	r5, r0
 8007882:	460c      	mov	r4, r1
 8007884:	b976      	cbnz	r6, 80078a4 <_Bfree+0x28>
 8007886:	2010      	movs	r0, #16
 8007888:	f7ff ff04 	bl	8007694 <malloc>
 800788c:	4602      	mov	r2, r0
 800788e:	61e8      	str	r0, [r5, #28]
 8007890:	b920      	cbnz	r0, 800789c <_Bfree+0x20>
 8007892:	4b09      	ldr	r3, [pc, #36]	; (80078b8 <_Bfree+0x3c>)
 8007894:	4809      	ldr	r0, [pc, #36]	; (80078bc <_Bfree+0x40>)
 8007896:	218f      	movs	r1, #143	; 0x8f
 8007898:	f001 ff16 	bl	80096c8 <__assert_func>
 800789c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078a0:	6006      	str	r6, [r0, #0]
 80078a2:	60c6      	str	r6, [r0, #12]
 80078a4:	b13c      	cbz	r4, 80078b6 <_Bfree+0x3a>
 80078a6:	69eb      	ldr	r3, [r5, #28]
 80078a8:	6862      	ldr	r2, [r4, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078b0:	6021      	str	r1, [r4, #0]
 80078b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078b6:	bd70      	pop	{r4, r5, r6, pc}
 80078b8:	0800a216 	.word	0x0800a216
 80078bc:	0800a296 	.word	0x0800a296

080078c0 <__multadd>:
 80078c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078c4:	690d      	ldr	r5, [r1, #16]
 80078c6:	4607      	mov	r7, r0
 80078c8:	460c      	mov	r4, r1
 80078ca:	461e      	mov	r6, r3
 80078cc:	f101 0c14 	add.w	ip, r1, #20
 80078d0:	2000      	movs	r0, #0
 80078d2:	f8dc 3000 	ldr.w	r3, [ip]
 80078d6:	b299      	uxth	r1, r3
 80078d8:	fb02 6101 	mla	r1, r2, r1, r6
 80078dc:	0c1e      	lsrs	r6, r3, #16
 80078de:	0c0b      	lsrs	r3, r1, #16
 80078e0:	fb02 3306 	mla	r3, r2, r6, r3
 80078e4:	b289      	uxth	r1, r1
 80078e6:	3001      	adds	r0, #1
 80078e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078ec:	4285      	cmp	r5, r0
 80078ee:	f84c 1b04 	str.w	r1, [ip], #4
 80078f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078f6:	dcec      	bgt.n	80078d2 <__multadd+0x12>
 80078f8:	b30e      	cbz	r6, 800793e <__multadd+0x7e>
 80078fa:	68a3      	ldr	r3, [r4, #8]
 80078fc:	42ab      	cmp	r3, r5
 80078fe:	dc19      	bgt.n	8007934 <__multadd+0x74>
 8007900:	6861      	ldr	r1, [r4, #4]
 8007902:	4638      	mov	r0, r7
 8007904:	3101      	adds	r1, #1
 8007906:	f7ff ff79 	bl	80077fc <_Balloc>
 800790a:	4680      	mov	r8, r0
 800790c:	b928      	cbnz	r0, 800791a <__multadd+0x5a>
 800790e:	4602      	mov	r2, r0
 8007910:	4b0c      	ldr	r3, [pc, #48]	; (8007944 <__multadd+0x84>)
 8007912:	480d      	ldr	r0, [pc, #52]	; (8007948 <__multadd+0x88>)
 8007914:	21ba      	movs	r1, #186	; 0xba
 8007916:	f001 fed7 	bl	80096c8 <__assert_func>
 800791a:	6922      	ldr	r2, [r4, #16]
 800791c:	3202      	adds	r2, #2
 800791e:	f104 010c 	add.w	r1, r4, #12
 8007922:	0092      	lsls	r2, r2, #2
 8007924:	300c      	adds	r0, #12
 8007926:	f001 feb7 	bl	8009698 <memcpy>
 800792a:	4621      	mov	r1, r4
 800792c:	4638      	mov	r0, r7
 800792e:	f7ff ffa5 	bl	800787c <_Bfree>
 8007932:	4644      	mov	r4, r8
 8007934:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007938:	3501      	adds	r5, #1
 800793a:	615e      	str	r6, [r3, #20]
 800793c:	6125      	str	r5, [r4, #16]
 800793e:	4620      	mov	r0, r4
 8007940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007944:	0800a285 	.word	0x0800a285
 8007948:	0800a296 	.word	0x0800a296

0800794c <__s2b>:
 800794c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007950:	460c      	mov	r4, r1
 8007952:	4615      	mov	r5, r2
 8007954:	461f      	mov	r7, r3
 8007956:	2209      	movs	r2, #9
 8007958:	3308      	adds	r3, #8
 800795a:	4606      	mov	r6, r0
 800795c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007960:	2100      	movs	r1, #0
 8007962:	2201      	movs	r2, #1
 8007964:	429a      	cmp	r2, r3
 8007966:	db09      	blt.n	800797c <__s2b+0x30>
 8007968:	4630      	mov	r0, r6
 800796a:	f7ff ff47 	bl	80077fc <_Balloc>
 800796e:	b940      	cbnz	r0, 8007982 <__s2b+0x36>
 8007970:	4602      	mov	r2, r0
 8007972:	4b19      	ldr	r3, [pc, #100]	; (80079d8 <__s2b+0x8c>)
 8007974:	4819      	ldr	r0, [pc, #100]	; (80079dc <__s2b+0x90>)
 8007976:	21d3      	movs	r1, #211	; 0xd3
 8007978:	f001 fea6 	bl	80096c8 <__assert_func>
 800797c:	0052      	lsls	r2, r2, #1
 800797e:	3101      	adds	r1, #1
 8007980:	e7f0      	b.n	8007964 <__s2b+0x18>
 8007982:	9b08      	ldr	r3, [sp, #32]
 8007984:	6143      	str	r3, [r0, #20]
 8007986:	2d09      	cmp	r5, #9
 8007988:	f04f 0301 	mov.w	r3, #1
 800798c:	6103      	str	r3, [r0, #16]
 800798e:	dd16      	ble.n	80079be <__s2b+0x72>
 8007990:	f104 0909 	add.w	r9, r4, #9
 8007994:	46c8      	mov	r8, r9
 8007996:	442c      	add	r4, r5
 8007998:	f818 3b01 	ldrb.w	r3, [r8], #1
 800799c:	4601      	mov	r1, r0
 800799e:	3b30      	subs	r3, #48	; 0x30
 80079a0:	220a      	movs	r2, #10
 80079a2:	4630      	mov	r0, r6
 80079a4:	f7ff ff8c 	bl	80078c0 <__multadd>
 80079a8:	45a0      	cmp	r8, r4
 80079aa:	d1f5      	bne.n	8007998 <__s2b+0x4c>
 80079ac:	f1a5 0408 	sub.w	r4, r5, #8
 80079b0:	444c      	add	r4, r9
 80079b2:	1b2d      	subs	r5, r5, r4
 80079b4:	1963      	adds	r3, r4, r5
 80079b6:	42bb      	cmp	r3, r7
 80079b8:	db04      	blt.n	80079c4 <__s2b+0x78>
 80079ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079be:	340a      	adds	r4, #10
 80079c0:	2509      	movs	r5, #9
 80079c2:	e7f6      	b.n	80079b2 <__s2b+0x66>
 80079c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079c8:	4601      	mov	r1, r0
 80079ca:	3b30      	subs	r3, #48	; 0x30
 80079cc:	220a      	movs	r2, #10
 80079ce:	4630      	mov	r0, r6
 80079d0:	f7ff ff76 	bl	80078c0 <__multadd>
 80079d4:	e7ee      	b.n	80079b4 <__s2b+0x68>
 80079d6:	bf00      	nop
 80079d8:	0800a285 	.word	0x0800a285
 80079dc:	0800a296 	.word	0x0800a296

080079e0 <__hi0bits>:
 80079e0:	0c03      	lsrs	r3, r0, #16
 80079e2:	041b      	lsls	r3, r3, #16
 80079e4:	b9d3      	cbnz	r3, 8007a1c <__hi0bits+0x3c>
 80079e6:	0400      	lsls	r0, r0, #16
 80079e8:	2310      	movs	r3, #16
 80079ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80079ee:	bf04      	itt	eq
 80079f0:	0200      	lsleq	r0, r0, #8
 80079f2:	3308      	addeq	r3, #8
 80079f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80079f8:	bf04      	itt	eq
 80079fa:	0100      	lsleq	r0, r0, #4
 80079fc:	3304      	addeq	r3, #4
 80079fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a02:	bf04      	itt	eq
 8007a04:	0080      	lsleq	r0, r0, #2
 8007a06:	3302      	addeq	r3, #2
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	db05      	blt.n	8007a18 <__hi0bits+0x38>
 8007a0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a10:	f103 0301 	add.w	r3, r3, #1
 8007a14:	bf08      	it	eq
 8007a16:	2320      	moveq	r3, #32
 8007a18:	4618      	mov	r0, r3
 8007a1a:	4770      	bx	lr
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	e7e4      	b.n	80079ea <__hi0bits+0xa>

08007a20 <__lo0bits>:
 8007a20:	6803      	ldr	r3, [r0, #0]
 8007a22:	f013 0207 	ands.w	r2, r3, #7
 8007a26:	d00c      	beq.n	8007a42 <__lo0bits+0x22>
 8007a28:	07d9      	lsls	r1, r3, #31
 8007a2a:	d422      	bmi.n	8007a72 <__lo0bits+0x52>
 8007a2c:	079a      	lsls	r2, r3, #30
 8007a2e:	bf49      	itett	mi
 8007a30:	085b      	lsrmi	r3, r3, #1
 8007a32:	089b      	lsrpl	r3, r3, #2
 8007a34:	6003      	strmi	r3, [r0, #0]
 8007a36:	2201      	movmi	r2, #1
 8007a38:	bf5c      	itt	pl
 8007a3a:	6003      	strpl	r3, [r0, #0]
 8007a3c:	2202      	movpl	r2, #2
 8007a3e:	4610      	mov	r0, r2
 8007a40:	4770      	bx	lr
 8007a42:	b299      	uxth	r1, r3
 8007a44:	b909      	cbnz	r1, 8007a4a <__lo0bits+0x2a>
 8007a46:	0c1b      	lsrs	r3, r3, #16
 8007a48:	2210      	movs	r2, #16
 8007a4a:	b2d9      	uxtb	r1, r3
 8007a4c:	b909      	cbnz	r1, 8007a52 <__lo0bits+0x32>
 8007a4e:	3208      	adds	r2, #8
 8007a50:	0a1b      	lsrs	r3, r3, #8
 8007a52:	0719      	lsls	r1, r3, #28
 8007a54:	bf04      	itt	eq
 8007a56:	091b      	lsreq	r3, r3, #4
 8007a58:	3204      	addeq	r2, #4
 8007a5a:	0799      	lsls	r1, r3, #30
 8007a5c:	bf04      	itt	eq
 8007a5e:	089b      	lsreq	r3, r3, #2
 8007a60:	3202      	addeq	r2, #2
 8007a62:	07d9      	lsls	r1, r3, #31
 8007a64:	d403      	bmi.n	8007a6e <__lo0bits+0x4e>
 8007a66:	085b      	lsrs	r3, r3, #1
 8007a68:	f102 0201 	add.w	r2, r2, #1
 8007a6c:	d003      	beq.n	8007a76 <__lo0bits+0x56>
 8007a6e:	6003      	str	r3, [r0, #0]
 8007a70:	e7e5      	b.n	8007a3e <__lo0bits+0x1e>
 8007a72:	2200      	movs	r2, #0
 8007a74:	e7e3      	b.n	8007a3e <__lo0bits+0x1e>
 8007a76:	2220      	movs	r2, #32
 8007a78:	e7e1      	b.n	8007a3e <__lo0bits+0x1e>
	...

08007a7c <__i2b>:
 8007a7c:	b510      	push	{r4, lr}
 8007a7e:	460c      	mov	r4, r1
 8007a80:	2101      	movs	r1, #1
 8007a82:	f7ff febb 	bl	80077fc <_Balloc>
 8007a86:	4602      	mov	r2, r0
 8007a88:	b928      	cbnz	r0, 8007a96 <__i2b+0x1a>
 8007a8a:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <__i2b+0x24>)
 8007a8c:	4805      	ldr	r0, [pc, #20]	; (8007aa4 <__i2b+0x28>)
 8007a8e:	f240 1145 	movw	r1, #325	; 0x145
 8007a92:	f001 fe19 	bl	80096c8 <__assert_func>
 8007a96:	2301      	movs	r3, #1
 8007a98:	6144      	str	r4, [r0, #20]
 8007a9a:	6103      	str	r3, [r0, #16]
 8007a9c:	bd10      	pop	{r4, pc}
 8007a9e:	bf00      	nop
 8007aa0:	0800a285 	.word	0x0800a285
 8007aa4:	0800a296 	.word	0x0800a296

08007aa8 <__multiply>:
 8007aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aac:	4691      	mov	r9, r2
 8007aae:	690a      	ldr	r2, [r1, #16]
 8007ab0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	bfb8      	it	lt
 8007ab8:	460b      	movlt	r3, r1
 8007aba:	460c      	mov	r4, r1
 8007abc:	bfbc      	itt	lt
 8007abe:	464c      	movlt	r4, r9
 8007ac0:	4699      	movlt	r9, r3
 8007ac2:	6927      	ldr	r7, [r4, #16]
 8007ac4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ac8:	68a3      	ldr	r3, [r4, #8]
 8007aca:	6861      	ldr	r1, [r4, #4]
 8007acc:	eb07 060a 	add.w	r6, r7, sl
 8007ad0:	42b3      	cmp	r3, r6
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	bfb8      	it	lt
 8007ad6:	3101      	addlt	r1, #1
 8007ad8:	f7ff fe90 	bl	80077fc <_Balloc>
 8007adc:	b930      	cbnz	r0, 8007aec <__multiply+0x44>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	4b44      	ldr	r3, [pc, #272]	; (8007bf4 <__multiply+0x14c>)
 8007ae2:	4845      	ldr	r0, [pc, #276]	; (8007bf8 <__multiply+0x150>)
 8007ae4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007ae8:	f001 fdee 	bl	80096c8 <__assert_func>
 8007aec:	f100 0514 	add.w	r5, r0, #20
 8007af0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007af4:	462b      	mov	r3, r5
 8007af6:	2200      	movs	r2, #0
 8007af8:	4543      	cmp	r3, r8
 8007afa:	d321      	bcc.n	8007b40 <__multiply+0x98>
 8007afc:	f104 0314 	add.w	r3, r4, #20
 8007b00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b04:	f109 0314 	add.w	r3, r9, #20
 8007b08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b0c:	9202      	str	r2, [sp, #8]
 8007b0e:	1b3a      	subs	r2, r7, r4
 8007b10:	3a15      	subs	r2, #21
 8007b12:	f022 0203 	bic.w	r2, r2, #3
 8007b16:	3204      	adds	r2, #4
 8007b18:	f104 0115 	add.w	r1, r4, #21
 8007b1c:	428f      	cmp	r7, r1
 8007b1e:	bf38      	it	cc
 8007b20:	2204      	movcc	r2, #4
 8007b22:	9201      	str	r2, [sp, #4]
 8007b24:	9a02      	ldr	r2, [sp, #8]
 8007b26:	9303      	str	r3, [sp, #12]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d80c      	bhi.n	8007b46 <__multiply+0x9e>
 8007b2c:	2e00      	cmp	r6, #0
 8007b2e:	dd03      	ble.n	8007b38 <__multiply+0x90>
 8007b30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d05b      	beq.n	8007bf0 <__multiply+0x148>
 8007b38:	6106      	str	r6, [r0, #16]
 8007b3a:	b005      	add	sp, #20
 8007b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b40:	f843 2b04 	str.w	r2, [r3], #4
 8007b44:	e7d8      	b.n	8007af8 <__multiply+0x50>
 8007b46:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b4a:	f1ba 0f00 	cmp.w	sl, #0
 8007b4e:	d024      	beq.n	8007b9a <__multiply+0xf2>
 8007b50:	f104 0e14 	add.w	lr, r4, #20
 8007b54:	46a9      	mov	r9, r5
 8007b56:	f04f 0c00 	mov.w	ip, #0
 8007b5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b5e:	f8d9 1000 	ldr.w	r1, [r9]
 8007b62:	fa1f fb82 	uxth.w	fp, r2
 8007b66:	b289      	uxth	r1, r1
 8007b68:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007b70:	f8d9 2000 	ldr.w	r2, [r9]
 8007b74:	4461      	add	r1, ip
 8007b76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b7a:	fb0a c20b 	mla	r2, sl, fp, ip
 8007b7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b82:	b289      	uxth	r1, r1
 8007b84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b88:	4577      	cmp	r7, lr
 8007b8a:	f849 1b04 	str.w	r1, [r9], #4
 8007b8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b92:	d8e2      	bhi.n	8007b5a <__multiply+0xb2>
 8007b94:	9a01      	ldr	r2, [sp, #4]
 8007b96:	f845 c002 	str.w	ip, [r5, r2]
 8007b9a:	9a03      	ldr	r2, [sp, #12]
 8007b9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	f1b9 0f00 	cmp.w	r9, #0
 8007ba6:	d021      	beq.n	8007bec <__multiply+0x144>
 8007ba8:	6829      	ldr	r1, [r5, #0]
 8007baa:	f104 0c14 	add.w	ip, r4, #20
 8007bae:	46ae      	mov	lr, r5
 8007bb0:	f04f 0a00 	mov.w	sl, #0
 8007bb4:	f8bc b000 	ldrh.w	fp, [ip]
 8007bb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007bbc:	fb09 220b 	mla	r2, r9, fp, r2
 8007bc0:	4452      	add	r2, sl
 8007bc2:	b289      	uxth	r1, r1
 8007bc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007bc8:	f84e 1b04 	str.w	r1, [lr], #4
 8007bcc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007bd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007bd4:	f8be 1000 	ldrh.w	r1, [lr]
 8007bd8:	fb09 110a 	mla	r1, r9, sl, r1
 8007bdc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007be0:	4567      	cmp	r7, ip
 8007be2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007be6:	d8e5      	bhi.n	8007bb4 <__multiply+0x10c>
 8007be8:	9a01      	ldr	r2, [sp, #4]
 8007bea:	50a9      	str	r1, [r5, r2]
 8007bec:	3504      	adds	r5, #4
 8007bee:	e799      	b.n	8007b24 <__multiply+0x7c>
 8007bf0:	3e01      	subs	r6, #1
 8007bf2:	e79b      	b.n	8007b2c <__multiply+0x84>
 8007bf4:	0800a285 	.word	0x0800a285
 8007bf8:	0800a296 	.word	0x0800a296

08007bfc <__pow5mult>:
 8007bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c00:	4615      	mov	r5, r2
 8007c02:	f012 0203 	ands.w	r2, r2, #3
 8007c06:	4606      	mov	r6, r0
 8007c08:	460f      	mov	r7, r1
 8007c0a:	d007      	beq.n	8007c1c <__pow5mult+0x20>
 8007c0c:	4c25      	ldr	r4, [pc, #148]	; (8007ca4 <__pow5mult+0xa8>)
 8007c0e:	3a01      	subs	r2, #1
 8007c10:	2300      	movs	r3, #0
 8007c12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c16:	f7ff fe53 	bl	80078c0 <__multadd>
 8007c1a:	4607      	mov	r7, r0
 8007c1c:	10ad      	asrs	r5, r5, #2
 8007c1e:	d03d      	beq.n	8007c9c <__pow5mult+0xa0>
 8007c20:	69f4      	ldr	r4, [r6, #28]
 8007c22:	b97c      	cbnz	r4, 8007c44 <__pow5mult+0x48>
 8007c24:	2010      	movs	r0, #16
 8007c26:	f7ff fd35 	bl	8007694 <malloc>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	61f0      	str	r0, [r6, #28]
 8007c2e:	b928      	cbnz	r0, 8007c3c <__pow5mult+0x40>
 8007c30:	4b1d      	ldr	r3, [pc, #116]	; (8007ca8 <__pow5mult+0xac>)
 8007c32:	481e      	ldr	r0, [pc, #120]	; (8007cac <__pow5mult+0xb0>)
 8007c34:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007c38:	f001 fd46 	bl	80096c8 <__assert_func>
 8007c3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c40:	6004      	str	r4, [r0, #0]
 8007c42:	60c4      	str	r4, [r0, #12]
 8007c44:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007c48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c4c:	b94c      	cbnz	r4, 8007c62 <__pow5mult+0x66>
 8007c4e:	f240 2171 	movw	r1, #625	; 0x271
 8007c52:	4630      	mov	r0, r6
 8007c54:	f7ff ff12 	bl	8007a7c <__i2b>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c5e:	4604      	mov	r4, r0
 8007c60:	6003      	str	r3, [r0, #0]
 8007c62:	f04f 0900 	mov.w	r9, #0
 8007c66:	07eb      	lsls	r3, r5, #31
 8007c68:	d50a      	bpl.n	8007c80 <__pow5mult+0x84>
 8007c6a:	4639      	mov	r1, r7
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f7ff ff1a 	bl	8007aa8 <__multiply>
 8007c74:	4639      	mov	r1, r7
 8007c76:	4680      	mov	r8, r0
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f7ff fdff 	bl	800787c <_Bfree>
 8007c7e:	4647      	mov	r7, r8
 8007c80:	106d      	asrs	r5, r5, #1
 8007c82:	d00b      	beq.n	8007c9c <__pow5mult+0xa0>
 8007c84:	6820      	ldr	r0, [r4, #0]
 8007c86:	b938      	cbnz	r0, 8007c98 <__pow5mult+0x9c>
 8007c88:	4622      	mov	r2, r4
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f7ff ff0b 	bl	8007aa8 <__multiply>
 8007c92:	6020      	str	r0, [r4, #0]
 8007c94:	f8c0 9000 	str.w	r9, [r0]
 8007c98:	4604      	mov	r4, r0
 8007c9a:	e7e4      	b.n	8007c66 <__pow5mult+0x6a>
 8007c9c:	4638      	mov	r0, r7
 8007c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ca2:	bf00      	nop
 8007ca4:	0800a3e0 	.word	0x0800a3e0
 8007ca8:	0800a216 	.word	0x0800a216
 8007cac:	0800a296 	.word	0x0800a296

08007cb0 <__lshift>:
 8007cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	6849      	ldr	r1, [r1, #4]
 8007cb8:	6923      	ldr	r3, [r4, #16]
 8007cba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cbe:	68a3      	ldr	r3, [r4, #8]
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	4691      	mov	r9, r2
 8007cc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cc8:	f108 0601 	add.w	r6, r8, #1
 8007ccc:	42b3      	cmp	r3, r6
 8007cce:	db0b      	blt.n	8007ce8 <__lshift+0x38>
 8007cd0:	4638      	mov	r0, r7
 8007cd2:	f7ff fd93 	bl	80077fc <_Balloc>
 8007cd6:	4605      	mov	r5, r0
 8007cd8:	b948      	cbnz	r0, 8007cee <__lshift+0x3e>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	4b28      	ldr	r3, [pc, #160]	; (8007d80 <__lshift+0xd0>)
 8007cde:	4829      	ldr	r0, [pc, #164]	; (8007d84 <__lshift+0xd4>)
 8007ce0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007ce4:	f001 fcf0 	bl	80096c8 <__assert_func>
 8007ce8:	3101      	adds	r1, #1
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	e7ee      	b.n	8007ccc <__lshift+0x1c>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f100 0114 	add.w	r1, r0, #20
 8007cf4:	f100 0210 	add.w	r2, r0, #16
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	4553      	cmp	r3, sl
 8007cfc:	db33      	blt.n	8007d66 <__lshift+0xb6>
 8007cfe:	6920      	ldr	r0, [r4, #16]
 8007d00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d04:	f104 0314 	add.w	r3, r4, #20
 8007d08:	f019 091f 	ands.w	r9, r9, #31
 8007d0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d14:	d02b      	beq.n	8007d6e <__lshift+0xbe>
 8007d16:	f1c9 0e20 	rsb	lr, r9, #32
 8007d1a:	468a      	mov	sl, r1
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	6818      	ldr	r0, [r3, #0]
 8007d20:	fa00 f009 	lsl.w	r0, r0, r9
 8007d24:	4310      	orrs	r0, r2
 8007d26:	f84a 0b04 	str.w	r0, [sl], #4
 8007d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d2e:	459c      	cmp	ip, r3
 8007d30:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d34:	d8f3      	bhi.n	8007d1e <__lshift+0x6e>
 8007d36:	ebac 0304 	sub.w	r3, ip, r4
 8007d3a:	3b15      	subs	r3, #21
 8007d3c:	f023 0303 	bic.w	r3, r3, #3
 8007d40:	3304      	adds	r3, #4
 8007d42:	f104 0015 	add.w	r0, r4, #21
 8007d46:	4584      	cmp	ip, r0
 8007d48:	bf38      	it	cc
 8007d4a:	2304      	movcc	r3, #4
 8007d4c:	50ca      	str	r2, [r1, r3]
 8007d4e:	b10a      	cbz	r2, 8007d54 <__lshift+0xa4>
 8007d50:	f108 0602 	add.w	r6, r8, #2
 8007d54:	3e01      	subs	r6, #1
 8007d56:	4638      	mov	r0, r7
 8007d58:	612e      	str	r6, [r5, #16]
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	f7ff fd8e 	bl	800787c <_Bfree>
 8007d60:	4628      	mov	r0, r5
 8007d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d66:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	e7c5      	b.n	8007cfa <__lshift+0x4a>
 8007d6e:	3904      	subs	r1, #4
 8007d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d74:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d78:	459c      	cmp	ip, r3
 8007d7a:	d8f9      	bhi.n	8007d70 <__lshift+0xc0>
 8007d7c:	e7ea      	b.n	8007d54 <__lshift+0xa4>
 8007d7e:	bf00      	nop
 8007d80:	0800a285 	.word	0x0800a285
 8007d84:	0800a296 	.word	0x0800a296

08007d88 <__mcmp>:
 8007d88:	b530      	push	{r4, r5, lr}
 8007d8a:	6902      	ldr	r2, [r0, #16]
 8007d8c:	690c      	ldr	r4, [r1, #16]
 8007d8e:	1b12      	subs	r2, r2, r4
 8007d90:	d10e      	bne.n	8007db0 <__mcmp+0x28>
 8007d92:	f100 0314 	add.w	r3, r0, #20
 8007d96:	3114      	adds	r1, #20
 8007d98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007da0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007da4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007da8:	42a5      	cmp	r5, r4
 8007daa:	d003      	beq.n	8007db4 <__mcmp+0x2c>
 8007dac:	d305      	bcc.n	8007dba <__mcmp+0x32>
 8007dae:	2201      	movs	r2, #1
 8007db0:	4610      	mov	r0, r2
 8007db2:	bd30      	pop	{r4, r5, pc}
 8007db4:	4283      	cmp	r3, r0
 8007db6:	d3f3      	bcc.n	8007da0 <__mcmp+0x18>
 8007db8:	e7fa      	b.n	8007db0 <__mcmp+0x28>
 8007dba:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbe:	e7f7      	b.n	8007db0 <__mcmp+0x28>

08007dc0 <__mdiff>:
 8007dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	4611      	mov	r1, r2
 8007dca:	4620      	mov	r0, r4
 8007dcc:	4690      	mov	r8, r2
 8007dce:	f7ff ffdb 	bl	8007d88 <__mcmp>
 8007dd2:	1e05      	subs	r5, r0, #0
 8007dd4:	d110      	bne.n	8007df8 <__mdiff+0x38>
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f7ff fd0f 	bl	80077fc <_Balloc>
 8007dde:	b930      	cbnz	r0, 8007dee <__mdiff+0x2e>
 8007de0:	4b3a      	ldr	r3, [pc, #232]	; (8007ecc <__mdiff+0x10c>)
 8007de2:	4602      	mov	r2, r0
 8007de4:	f240 2137 	movw	r1, #567	; 0x237
 8007de8:	4839      	ldr	r0, [pc, #228]	; (8007ed0 <__mdiff+0x110>)
 8007dea:	f001 fc6d 	bl	80096c8 <__assert_func>
 8007dee:	2301      	movs	r3, #1
 8007df0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df8:	bfa4      	itt	ge
 8007dfa:	4643      	movge	r3, r8
 8007dfc:	46a0      	movge	r8, r4
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007e04:	bfa6      	itte	ge
 8007e06:	461c      	movge	r4, r3
 8007e08:	2500      	movge	r5, #0
 8007e0a:	2501      	movlt	r5, #1
 8007e0c:	f7ff fcf6 	bl	80077fc <_Balloc>
 8007e10:	b920      	cbnz	r0, 8007e1c <__mdiff+0x5c>
 8007e12:	4b2e      	ldr	r3, [pc, #184]	; (8007ecc <__mdiff+0x10c>)
 8007e14:	4602      	mov	r2, r0
 8007e16:	f240 2145 	movw	r1, #581	; 0x245
 8007e1a:	e7e5      	b.n	8007de8 <__mdiff+0x28>
 8007e1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e20:	6926      	ldr	r6, [r4, #16]
 8007e22:	60c5      	str	r5, [r0, #12]
 8007e24:	f104 0914 	add.w	r9, r4, #20
 8007e28:	f108 0514 	add.w	r5, r8, #20
 8007e2c:	f100 0e14 	add.w	lr, r0, #20
 8007e30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007e34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e38:	f108 0210 	add.w	r2, r8, #16
 8007e3c:	46f2      	mov	sl, lr
 8007e3e:	2100      	movs	r1, #0
 8007e40:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e48:	fa11 f88b 	uxtah	r8, r1, fp
 8007e4c:	b299      	uxth	r1, r3
 8007e4e:	0c1b      	lsrs	r3, r3, #16
 8007e50:	eba8 0801 	sub.w	r8, r8, r1
 8007e54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e58:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e5c:	fa1f f888 	uxth.w	r8, r8
 8007e60:	1419      	asrs	r1, r3, #16
 8007e62:	454e      	cmp	r6, r9
 8007e64:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e68:	f84a 3b04 	str.w	r3, [sl], #4
 8007e6c:	d8e8      	bhi.n	8007e40 <__mdiff+0x80>
 8007e6e:	1b33      	subs	r3, r6, r4
 8007e70:	3b15      	subs	r3, #21
 8007e72:	f023 0303 	bic.w	r3, r3, #3
 8007e76:	3304      	adds	r3, #4
 8007e78:	3415      	adds	r4, #21
 8007e7a:	42a6      	cmp	r6, r4
 8007e7c:	bf38      	it	cc
 8007e7e:	2304      	movcc	r3, #4
 8007e80:	441d      	add	r5, r3
 8007e82:	4473      	add	r3, lr
 8007e84:	469e      	mov	lr, r3
 8007e86:	462e      	mov	r6, r5
 8007e88:	4566      	cmp	r6, ip
 8007e8a:	d30e      	bcc.n	8007eaa <__mdiff+0xea>
 8007e8c:	f10c 0203 	add.w	r2, ip, #3
 8007e90:	1b52      	subs	r2, r2, r5
 8007e92:	f022 0203 	bic.w	r2, r2, #3
 8007e96:	3d03      	subs	r5, #3
 8007e98:	45ac      	cmp	ip, r5
 8007e9a:	bf38      	it	cc
 8007e9c:	2200      	movcc	r2, #0
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007ea4:	b17a      	cbz	r2, 8007ec6 <__mdiff+0x106>
 8007ea6:	6107      	str	r7, [r0, #16]
 8007ea8:	e7a4      	b.n	8007df4 <__mdiff+0x34>
 8007eaa:	f856 8b04 	ldr.w	r8, [r6], #4
 8007eae:	fa11 f288 	uxtah	r2, r1, r8
 8007eb2:	1414      	asrs	r4, r2, #16
 8007eb4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007eb8:	b292      	uxth	r2, r2
 8007eba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007ebe:	f84e 2b04 	str.w	r2, [lr], #4
 8007ec2:	1421      	asrs	r1, r4, #16
 8007ec4:	e7e0      	b.n	8007e88 <__mdiff+0xc8>
 8007ec6:	3f01      	subs	r7, #1
 8007ec8:	e7ea      	b.n	8007ea0 <__mdiff+0xe0>
 8007eca:	bf00      	nop
 8007ecc:	0800a285 	.word	0x0800a285
 8007ed0:	0800a296 	.word	0x0800a296

08007ed4 <__ulp>:
 8007ed4:	b082      	sub	sp, #8
 8007ed6:	ed8d 0b00 	vstr	d0, [sp]
 8007eda:	9a01      	ldr	r2, [sp, #4]
 8007edc:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <__ulp+0x48>)
 8007ede:	4013      	ands	r3, r2
 8007ee0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	dc08      	bgt.n	8007efa <__ulp+0x26>
 8007ee8:	425b      	negs	r3, r3
 8007eea:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007eee:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007ef2:	da04      	bge.n	8007efe <__ulp+0x2a>
 8007ef4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ef8:	4113      	asrs	r3, r2
 8007efa:	2200      	movs	r2, #0
 8007efc:	e008      	b.n	8007f10 <__ulp+0x3c>
 8007efe:	f1a2 0314 	sub.w	r3, r2, #20
 8007f02:	2b1e      	cmp	r3, #30
 8007f04:	bfda      	itte	le
 8007f06:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007f0a:	40da      	lsrle	r2, r3
 8007f0c:	2201      	movgt	r2, #1
 8007f0e:	2300      	movs	r3, #0
 8007f10:	4619      	mov	r1, r3
 8007f12:	4610      	mov	r0, r2
 8007f14:	ec41 0b10 	vmov	d0, r0, r1
 8007f18:	b002      	add	sp, #8
 8007f1a:	4770      	bx	lr
 8007f1c:	7ff00000 	.word	0x7ff00000

08007f20 <__b2d>:
 8007f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f24:	6906      	ldr	r6, [r0, #16]
 8007f26:	f100 0814 	add.w	r8, r0, #20
 8007f2a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007f2e:	1f37      	subs	r7, r6, #4
 8007f30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007f34:	4610      	mov	r0, r2
 8007f36:	f7ff fd53 	bl	80079e0 <__hi0bits>
 8007f3a:	f1c0 0320 	rsb	r3, r0, #32
 8007f3e:	280a      	cmp	r0, #10
 8007f40:	600b      	str	r3, [r1, #0]
 8007f42:	491b      	ldr	r1, [pc, #108]	; (8007fb0 <__b2d+0x90>)
 8007f44:	dc15      	bgt.n	8007f72 <__b2d+0x52>
 8007f46:	f1c0 0c0b 	rsb	ip, r0, #11
 8007f4a:	fa22 f30c 	lsr.w	r3, r2, ip
 8007f4e:	45b8      	cmp	r8, r7
 8007f50:	ea43 0501 	orr.w	r5, r3, r1
 8007f54:	bf34      	ite	cc
 8007f56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f5a:	2300      	movcs	r3, #0
 8007f5c:	3015      	adds	r0, #21
 8007f5e:	fa02 f000 	lsl.w	r0, r2, r0
 8007f62:	fa23 f30c 	lsr.w	r3, r3, ip
 8007f66:	4303      	orrs	r3, r0
 8007f68:	461c      	mov	r4, r3
 8007f6a:	ec45 4b10 	vmov	d0, r4, r5
 8007f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f72:	45b8      	cmp	r8, r7
 8007f74:	bf3a      	itte	cc
 8007f76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f7a:	f1a6 0708 	subcc.w	r7, r6, #8
 8007f7e:	2300      	movcs	r3, #0
 8007f80:	380b      	subs	r0, #11
 8007f82:	d012      	beq.n	8007faa <__b2d+0x8a>
 8007f84:	f1c0 0120 	rsb	r1, r0, #32
 8007f88:	fa23 f401 	lsr.w	r4, r3, r1
 8007f8c:	4082      	lsls	r2, r0
 8007f8e:	4322      	orrs	r2, r4
 8007f90:	4547      	cmp	r7, r8
 8007f92:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007f96:	bf8c      	ite	hi
 8007f98:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007f9c:	2200      	movls	r2, #0
 8007f9e:	4083      	lsls	r3, r0
 8007fa0:	40ca      	lsrs	r2, r1
 8007fa2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	e7de      	b.n	8007f68 <__b2d+0x48>
 8007faa:	ea42 0501 	orr.w	r5, r2, r1
 8007fae:	e7db      	b.n	8007f68 <__b2d+0x48>
 8007fb0:	3ff00000 	.word	0x3ff00000

08007fb4 <__d2b>:
 8007fb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fb8:	460f      	mov	r7, r1
 8007fba:	2101      	movs	r1, #1
 8007fbc:	ec59 8b10 	vmov	r8, r9, d0
 8007fc0:	4616      	mov	r6, r2
 8007fc2:	f7ff fc1b 	bl	80077fc <_Balloc>
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	b930      	cbnz	r0, 8007fd8 <__d2b+0x24>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	4b24      	ldr	r3, [pc, #144]	; (8008060 <__d2b+0xac>)
 8007fce:	4825      	ldr	r0, [pc, #148]	; (8008064 <__d2b+0xb0>)
 8007fd0:	f240 310f 	movw	r1, #783	; 0x30f
 8007fd4:	f001 fb78 	bl	80096c8 <__assert_func>
 8007fd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007fdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fe0:	bb2d      	cbnz	r5, 800802e <__d2b+0x7a>
 8007fe2:	9301      	str	r3, [sp, #4]
 8007fe4:	f1b8 0300 	subs.w	r3, r8, #0
 8007fe8:	d026      	beq.n	8008038 <__d2b+0x84>
 8007fea:	4668      	mov	r0, sp
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	f7ff fd17 	bl	8007a20 <__lo0bits>
 8007ff2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007ff6:	b1e8      	cbz	r0, 8008034 <__d2b+0x80>
 8007ff8:	f1c0 0320 	rsb	r3, r0, #32
 8007ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8008000:	430b      	orrs	r3, r1
 8008002:	40c2      	lsrs	r2, r0
 8008004:	6163      	str	r3, [r4, #20]
 8008006:	9201      	str	r2, [sp, #4]
 8008008:	9b01      	ldr	r3, [sp, #4]
 800800a:	61a3      	str	r3, [r4, #24]
 800800c:	2b00      	cmp	r3, #0
 800800e:	bf14      	ite	ne
 8008010:	2202      	movne	r2, #2
 8008012:	2201      	moveq	r2, #1
 8008014:	6122      	str	r2, [r4, #16]
 8008016:	b1bd      	cbz	r5, 8008048 <__d2b+0x94>
 8008018:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800801c:	4405      	add	r5, r0
 800801e:	603d      	str	r5, [r7, #0]
 8008020:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008024:	6030      	str	r0, [r6, #0]
 8008026:	4620      	mov	r0, r4
 8008028:	b003      	add	sp, #12
 800802a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800802e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008032:	e7d6      	b.n	8007fe2 <__d2b+0x2e>
 8008034:	6161      	str	r1, [r4, #20]
 8008036:	e7e7      	b.n	8008008 <__d2b+0x54>
 8008038:	a801      	add	r0, sp, #4
 800803a:	f7ff fcf1 	bl	8007a20 <__lo0bits>
 800803e:	9b01      	ldr	r3, [sp, #4]
 8008040:	6163      	str	r3, [r4, #20]
 8008042:	3020      	adds	r0, #32
 8008044:	2201      	movs	r2, #1
 8008046:	e7e5      	b.n	8008014 <__d2b+0x60>
 8008048:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800804c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008050:	6038      	str	r0, [r7, #0]
 8008052:	6918      	ldr	r0, [r3, #16]
 8008054:	f7ff fcc4 	bl	80079e0 <__hi0bits>
 8008058:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800805c:	e7e2      	b.n	8008024 <__d2b+0x70>
 800805e:	bf00      	nop
 8008060:	0800a285 	.word	0x0800a285
 8008064:	0800a296 	.word	0x0800a296

08008068 <__ratio>:
 8008068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806c:	4688      	mov	r8, r1
 800806e:	4669      	mov	r1, sp
 8008070:	4681      	mov	r9, r0
 8008072:	f7ff ff55 	bl	8007f20 <__b2d>
 8008076:	a901      	add	r1, sp, #4
 8008078:	4640      	mov	r0, r8
 800807a:	ec55 4b10 	vmov	r4, r5, d0
 800807e:	f7ff ff4f 	bl	8007f20 <__b2d>
 8008082:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008086:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800808a:	eba3 0c02 	sub.w	ip, r3, r2
 800808e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008092:	1a9b      	subs	r3, r3, r2
 8008094:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008098:	ec51 0b10 	vmov	r0, r1, d0
 800809c:	2b00      	cmp	r3, #0
 800809e:	bfd6      	itet	le
 80080a0:	460a      	movle	r2, r1
 80080a2:	462a      	movgt	r2, r5
 80080a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80080a8:	468b      	mov	fp, r1
 80080aa:	462f      	mov	r7, r5
 80080ac:	bfd4      	ite	le
 80080ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80080b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80080b6:	4620      	mov	r0, r4
 80080b8:	ee10 2a10 	vmov	r2, s0
 80080bc:	465b      	mov	r3, fp
 80080be:	4639      	mov	r1, r7
 80080c0:	f7f8 fbcc 	bl	800085c <__aeabi_ddiv>
 80080c4:	ec41 0b10 	vmov	d0, r0, r1
 80080c8:	b003      	add	sp, #12
 80080ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080ce <__copybits>:
 80080ce:	3901      	subs	r1, #1
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	1149      	asrs	r1, r1, #5
 80080d4:	6914      	ldr	r4, [r2, #16]
 80080d6:	3101      	adds	r1, #1
 80080d8:	f102 0314 	add.w	r3, r2, #20
 80080dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80080e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80080e4:	1f05      	subs	r5, r0, #4
 80080e6:	42a3      	cmp	r3, r4
 80080e8:	d30c      	bcc.n	8008104 <__copybits+0x36>
 80080ea:	1aa3      	subs	r3, r4, r2
 80080ec:	3b11      	subs	r3, #17
 80080ee:	f023 0303 	bic.w	r3, r3, #3
 80080f2:	3211      	adds	r2, #17
 80080f4:	42a2      	cmp	r2, r4
 80080f6:	bf88      	it	hi
 80080f8:	2300      	movhi	r3, #0
 80080fa:	4418      	add	r0, r3
 80080fc:	2300      	movs	r3, #0
 80080fe:	4288      	cmp	r0, r1
 8008100:	d305      	bcc.n	800810e <__copybits+0x40>
 8008102:	bd70      	pop	{r4, r5, r6, pc}
 8008104:	f853 6b04 	ldr.w	r6, [r3], #4
 8008108:	f845 6f04 	str.w	r6, [r5, #4]!
 800810c:	e7eb      	b.n	80080e6 <__copybits+0x18>
 800810e:	f840 3b04 	str.w	r3, [r0], #4
 8008112:	e7f4      	b.n	80080fe <__copybits+0x30>

08008114 <__any_on>:
 8008114:	f100 0214 	add.w	r2, r0, #20
 8008118:	6900      	ldr	r0, [r0, #16]
 800811a:	114b      	asrs	r3, r1, #5
 800811c:	4298      	cmp	r0, r3
 800811e:	b510      	push	{r4, lr}
 8008120:	db11      	blt.n	8008146 <__any_on+0x32>
 8008122:	dd0a      	ble.n	800813a <__any_on+0x26>
 8008124:	f011 011f 	ands.w	r1, r1, #31
 8008128:	d007      	beq.n	800813a <__any_on+0x26>
 800812a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800812e:	fa24 f001 	lsr.w	r0, r4, r1
 8008132:	fa00 f101 	lsl.w	r1, r0, r1
 8008136:	428c      	cmp	r4, r1
 8008138:	d10b      	bne.n	8008152 <__any_on+0x3e>
 800813a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800813e:	4293      	cmp	r3, r2
 8008140:	d803      	bhi.n	800814a <__any_on+0x36>
 8008142:	2000      	movs	r0, #0
 8008144:	bd10      	pop	{r4, pc}
 8008146:	4603      	mov	r3, r0
 8008148:	e7f7      	b.n	800813a <__any_on+0x26>
 800814a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800814e:	2900      	cmp	r1, #0
 8008150:	d0f5      	beq.n	800813e <__any_on+0x2a>
 8008152:	2001      	movs	r0, #1
 8008154:	e7f6      	b.n	8008144 <__any_on+0x30>

08008156 <sulp>:
 8008156:	b570      	push	{r4, r5, r6, lr}
 8008158:	4604      	mov	r4, r0
 800815a:	460d      	mov	r5, r1
 800815c:	ec45 4b10 	vmov	d0, r4, r5
 8008160:	4616      	mov	r6, r2
 8008162:	f7ff feb7 	bl	8007ed4 <__ulp>
 8008166:	ec51 0b10 	vmov	r0, r1, d0
 800816a:	b17e      	cbz	r6, 800818c <sulp+0x36>
 800816c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008170:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008174:	2b00      	cmp	r3, #0
 8008176:	dd09      	ble.n	800818c <sulp+0x36>
 8008178:	051b      	lsls	r3, r3, #20
 800817a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800817e:	2400      	movs	r4, #0
 8008180:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008184:	4622      	mov	r2, r4
 8008186:	462b      	mov	r3, r5
 8008188:	f7f8 fa3e 	bl	8000608 <__aeabi_dmul>
 800818c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008190 <_strtod_l>:
 8008190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008194:	ed2d 8b02 	vpush	{d8}
 8008198:	b09b      	sub	sp, #108	; 0x6c
 800819a:	4604      	mov	r4, r0
 800819c:	9213      	str	r2, [sp, #76]	; 0x4c
 800819e:	2200      	movs	r2, #0
 80081a0:	9216      	str	r2, [sp, #88]	; 0x58
 80081a2:	460d      	mov	r5, r1
 80081a4:	f04f 0800 	mov.w	r8, #0
 80081a8:	f04f 0900 	mov.w	r9, #0
 80081ac:	460a      	mov	r2, r1
 80081ae:	9215      	str	r2, [sp, #84]	; 0x54
 80081b0:	7811      	ldrb	r1, [r2, #0]
 80081b2:	292b      	cmp	r1, #43	; 0x2b
 80081b4:	d04c      	beq.n	8008250 <_strtod_l+0xc0>
 80081b6:	d83a      	bhi.n	800822e <_strtod_l+0x9e>
 80081b8:	290d      	cmp	r1, #13
 80081ba:	d834      	bhi.n	8008226 <_strtod_l+0x96>
 80081bc:	2908      	cmp	r1, #8
 80081be:	d834      	bhi.n	800822a <_strtod_l+0x9a>
 80081c0:	2900      	cmp	r1, #0
 80081c2:	d03d      	beq.n	8008240 <_strtod_l+0xb0>
 80081c4:	2200      	movs	r2, #0
 80081c6:	920a      	str	r2, [sp, #40]	; 0x28
 80081c8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80081ca:	7832      	ldrb	r2, [r6, #0]
 80081cc:	2a30      	cmp	r2, #48	; 0x30
 80081ce:	f040 80b4 	bne.w	800833a <_strtod_l+0x1aa>
 80081d2:	7872      	ldrb	r2, [r6, #1]
 80081d4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80081d8:	2a58      	cmp	r2, #88	; 0x58
 80081da:	d170      	bne.n	80082be <_strtod_l+0x12e>
 80081dc:	9302      	str	r3, [sp, #8]
 80081de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e0:	9301      	str	r3, [sp, #4]
 80081e2:	ab16      	add	r3, sp, #88	; 0x58
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	4a8e      	ldr	r2, [pc, #568]	; (8008420 <_strtod_l+0x290>)
 80081e8:	ab17      	add	r3, sp, #92	; 0x5c
 80081ea:	a915      	add	r1, sp, #84	; 0x54
 80081ec:	4620      	mov	r0, r4
 80081ee:	f001 fb07 	bl	8009800 <__gethex>
 80081f2:	f010 070f 	ands.w	r7, r0, #15
 80081f6:	4605      	mov	r5, r0
 80081f8:	d005      	beq.n	8008206 <_strtod_l+0x76>
 80081fa:	2f06      	cmp	r7, #6
 80081fc:	d12a      	bne.n	8008254 <_strtod_l+0xc4>
 80081fe:	3601      	adds	r6, #1
 8008200:	2300      	movs	r3, #0
 8008202:	9615      	str	r6, [sp, #84]	; 0x54
 8008204:	930a      	str	r3, [sp, #40]	; 0x28
 8008206:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008208:	2b00      	cmp	r3, #0
 800820a:	f040 857f 	bne.w	8008d0c <_strtod_l+0xb7c>
 800820e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008210:	b1db      	cbz	r3, 800824a <_strtod_l+0xba>
 8008212:	4642      	mov	r2, r8
 8008214:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008218:	ec43 2b10 	vmov	d0, r2, r3
 800821c:	b01b      	add	sp, #108	; 0x6c
 800821e:	ecbd 8b02 	vpop	{d8}
 8008222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008226:	2920      	cmp	r1, #32
 8008228:	d1cc      	bne.n	80081c4 <_strtod_l+0x34>
 800822a:	3201      	adds	r2, #1
 800822c:	e7bf      	b.n	80081ae <_strtod_l+0x1e>
 800822e:	292d      	cmp	r1, #45	; 0x2d
 8008230:	d1c8      	bne.n	80081c4 <_strtod_l+0x34>
 8008232:	2101      	movs	r1, #1
 8008234:	910a      	str	r1, [sp, #40]	; 0x28
 8008236:	1c51      	adds	r1, r2, #1
 8008238:	9115      	str	r1, [sp, #84]	; 0x54
 800823a:	7852      	ldrb	r2, [r2, #1]
 800823c:	2a00      	cmp	r2, #0
 800823e:	d1c3      	bne.n	80081c8 <_strtod_l+0x38>
 8008240:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008242:	9515      	str	r5, [sp, #84]	; 0x54
 8008244:	2b00      	cmp	r3, #0
 8008246:	f040 855f 	bne.w	8008d08 <_strtod_l+0xb78>
 800824a:	4642      	mov	r2, r8
 800824c:	464b      	mov	r3, r9
 800824e:	e7e3      	b.n	8008218 <_strtod_l+0x88>
 8008250:	2100      	movs	r1, #0
 8008252:	e7ef      	b.n	8008234 <_strtod_l+0xa4>
 8008254:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008256:	b13a      	cbz	r2, 8008268 <_strtod_l+0xd8>
 8008258:	2135      	movs	r1, #53	; 0x35
 800825a:	a818      	add	r0, sp, #96	; 0x60
 800825c:	f7ff ff37 	bl	80080ce <__copybits>
 8008260:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008262:	4620      	mov	r0, r4
 8008264:	f7ff fb0a 	bl	800787c <_Bfree>
 8008268:	3f01      	subs	r7, #1
 800826a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800826c:	2f04      	cmp	r7, #4
 800826e:	d806      	bhi.n	800827e <_strtod_l+0xee>
 8008270:	e8df f007 	tbb	[pc, r7]
 8008274:	201d0314 	.word	0x201d0314
 8008278:	14          	.byte	0x14
 8008279:	00          	.byte	0x00
 800827a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800827e:	05e9      	lsls	r1, r5, #23
 8008280:	bf48      	it	mi
 8008282:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008286:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800828a:	0d1b      	lsrs	r3, r3, #20
 800828c:	051b      	lsls	r3, r3, #20
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1b9      	bne.n	8008206 <_strtod_l+0x76>
 8008292:	f7fe fb05 	bl	80068a0 <__errno>
 8008296:	2322      	movs	r3, #34	; 0x22
 8008298:	6003      	str	r3, [r0, #0]
 800829a:	e7b4      	b.n	8008206 <_strtod_l+0x76>
 800829c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80082a0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80082a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80082a8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80082ac:	e7e7      	b.n	800827e <_strtod_l+0xee>
 80082ae:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008428 <_strtod_l+0x298>
 80082b2:	e7e4      	b.n	800827e <_strtod_l+0xee>
 80082b4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80082b8:	f04f 38ff 	mov.w	r8, #4294967295
 80082bc:	e7df      	b.n	800827e <_strtod_l+0xee>
 80082be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	9215      	str	r2, [sp, #84]	; 0x54
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	2b30      	cmp	r3, #48	; 0x30
 80082c8:	d0f9      	beq.n	80082be <_strtod_l+0x12e>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d09b      	beq.n	8008206 <_strtod_l+0x76>
 80082ce:	2301      	movs	r3, #1
 80082d0:	f04f 0a00 	mov.w	sl, #0
 80082d4:	9304      	str	r3, [sp, #16]
 80082d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80082da:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80082de:	46d3      	mov	fp, sl
 80082e0:	220a      	movs	r2, #10
 80082e2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80082e4:	7806      	ldrb	r6, [r0, #0]
 80082e6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80082ea:	b2d9      	uxtb	r1, r3
 80082ec:	2909      	cmp	r1, #9
 80082ee:	d926      	bls.n	800833e <_strtod_l+0x1ae>
 80082f0:	494c      	ldr	r1, [pc, #304]	; (8008424 <_strtod_l+0x294>)
 80082f2:	2201      	movs	r2, #1
 80082f4:	f001 f98c 	bl	8009610 <strncmp>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d030      	beq.n	800835e <_strtod_l+0x1ce>
 80082fc:	2000      	movs	r0, #0
 80082fe:	4632      	mov	r2, r6
 8008300:	9005      	str	r0, [sp, #20]
 8008302:	465e      	mov	r6, fp
 8008304:	4603      	mov	r3, r0
 8008306:	2a65      	cmp	r2, #101	; 0x65
 8008308:	d001      	beq.n	800830e <_strtod_l+0x17e>
 800830a:	2a45      	cmp	r2, #69	; 0x45
 800830c:	d113      	bne.n	8008336 <_strtod_l+0x1a6>
 800830e:	b91e      	cbnz	r6, 8008318 <_strtod_l+0x188>
 8008310:	9a04      	ldr	r2, [sp, #16]
 8008312:	4302      	orrs	r2, r0
 8008314:	d094      	beq.n	8008240 <_strtod_l+0xb0>
 8008316:	2600      	movs	r6, #0
 8008318:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800831a:	1c6a      	adds	r2, r5, #1
 800831c:	9215      	str	r2, [sp, #84]	; 0x54
 800831e:	786a      	ldrb	r2, [r5, #1]
 8008320:	2a2b      	cmp	r2, #43	; 0x2b
 8008322:	d074      	beq.n	800840e <_strtod_l+0x27e>
 8008324:	2a2d      	cmp	r2, #45	; 0x2d
 8008326:	d078      	beq.n	800841a <_strtod_l+0x28a>
 8008328:	f04f 0c00 	mov.w	ip, #0
 800832c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008330:	2909      	cmp	r1, #9
 8008332:	d97f      	bls.n	8008434 <_strtod_l+0x2a4>
 8008334:	9515      	str	r5, [sp, #84]	; 0x54
 8008336:	2700      	movs	r7, #0
 8008338:	e09e      	b.n	8008478 <_strtod_l+0x2e8>
 800833a:	2300      	movs	r3, #0
 800833c:	e7c8      	b.n	80082d0 <_strtod_l+0x140>
 800833e:	f1bb 0f08 	cmp.w	fp, #8
 8008342:	bfd8      	it	le
 8008344:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008346:	f100 0001 	add.w	r0, r0, #1
 800834a:	bfda      	itte	le
 800834c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008350:	9309      	strle	r3, [sp, #36]	; 0x24
 8008352:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008356:	f10b 0b01 	add.w	fp, fp, #1
 800835a:	9015      	str	r0, [sp, #84]	; 0x54
 800835c:	e7c1      	b.n	80082e2 <_strtod_l+0x152>
 800835e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	9215      	str	r2, [sp, #84]	; 0x54
 8008364:	785a      	ldrb	r2, [r3, #1]
 8008366:	f1bb 0f00 	cmp.w	fp, #0
 800836a:	d037      	beq.n	80083dc <_strtod_l+0x24c>
 800836c:	9005      	str	r0, [sp, #20]
 800836e:	465e      	mov	r6, fp
 8008370:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008374:	2b09      	cmp	r3, #9
 8008376:	d912      	bls.n	800839e <_strtod_l+0x20e>
 8008378:	2301      	movs	r3, #1
 800837a:	e7c4      	b.n	8008306 <_strtod_l+0x176>
 800837c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	9215      	str	r2, [sp, #84]	; 0x54
 8008382:	785a      	ldrb	r2, [r3, #1]
 8008384:	3001      	adds	r0, #1
 8008386:	2a30      	cmp	r2, #48	; 0x30
 8008388:	d0f8      	beq.n	800837c <_strtod_l+0x1ec>
 800838a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800838e:	2b08      	cmp	r3, #8
 8008390:	f200 84c1 	bhi.w	8008d16 <_strtod_l+0xb86>
 8008394:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008396:	9005      	str	r0, [sp, #20]
 8008398:	2000      	movs	r0, #0
 800839a:	930b      	str	r3, [sp, #44]	; 0x2c
 800839c:	4606      	mov	r6, r0
 800839e:	3a30      	subs	r2, #48	; 0x30
 80083a0:	f100 0301 	add.w	r3, r0, #1
 80083a4:	d014      	beq.n	80083d0 <_strtod_l+0x240>
 80083a6:	9905      	ldr	r1, [sp, #20]
 80083a8:	4419      	add	r1, r3
 80083aa:	9105      	str	r1, [sp, #20]
 80083ac:	4633      	mov	r3, r6
 80083ae:	eb00 0c06 	add.w	ip, r0, r6
 80083b2:	210a      	movs	r1, #10
 80083b4:	4563      	cmp	r3, ip
 80083b6:	d113      	bne.n	80083e0 <_strtod_l+0x250>
 80083b8:	1833      	adds	r3, r6, r0
 80083ba:	2b08      	cmp	r3, #8
 80083bc:	f106 0601 	add.w	r6, r6, #1
 80083c0:	4406      	add	r6, r0
 80083c2:	dc1a      	bgt.n	80083fa <_strtod_l+0x26a>
 80083c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083c6:	230a      	movs	r3, #10
 80083c8:	fb03 2301 	mla	r3, r3, r1, r2
 80083cc:	9309      	str	r3, [sp, #36]	; 0x24
 80083ce:	2300      	movs	r3, #0
 80083d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80083d2:	1c51      	adds	r1, r2, #1
 80083d4:	9115      	str	r1, [sp, #84]	; 0x54
 80083d6:	7852      	ldrb	r2, [r2, #1]
 80083d8:	4618      	mov	r0, r3
 80083da:	e7c9      	b.n	8008370 <_strtod_l+0x1e0>
 80083dc:	4658      	mov	r0, fp
 80083de:	e7d2      	b.n	8008386 <_strtod_l+0x1f6>
 80083e0:	2b08      	cmp	r3, #8
 80083e2:	f103 0301 	add.w	r3, r3, #1
 80083e6:	dc03      	bgt.n	80083f0 <_strtod_l+0x260>
 80083e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80083ea:	434f      	muls	r7, r1
 80083ec:	9709      	str	r7, [sp, #36]	; 0x24
 80083ee:	e7e1      	b.n	80083b4 <_strtod_l+0x224>
 80083f0:	2b10      	cmp	r3, #16
 80083f2:	bfd8      	it	le
 80083f4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80083f8:	e7dc      	b.n	80083b4 <_strtod_l+0x224>
 80083fa:	2e10      	cmp	r6, #16
 80083fc:	bfdc      	itt	le
 80083fe:	230a      	movle	r3, #10
 8008400:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008404:	e7e3      	b.n	80083ce <_strtod_l+0x23e>
 8008406:	2300      	movs	r3, #0
 8008408:	9305      	str	r3, [sp, #20]
 800840a:	2301      	movs	r3, #1
 800840c:	e780      	b.n	8008310 <_strtod_l+0x180>
 800840e:	f04f 0c00 	mov.w	ip, #0
 8008412:	1caa      	adds	r2, r5, #2
 8008414:	9215      	str	r2, [sp, #84]	; 0x54
 8008416:	78aa      	ldrb	r2, [r5, #2]
 8008418:	e788      	b.n	800832c <_strtod_l+0x19c>
 800841a:	f04f 0c01 	mov.w	ip, #1
 800841e:	e7f8      	b.n	8008412 <_strtod_l+0x282>
 8008420:	0800a3f0 	.word	0x0800a3f0
 8008424:	0800a3ec 	.word	0x0800a3ec
 8008428:	7ff00000 	.word	0x7ff00000
 800842c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800842e:	1c51      	adds	r1, r2, #1
 8008430:	9115      	str	r1, [sp, #84]	; 0x54
 8008432:	7852      	ldrb	r2, [r2, #1]
 8008434:	2a30      	cmp	r2, #48	; 0x30
 8008436:	d0f9      	beq.n	800842c <_strtod_l+0x29c>
 8008438:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800843c:	2908      	cmp	r1, #8
 800843e:	f63f af7a 	bhi.w	8008336 <_strtod_l+0x1a6>
 8008442:	3a30      	subs	r2, #48	; 0x30
 8008444:	9208      	str	r2, [sp, #32]
 8008446:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008448:	920c      	str	r2, [sp, #48]	; 0x30
 800844a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800844c:	1c57      	adds	r7, r2, #1
 800844e:	9715      	str	r7, [sp, #84]	; 0x54
 8008450:	7852      	ldrb	r2, [r2, #1]
 8008452:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008456:	f1be 0f09 	cmp.w	lr, #9
 800845a:	d938      	bls.n	80084ce <_strtod_l+0x33e>
 800845c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800845e:	1a7f      	subs	r7, r7, r1
 8008460:	2f08      	cmp	r7, #8
 8008462:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008466:	dc03      	bgt.n	8008470 <_strtod_l+0x2e0>
 8008468:	9908      	ldr	r1, [sp, #32]
 800846a:	428f      	cmp	r7, r1
 800846c:	bfa8      	it	ge
 800846e:	460f      	movge	r7, r1
 8008470:	f1bc 0f00 	cmp.w	ip, #0
 8008474:	d000      	beq.n	8008478 <_strtod_l+0x2e8>
 8008476:	427f      	negs	r7, r7
 8008478:	2e00      	cmp	r6, #0
 800847a:	d14f      	bne.n	800851c <_strtod_l+0x38c>
 800847c:	9904      	ldr	r1, [sp, #16]
 800847e:	4301      	orrs	r1, r0
 8008480:	f47f aec1 	bne.w	8008206 <_strtod_l+0x76>
 8008484:	2b00      	cmp	r3, #0
 8008486:	f47f aedb 	bne.w	8008240 <_strtod_l+0xb0>
 800848a:	2a69      	cmp	r2, #105	; 0x69
 800848c:	d029      	beq.n	80084e2 <_strtod_l+0x352>
 800848e:	dc26      	bgt.n	80084de <_strtod_l+0x34e>
 8008490:	2a49      	cmp	r2, #73	; 0x49
 8008492:	d026      	beq.n	80084e2 <_strtod_l+0x352>
 8008494:	2a4e      	cmp	r2, #78	; 0x4e
 8008496:	f47f aed3 	bne.w	8008240 <_strtod_l+0xb0>
 800849a:	499b      	ldr	r1, [pc, #620]	; (8008708 <_strtod_l+0x578>)
 800849c:	a815      	add	r0, sp, #84	; 0x54
 800849e:	f001 fbef 	bl	8009c80 <__match>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	f43f aecc 	beq.w	8008240 <_strtod_l+0xb0>
 80084a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2b28      	cmp	r3, #40	; 0x28
 80084ae:	d12f      	bne.n	8008510 <_strtod_l+0x380>
 80084b0:	4996      	ldr	r1, [pc, #600]	; (800870c <_strtod_l+0x57c>)
 80084b2:	aa18      	add	r2, sp, #96	; 0x60
 80084b4:	a815      	add	r0, sp, #84	; 0x54
 80084b6:	f001 fbf7 	bl	8009ca8 <__hexnan>
 80084ba:	2805      	cmp	r0, #5
 80084bc:	d128      	bne.n	8008510 <_strtod_l+0x380>
 80084be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80084c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80084c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80084cc:	e69b      	b.n	8008206 <_strtod_l+0x76>
 80084ce:	9f08      	ldr	r7, [sp, #32]
 80084d0:	210a      	movs	r1, #10
 80084d2:	fb01 2107 	mla	r1, r1, r7, r2
 80084d6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80084da:	9208      	str	r2, [sp, #32]
 80084dc:	e7b5      	b.n	800844a <_strtod_l+0x2ba>
 80084de:	2a6e      	cmp	r2, #110	; 0x6e
 80084e0:	e7d9      	b.n	8008496 <_strtod_l+0x306>
 80084e2:	498b      	ldr	r1, [pc, #556]	; (8008710 <_strtod_l+0x580>)
 80084e4:	a815      	add	r0, sp, #84	; 0x54
 80084e6:	f001 fbcb 	bl	8009c80 <__match>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	f43f aea8 	beq.w	8008240 <_strtod_l+0xb0>
 80084f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084f2:	4988      	ldr	r1, [pc, #544]	; (8008714 <_strtod_l+0x584>)
 80084f4:	3b01      	subs	r3, #1
 80084f6:	a815      	add	r0, sp, #84	; 0x54
 80084f8:	9315      	str	r3, [sp, #84]	; 0x54
 80084fa:	f001 fbc1 	bl	8009c80 <__match>
 80084fe:	b910      	cbnz	r0, 8008506 <_strtod_l+0x376>
 8008500:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008502:	3301      	adds	r3, #1
 8008504:	9315      	str	r3, [sp, #84]	; 0x54
 8008506:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008724 <_strtod_l+0x594>
 800850a:	f04f 0800 	mov.w	r8, #0
 800850e:	e67a      	b.n	8008206 <_strtod_l+0x76>
 8008510:	4881      	ldr	r0, [pc, #516]	; (8008718 <_strtod_l+0x588>)
 8008512:	f001 f8d1 	bl	80096b8 <nan>
 8008516:	ec59 8b10 	vmov	r8, r9, d0
 800851a:	e674      	b.n	8008206 <_strtod_l+0x76>
 800851c:	9b05      	ldr	r3, [sp, #20]
 800851e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008520:	1afb      	subs	r3, r7, r3
 8008522:	f1bb 0f00 	cmp.w	fp, #0
 8008526:	bf08      	it	eq
 8008528:	46b3      	moveq	fp, r6
 800852a:	2e10      	cmp	r6, #16
 800852c:	9308      	str	r3, [sp, #32]
 800852e:	4635      	mov	r5, r6
 8008530:	bfa8      	it	ge
 8008532:	2510      	movge	r5, #16
 8008534:	f7f7 ffee 	bl	8000514 <__aeabi_ui2d>
 8008538:	2e09      	cmp	r6, #9
 800853a:	4680      	mov	r8, r0
 800853c:	4689      	mov	r9, r1
 800853e:	dd13      	ble.n	8008568 <_strtod_l+0x3d8>
 8008540:	4b76      	ldr	r3, [pc, #472]	; (800871c <_strtod_l+0x58c>)
 8008542:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008546:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800854a:	f7f8 f85d 	bl	8000608 <__aeabi_dmul>
 800854e:	4680      	mov	r8, r0
 8008550:	4650      	mov	r0, sl
 8008552:	4689      	mov	r9, r1
 8008554:	f7f7 ffde 	bl	8000514 <__aeabi_ui2d>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	4640      	mov	r0, r8
 800855e:	4649      	mov	r1, r9
 8008560:	f7f7 fe9c 	bl	800029c <__adddf3>
 8008564:	4680      	mov	r8, r0
 8008566:	4689      	mov	r9, r1
 8008568:	2e0f      	cmp	r6, #15
 800856a:	dc38      	bgt.n	80085de <_strtod_l+0x44e>
 800856c:	9b08      	ldr	r3, [sp, #32]
 800856e:	2b00      	cmp	r3, #0
 8008570:	f43f ae49 	beq.w	8008206 <_strtod_l+0x76>
 8008574:	dd24      	ble.n	80085c0 <_strtod_l+0x430>
 8008576:	2b16      	cmp	r3, #22
 8008578:	dc0b      	bgt.n	8008592 <_strtod_l+0x402>
 800857a:	4968      	ldr	r1, [pc, #416]	; (800871c <_strtod_l+0x58c>)
 800857c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008584:	4642      	mov	r2, r8
 8008586:	464b      	mov	r3, r9
 8008588:	f7f8 f83e 	bl	8000608 <__aeabi_dmul>
 800858c:	4680      	mov	r8, r0
 800858e:	4689      	mov	r9, r1
 8008590:	e639      	b.n	8008206 <_strtod_l+0x76>
 8008592:	9a08      	ldr	r2, [sp, #32]
 8008594:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008598:	4293      	cmp	r3, r2
 800859a:	db20      	blt.n	80085de <_strtod_l+0x44e>
 800859c:	4c5f      	ldr	r4, [pc, #380]	; (800871c <_strtod_l+0x58c>)
 800859e:	f1c6 060f 	rsb	r6, r6, #15
 80085a2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80085a6:	4642      	mov	r2, r8
 80085a8:	464b      	mov	r3, r9
 80085aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085ae:	f7f8 f82b 	bl	8000608 <__aeabi_dmul>
 80085b2:	9b08      	ldr	r3, [sp, #32]
 80085b4:	1b9e      	subs	r6, r3, r6
 80085b6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80085ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 80085be:	e7e3      	b.n	8008588 <_strtod_l+0x3f8>
 80085c0:	9b08      	ldr	r3, [sp, #32]
 80085c2:	3316      	adds	r3, #22
 80085c4:	db0b      	blt.n	80085de <_strtod_l+0x44e>
 80085c6:	9b05      	ldr	r3, [sp, #20]
 80085c8:	1bdf      	subs	r7, r3, r7
 80085ca:	4b54      	ldr	r3, [pc, #336]	; (800871c <_strtod_l+0x58c>)
 80085cc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80085d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d4:	4640      	mov	r0, r8
 80085d6:	4649      	mov	r1, r9
 80085d8:	f7f8 f940 	bl	800085c <__aeabi_ddiv>
 80085dc:	e7d6      	b.n	800858c <_strtod_l+0x3fc>
 80085de:	9b08      	ldr	r3, [sp, #32]
 80085e0:	1b75      	subs	r5, r6, r5
 80085e2:	441d      	add	r5, r3
 80085e4:	2d00      	cmp	r5, #0
 80085e6:	dd70      	ble.n	80086ca <_strtod_l+0x53a>
 80085e8:	f015 030f 	ands.w	r3, r5, #15
 80085ec:	d00a      	beq.n	8008604 <_strtod_l+0x474>
 80085ee:	494b      	ldr	r1, [pc, #300]	; (800871c <_strtod_l+0x58c>)
 80085f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085f4:	4642      	mov	r2, r8
 80085f6:	464b      	mov	r3, r9
 80085f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085fc:	f7f8 f804 	bl	8000608 <__aeabi_dmul>
 8008600:	4680      	mov	r8, r0
 8008602:	4689      	mov	r9, r1
 8008604:	f035 050f 	bics.w	r5, r5, #15
 8008608:	d04d      	beq.n	80086a6 <_strtod_l+0x516>
 800860a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800860e:	dd22      	ble.n	8008656 <_strtod_l+0x4c6>
 8008610:	2500      	movs	r5, #0
 8008612:	46ab      	mov	fp, r5
 8008614:	9509      	str	r5, [sp, #36]	; 0x24
 8008616:	9505      	str	r5, [sp, #20]
 8008618:	2322      	movs	r3, #34	; 0x22
 800861a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008724 <_strtod_l+0x594>
 800861e:	6023      	str	r3, [r4, #0]
 8008620:	f04f 0800 	mov.w	r8, #0
 8008624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008626:	2b00      	cmp	r3, #0
 8008628:	f43f aded 	beq.w	8008206 <_strtod_l+0x76>
 800862c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800862e:	4620      	mov	r0, r4
 8008630:	f7ff f924 	bl	800787c <_Bfree>
 8008634:	9905      	ldr	r1, [sp, #20]
 8008636:	4620      	mov	r0, r4
 8008638:	f7ff f920 	bl	800787c <_Bfree>
 800863c:	4659      	mov	r1, fp
 800863e:	4620      	mov	r0, r4
 8008640:	f7ff f91c 	bl	800787c <_Bfree>
 8008644:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008646:	4620      	mov	r0, r4
 8008648:	f7ff f918 	bl	800787c <_Bfree>
 800864c:	4629      	mov	r1, r5
 800864e:	4620      	mov	r0, r4
 8008650:	f7ff f914 	bl	800787c <_Bfree>
 8008654:	e5d7      	b.n	8008206 <_strtod_l+0x76>
 8008656:	4b32      	ldr	r3, [pc, #200]	; (8008720 <_strtod_l+0x590>)
 8008658:	9304      	str	r3, [sp, #16]
 800865a:	2300      	movs	r3, #0
 800865c:	112d      	asrs	r5, r5, #4
 800865e:	4640      	mov	r0, r8
 8008660:	4649      	mov	r1, r9
 8008662:	469a      	mov	sl, r3
 8008664:	2d01      	cmp	r5, #1
 8008666:	dc21      	bgt.n	80086ac <_strtod_l+0x51c>
 8008668:	b10b      	cbz	r3, 800866e <_strtod_l+0x4de>
 800866a:	4680      	mov	r8, r0
 800866c:	4689      	mov	r9, r1
 800866e:	492c      	ldr	r1, [pc, #176]	; (8008720 <_strtod_l+0x590>)
 8008670:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008674:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008678:	4642      	mov	r2, r8
 800867a:	464b      	mov	r3, r9
 800867c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008680:	f7f7 ffc2 	bl	8000608 <__aeabi_dmul>
 8008684:	4b27      	ldr	r3, [pc, #156]	; (8008724 <_strtod_l+0x594>)
 8008686:	460a      	mov	r2, r1
 8008688:	400b      	ands	r3, r1
 800868a:	4927      	ldr	r1, [pc, #156]	; (8008728 <_strtod_l+0x598>)
 800868c:	428b      	cmp	r3, r1
 800868e:	4680      	mov	r8, r0
 8008690:	d8be      	bhi.n	8008610 <_strtod_l+0x480>
 8008692:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008696:	428b      	cmp	r3, r1
 8008698:	bf86      	itte	hi
 800869a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800872c <_strtod_l+0x59c>
 800869e:	f04f 38ff 	movhi.w	r8, #4294967295
 80086a2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80086a6:	2300      	movs	r3, #0
 80086a8:	9304      	str	r3, [sp, #16]
 80086aa:	e07b      	b.n	80087a4 <_strtod_l+0x614>
 80086ac:	07ea      	lsls	r2, r5, #31
 80086ae:	d505      	bpl.n	80086bc <_strtod_l+0x52c>
 80086b0:	9b04      	ldr	r3, [sp, #16]
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	f7f7 ffa7 	bl	8000608 <__aeabi_dmul>
 80086ba:	2301      	movs	r3, #1
 80086bc:	9a04      	ldr	r2, [sp, #16]
 80086be:	3208      	adds	r2, #8
 80086c0:	f10a 0a01 	add.w	sl, sl, #1
 80086c4:	106d      	asrs	r5, r5, #1
 80086c6:	9204      	str	r2, [sp, #16]
 80086c8:	e7cc      	b.n	8008664 <_strtod_l+0x4d4>
 80086ca:	d0ec      	beq.n	80086a6 <_strtod_l+0x516>
 80086cc:	426d      	negs	r5, r5
 80086ce:	f015 020f 	ands.w	r2, r5, #15
 80086d2:	d00a      	beq.n	80086ea <_strtod_l+0x55a>
 80086d4:	4b11      	ldr	r3, [pc, #68]	; (800871c <_strtod_l+0x58c>)
 80086d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086da:	4640      	mov	r0, r8
 80086dc:	4649      	mov	r1, r9
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	f7f8 f8bb 	bl	800085c <__aeabi_ddiv>
 80086e6:	4680      	mov	r8, r0
 80086e8:	4689      	mov	r9, r1
 80086ea:	112d      	asrs	r5, r5, #4
 80086ec:	d0db      	beq.n	80086a6 <_strtod_l+0x516>
 80086ee:	2d1f      	cmp	r5, #31
 80086f0:	dd1e      	ble.n	8008730 <_strtod_l+0x5a0>
 80086f2:	2500      	movs	r5, #0
 80086f4:	46ab      	mov	fp, r5
 80086f6:	9509      	str	r5, [sp, #36]	; 0x24
 80086f8:	9505      	str	r5, [sp, #20]
 80086fa:	2322      	movs	r3, #34	; 0x22
 80086fc:	f04f 0800 	mov.w	r8, #0
 8008700:	f04f 0900 	mov.w	r9, #0
 8008704:	6023      	str	r3, [r4, #0]
 8008706:	e78d      	b.n	8008624 <_strtod_l+0x494>
 8008708:	0800a1dd 	.word	0x0800a1dd
 800870c:	0800a404 	.word	0x0800a404
 8008710:	0800a1d5 	.word	0x0800a1d5
 8008714:	0800a20c 	.word	0x0800a20c
 8008718:	0800a595 	.word	0x0800a595
 800871c:	0800a318 	.word	0x0800a318
 8008720:	0800a2f0 	.word	0x0800a2f0
 8008724:	7ff00000 	.word	0x7ff00000
 8008728:	7ca00000 	.word	0x7ca00000
 800872c:	7fefffff 	.word	0x7fefffff
 8008730:	f015 0310 	ands.w	r3, r5, #16
 8008734:	bf18      	it	ne
 8008736:	236a      	movne	r3, #106	; 0x6a
 8008738:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008adc <_strtod_l+0x94c>
 800873c:	9304      	str	r3, [sp, #16]
 800873e:	4640      	mov	r0, r8
 8008740:	4649      	mov	r1, r9
 8008742:	2300      	movs	r3, #0
 8008744:	07ea      	lsls	r2, r5, #31
 8008746:	d504      	bpl.n	8008752 <_strtod_l+0x5c2>
 8008748:	e9da 2300 	ldrd	r2, r3, [sl]
 800874c:	f7f7 ff5c 	bl	8000608 <__aeabi_dmul>
 8008750:	2301      	movs	r3, #1
 8008752:	106d      	asrs	r5, r5, #1
 8008754:	f10a 0a08 	add.w	sl, sl, #8
 8008758:	d1f4      	bne.n	8008744 <_strtod_l+0x5b4>
 800875a:	b10b      	cbz	r3, 8008760 <_strtod_l+0x5d0>
 800875c:	4680      	mov	r8, r0
 800875e:	4689      	mov	r9, r1
 8008760:	9b04      	ldr	r3, [sp, #16]
 8008762:	b1bb      	cbz	r3, 8008794 <_strtod_l+0x604>
 8008764:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008768:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800876c:	2b00      	cmp	r3, #0
 800876e:	4649      	mov	r1, r9
 8008770:	dd10      	ble.n	8008794 <_strtod_l+0x604>
 8008772:	2b1f      	cmp	r3, #31
 8008774:	f340 811e 	ble.w	80089b4 <_strtod_l+0x824>
 8008778:	2b34      	cmp	r3, #52	; 0x34
 800877a:	bfde      	ittt	le
 800877c:	f04f 33ff 	movle.w	r3, #4294967295
 8008780:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008784:	4093      	lslle	r3, r2
 8008786:	f04f 0800 	mov.w	r8, #0
 800878a:	bfcc      	ite	gt
 800878c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008790:	ea03 0901 	andle.w	r9, r3, r1
 8008794:	2200      	movs	r2, #0
 8008796:	2300      	movs	r3, #0
 8008798:	4640      	mov	r0, r8
 800879a:	4649      	mov	r1, r9
 800879c:	f7f8 f99c 	bl	8000ad8 <__aeabi_dcmpeq>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d1a6      	bne.n	80086f2 <_strtod_l+0x562>
 80087a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087aa:	4633      	mov	r3, r6
 80087ac:	465a      	mov	r2, fp
 80087ae:	4620      	mov	r0, r4
 80087b0:	f7ff f8cc 	bl	800794c <__s2b>
 80087b4:	9009      	str	r0, [sp, #36]	; 0x24
 80087b6:	2800      	cmp	r0, #0
 80087b8:	f43f af2a 	beq.w	8008610 <_strtod_l+0x480>
 80087bc:	9a08      	ldr	r2, [sp, #32]
 80087be:	9b05      	ldr	r3, [sp, #20]
 80087c0:	2a00      	cmp	r2, #0
 80087c2:	eba3 0307 	sub.w	r3, r3, r7
 80087c6:	bfa8      	it	ge
 80087c8:	2300      	movge	r3, #0
 80087ca:	930c      	str	r3, [sp, #48]	; 0x30
 80087cc:	2500      	movs	r5, #0
 80087ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80087d2:	9312      	str	r3, [sp, #72]	; 0x48
 80087d4:	46ab      	mov	fp, r5
 80087d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d8:	4620      	mov	r0, r4
 80087da:	6859      	ldr	r1, [r3, #4]
 80087dc:	f7ff f80e 	bl	80077fc <_Balloc>
 80087e0:	9005      	str	r0, [sp, #20]
 80087e2:	2800      	cmp	r0, #0
 80087e4:	f43f af18 	beq.w	8008618 <_strtod_l+0x488>
 80087e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ea:	691a      	ldr	r2, [r3, #16]
 80087ec:	3202      	adds	r2, #2
 80087ee:	f103 010c 	add.w	r1, r3, #12
 80087f2:	0092      	lsls	r2, r2, #2
 80087f4:	300c      	adds	r0, #12
 80087f6:	f000 ff4f 	bl	8009698 <memcpy>
 80087fa:	ec49 8b10 	vmov	d0, r8, r9
 80087fe:	aa18      	add	r2, sp, #96	; 0x60
 8008800:	a917      	add	r1, sp, #92	; 0x5c
 8008802:	4620      	mov	r0, r4
 8008804:	f7ff fbd6 	bl	8007fb4 <__d2b>
 8008808:	ec49 8b18 	vmov	d8, r8, r9
 800880c:	9016      	str	r0, [sp, #88]	; 0x58
 800880e:	2800      	cmp	r0, #0
 8008810:	f43f af02 	beq.w	8008618 <_strtod_l+0x488>
 8008814:	2101      	movs	r1, #1
 8008816:	4620      	mov	r0, r4
 8008818:	f7ff f930 	bl	8007a7c <__i2b>
 800881c:	4683      	mov	fp, r0
 800881e:	2800      	cmp	r0, #0
 8008820:	f43f aefa 	beq.w	8008618 <_strtod_l+0x488>
 8008824:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008826:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008828:	2e00      	cmp	r6, #0
 800882a:	bfab      	itete	ge
 800882c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800882e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008830:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008832:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008836:	bfac      	ite	ge
 8008838:	eb06 0a03 	addge.w	sl, r6, r3
 800883c:	1b9f      	sublt	r7, r3, r6
 800883e:	9b04      	ldr	r3, [sp, #16]
 8008840:	1af6      	subs	r6, r6, r3
 8008842:	4416      	add	r6, r2
 8008844:	4ba0      	ldr	r3, [pc, #640]	; (8008ac8 <_strtod_l+0x938>)
 8008846:	3e01      	subs	r6, #1
 8008848:	429e      	cmp	r6, r3
 800884a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800884e:	f280 80c4 	bge.w	80089da <_strtod_l+0x84a>
 8008852:	1b9b      	subs	r3, r3, r6
 8008854:	2b1f      	cmp	r3, #31
 8008856:	eba2 0203 	sub.w	r2, r2, r3
 800885a:	f04f 0101 	mov.w	r1, #1
 800885e:	f300 80b0 	bgt.w	80089c2 <_strtod_l+0x832>
 8008862:	fa01 f303 	lsl.w	r3, r1, r3
 8008866:	930e      	str	r3, [sp, #56]	; 0x38
 8008868:	2300      	movs	r3, #0
 800886a:	930d      	str	r3, [sp, #52]	; 0x34
 800886c:	eb0a 0602 	add.w	r6, sl, r2
 8008870:	9b04      	ldr	r3, [sp, #16]
 8008872:	45b2      	cmp	sl, r6
 8008874:	4417      	add	r7, r2
 8008876:	441f      	add	r7, r3
 8008878:	4653      	mov	r3, sl
 800887a:	bfa8      	it	ge
 800887c:	4633      	movge	r3, r6
 800887e:	42bb      	cmp	r3, r7
 8008880:	bfa8      	it	ge
 8008882:	463b      	movge	r3, r7
 8008884:	2b00      	cmp	r3, #0
 8008886:	bfc2      	ittt	gt
 8008888:	1af6      	subgt	r6, r6, r3
 800888a:	1aff      	subgt	r7, r7, r3
 800888c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008892:	2b00      	cmp	r3, #0
 8008894:	dd17      	ble.n	80088c6 <_strtod_l+0x736>
 8008896:	4659      	mov	r1, fp
 8008898:	461a      	mov	r2, r3
 800889a:	4620      	mov	r0, r4
 800889c:	f7ff f9ae 	bl	8007bfc <__pow5mult>
 80088a0:	4683      	mov	fp, r0
 80088a2:	2800      	cmp	r0, #0
 80088a4:	f43f aeb8 	beq.w	8008618 <_strtod_l+0x488>
 80088a8:	4601      	mov	r1, r0
 80088aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80088ac:	4620      	mov	r0, r4
 80088ae:	f7ff f8fb 	bl	8007aa8 <__multiply>
 80088b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80088b4:	2800      	cmp	r0, #0
 80088b6:	f43f aeaf 	beq.w	8008618 <_strtod_l+0x488>
 80088ba:	9916      	ldr	r1, [sp, #88]	; 0x58
 80088bc:	4620      	mov	r0, r4
 80088be:	f7fe ffdd 	bl	800787c <_Bfree>
 80088c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088c4:	9316      	str	r3, [sp, #88]	; 0x58
 80088c6:	2e00      	cmp	r6, #0
 80088c8:	f300 808c 	bgt.w	80089e4 <_strtod_l+0x854>
 80088cc:	9b08      	ldr	r3, [sp, #32]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	dd08      	ble.n	80088e4 <_strtod_l+0x754>
 80088d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088d4:	9905      	ldr	r1, [sp, #20]
 80088d6:	4620      	mov	r0, r4
 80088d8:	f7ff f990 	bl	8007bfc <__pow5mult>
 80088dc:	9005      	str	r0, [sp, #20]
 80088de:	2800      	cmp	r0, #0
 80088e0:	f43f ae9a 	beq.w	8008618 <_strtod_l+0x488>
 80088e4:	2f00      	cmp	r7, #0
 80088e6:	dd08      	ble.n	80088fa <_strtod_l+0x76a>
 80088e8:	9905      	ldr	r1, [sp, #20]
 80088ea:	463a      	mov	r2, r7
 80088ec:	4620      	mov	r0, r4
 80088ee:	f7ff f9df 	bl	8007cb0 <__lshift>
 80088f2:	9005      	str	r0, [sp, #20]
 80088f4:	2800      	cmp	r0, #0
 80088f6:	f43f ae8f 	beq.w	8008618 <_strtod_l+0x488>
 80088fa:	f1ba 0f00 	cmp.w	sl, #0
 80088fe:	dd08      	ble.n	8008912 <_strtod_l+0x782>
 8008900:	4659      	mov	r1, fp
 8008902:	4652      	mov	r2, sl
 8008904:	4620      	mov	r0, r4
 8008906:	f7ff f9d3 	bl	8007cb0 <__lshift>
 800890a:	4683      	mov	fp, r0
 800890c:	2800      	cmp	r0, #0
 800890e:	f43f ae83 	beq.w	8008618 <_strtod_l+0x488>
 8008912:	9a05      	ldr	r2, [sp, #20]
 8008914:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008916:	4620      	mov	r0, r4
 8008918:	f7ff fa52 	bl	8007dc0 <__mdiff>
 800891c:	4605      	mov	r5, r0
 800891e:	2800      	cmp	r0, #0
 8008920:	f43f ae7a 	beq.w	8008618 <_strtod_l+0x488>
 8008924:	68c3      	ldr	r3, [r0, #12]
 8008926:	930b      	str	r3, [sp, #44]	; 0x2c
 8008928:	2300      	movs	r3, #0
 800892a:	60c3      	str	r3, [r0, #12]
 800892c:	4659      	mov	r1, fp
 800892e:	f7ff fa2b 	bl	8007d88 <__mcmp>
 8008932:	2800      	cmp	r0, #0
 8008934:	da60      	bge.n	80089f8 <_strtod_l+0x868>
 8008936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008938:	ea53 0308 	orrs.w	r3, r3, r8
 800893c:	f040 8084 	bne.w	8008a48 <_strtod_l+0x8b8>
 8008940:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008944:	2b00      	cmp	r3, #0
 8008946:	d17f      	bne.n	8008a48 <_strtod_l+0x8b8>
 8008948:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800894c:	0d1b      	lsrs	r3, r3, #20
 800894e:	051b      	lsls	r3, r3, #20
 8008950:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008954:	d978      	bls.n	8008a48 <_strtod_l+0x8b8>
 8008956:	696b      	ldr	r3, [r5, #20]
 8008958:	b913      	cbnz	r3, 8008960 <_strtod_l+0x7d0>
 800895a:	692b      	ldr	r3, [r5, #16]
 800895c:	2b01      	cmp	r3, #1
 800895e:	dd73      	ble.n	8008a48 <_strtod_l+0x8b8>
 8008960:	4629      	mov	r1, r5
 8008962:	2201      	movs	r2, #1
 8008964:	4620      	mov	r0, r4
 8008966:	f7ff f9a3 	bl	8007cb0 <__lshift>
 800896a:	4659      	mov	r1, fp
 800896c:	4605      	mov	r5, r0
 800896e:	f7ff fa0b 	bl	8007d88 <__mcmp>
 8008972:	2800      	cmp	r0, #0
 8008974:	dd68      	ble.n	8008a48 <_strtod_l+0x8b8>
 8008976:	9904      	ldr	r1, [sp, #16]
 8008978:	4a54      	ldr	r2, [pc, #336]	; (8008acc <_strtod_l+0x93c>)
 800897a:	464b      	mov	r3, r9
 800897c:	2900      	cmp	r1, #0
 800897e:	f000 8084 	beq.w	8008a8a <_strtod_l+0x8fa>
 8008982:	ea02 0109 	and.w	r1, r2, r9
 8008986:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800898a:	dc7e      	bgt.n	8008a8a <_strtod_l+0x8fa>
 800898c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008990:	f77f aeb3 	ble.w	80086fa <_strtod_l+0x56a>
 8008994:	4b4e      	ldr	r3, [pc, #312]	; (8008ad0 <_strtod_l+0x940>)
 8008996:	4640      	mov	r0, r8
 8008998:	4649      	mov	r1, r9
 800899a:	2200      	movs	r2, #0
 800899c:	f7f7 fe34 	bl	8000608 <__aeabi_dmul>
 80089a0:	4b4a      	ldr	r3, [pc, #296]	; (8008acc <_strtod_l+0x93c>)
 80089a2:	400b      	ands	r3, r1
 80089a4:	4680      	mov	r8, r0
 80089a6:	4689      	mov	r9, r1
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f47f ae3f 	bne.w	800862c <_strtod_l+0x49c>
 80089ae:	2322      	movs	r3, #34	; 0x22
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	e63b      	b.n	800862c <_strtod_l+0x49c>
 80089b4:	f04f 32ff 	mov.w	r2, #4294967295
 80089b8:	fa02 f303 	lsl.w	r3, r2, r3
 80089bc:	ea03 0808 	and.w	r8, r3, r8
 80089c0:	e6e8      	b.n	8008794 <_strtod_l+0x604>
 80089c2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80089c6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80089ca:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80089ce:	36e2      	adds	r6, #226	; 0xe2
 80089d0:	fa01 f306 	lsl.w	r3, r1, r6
 80089d4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80089d8:	e748      	b.n	800886c <_strtod_l+0x6dc>
 80089da:	2100      	movs	r1, #0
 80089dc:	2301      	movs	r3, #1
 80089de:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80089e2:	e743      	b.n	800886c <_strtod_l+0x6dc>
 80089e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80089e6:	4632      	mov	r2, r6
 80089e8:	4620      	mov	r0, r4
 80089ea:	f7ff f961 	bl	8007cb0 <__lshift>
 80089ee:	9016      	str	r0, [sp, #88]	; 0x58
 80089f0:	2800      	cmp	r0, #0
 80089f2:	f47f af6b 	bne.w	80088cc <_strtod_l+0x73c>
 80089f6:	e60f      	b.n	8008618 <_strtod_l+0x488>
 80089f8:	46ca      	mov	sl, r9
 80089fa:	d171      	bne.n	8008ae0 <_strtod_l+0x950>
 80089fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a02:	b352      	cbz	r2, 8008a5a <_strtod_l+0x8ca>
 8008a04:	4a33      	ldr	r2, [pc, #204]	; (8008ad4 <_strtod_l+0x944>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d12a      	bne.n	8008a60 <_strtod_l+0x8d0>
 8008a0a:	9b04      	ldr	r3, [sp, #16]
 8008a0c:	4641      	mov	r1, r8
 8008a0e:	b1fb      	cbz	r3, 8008a50 <_strtod_l+0x8c0>
 8008a10:	4b2e      	ldr	r3, [pc, #184]	; (8008acc <_strtod_l+0x93c>)
 8008a12:	ea09 0303 	and.w	r3, r9, r3
 8008a16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a1e:	d81a      	bhi.n	8008a56 <_strtod_l+0x8c6>
 8008a20:	0d1b      	lsrs	r3, r3, #20
 8008a22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a26:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2a:	4299      	cmp	r1, r3
 8008a2c:	d118      	bne.n	8008a60 <_strtod_l+0x8d0>
 8008a2e:	4b2a      	ldr	r3, [pc, #168]	; (8008ad8 <_strtod_l+0x948>)
 8008a30:	459a      	cmp	sl, r3
 8008a32:	d102      	bne.n	8008a3a <_strtod_l+0x8aa>
 8008a34:	3101      	adds	r1, #1
 8008a36:	f43f adef 	beq.w	8008618 <_strtod_l+0x488>
 8008a3a:	4b24      	ldr	r3, [pc, #144]	; (8008acc <_strtod_l+0x93c>)
 8008a3c:	ea0a 0303 	and.w	r3, sl, r3
 8008a40:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008a44:	f04f 0800 	mov.w	r8, #0
 8008a48:	9b04      	ldr	r3, [sp, #16]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1a2      	bne.n	8008994 <_strtod_l+0x804>
 8008a4e:	e5ed      	b.n	800862c <_strtod_l+0x49c>
 8008a50:	f04f 33ff 	mov.w	r3, #4294967295
 8008a54:	e7e9      	b.n	8008a2a <_strtod_l+0x89a>
 8008a56:	4613      	mov	r3, r2
 8008a58:	e7e7      	b.n	8008a2a <_strtod_l+0x89a>
 8008a5a:	ea53 0308 	orrs.w	r3, r3, r8
 8008a5e:	d08a      	beq.n	8008976 <_strtod_l+0x7e6>
 8008a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a62:	b1e3      	cbz	r3, 8008a9e <_strtod_l+0x90e>
 8008a64:	ea13 0f0a 	tst.w	r3, sl
 8008a68:	d0ee      	beq.n	8008a48 <_strtod_l+0x8b8>
 8008a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a6c:	9a04      	ldr	r2, [sp, #16]
 8008a6e:	4640      	mov	r0, r8
 8008a70:	4649      	mov	r1, r9
 8008a72:	b1c3      	cbz	r3, 8008aa6 <_strtod_l+0x916>
 8008a74:	f7ff fb6f 	bl	8008156 <sulp>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	ec51 0b18 	vmov	r0, r1, d8
 8008a80:	f7f7 fc0c 	bl	800029c <__adddf3>
 8008a84:	4680      	mov	r8, r0
 8008a86:	4689      	mov	r9, r1
 8008a88:	e7de      	b.n	8008a48 <_strtod_l+0x8b8>
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008a90:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008a94:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008a98:	f04f 38ff 	mov.w	r8, #4294967295
 8008a9c:	e7d4      	b.n	8008a48 <_strtod_l+0x8b8>
 8008a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aa0:	ea13 0f08 	tst.w	r3, r8
 8008aa4:	e7e0      	b.n	8008a68 <_strtod_l+0x8d8>
 8008aa6:	f7ff fb56 	bl	8008156 <sulp>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	ec51 0b18 	vmov	r0, r1, d8
 8008ab2:	f7f7 fbf1 	bl	8000298 <__aeabi_dsub>
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2300      	movs	r3, #0
 8008aba:	4680      	mov	r8, r0
 8008abc:	4689      	mov	r9, r1
 8008abe:	f7f8 f80b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d0c0      	beq.n	8008a48 <_strtod_l+0x8b8>
 8008ac6:	e618      	b.n	80086fa <_strtod_l+0x56a>
 8008ac8:	fffffc02 	.word	0xfffffc02
 8008acc:	7ff00000 	.word	0x7ff00000
 8008ad0:	39500000 	.word	0x39500000
 8008ad4:	000fffff 	.word	0x000fffff
 8008ad8:	7fefffff 	.word	0x7fefffff
 8008adc:	0800a418 	.word	0x0800a418
 8008ae0:	4659      	mov	r1, fp
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	f7ff fac0 	bl	8008068 <__ratio>
 8008ae8:	ec57 6b10 	vmov	r6, r7, d0
 8008aec:	ee10 0a10 	vmov	r0, s0
 8008af0:	2200      	movs	r2, #0
 8008af2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008af6:	4639      	mov	r1, r7
 8008af8:	f7f8 f802 	bl	8000b00 <__aeabi_dcmple>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d071      	beq.n	8008be4 <_strtod_l+0xa54>
 8008b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d17c      	bne.n	8008c00 <_strtod_l+0xa70>
 8008b06:	f1b8 0f00 	cmp.w	r8, #0
 8008b0a:	d15a      	bne.n	8008bc2 <_strtod_l+0xa32>
 8008b0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d15d      	bne.n	8008bd0 <_strtod_l+0xa40>
 8008b14:	4b90      	ldr	r3, [pc, #576]	; (8008d58 <_strtod_l+0xbc8>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	4630      	mov	r0, r6
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	f7f7 ffe6 	bl	8000aec <__aeabi_dcmplt>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	d15c      	bne.n	8008bde <_strtod_l+0xa4e>
 8008b24:	4630      	mov	r0, r6
 8008b26:	4639      	mov	r1, r7
 8008b28:	4b8c      	ldr	r3, [pc, #560]	; (8008d5c <_strtod_l+0xbcc>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f7f7 fd6c 	bl	8000608 <__aeabi_dmul>
 8008b30:	4606      	mov	r6, r0
 8008b32:	460f      	mov	r7, r1
 8008b34:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008b38:	9606      	str	r6, [sp, #24]
 8008b3a:	9307      	str	r3, [sp, #28]
 8008b3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b40:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008b44:	4b86      	ldr	r3, [pc, #536]	; (8008d60 <_strtod_l+0xbd0>)
 8008b46:	ea0a 0303 	and.w	r3, sl, r3
 8008b4a:	930d      	str	r3, [sp, #52]	; 0x34
 8008b4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b4e:	4b85      	ldr	r3, [pc, #532]	; (8008d64 <_strtod_l+0xbd4>)
 8008b50:	429a      	cmp	r2, r3
 8008b52:	f040 8090 	bne.w	8008c76 <_strtod_l+0xae6>
 8008b56:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008b5a:	ec49 8b10 	vmov	d0, r8, r9
 8008b5e:	f7ff f9b9 	bl	8007ed4 <__ulp>
 8008b62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b66:	ec51 0b10 	vmov	r0, r1, d0
 8008b6a:	f7f7 fd4d 	bl	8000608 <__aeabi_dmul>
 8008b6e:	4642      	mov	r2, r8
 8008b70:	464b      	mov	r3, r9
 8008b72:	f7f7 fb93 	bl	800029c <__adddf3>
 8008b76:	460b      	mov	r3, r1
 8008b78:	4979      	ldr	r1, [pc, #484]	; (8008d60 <_strtod_l+0xbd0>)
 8008b7a:	4a7b      	ldr	r2, [pc, #492]	; (8008d68 <_strtod_l+0xbd8>)
 8008b7c:	4019      	ands	r1, r3
 8008b7e:	4291      	cmp	r1, r2
 8008b80:	4680      	mov	r8, r0
 8008b82:	d944      	bls.n	8008c0e <_strtod_l+0xa7e>
 8008b84:	ee18 2a90 	vmov	r2, s17
 8008b88:	4b78      	ldr	r3, [pc, #480]	; (8008d6c <_strtod_l+0xbdc>)
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d104      	bne.n	8008b98 <_strtod_l+0xa08>
 8008b8e:	ee18 3a10 	vmov	r3, s16
 8008b92:	3301      	adds	r3, #1
 8008b94:	f43f ad40 	beq.w	8008618 <_strtod_l+0x488>
 8008b98:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008d6c <_strtod_l+0xbdc>
 8008b9c:	f04f 38ff 	mov.w	r8, #4294967295
 8008ba0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f7fe fe6a 	bl	800787c <_Bfree>
 8008ba8:	9905      	ldr	r1, [sp, #20]
 8008baa:	4620      	mov	r0, r4
 8008bac:	f7fe fe66 	bl	800787c <_Bfree>
 8008bb0:	4659      	mov	r1, fp
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f7fe fe62 	bl	800787c <_Bfree>
 8008bb8:	4629      	mov	r1, r5
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f7fe fe5e 	bl	800787c <_Bfree>
 8008bc0:	e609      	b.n	80087d6 <_strtod_l+0x646>
 8008bc2:	f1b8 0f01 	cmp.w	r8, #1
 8008bc6:	d103      	bne.n	8008bd0 <_strtod_l+0xa40>
 8008bc8:	f1b9 0f00 	cmp.w	r9, #0
 8008bcc:	f43f ad95 	beq.w	80086fa <_strtod_l+0x56a>
 8008bd0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008d28 <_strtod_l+0xb98>
 8008bd4:	4f60      	ldr	r7, [pc, #384]	; (8008d58 <_strtod_l+0xbc8>)
 8008bd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008bda:	2600      	movs	r6, #0
 8008bdc:	e7ae      	b.n	8008b3c <_strtod_l+0x9ac>
 8008bde:	4f5f      	ldr	r7, [pc, #380]	; (8008d5c <_strtod_l+0xbcc>)
 8008be0:	2600      	movs	r6, #0
 8008be2:	e7a7      	b.n	8008b34 <_strtod_l+0x9a4>
 8008be4:	4b5d      	ldr	r3, [pc, #372]	; (8008d5c <_strtod_l+0xbcc>)
 8008be6:	4630      	mov	r0, r6
 8008be8:	4639      	mov	r1, r7
 8008bea:	2200      	movs	r2, #0
 8008bec:	f7f7 fd0c 	bl	8000608 <__aeabi_dmul>
 8008bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bf2:	4606      	mov	r6, r0
 8008bf4:	460f      	mov	r7, r1
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d09c      	beq.n	8008b34 <_strtod_l+0x9a4>
 8008bfa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008bfe:	e79d      	b.n	8008b3c <_strtod_l+0x9ac>
 8008c00:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008d30 <_strtod_l+0xba0>
 8008c04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c08:	ec57 6b17 	vmov	r6, r7, d7
 8008c0c:	e796      	b.n	8008b3c <_strtod_l+0x9ac>
 8008c0e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008c12:	9b04      	ldr	r3, [sp, #16]
 8008c14:	46ca      	mov	sl, r9
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1c2      	bne.n	8008ba0 <_strtod_l+0xa10>
 8008c1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c20:	0d1b      	lsrs	r3, r3, #20
 8008c22:	051b      	lsls	r3, r3, #20
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d1bb      	bne.n	8008ba0 <_strtod_l+0xa10>
 8008c28:	4630      	mov	r0, r6
 8008c2a:	4639      	mov	r1, r7
 8008c2c:	f7f8 f834 	bl	8000c98 <__aeabi_d2lz>
 8008c30:	f7f7 fcbc 	bl	80005ac <__aeabi_l2d>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	4630      	mov	r0, r6
 8008c3a:	4639      	mov	r1, r7
 8008c3c:	f7f7 fb2c 	bl	8000298 <__aeabi_dsub>
 8008c40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c42:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c46:	ea43 0308 	orr.w	r3, r3, r8
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	4606      	mov	r6, r0
 8008c4e:	460f      	mov	r7, r1
 8008c50:	d054      	beq.n	8008cfc <_strtod_l+0xb6c>
 8008c52:	a339      	add	r3, pc, #228	; (adr r3, 8008d38 <_strtod_l+0xba8>)
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	f7f7 ff48 	bl	8000aec <__aeabi_dcmplt>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	f47f ace5 	bne.w	800862c <_strtod_l+0x49c>
 8008c62:	a337      	add	r3, pc, #220	; (adr r3, 8008d40 <_strtod_l+0xbb0>)
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	4630      	mov	r0, r6
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	f7f7 ff5c 	bl	8000b28 <__aeabi_dcmpgt>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d095      	beq.n	8008ba0 <_strtod_l+0xa10>
 8008c74:	e4da      	b.n	800862c <_strtod_l+0x49c>
 8008c76:	9b04      	ldr	r3, [sp, #16]
 8008c78:	b333      	cbz	r3, 8008cc8 <_strtod_l+0xb38>
 8008c7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c7c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c80:	d822      	bhi.n	8008cc8 <_strtod_l+0xb38>
 8008c82:	a331      	add	r3, pc, #196	; (adr r3, 8008d48 <_strtod_l+0xbb8>)
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	4630      	mov	r0, r6
 8008c8a:	4639      	mov	r1, r7
 8008c8c:	f7f7 ff38 	bl	8000b00 <__aeabi_dcmple>
 8008c90:	b1a0      	cbz	r0, 8008cbc <_strtod_l+0xb2c>
 8008c92:	4639      	mov	r1, r7
 8008c94:	4630      	mov	r0, r6
 8008c96:	f7f7 ff8f 	bl	8000bb8 <__aeabi_d2uiz>
 8008c9a:	2801      	cmp	r0, #1
 8008c9c:	bf38      	it	cc
 8008c9e:	2001      	movcc	r0, #1
 8008ca0:	f7f7 fc38 	bl	8000514 <__aeabi_ui2d>
 8008ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	460f      	mov	r7, r1
 8008caa:	bb23      	cbnz	r3, 8008cf6 <_strtod_l+0xb66>
 8008cac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cb0:	9010      	str	r0, [sp, #64]	; 0x40
 8008cb2:	9311      	str	r3, [sp, #68]	; 0x44
 8008cb4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cb8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008cbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cc0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008cc4:	1a9b      	subs	r3, r3, r2
 8008cc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cc8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008ccc:	eeb0 0a48 	vmov.f32	s0, s16
 8008cd0:	eef0 0a68 	vmov.f32	s1, s17
 8008cd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008cd8:	f7ff f8fc 	bl	8007ed4 <__ulp>
 8008cdc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008ce0:	ec53 2b10 	vmov	r2, r3, d0
 8008ce4:	f7f7 fc90 	bl	8000608 <__aeabi_dmul>
 8008ce8:	ec53 2b18 	vmov	r2, r3, d8
 8008cec:	f7f7 fad6 	bl	800029c <__adddf3>
 8008cf0:	4680      	mov	r8, r0
 8008cf2:	4689      	mov	r9, r1
 8008cf4:	e78d      	b.n	8008c12 <_strtod_l+0xa82>
 8008cf6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008cfa:	e7db      	b.n	8008cb4 <_strtod_l+0xb24>
 8008cfc:	a314      	add	r3, pc, #80	; (adr r3, 8008d50 <_strtod_l+0xbc0>)
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	f7f7 fef3 	bl	8000aec <__aeabi_dcmplt>
 8008d06:	e7b3      	b.n	8008c70 <_strtod_l+0xae0>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8008d0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d10:	6013      	str	r3, [r2, #0]
 8008d12:	f7ff ba7c 	b.w	800820e <_strtod_l+0x7e>
 8008d16:	2a65      	cmp	r2, #101	; 0x65
 8008d18:	f43f ab75 	beq.w	8008406 <_strtod_l+0x276>
 8008d1c:	2a45      	cmp	r2, #69	; 0x45
 8008d1e:	f43f ab72 	beq.w	8008406 <_strtod_l+0x276>
 8008d22:	2301      	movs	r3, #1
 8008d24:	f7ff bbaa 	b.w	800847c <_strtod_l+0x2ec>
 8008d28:	00000000 	.word	0x00000000
 8008d2c:	bff00000 	.word	0xbff00000
 8008d30:	00000000 	.word	0x00000000
 8008d34:	3ff00000 	.word	0x3ff00000
 8008d38:	94a03595 	.word	0x94a03595
 8008d3c:	3fdfffff 	.word	0x3fdfffff
 8008d40:	35afe535 	.word	0x35afe535
 8008d44:	3fe00000 	.word	0x3fe00000
 8008d48:	ffc00000 	.word	0xffc00000
 8008d4c:	41dfffff 	.word	0x41dfffff
 8008d50:	94a03595 	.word	0x94a03595
 8008d54:	3fcfffff 	.word	0x3fcfffff
 8008d58:	3ff00000 	.word	0x3ff00000
 8008d5c:	3fe00000 	.word	0x3fe00000
 8008d60:	7ff00000 	.word	0x7ff00000
 8008d64:	7fe00000 	.word	0x7fe00000
 8008d68:	7c9fffff 	.word	0x7c9fffff
 8008d6c:	7fefffff 	.word	0x7fefffff

08008d70 <_strtod_r>:
 8008d70:	4b01      	ldr	r3, [pc, #4]	; (8008d78 <_strtod_r+0x8>)
 8008d72:	f7ff ba0d 	b.w	8008190 <_strtod_l>
 8008d76:	bf00      	nop
 8008d78:	20000078 	.word	0x20000078

08008d7c <_strtol_l.constprop.0>:
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d82:	d001      	beq.n	8008d88 <_strtol_l.constprop.0+0xc>
 8008d84:	2b24      	cmp	r3, #36	; 0x24
 8008d86:	d906      	bls.n	8008d96 <_strtol_l.constprop.0+0x1a>
 8008d88:	f7fd fd8a 	bl	80068a0 <__errno>
 8008d8c:	2316      	movs	r3, #22
 8008d8e:	6003      	str	r3, [r0, #0]
 8008d90:	2000      	movs	r0, #0
 8008d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d96:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008e7c <_strtol_l.constprop.0+0x100>
 8008d9a:	460d      	mov	r5, r1
 8008d9c:	462e      	mov	r6, r5
 8008d9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008da2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008da6:	f017 0708 	ands.w	r7, r7, #8
 8008daa:	d1f7      	bne.n	8008d9c <_strtol_l.constprop.0+0x20>
 8008dac:	2c2d      	cmp	r4, #45	; 0x2d
 8008dae:	d132      	bne.n	8008e16 <_strtol_l.constprop.0+0x9a>
 8008db0:	782c      	ldrb	r4, [r5, #0]
 8008db2:	2701      	movs	r7, #1
 8008db4:	1cb5      	adds	r5, r6, #2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d05b      	beq.n	8008e72 <_strtol_l.constprop.0+0xf6>
 8008dba:	2b10      	cmp	r3, #16
 8008dbc:	d109      	bne.n	8008dd2 <_strtol_l.constprop.0+0x56>
 8008dbe:	2c30      	cmp	r4, #48	; 0x30
 8008dc0:	d107      	bne.n	8008dd2 <_strtol_l.constprop.0+0x56>
 8008dc2:	782c      	ldrb	r4, [r5, #0]
 8008dc4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008dc8:	2c58      	cmp	r4, #88	; 0x58
 8008dca:	d14d      	bne.n	8008e68 <_strtol_l.constprop.0+0xec>
 8008dcc:	786c      	ldrb	r4, [r5, #1]
 8008dce:	2310      	movs	r3, #16
 8008dd0:	3502      	adds	r5, #2
 8008dd2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008dd6:	f108 38ff 	add.w	r8, r8, #4294967295
 8008dda:	f04f 0e00 	mov.w	lr, #0
 8008dde:	fbb8 f9f3 	udiv	r9, r8, r3
 8008de2:	4676      	mov	r6, lr
 8008de4:	fb03 8a19 	mls	sl, r3, r9, r8
 8008de8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008dec:	f1bc 0f09 	cmp.w	ip, #9
 8008df0:	d816      	bhi.n	8008e20 <_strtol_l.constprop.0+0xa4>
 8008df2:	4664      	mov	r4, ip
 8008df4:	42a3      	cmp	r3, r4
 8008df6:	dd24      	ble.n	8008e42 <_strtol_l.constprop.0+0xc6>
 8008df8:	f1be 3fff 	cmp.w	lr, #4294967295
 8008dfc:	d008      	beq.n	8008e10 <_strtol_l.constprop.0+0x94>
 8008dfe:	45b1      	cmp	r9, r6
 8008e00:	d31c      	bcc.n	8008e3c <_strtol_l.constprop.0+0xc0>
 8008e02:	d101      	bne.n	8008e08 <_strtol_l.constprop.0+0x8c>
 8008e04:	45a2      	cmp	sl, r4
 8008e06:	db19      	blt.n	8008e3c <_strtol_l.constprop.0+0xc0>
 8008e08:	fb06 4603 	mla	r6, r6, r3, r4
 8008e0c:	f04f 0e01 	mov.w	lr, #1
 8008e10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e14:	e7e8      	b.n	8008de8 <_strtol_l.constprop.0+0x6c>
 8008e16:	2c2b      	cmp	r4, #43	; 0x2b
 8008e18:	bf04      	itt	eq
 8008e1a:	782c      	ldrbeq	r4, [r5, #0]
 8008e1c:	1cb5      	addeq	r5, r6, #2
 8008e1e:	e7ca      	b.n	8008db6 <_strtol_l.constprop.0+0x3a>
 8008e20:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008e24:	f1bc 0f19 	cmp.w	ip, #25
 8008e28:	d801      	bhi.n	8008e2e <_strtol_l.constprop.0+0xb2>
 8008e2a:	3c37      	subs	r4, #55	; 0x37
 8008e2c:	e7e2      	b.n	8008df4 <_strtol_l.constprop.0+0x78>
 8008e2e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008e32:	f1bc 0f19 	cmp.w	ip, #25
 8008e36:	d804      	bhi.n	8008e42 <_strtol_l.constprop.0+0xc6>
 8008e38:	3c57      	subs	r4, #87	; 0x57
 8008e3a:	e7db      	b.n	8008df4 <_strtol_l.constprop.0+0x78>
 8008e3c:	f04f 3eff 	mov.w	lr, #4294967295
 8008e40:	e7e6      	b.n	8008e10 <_strtol_l.constprop.0+0x94>
 8008e42:	f1be 3fff 	cmp.w	lr, #4294967295
 8008e46:	d105      	bne.n	8008e54 <_strtol_l.constprop.0+0xd8>
 8008e48:	2322      	movs	r3, #34	; 0x22
 8008e4a:	6003      	str	r3, [r0, #0]
 8008e4c:	4646      	mov	r6, r8
 8008e4e:	b942      	cbnz	r2, 8008e62 <_strtol_l.constprop.0+0xe6>
 8008e50:	4630      	mov	r0, r6
 8008e52:	e79e      	b.n	8008d92 <_strtol_l.constprop.0+0x16>
 8008e54:	b107      	cbz	r7, 8008e58 <_strtol_l.constprop.0+0xdc>
 8008e56:	4276      	negs	r6, r6
 8008e58:	2a00      	cmp	r2, #0
 8008e5a:	d0f9      	beq.n	8008e50 <_strtol_l.constprop.0+0xd4>
 8008e5c:	f1be 0f00 	cmp.w	lr, #0
 8008e60:	d000      	beq.n	8008e64 <_strtol_l.constprop.0+0xe8>
 8008e62:	1e69      	subs	r1, r5, #1
 8008e64:	6011      	str	r1, [r2, #0]
 8008e66:	e7f3      	b.n	8008e50 <_strtol_l.constprop.0+0xd4>
 8008e68:	2430      	movs	r4, #48	; 0x30
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1b1      	bne.n	8008dd2 <_strtol_l.constprop.0+0x56>
 8008e6e:	2308      	movs	r3, #8
 8008e70:	e7af      	b.n	8008dd2 <_strtol_l.constprop.0+0x56>
 8008e72:	2c30      	cmp	r4, #48	; 0x30
 8008e74:	d0a5      	beq.n	8008dc2 <_strtol_l.constprop.0+0x46>
 8008e76:	230a      	movs	r3, #10
 8008e78:	e7ab      	b.n	8008dd2 <_strtol_l.constprop.0+0x56>
 8008e7a:	bf00      	nop
 8008e7c:	0800a441 	.word	0x0800a441

08008e80 <_strtol_r>:
 8008e80:	f7ff bf7c 	b.w	8008d7c <_strtol_l.constprop.0>

08008e84 <__ssputs_r>:
 8008e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e88:	688e      	ldr	r6, [r1, #8]
 8008e8a:	461f      	mov	r7, r3
 8008e8c:	42be      	cmp	r6, r7
 8008e8e:	680b      	ldr	r3, [r1, #0]
 8008e90:	4682      	mov	sl, r0
 8008e92:	460c      	mov	r4, r1
 8008e94:	4690      	mov	r8, r2
 8008e96:	d82c      	bhi.n	8008ef2 <__ssputs_r+0x6e>
 8008e98:	898a      	ldrh	r2, [r1, #12]
 8008e9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e9e:	d026      	beq.n	8008eee <__ssputs_r+0x6a>
 8008ea0:	6965      	ldr	r5, [r4, #20]
 8008ea2:	6909      	ldr	r1, [r1, #16]
 8008ea4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ea8:	eba3 0901 	sub.w	r9, r3, r1
 8008eac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008eb0:	1c7b      	adds	r3, r7, #1
 8008eb2:	444b      	add	r3, r9
 8008eb4:	106d      	asrs	r5, r5, #1
 8008eb6:	429d      	cmp	r5, r3
 8008eb8:	bf38      	it	cc
 8008eba:	461d      	movcc	r5, r3
 8008ebc:	0553      	lsls	r3, r2, #21
 8008ebe:	d527      	bpl.n	8008f10 <__ssputs_r+0x8c>
 8008ec0:	4629      	mov	r1, r5
 8008ec2:	f7fe fc0f 	bl	80076e4 <_malloc_r>
 8008ec6:	4606      	mov	r6, r0
 8008ec8:	b360      	cbz	r0, 8008f24 <__ssputs_r+0xa0>
 8008eca:	6921      	ldr	r1, [r4, #16]
 8008ecc:	464a      	mov	r2, r9
 8008ece:	f000 fbe3 	bl	8009698 <memcpy>
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008edc:	81a3      	strh	r3, [r4, #12]
 8008ede:	6126      	str	r6, [r4, #16]
 8008ee0:	6165      	str	r5, [r4, #20]
 8008ee2:	444e      	add	r6, r9
 8008ee4:	eba5 0509 	sub.w	r5, r5, r9
 8008ee8:	6026      	str	r6, [r4, #0]
 8008eea:	60a5      	str	r5, [r4, #8]
 8008eec:	463e      	mov	r6, r7
 8008eee:	42be      	cmp	r6, r7
 8008ef0:	d900      	bls.n	8008ef4 <__ssputs_r+0x70>
 8008ef2:	463e      	mov	r6, r7
 8008ef4:	6820      	ldr	r0, [r4, #0]
 8008ef6:	4632      	mov	r2, r6
 8008ef8:	4641      	mov	r1, r8
 8008efa:	f000 fb6f 	bl	80095dc <memmove>
 8008efe:	68a3      	ldr	r3, [r4, #8]
 8008f00:	1b9b      	subs	r3, r3, r6
 8008f02:	60a3      	str	r3, [r4, #8]
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	4433      	add	r3, r6
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f10:	462a      	mov	r2, r5
 8008f12:	f000 ff76 	bl	8009e02 <_realloc_r>
 8008f16:	4606      	mov	r6, r0
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d1e0      	bne.n	8008ede <__ssputs_r+0x5a>
 8008f1c:	6921      	ldr	r1, [r4, #16]
 8008f1e:	4650      	mov	r0, sl
 8008f20:	f7fe fb6c 	bl	80075fc <_free_r>
 8008f24:	230c      	movs	r3, #12
 8008f26:	f8ca 3000 	str.w	r3, [sl]
 8008f2a:	89a3      	ldrh	r3, [r4, #12]
 8008f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f30:	81a3      	strh	r3, [r4, #12]
 8008f32:	f04f 30ff 	mov.w	r0, #4294967295
 8008f36:	e7e9      	b.n	8008f0c <__ssputs_r+0x88>

08008f38 <_svfiprintf_r>:
 8008f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f3c:	4698      	mov	r8, r3
 8008f3e:	898b      	ldrh	r3, [r1, #12]
 8008f40:	061b      	lsls	r3, r3, #24
 8008f42:	b09d      	sub	sp, #116	; 0x74
 8008f44:	4607      	mov	r7, r0
 8008f46:	460d      	mov	r5, r1
 8008f48:	4614      	mov	r4, r2
 8008f4a:	d50e      	bpl.n	8008f6a <_svfiprintf_r+0x32>
 8008f4c:	690b      	ldr	r3, [r1, #16]
 8008f4e:	b963      	cbnz	r3, 8008f6a <_svfiprintf_r+0x32>
 8008f50:	2140      	movs	r1, #64	; 0x40
 8008f52:	f7fe fbc7 	bl	80076e4 <_malloc_r>
 8008f56:	6028      	str	r0, [r5, #0]
 8008f58:	6128      	str	r0, [r5, #16]
 8008f5a:	b920      	cbnz	r0, 8008f66 <_svfiprintf_r+0x2e>
 8008f5c:	230c      	movs	r3, #12
 8008f5e:	603b      	str	r3, [r7, #0]
 8008f60:	f04f 30ff 	mov.w	r0, #4294967295
 8008f64:	e0d0      	b.n	8009108 <_svfiprintf_r+0x1d0>
 8008f66:	2340      	movs	r3, #64	; 0x40
 8008f68:	616b      	str	r3, [r5, #20]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f6e:	2320      	movs	r3, #32
 8008f70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f74:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f78:	2330      	movs	r3, #48	; 0x30
 8008f7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009120 <_svfiprintf_r+0x1e8>
 8008f7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f82:	f04f 0901 	mov.w	r9, #1
 8008f86:	4623      	mov	r3, r4
 8008f88:	469a      	mov	sl, r3
 8008f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f8e:	b10a      	cbz	r2, 8008f94 <_svfiprintf_r+0x5c>
 8008f90:	2a25      	cmp	r2, #37	; 0x25
 8008f92:	d1f9      	bne.n	8008f88 <_svfiprintf_r+0x50>
 8008f94:	ebba 0b04 	subs.w	fp, sl, r4
 8008f98:	d00b      	beq.n	8008fb2 <_svfiprintf_r+0x7a>
 8008f9a:	465b      	mov	r3, fp
 8008f9c:	4622      	mov	r2, r4
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	4638      	mov	r0, r7
 8008fa2:	f7ff ff6f 	bl	8008e84 <__ssputs_r>
 8008fa6:	3001      	adds	r0, #1
 8008fa8:	f000 80a9 	beq.w	80090fe <_svfiprintf_r+0x1c6>
 8008fac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fae:	445a      	add	r2, fp
 8008fb0:	9209      	str	r2, [sp, #36]	; 0x24
 8008fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f000 80a1 	beq.w	80090fe <_svfiprintf_r+0x1c6>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fc6:	f10a 0a01 	add.w	sl, sl, #1
 8008fca:	9304      	str	r3, [sp, #16]
 8008fcc:	9307      	str	r3, [sp, #28]
 8008fce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fd2:	931a      	str	r3, [sp, #104]	; 0x68
 8008fd4:	4654      	mov	r4, sl
 8008fd6:	2205      	movs	r2, #5
 8008fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fdc:	4850      	ldr	r0, [pc, #320]	; (8009120 <_svfiprintf_r+0x1e8>)
 8008fde:	f7f7 f8ff 	bl	80001e0 <memchr>
 8008fe2:	9a04      	ldr	r2, [sp, #16]
 8008fe4:	b9d8      	cbnz	r0, 800901e <_svfiprintf_r+0xe6>
 8008fe6:	06d0      	lsls	r0, r2, #27
 8008fe8:	bf44      	itt	mi
 8008fea:	2320      	movmi	r3, #32
 8008fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ff0:	0711      	lsls	r1, r2, #28
 8008ff2:	bf44      	itt	mi
 8008ff4:	232b      	movmi	r3, #43	; 0x2b
 8008ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8008ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8009000:	d015      	beq.n	800902e <_svfiprintf_r+0xf6>
 8009002:	9a07      	ldr	r2, [sp, #28]
 8009004:	4654      	mov	r4, sl
 8009006:	2000      	movs	r0, #0
 8009008:	f04f 0c0a 	mov.w	ip, #10
 800900c:	4621      	mov	r1, r4
 800900e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009012:	3b30      	subs	r3, #48	; 0x30
 8009014:	2b09      	cmp	r3, #9
 8009016:	d94d      	bls.n	80090b4 <_svfiprintf_r+0x17c>
 8009018:	b1b0      	cbz	r0, 8009048 <_svfiprintf_r+0x110>
 800901a:	9207      	str	r2, [sp, #28]
 800901c:	e014      	b.n	8009048 <_svfiprintf_r+0x110>
 800901e:	eba0 0308 	sub.w	r3, r0, r8
 8009022:	fa09 f303 	lsl.w	r3, r9, r3
 8009026:	4313      	orrs	r3, r2
 8009028:	9304      	str	r3, [sp, #16]
 800902a:	46a2      	mov	sl, r4
 800902c:	e7d2      	b.n	8008fd4 <_svfiprintf_r+0x9c>
 800902e:	9b03      	ldr	r3, [sp, #12]
 8009030:	1d19      	adds	r1, r3, #4
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	9103      	str	r1, [sp, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	bfbb      	ittet	lt
 800903a:	425b      	neglt	r3, r3
 800903c:	f042 0202 	orrlt.w	r2, r2, #2
 8009040:	9307      	strge	r3, [sp, #28]
 8009042:	9307      	strlt	r3, [sp, #28]
 8009044:	bfb8      	it	lt
 8009046:	9204      	strlt	r2, [sp, #16]
 8009048:	7823      	ldrb	r3, [r4, #0]
 800904a:	2b2e      	cmp	r3, #46	; 0x2e
 800904c:	d10c      	bne.n	8009068 <_svfiprintf_r+0x130>
 800904e:	7863      	ldrb	r3, [r4, #1]
 8009050:	2b2a      	cmp	r3, #42	; 0x2a
 8009052:	d134      	bne.n	80090be <_svfiprintf_r+0x186>
 8009054:	9b03      	ldr	r3, [sp, #12]
 8009056:	1d1a      	adds	r2, r3, #4
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	9203      	str	r2, [sp, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	bfb8      	it	lt
 8009060:	f04f 33ff 	movlt.w	r3, #4294967295
 8009064:	3402      	adds	r4, #2
 8009066:	9305      	str	r3, [sp, #20]
 8009068:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009130 <_svfiprintf_r+0x1f8>
 800906c:	7821      	ldrb	r1, [r4, #0]
 800906e:	2203      	movs	r2, #3
 8009070:	4650      	mov	r0, sl
 8009072:	f7f7 f8b5 	bl	80001e0 <memchr>
 8009076:	b138      	cbz	r0, 8009088 <_svfiprintf_r+0x150>
 8009078:	9b04      	ldr	r3, [sp, #16]
 800907a:	eba0 000a 	sub.w	r0, r0, sl
 800907e:	2240      	movs	r2, #64	; 0x40
 8009080:	4082      	lsls	r2, r0
 8009082:	4313      	orrs	r3, r2
 8009084:	3401      	adds	r4, #1
 8009086:	9304      	str	r3, [sp, #16]
 8009088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800908c:	4825      	ldr	r0, [pc, #148]	; (8009124 <_svfiprintf_r+0x1ec>)
 800908e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009092:	2206      	movs	r2, #6
 8009094:	f7f7 f8a4 	bl	80001e0 <memchr>
 8009098:	2800      	cmp	r0, #0
 800909a:	d038      	beq.n	800910e <_svfiprintf_r+0x1d6>
 800909c:	4b22      	ldr	r3, [pc, #136]	; (8009128 <_svfiprintf_r+0x1f0>)
 800909e:	bb1b      	cbnz	r3, 80090e8 <_svfiprintf_r+0x1b0>
 80090a0:	9b03      	ldr	r3, [sp, #12]
 80090a2:	3307      	adds	r3, #7
 80090a4:	f023 0307 	bic.w	r3, r3, #7
 80090a8:	3308      	adds	r3, #8
 80090aa:	9303      	str	r3, [sp, #12]
 80090ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ae:	4433      	add	r3, r6
 80090b0:	9309      	str	r3, [sp, #36]	; 0x24
 80090b2:	e768      	b.n	8008f86 <_svfiprintf_r+0x4e>
 80090b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80090b8:	460c      	mov	r4, r1
 80090ba:	2001      	movs	r0, #1
 80090bc:	e7a6      	b.n	800900c <_svfiprintf_r+0xd4>
 80090be:	2300      	movs	r3, #0
 80090c0:	3401      	adds	r4, #1
 80090c2:	9305      	str	r3, [sp, #20]
 80090c4:	4619      	mov	r1, r3
 80090c6:	f04f 0c0a 	mov.w	ip, #10
 80090ca:	4620      	mov	r0, r4
 80090cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090d0:	3a30      	subs	r2, #48	; 0x30
 80090d2:	2a09      	cmp	r2, #9
 80090d4:	d903      	bls.n	80090de <_svfiprintf_r+0x1a6>
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d0c6      	beq.n	8009068 <_svfiprintf_r+0x130>
 80090da:	9105      	str	r1, [sp, #20]
 80090dc:	e7c4      	b.n	8009068 <_svfiprintf_r+0x130>
 80090de:	fb0c 2101 	mla	r1, ip, r1, r2
 80090e2:	4604      	mov	r4, r0
 80090e4:	2301      	movs	r3, #1
 80090e6:	e7f0      	b.n	80090ca <_svfiprintf_r+0x192>
 80090e8:	ab03      	add	r3, sp, #12
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	462a      	mov	r2, r5
 80090ee:	4b0f      	ldr	r3, [pc, #60]	; (800912c <_svfiprintf_r+0x1f4>)
 80090f0:	a904      	add	r1, sp, #16
 80090f2:	4638      	mov	r0, r7
 80090f4:	f7fc fb50 	bl	8005798 <_printf_float>
 80090f8:	1c42      	adds	r2, r0, #1
 80090fa:	4606      	mov	r6, r0
 80090fc:	d1d6      	bne.n	80090ac <_svfiprintf_r+0x174>
 80090fe:	89ab      	ldrh	r3, [r5, #12]
 8009100:	065b      	lsls	r3, r3, #25
 8009102:	f53f af2d 	bmi.w	8008f60 <_svfiprintf_r+0x28>
 8009106:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009108:	b01d      	add	sp, #116	; 0x74
 800910a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910e:	ab03      	add	r3, sp, #12
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	462a      	mov	r2, r5
 8009114:	4b05      	ldr	r3, [pc, #20]	; (800912c <_svfiprintf_r+0x1f4>)
 8009116:	a904      	add	r1, sp, #16
 8009118:	4638      	mov	r0, r7
 800911a:	f7fc fde1 	bl	8005ce0 <_printf_i>
 800911e:	e7eb      	b.n	80090f8 <_svfiprintf_r+0x1c0>
 8009120:	0800a541 	.word	0x0800a541
 8009124:	0800a54b 	.word	0x0800a54b
 8009128:	08005799 	.word	0x08005799
 800912c:	08008e85 	.word	0x08008e85
 8009130:	0800a547 	.word	0x0800a547

08009134 <__sfputc_r>:
 8009134:	6893      	ldr	r3, [r2, #8]
 8009136:	3b01      	subs	r3, #1
 8009138:	2b00      	cmp	r3, #0
 800913a:	b410      	push	{r4}
 800913c:	6093      	str	r3, [r2, #8]
 800913e:	da08      	bge.n	8009152 <__sfputc_r+0x1e>
 8009140:	6994      	ldr	r4, [r2, #24]
 8009142:	42a3      	cmp	r3, r4
 8009144:	db01      	blt.n	800914a <__sfputc_r+0x16>
 8009146:	290a      	cmp	r1, #10
 8009148:	d103      	bne.n	8009152 <__sfputc_r+0x1e>
 800914a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800914e:	f7fd bac0 	b.w	80066d2 <__swbuf_r>
 8009152:	6813      	ldr	r3, [r2, #0]
 8009154:	1c58      	adds	r0, r3, #1
 8009156:	6010      	str	r0, [r2, #0]
 8009158:	7019      	strb	r1, [r3, #0]
 800915a:	4608      	mov	r0, r1
 800915c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009160:	4770      	bx	lr

08009162 <__sfputs_r>:
 8009162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009164:	4606      	mov	r6, r0
 8009166:	460f      	mov	r7, r1
 8009168:	4614      	mov	r4, r2
 800916a:	18d5      	adds	r5, r2, r3
 800916c:	42ac      	cmp	r4, r5
 800916e:	d101      	bne.n	8009174 <__sfputs_r+0x12>
 8009170:	2000      	movs	r0, #0
 8009172:	e007      	b.n	8009184 <__sfputs_r+0x22>
 8009174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009178:	463a      	mov	r2, r7
 800917a:	4630      	mov	r0, r6
 800917c:	f7ff ffda 	bl	8009134 <__sfputc_r>
 8009180:	1c43      	adds	r3, r0, #1
 8009182:	d1f3      	bne.n	800916c <__sfputs_r+0xa>
 8009184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009188 <_vfiprintf_r>:
 8009188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	460d      	mov	r5, r1
 800918e:	b09d      	sub	sp, #116	; 0x74
 8009190:	4614      	mov	r4, r2
 8009192:	4698      	mov	r8, r3
 8009194:	4606      	mov	r6, r0
 8009196:	b118      	cbz	r0, 80091a0 <_vfiprintf_r+0x18>
 8009198:	6a03      	ldr	r3, [r0, #32]
 800919a:	b90b      	cbnz	r3, 80091a0 <_vfiprintf_r+0x18>
 800919c:	f7fd f95e 	bl	800645c <__sinit>
 80091a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091a2:	07d9      	lsls	r1, r3, #31
 80091a4:	d405      	bmi.n	80091b2 <_vfiprintf_r+0x2a>
 80091a6:	89ab      	ldrh	r3, [r5, #12]
 80091a8:	059a      	lsls	r2, r3, #22
 80091aa:	d402      	bmi.n	80091b2 <_vfiprintf_r+0x2a>
 80091ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091ae:	f7fd fba2 	bl	80068f6 <__retarget_lock_acquire_recursive>
 80091b2:	89ab      	ldrh	r3, [r5, #12]
 80091b4:	071b      	lsls	r3, r3, #28
 80091b6:	d501      	bpl.n	80091bc <_vfiprintf_r+0x34>
 80091b8:	692b      	ldr	r3, [r5, #16]
 80091ba:	b99b      	cbnz	r3, 80091e4 <_vfiprintf_r+0x5c>
 80091bc:	4629      	mov	r1, r5
 80091be:	4630      	mov	r0, r6
 80091c0:	f7fd fac4 	bl	800674c <__swsetup_r>
 80091c4:	b170      	cbz	r0, 80091e4 <_vfiprintf_r+0x5c>
 80091c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091c8:	07dc      	lsls	r4, r3, #31
 80091ca:	d504      	bpl.n	80091d6 <_vfiprintf_r+0x4e>
 80091cc:	f04f 30ff 	mov.w	r0, #4294967295
 80091d0:	b01d      	add	sp, #116	; 0x74
 80091d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d6:	89ab      	ldrh	r3, [r5, #12]
 80091d8:	0598      	lsls	r0, r3, #22
 80091da:	d4f7      	bmi.n	80091cc <_vfiprintf_r+0x44>
 80091dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091de:	f7fd fb8b 	bl	80068f8 <__retarget_lock_release_recursive>
 80091e2:	e7f3      	b.n	80091cc <_vfiprintf_r+0x44>
 80091e4:	2300      	movs	r3, #0
 80091e6:	9309      	str	r3, [sp, #36]	; 0x24
 80091e8:	2320      	movs	r3, #32
 80091ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80091f2:	2330      	movs	r3, #48	; 0x30
 80091f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80093a8 <_vfiprintf_r+0x220>
 80091f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091fc:	f04f 0901 	mov.w	r9, #1
 8009200:	4623      	mov	r3, r4
 8009202:	469a      	mov	sl, r3
 8009204:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009208:	b10a      	cbz	r2, 800920e <_vfiprintf_r+0x86>
 800920a:	2a25      	cmp	r2, #37	; 0x25
 800920c:	d1f9      	bne.n	8009202 <_vfiprintf_r+0x7a>
 800920e:	ebba 0b04 	subs.w	fp, sl, r4
 8009212:	d00b      	beq.n	800922c <_vfiprintf_r+0xa4>
 8009214:	465b      	mov	r3, fp
 8009216:	4622      	mov	r2, r4
 8009218:	4629      	mov	r1, r5
 800921a:	4630      	mov	r0, r6
 800921c:	f7ff ffa1 	bl	8009162 <__sfputs_r>
 8009220:	3001      	adds	r0, #1
 8009222:	f000 80a9 	beq.w	8009378 <_vfiprintf_r+0x1f0>
 8009226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009228:	445a      	add	r2, fp
 800922a:	9209      	str	r2, [sp, #36]	; 0x24
 800922c:	f89a 3000 	ldrb.w	r3, [sl]
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 80a1 	beq.w	8009378 <_vfiprintf_r+0x1f0>
 8009236:	2300      	movs	r3, #0
 8009238:	f04f 32ff 	mov.w	r2, #4294967295
 800923c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009240:	f10a 0a01 	add.w	sl, sl, #1
 8009244:	9304      	str	r3, [sp, #16]
 8009246:	9307      	str	r3, [sp, #28]
 8009248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800924c:	931a      	str	r3, [sp, #104]	; 0x68
 800924e:	4654      	mov	r4, sl
 8009250:	2205      	movs	r2, #5
 8009252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009256:	4854      	ldr	r0, [pc, #336]	; (80093a8 <_vfiprintf_r+0x220>)
 8009258:	f7f6 ffc2 	bl	80001e0 <memchr>
 800925c:	9a04      	ldr	r2, [sp, #16]
 800925e:	b9d8      	cbnz	r0, 8009298 <_vfiprintf_r+0x110>
 8009260:	06d1      	lsls	r1, r2, #27
 8009262:	bf44      	itt	mi
 8009264:	2320      	movmi	r3, #32
 8009266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800926a:	0713      	lsls	r3, r2, #28
 800926c:	bf44      	itt	mi
 800926e:	232b      	movmi	r3, #43	; 0x2b
 8009270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009274:	f89a 3000 	ldrb.w	r3, [sl]
 8009278:	2b2a      	cmp	r3, #42	; 0x2a
 800927a:	d015      	beq.n	80092a8 <_vfiprintf_r+0x120>
 800927c:	9a07      	ldr	r2, [sp, #28]
 800927e:	4654      	mov	r4, sl
 8009280:	2000      	movs	r0, #0
 8009282:	f04f 0c0a 	mov.w	ip, #10
 8009286:	4621      	mov	r1, r4
 8009288:	f811 3b01 	ldrb.w	r3, [r1], #1
 800928c:	3b30      	subs	r3, #48	; 0x30
 800928e:	2b09      	cmp	r3, #9
 8009290:	d94d      	bls.n	800932e <_vfiprintf_r+0x1a6>
 8009292:	b1b0      	cbz	r0, 80092c2 <_vfiprintf_r+0x13a>
 8009294:	9207      	str	r2, [sp, #28]
 8009296:	e014      	b.n	80092c2 <_vfiprintf_r+0x13a>
 8009298:	eba0 0308 	sub.w	r3, r0, r8
 800929c:	fa09 f303 	lsl.w	r3, r9, r3
 80092a0:	4313      	orrs	r3, r2
 80092a2:	9304      	str	r3, [sp, #16]
 80092a4:	46a2      	mov	sl, r4
 80092a6:	e7d2      	b.n	800924e <_vfiprintf_r+0xc6>
 80092a8:	9b03      	ldr	r3, [sp, #12]
 80092aa:	1d19      	adds	r1, r3, #4
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	9103      	str	r1, [sp, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	bfbb      	ittet	lt
 80092b4:	425b      	neglt	r3, r3
 80092b6:	f042 0202 	orrlt.w	r2, r2, #2
 80092ba:	9307      	strge	r3, [sp, #28]
 80092bc:	9307      	strlt	r3, [sp, #28]
 80092be:	bfb8      	it	lt
 80092c0:	9204      	strlt	r2, [sp, #16]
 80092c2:	7823      	ldrb	r3, [r4, #0]
 80092c4:	2b2e      	cmp	r3, #46	; 0x2e
 80092c6:	d10c      	bne.n	80092e2 <_vfiprintf_r+0x15a>
 80092c8:	7863      	ldrb	r3, [r4, #1]
 80092ca:	2b2a      	cmp	r3, #42	; 0x2a
 80092cc:	d134      	bne.n	8009338 <_vfiprintf_r+0x1b0>
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	1d1a      	adds	r2, r3, #4
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	9203      	str	r2, [sp, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	bfb8      	it	lt
 80092da:	f04f 33ff 	movlt.w	r3, #4294967295
 80092de:	3402      	adds	r4, #2
 80092e0:	9305      	str	r3, [sp, #20]
 80092e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80093b8 <_vfiprintf_r+0x230>
 80092e6:	7821      	ldrb	r1, [r4, #0]
 80092e8:	2203      	movs	r2, #3
 80092ea:	4650      	mov	r0, sl
 80092ec:	f7f6 ff78 	bl	80001e0 <memchr>
 80092f0:	b138      	cbz	r0, 8009302 <_vfiprintf_r+0x17a>
 80092f2:	9b04      	ldr	r3, [sp, #16]
 80092f4:	eba0 000a 	sub.w	r0, r0, sl
 80092f8:	2240      	movs	r2, #64	; 0x40
 80092fa:	4082      	lsls	r2, r0
 80092fc:	4313      	orrs	r3, r2
 80092fe:	3401      	adds	r4, #1
 8009300:	9304      	str	r3, [sp, #16]
 8009302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009306:	4829      	ldr	r0, [pc, #164]	; (80093ac <_vfiprintf_r+0x224>)
 8009308:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800930c:	2206      	movs	r2, #6
 800930e:	f7f6 ff67 	bl	80001e0 <memchr>
 8009312:	2800      	cmp	r0, #0
 8009314:	d03f      	beq.n	8009396 <_vfiprintf_r+0x20e>
 8009316:	4b26      	ldr	r3, [pc, #152]	; (80093b0 <_vfiprintf_r+0x228>)
 8009318:	bb1b      	cbnz	r3, 8009362 <_vfiprintf_r+0x1da>
 800931a:	9b03      	ldr	r3, [sp, #12]
 800931c:	3307      	adds	r3, #7
 800931e:	f023 0307 	bic.w	r3, r3, #7
 8009322:	3308      	adds	r3, #8
 8009324:	9303      	str	r3, [sp, #12]
 8009326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009328:	443b      	add	r3, r7
 800932a:	9309      	str	r3, [sp, #36]	; 0x24
 800932c:	e768      	b.n	8009200 <_vfiprintf_r+0x78>
 800932e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009332:	460c      	mov	r4, r1
 8009334:	2001      	movs	r0, #1
 8009336:	e7a6      	b.n	8009286 <_vfiprintf_r+0xfe>
 8009338:	2300      	movs	r3, #0
 800933a:	3401      	adds	r4, #1
 800933c:	9305      	str	r3, [sp, #20]
 800933e:	4619      	mov	r1, r3
 8009340:	f04f 0c0a 	mov.w	ip, #10
 8009344:	4620      	mov	r0, r4
 8009346:	f810 2b01 	ldrb.w	r2, [r0], #1
 800934a:	3a30      	subs	r2, #48	; 0x30
 800934c:	2a09      	cmp	r2, #9
 800934e:	d903      	bls.n	8009358 <_vfiprintf_r+0x1d0>
 8009350:	2b00      	cmp	r3, #0
 8009352:	d0c6      	beq.n	80092e2 <_vfiprintf_r+0x15a>
 8009354:	9105      	str	r1, [sp, #20]
 8009356:	e7c4      	b.n	80092e2 <_vfiprintf_r+0x15a>
 8009358:	fb0c 2101 	mla	r1, ip, r1, r2
 800935c:	4604      	mov	r4, r0
 800935e:	2301      	movs	r3, #1
 8009360:	e7f0      	b.n	8009344 <_vfiprintf_r+0x1bc>
 8009362:	ab03      	add	r3, sp, #12
 8009364:	9300      	str	r3, [sp, #0]
 8009366:	462a      	mov	r2, r5
 8009368:	4b12      	ldr	r3, [pc, #72]	; (80093b4 <_vfiprintf_r+0x22c>)
 800936a:	a904      	add	r1, sp, #16
 800936c:	4630      	mov	r0, r6
 800936e:	f7fc fa13 	bl	8005798 <_printf_float>
 8009372:	4607      	mov	r7, r0
 8009374:	1c78      	adds	r0, r7, #1
 8009376:	d1d6      	bne.n	8009326 <_vfiprintf_r+0x19e>
 8009378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800937a:	07d9      	lsls	r1, r3, #31
 800937c:	d405      	bmi.n	800938a <_vfiprintf_r+0x202>
 800937e:	89ab      	ldrh	r3, [r5, #12]
 8009380:	059a      	lsls	r2, r3, #22
 8009382:	d402      	bmi.n	800938a <_vfiprintf_r+0x202>
 8009384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009386:	f7fd fab7 	bl	80068f8 <__retarget_lock_release_recursive>
 800938a:	89ab      	ldrh	r3, [r5, #12]
 800938c:	065b      	lsls	r3, r3, #25
 800938e:	f53f af1d 	bmi.w	80091cc <_vfiprintf_r+0x44>
 8009392:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009394:	e71c      	b.n	80091d0 <_vfiprintf_r+0x48>
 8009396:	ab03      	add	r3, sp, #12
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	462a      	mov	r2, r5
 800939c:	4b05      	ldr	r3, [pc, #20]	; (80093b4 <_vfiprintf_r+0x22c>)
 800939e:	a904      	add	r1, sp, #16
 80093a0:	4630      	mov	r0, r6
 80093a2:	f7fc fc9d 	bl	8005ce0 <_printf_i>
 80093a6:	e7e4      	b.n	8009372 <_vfiprintf_r+0x1ea>
 80093a8:	0800a541 	.word	0x0800a541
 80093ac:	0800a54b 	.word	0x0800a54b
 80093b0:	08005799 	.word	0x08005799
 80093b4:	08009163 	.word	0x08009163
 80093b8:	0800a547 	.word	0x0800a547

080093bc <__sflush_r>:
 80093bc:	898a      	ldrh	r2, [r1, #12]
 80093be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c2:	4605      	mov	r5, r0
 80093c4:	0710      	lsls	r0, r2, #28
 80093c6:	460c      	mov	r4, r1
 80093c8:	d458      	bmi.n	800947c <__sflush_r+0xc0>
 80093ca:	684b      	ldr	r3, [r1, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	dc05      	bgt.n	80093dc <__sflush_r+0x20>
 80093d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	dc02      	bgt.n	80093dc <__sflush_r+0x20>
 80093d6:	2000      	movs	r0, #0
 80093d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093de:	2e00      	cmp	r6, #0
 80093e0:	d0f9      	beq.n	80093d6 <__sflush_r+0x1a>
 80093e2:	2300      	movs	r3, #0
 80093e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093e8:	682f      	ldr	r7, [r5, #0]
 80093ea:	6a21      	ldr	r1, [r4, #32]
 80093ec:	602b      	str	r3, [r5, #0]
 80093ee:	d032      	beq.n	8009456 <__sflush_r+0x9a>
 80093f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093f2:	89a3      	ldrh	r3, [r4, #12]
 80093f4:	075a      	lsls	r2, r3, #29
 80093f6:	d505      	bpl.n	8009404 <__sflush_r+0x48>
 80093f8:	6863      	ldr	r3, [r4, #4]
 80093fa:	1ac0      	subs	r0, r0, r3
 80093fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093fe:	b10b      	cbz	r3, 8009404 <__sflush_r+0x48>
 8009400:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009402:	1ac0      	subs	r0, r0, r3
 8009404:	2300      	movs	r3, #0
 8009406:	4602      	mov	r2, r0
 8009408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800940a:	6a21      	ldr	r1, [r4, #32]
 800940c:	4628      	mov	r0, r5
 800940e:	47b0      	blx	r6
 8009410:	1c43      	adds	r3, r0, #1
 8009412:	89a3      	ldrh	r3, [r4, #12]
 8009414:	d106      	bne.n	8009424 <__sflush_r+0x68>
 8009416:	6829      	ldr	r1, [r5, #0]
 8009418:	291d      	cmp	r1, #29
 800941a:	d82b      	bhi.n	8009474 <__sflush_r+0xb8>
 800941c:	4a29      	ldr	r2, [pc, #164]	; (80094c4 <__sflush_r+0x108>)
 800941e:	410a      	asrs	r2, r1
 8009420:	07d6      	lsls	r6, r2, #31
 8009422:	d427      	bmi.n	8009474 <__sflush_r+0xb8>
 8009424:	2200      	movs	r2, #0
 8009426:	6062      	str	r2, [r4, #4]
 8009428:	04d9      	lsls	r1, r3, #19
 800942a:	6922      	ldr	r2, [r4, #16]
 800942c:	6022      	str	r2, [r4, #0]
 800942e:	d504      	bpl.n	800943a <__sflush_r+0x7e>
 8009430:	1c42      	adds	r2, r0, #1
 8009432:	d101      	bne.n	8009438 <__sflush_r+0x7c>
 8009434:	682b      	ldr	r3, [r5, #0]
 8009436:	b903      	cbnz	r3, 800943a <__sflush_r+0x7e>
 8009438:	6560      	str	r0, [r4, #84]	; 0x54
 800943a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800943c:	602f      	str	r7, [r5, #0]
 800943e:	2900      	cmp	r1, #0
 8009440:	d0c9      	beq.n	80093d6 <__sflush_r+0x1a>
 8009442:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009446:	4299      	cmp	r1, r3
 8009448:	d002      	beq.n	8009450 <__sflush_r+0x94>
 800944a:	4628      	mov	r0, r5
 800944c:	f7fe f8d6 	bl	80075fc <_free_r>
 8009450:	2000      	movs	r0, #0
 8009452:	6360      	str	r0, [r4, #52]	; 0x34
 8009454:	e7c0      	b.n	80093d8 <__sflush_r+0x1c>
 8009456:	2301      	movs	r3, #1
 8009458:	4628      	mov	r0, r5
 800945a:	47b0      	blx	r6
 800945c:	1c41      	adds	r1, r0, #1
 800945e:	d1c8      	bne.n	80093f2 <__sflush_r+0x36>
 8009460:	682b      	ldr	r3, [r5, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d0c5      	beq.n	80093f2 <__sflush_r+0x36>
 8009466:	2b1d      	cmp	r3, #29
 8009468:	d001      	beq.n	800946e <__sflush_r+0xb2>
 800946a:	2b16      	cmp	r3, #22
 800946c:	d101      	bne.n	8009472 <__sflush_r+0xb6>
 800946e:	602f      	str	r7, [r5, #0]
 8009470:	e7b1      	b.n	80093d6 <__sflush_r+0x1a>
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009478:	81a3      	strh	r3, [r4, #12]
 800947a:	e7ad      	b.n	80093d8 <__sflush_r+0x1c>
 800947c:	690f      	ldr	r7, [r1, #16]
 800947e:	2f00      	cmp	r7, #0
 8009480:	d0a9      	beq.n	80093d6 <__sflush_r+0x1a>
 8009482:	0793      	lsls	r3, r2, #30
 8009484:	680e      	ldr	r6, [r1, #0]
 8009486:	bf08      	it	eq
 8009488:	694b      	ldreq	r3, [r1, #20]
 800948a:	600f      	str	r7, [r1, #0]
 800948c:	bf18      	it	ne
 800948e:	2300      	movne	r3, #0
 8009490:	eba6 0807 	sub.w	r8, r6, r7
 8009494:	608b      	str	r3, [r1, #8]
 8009496:	f1b8 0f00 	cmp.w	r8, #0
 800949a:	dd9c      	ble.n	80093d6 <__sflush_r+0x1a>
 800949c:	6a21      	ldr	r1, [r4, #32]
 800949e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094a0:	4643      	mov	r3, r8
 80094a2:	463a      	mov	r2, r7
 80094a4:	4628      	mov	r0, r5
 80094a6:	47b0      	blx	r6
 80094a8:	2800      	cmp	r0, #0
 80094aa:	dc06      	bgt.n	80094ba <__sflush_r+0xfe>
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094b2:	81a3      	strh	r3, [r4, #12]
 80094b4:	f04f 30ff 	mov.w	r0, #4294967295
 80094b8:	e78e      	b.n	80093d8 <__sflush_r+0x1c>
 80094ba:	4407      	add	r7, r0
 80094bc:	eba8 0800 	sub.w	r8, r8, r0
 80094c0:	e7e9      	b.n	8009496 <__sflush_r+0xda>
 80094c2:	bf00      	nop
 80094c4:	dfbffffe 	.word	0xdfbffffe

080094c8 <_fflush_r>:
 80094c8:	b538      	push	{r3, r4, r5, lr}
 80094ca:	690b      	ldr	r3, [r1, #16]
 80094cc:	4605      	mov	r5, r0
 80094ce:	460c      	mov	r4, r1
 80094d0:	b913      	cbnz	r3, 80094d8 <_fflush_r+0x10>
 80094d2:	2500      	movs	r5, #0
 80094d4:	4628      	mov	r0, r5
 80094d6:	bd38      	pop	{r3, r4, r5, pc}
 80094d8:	b118      	cbz	r0, 80094e2 <_fflush_r+0x1a>
 80094da:	6a03      	ldr	r3, [r0, #32]
 80094dc:	b90b      	cbnz	r3, 80094e2 <_fflush_r+0x1a>
 80094de:	f7fc ffbd 	bl	800645c <__sinit>
 80094e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d0f3      	beq.n	80094d2 <_fflush_r+0xa>
 80094ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094ec:	07d0      	lsls	r0, r2, #31
 80094ee:	d404      	bmi.n	80094fa <_fflush_r+0x32>
 80094f0:	0599      	lsls	r1, r3, #22
 80094f2:	d402      	bmi.n	80094fa <_fflush_r+0x32>
 80094f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094f6:	f7fd f9fe 	bl	80068f6 <__retarget_lock_acquire_recursive>
 80094fa:	4628      	mov	r0, r5
 80094fc:	4621      	mov	r1, r4
 80094fe:	f7ff ff5d 	bl	80093bc <__sflush_r>
 8009502:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009504:	07da      	lsls	r2, r3, #31
 8009506:	4605      	mov	r5, r0
 8009508:	d4e4      	bmi.n	80094d4 <_fflush_r+0xc>
 800950a:	89a3      	ldrh	r3, [r4, #12]
 800950c:	059b      	lsls	r3, r3, #22
 800950e:	d4e1      	bmi.n	80094d4 <_fflush_r+0xc>
 8009510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009512:	f7fd f9f1 	bl	80068f8 <__retarget_lock_release_recursive>
 8009516:	e7dd      	b.n	80094d4 <_fflush_r+0xc>

08009518 <__swhatbuf_r>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	460c      	mov	r4, r1
 800951c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009520:	2900      	cmp	r1, #0
 8009522:	b096      	sub	sp, #88	; 0x58
 8009524:	4615      	mov	r5, r2
 8009526:	461e      	mov	r6, r3
 8009528:	da0d      	bge.n	8009546 <__swhatbuf_r+0x2e>
 800952a:	89a3      	ldrh	r3, [r4, #12]
 800952c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009530:	f04f 0100 	mov.w	r1, #0
 8009534:	bf0c      	ite	eq
 8009536:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800953a:	2340      	movne	r3, #64	; 0x40
 800953c:	2000      	movs	r0, #0
 800953e:	6031      	str	r1, [r6, #0]
 8009540:	602b      	str	r3, [r5, #0]
 8009542:	b016      	add	sp, #88	; 0x58
 8009544:	bd70      	pop	{r4, r5, r6, pc}
 8009546:	466a      	mov	r2, sp
 8009548:	f000 f874 	bl	8009634 <_fstat_r>
 800954c:	2800      	cmp	r0, #0
 800954e:	dbec      	blt.n	800952a <__swhatbuf_r+0x12>
 8009550:	9901      	ldr	r1, [sp, #4]
 8009552:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009556:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800955a:	4259      	negs	r1, r3
 800955c:	4159      	adcs	r1, r3
 800955e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009562:	e7eb      	b.n	800953c <__swhatbuf_r+0x24>

08009564 <__smakebuf_r>:
 8009564:	898b      	ldrh	r3, [r1, #12]
 8009566:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009568:	079d      	lsls	r5, r3, #30
 800956a:	4606      	mov	r6, r0
 800956c:	460c      	mov	r4, r1
 800956e:	d507      	bpl.n	8009580 <__smakebuf_r+0x1c>
 8009570:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	6123      	str	r3, [r4, #16]
 8009578:	2301      	movs	r3, #1
 800957a:	6163      	str	r3, [r4, #20]
 800957c:	b002      	add	sp, #8
 800957e:	bd70      	pop	{r4, r5, r6, pc}
 8009580:	ab01      	add	r3, sp, #4
 8009582:	466a      	mov	r2, sp
 8009584:	f7ff ffc8 	bl	8009518 <__swhatbuf_r>
 8009588:	9900      	ldr	r1, [sp, #0]
 800958a:	4605      	mov	r5, r0
 800958c:	4630      	mov	r0, r6
 800958e:	f7fe f8a9 	bl	80076e4 <_malloc_r>
 8009592:	b948      	cbnz	r0, 80095a8 <__smakebuf_r+0x44>
 8009594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009598:	059a      	lsls	r2, r3, #22
 800959a:	d4ef      	bmi.n	800957c <__smakebuf_r+0x18>
 800959c:	f023 0303 	bic.w	r3, r3, #3
 80095a0:	f043 0302 	orr.w	r3, r3, #2
 80095a4:	81a3      	strh	r3, [r4, #12]
 80095a6:	e7e3      	b.n	8009570 <__smakebuf_r+0xc>
 80095a8:	89a3      	ldrh	r3, [r4, #12]
 80095aa:	6020      	str	r0, [r4, #0]
 80095ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095b0:	81a3      	strh	r3, [r4, #12]
 80095b2:	9b00      	ldr	r3, [sp, #0]
 80095b4:	6163      	str	r3, [r4, #20]
 80095b6:	9b01      	ldr	r3, [sp, #4]
 80095b8:	6120      	str	r0, [r4, #16]
 80095ba:	b15b      	cbz	r3, 80095d4 <__smakebuf_r+0x70>
 80095bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095c0:	4630      	mov	r0, r6
 80095c2:	f000 f849 	bl	8009658 <_isatty_r>
 80095c6:	b128      	cbz	r0, 80095d4 <__smakebuf_r+0x70>
 80095c8:	89a3      	ldrh	r3, [r4, #12]
 80095ca:	f023 0303 	bic.w	r3, r3, #3
 80095ce:	f043 0301 	orr.w	r3, r3, #1
 80095d2:	81a3      	strh	r3, [r4, #12]
 80095d4:	89a3      	ldrh	r3, [r4, #12]
 80095d6:	431d      	orrs	r5, r3
 80095d8:	81a5      	strh	r5, [r4, #12]
 80095da:	e7cf      	b.n	800957c <__smakebuf_r+0x18>

080095dc <memmove>:
 80095dc:	4288      	cmp	r0, r1
 80095de:	b510      	push	{r4, lr}
 80095e0:	eb01 0402 	add.w	r4, r1, r2
 80095e4:	d902      	bls.n	80095ec <memmove+0x10>
 80095e6:	4284      	cmp	r4, r0
 80095e8:	4623      	mov	r3, r4
 80095ea:	d807      	bhi.n	80095fc <memmove+0x20>
 80095ec:	1e43      	subs	r3, r0, #1
 80095ee:	42a1      	cmp	r1, r4
 80095f0:	d008      	beq.n	8009604 <memmove+0x28>
 80095f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095fa:	e7f8      	b.n	80095ee <memmove+0x12>
 80095fc:	4402      	add	r2, r0
 80095fe:	4601      	mov	r1, r0
 8009600:	428a      	cmp	r2, r1
 8009602:	d100      	bne.n	8009606 <memmove+0x2a>
 8009604:	bd10      	pop	{r4, pc}
 8009606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800960a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800960e:	e7f7      	b.n	8009600 <memmove+0x24>

08009610 <strncmp>:
 8009610:	b510      	push	{r4, lr}
 8009612:	b16a      	cbz	r2, 8009630 <strncmp+0x20>
 8009614:	3901      	subs	r1, #1
 8009616:	1884      	adds	r4, r0, r2
 8009618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800961c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009620:	429a      	cmp	r2, r3
 8009622:	d103      	bne.n	800962c <strncmp+0x1c>
 8009624:	42a0      	cmp	r0, r4
 8009626:	d001      	beq.n	800962c <strncmp+0x1c>
 8009628:	2a00      	cmp	r2, #0
 800962a:	d1f5      	bne.n	8009618 <strncmp+0x8>
 800962c:	1ad0      	subs	r0, r2, r3
 800962e:	bd10      	pop	{r4, pc}
 8009630:	4610      	mov	r0, r2
 8009632:	e7fc      	b.n	800962e <strncmp+0x1e>

08009634 <_fstat_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	4d07      	ldr	r5, [pc, #28]	; (8009654 <_fstat_r+0x20>)
 8009638:	2300      	movs	r3, #0
 800963a:	4604      	mov	r4, r0
 800963c:	4608      	mov	r0, r1
 800963e:	4611      	mov	r1, r2
 8009640:	602b      	str	r3, [r5, #0]
 8009642:	f7f8 fa1a 	bl	8001a7a <_fstat>
 8009646:	1c43      	adds	r3, r0, #1
 8009648:	d102      	bne.n	8009650 <_fstat_r+0x1c>
 800964a:	682b      	ldr	r3, [r5, #0]
 800964c:	b103      	cbz	r3, 8009650 <_fstat_r+0x1c>
 800964e:	6023      	str	r3, [r4, #0]
 8009650:	bd38      	pop	{r3, r4, r5, pc}
 8009652:	bf00      	nop
 8009654:	20000508 	.word	0x20000508

08009658 <_isatty_r>:
 8009658:	b538      	push	{r3, r4, r5, lr}
 800965a:	4d06      	ldr	r5, [pc, #24]	; (8009674 <_isatty_r+0x1c>)
 800965c:	2300      	movs	r3, #0
 800965e:	4604      	mov	r4, r0
 8009660:	4608      	mov	r0, r1
 8009662:	602b      	str	r3, [r5, #0]
 8009664:	f7f8 fa19 	bl	8001a9a <_isatty>
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	d102      	bne.n	8009672 <_isatty_r+0x1a>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	b103      	cbz	r3, 8009672 <_isatty_r+0x1a>
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	20000508 	.word	0x20000508

08009678 <_sbrk_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	4d06      	ldr	r5, [pc, #24]	; (8009694 <_sbrk_r+0x1c>)
 800967c:	2300      	movs	r3, #0
 800967e:	4604      	mov	r4, r0
 8009680:	4608      	mov	r0, r1
 8009682:	602b      	str	r3, [r5, #0]
 8009684:	f7f8 fa22 	bl	8001acc <_sbrk>
 8009688:	1c43      	adds	r3, r0, #1
 800968a:	d102      	bne.n	8009692 <_sbrk_r+0x1a>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	b103      	cbz	r3, 8009692 <_sbrk_r+0x1a>
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	bd38      	pop	{r3, r4, r5, pc}
 8009694:	20000508 	.word	0x20000508

08009698 <memcpy>:
 8009698:	440a      	add	r2, r1
 800969a:	4291      	cmp	r1, r2
 800969c:	f100 33ff 	add.w	r3, r0, #4294967295
 80096a0:	d100      	bne.n	80096a4 <memcpy+0xc>
 80096a2:	4770      	bx	lr
 80096a4:	b510      	push	{r4, lr}
 80096a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096ae:	4291      	cmp	r1, r2
 80096b0:	d1f9      	bne.n	80096a6 <memcpy+0xe>
 80096b2:	bd10      	pop	{r4, pc}
 80096b4:	0000      	movs	r0, r0
	...

080096b8 <nan>:
 80096b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80096c0 <nan+0x8>
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	00000000 	.word	0x00000000
 80096c4:	7ff80000 	.word	0x7ff80000

080096c8 <__assert_func>:
 80096c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096ca:	4614      	mov	r4, r2
 80096cc:	461a      	mov	r2, r3
 80096ce:	4b09      	ldr	r3, [pc, #36]	; (80096f4 <__assert_func+0x2c>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4605      	mov	r5, r0
 80096d4:	68d8      	ldr	r0, [r3, #12]
 80096d6:	b14c      	cbz	r4, 80096ec <__assert_func+0x24>
 80096d8:	4b07      	ldr	r3, [pc, #28]	; (80096f8 <__assert_func+0x30>)
 80096da:	9100      	str	r1, [sp, #0]
 80096dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096e0:	4906      	ldr	r1, [pc, #24]	; (80096fc <__assert_func+0x34>)
 80096e2:	462b      	mov	r3, r5
 80096e4:	f000 fbca 	bl	8009e7c <fiprintf>
 80096e8:	f000 fbda 	bl	8009ea0 <abort>
 80096ec:	4b04      	ldr	r3, [pc, #16]	; (8009700 <__assert_func+0x38>)
 80096ee:	461c      	mov	r4, r3
 80096f0:	e7f3      	b.n	80096da <__assert_func+0x12>
 80096f2:	bf00      	nop
 80096f4:	20000074 	.word	0x20000074
 80096f8:	0800a55a 	.word	0x0800a55a
 80096fc:	0800a567 	.word	0x0800a567
 8009700:	0800a595 	.word	0x0800a595

08009704 <_calloc_r>:
 8009704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009706:	fba1 2402 	umull	r2, r4, r1, r2
 800970a:	b94c      	cbnz	r4, 8009720 <_calloc_r+0x1c>
 800970c:	4611      	mov	r1, r2
 800970e:	9201      	str	r2, [sp, #4]
 8009710:	f7fd ffe8 	bl	80076e4 <_malloc_r>
 8009714:	9a01      	ldr	r2, [sp, #4]
 8009716:	4605      	mov	r5, r0
 8009718:	b930      	cbnz	r0, 8009728 <_calloc_r+0x24>
 800971a:	4628      	mov	r0, r5
 800971c:	b003      	add	sp, #12
 800971e:	bd30      	pop	{r4, r5, pc}
 8009720:	220c      	movs	r2, #12
 8009722:	6002      	str	r2, [r0, #0]
 8009724:	2500      	movs	r5, #0
 8009726:	e7f8      	b.n	800971a <_calloc_r+0x16>
 8009728:	4621      	mov	r1, r4
 800972a:	f7fd f867 	bl	80067fc <memset>
 800972e:	e7f4      	b.n	800971a <_calloc_r+0x16>

08009730 <rshift>:
 8009730:	6903      	ldr	r3, [r0, #16]
 8009732:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009736:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800973a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800973e:	f100 0414 	add.w	r4, r0, #20
 8009742:	dd45      	ble.n	80097d0 <rshift+0xa0>
 8009744:	f011 011f 	ands.w	r1, r1, #31
 8009748:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800974c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009750:	d10c      	bne.n	800976c <rshift+0x3c>
 8009752:	f100 0710 	add.w	r7, r0, #16
 8009756:	4629      	mov	r1, r5
 8009758:	42b1      	cmp	r1, r6
 800975a:	d334      	bcc.n	80097c6 <rshift+0x96>
 800975c:	1a9b      	subs	r3, r3, r2
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	1eea      	subs	r2, r5, #3
 8009762:	4296      	cmp	r6, r2
 8009764:	bf38      	it	cc
 8009766:	2300      	movcc	r3, #0
 8009768:	4423      	add	r3, r4
 800976a:	e015      	b.n	8009798 <rshift+0x68>
 800976c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009770:	f1c1 0820 	rsb	r8, r1, #32
 8009774:	40cf      	lsrs	r7, r1
 8009776:	f105 0e04 	add.w	lr, r5, #4
 800977a:	46a1      	mov	r9, r4
 800977c:	4576      	cmp	r6, lr
 800977e:	46f4      	mov	ip, lr
 8009780:	d815      	bhi.n	80097ae <rshift+0x7e>
 8009782:	1a9a      	subs	r2, r3, r2
 8009784:	0092      	lsls	r2, r2, #2
 8009786:	3a04      	subs	r2, #4
 8009788:	3501      	adds	r5, #1
 800978a:	42ae      	cmp	r6, r5
 800978c:	bf38      	it	cc
 800978e:	2200      	movcc	r2, #0
 8009790:	18a3      	adds	r3, r4, r2
 8009792:	50a7      	str	r7, [r4, r2]
 8009794:	b107      	cbz	r7, 8009798 <rshift+0x68>
 8009796:	3304      	adds	r3, #4
 8009798:	1b1a      	subs	r2, r3, r4
 800979a:	42a3      	cmp	r3, r4
 800979c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80097a0:	bf08      	it	eq
 80097a2:	2300      	moveq	r3, #0
 80097a4:	6102      	str	r2, [r0, #16]
 80097a6:	bf08      	it	eq
 80097a8:	6143      	streq	r3, [r0, #20]
 80097aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097ae:	f8dc c000 	ldr.w	ip, [ip]
 80097b2:	fa0c fc08 	lsl.w	ip, ip, r8
 80097b6:	ea4c 0707 	orr.w	r7, ip, r7
 80097ba:	f849 7b04 	str.w	r7, [r9], #4
 80097be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80097c2:	40cf      	lsrs	r7, r1
 80097c4:	e7da      	b.n	800977c <rshift+0x4c>
 80097c6:	f851 cb04 	ldr.w	ip, [r1], #4
 80097ca:	f847 cf04 	str.w	ip, [r7, #4]!
 80097ce:	e7c3      	b.n	8009758 <rshift+0x28>
 80097d0:	4623      	mov	r3, r4
 80097d2:	e7e1      	b.n	8009798 <rshift+0x68>

080097d4 <__hexdig_fun>:
 80097d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80097d8:	2b09      	cmp	r3, #9
 80097da:	d802      	bhi.n	80097e2 <__hexdig_fun+0xe>
 80097dc:	3820      	subs	r0, #32
 80097de:	b2c0      	uxtb	r0, r0
 80097e0:	4770      	bx	lr
 80097e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80097e6:	2b05      	cmp	r3, #5
 80097e8:	d801      	bhi.n	80097ee <__hexdig_fun+0x1a>
 80097ea:	3847      	subs	r0, #71	; 0x47
 80097ec:	e7f7      	b.n	80097de <__hexdig_fun+0xa>
 80097ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80097f2:	2b05      	cmp	r3, #5
 80097f4:	d801      	bhi.n	80097fa <__hexdig_fun+0x26>
 80097f6:	3827      	subs	r0, #39	; 0x27
 80097f8:	e7f1      	b.n	80097de <__hexdig_fun+0xa>
 80097fa:	2000      	movs	r0, #0
 80097fc:	4770      	bx	lr
	...

08009800 <__gethex>:
 8009800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009804:	4617      	mov	r7, r2
 8009806:	680a      	ldr	r2, [r1, #0]
 8009808:	b085      	sub	sp, #20
 800980a:	f102 0b02 	add.w	fp, r2, #2
 800980e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009812:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009816:	4681      	mov	r9, r0
 8009818:	468a      	mov	sl, r1
 800981a:	9302      	str	r3, [sp, #8]
 800981c:	32fe      	adds	r2, #254	; 0xfe
 800981e:	eb02 030b 	add.w	r3, r2, fp
 8009822:	46d8      	mov	r8, fp
 8009824:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009828:	9301      	str	r3, [sp, #4]
 800982a:	2830      	cmp	r0, #48	; 0x30
 800982c:	d0f7      	beq.n	800981e <__gethex+0x1e>
 800982e:	f7ff ffd1 	bl	80097d4 <__hexdig_fun>
 8009832:	4604      	mov	r4, r0
 8009834:	2800      	cmp	r0, #0
 8009836:	d138      	bne.n	80098aa <__gethex+0xaa>
 8009838:	49a7      	ldr	r1, [pc, #668]	; (8009ad8 <__gethex+0x2d8>)
 800983a:	2201      	movs	r2, #1
 800983c:	4640      	mov	r0, r8
 800983e:	f7ff fee7 	bl	8009610 <strncmp>
 8009842:	4606      	mov	r6, r0
 8009844:	2800      	cmp	r0, #0
 8009846:	d169      	bne.n	800991c <__gethex+0x11c>
 8009848:	f898 0001 	ldrb.w	r0, [r8, #1]
 800984c:	465d      	mov	r5, fp
 800984e:	f7ff ffc1 	bl	80097d4 <__hexdig_fun>
 8009852:	2800      	cmp	r0, #0
 8009854:	d064      	beq.n	8009920 <__gethex+0x120>
 8009856:	465a      	mov	r2, fp
 8009858:	7810      	ldrb	r0, [r2, #0]
 800985a:	2830      	cmp	r0, #48	; 0x30
 800985c:	4690      	mov	r8, r2
 800985e:	f102 0201 	add.w	r2, r2, #1
 8009862:	d0f9      	beq.n	8009858 <__gethex+0x58>
 8009864:	f7ff ffb6 	bl	80097d4 <__hexdig_fun>
 8009868:	2301      	movs	r3, #1
 800986a:	fab0 f480 	clz	r4, r0
 800986e:	0964      	lsrs	r4, r4, #5
 8009870:	465e      	mov	r6, fp
 8009872:	9301      	str	r3, [sp, #4]
 8009874:	4642      	mov	r2, r8
 8009876:	4615      	mov	r5, r2
 8009878:	3201      	adds	r2, #1
 800987a:	7828      	ldrb	r0, [r5, #0]
 800987c:	f7ff ffaa 	bl	80097d4 <__hexdig_fun>
 8009880:	2800      	cmp	r0, #0
 8009882:	d1f8      	bne.n	8009876 <__gethex+0x76>
 8009884:	4994      	ldr	r1, [pc, #592]	; (8009ad8 <__gethex+0x2d8>)
 8009886:	2201      	movs	r2, #1
 8009888:	4628      	mov	r0, r5
 800988a:	f7ff fec1 	bl	8009610 <strncmp>
 800988e:	b978      	cbnz	r0, 80098b0 <__gethex+0xb0>
 8009890:	b946      	cbnz	r6, 80098a4 <__gethex+0xa4>
 8009892:	1c6e      	adds	r6, r5, #1
 8009894:	4632      	mov	r2, r6
 8009896:	4615      	mov	r5, r2
 8009898:	3201      	adds	r2, #1
 800989a:	7828      	ldrb	r0, [r5, #0]
 800989c:	f7ff ff9a 	bl	80097d4 <__hexdig_fun>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	d1f8      	bne.n	8009896 <__gethex+0x96>
 80098a4:	1b73      	subs	r3, r6, r5
 80098a6:	009e      	lsls	r6, r3, #2
 80098a8:	e004      	b.n	80098b4 <__gethex+0xb4>
 80098aa:	2400      	movs	r4, #0
 80098ac:	4626      	mov	r6, r4
 80098ae:	e7e1      	b.n	8009874 <__gethex+0x74>
 80098b0:	2e00      	cmp	r6, #0
 80098b2:	d1f7      	bne.n	80098a4 <__gethex+0xa4>
 80098b4:	782b      	ldrb	r3, [r5, #0]
 80098b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80098ba:	2b50      	cmp	r3, #80	; 0x50
 80098bc:	d13d      	bne.n	800993a <__gethex+0x13a>
 80098be:	786b      	ldrb	r3, [r5, #1]
 80098c0:	2b2b      	cmp	r3, #43	; 0x2b
 80098c2:	d02f      	beq.n	8009924 <__gethex+0x124>
 80098c4:	2b2d      	cmp	r3, #45	; 0x2d
 80098c6:	d031      	beq.n	800992c <__gethex+0x12c>
 80098c8:	1c69      	adds	r1, r5, #1
 80098ca:	f04f 0b00 	mov.w	fp, #0
 80098ce:	7808      	ldrb	r0, [r1, #0]
 80098d0:	f7ff ff80 	bl	80097d4 <__hexdig_fun>
 80098d4:	1e42      	subs	r2, r0, #1
 80098d6:	b2d2      	uxtb	r2, r2
 80098d8:	2a18      	cmp	r2, #24
 80098da:	d82e      	bhi.n	800993a <__gethex+0x13a>
 80098dc:	f1a0 0210 	sub.w	r2, r0, #16
 80098e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80098e4:	f7ff ff76 	bl	80097d4 <__hexdig_fun>
 80098e8:	f100 3cff 	add.w	ip, r0, #4294967295
 80098ec:	fa5f fc8c 	uxtb.w	ip, ip
 80098f0:	f1bc 0f18 	cmp.w	ip, #24
 80098f4:	d91d      	bls.n	8009932 <__gethex+0x132>
 80098f6:	f1bb 0f00 	cmp.w	fp, #0
 80098fa:	d000      	beq.n	80098fe <__gethex+0xfe>
 80098fc:	4252      	negs	r2, r2
 80098fe:	4416      	add	r6, r2
 8009900:	f8ca 1000 	str.w	r1, [sl]
 8009904:	b1dc      	cbz	r4, 800993e <__gethex+0x13e>
 8009906:	9b01      	ldr	r3, [sp, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	bf14      	ite	ne
 800990c:	f04f 0800 	movne.w	r8, #0
 8009910:	f04f 0806 	moveq.w	r8, #6
 8009914:	4640      	mov	r0, r8
 8009916:	b005      	add	sp, #20
 8009918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800991c:	4645      	mov	r5, r8
 800991e:	4626      	mov	r6, r4
 8009920:	2401      	movs	r4, #1
 8009922:	e7c7      	b.n	80098b4 <__gethex+0xb4>
 8009924:	f04f 0b00 	mov.w	fp, #0
 8009928:	1ca9      	adds	r1, r5, #2
 800992a:	e7d0      	b.n	80098ce <__gethex+0xce>
 800992c:	f04f 0b01 	mov.w	fp, #1
 8009930:	e7fa      	b.n	8009928 <__gethex+0x128>
 8009932:	230a      	movs	r3, #10
 8009934:	fb03 0002 	mla	r0, r3, r2, r0
 8009938:	e7d0      	b.n	80098dc <__gethex+0xdc>
 800993a:	4629      	mov	r1, r5
 800993c:	e7e0      	b.n	8009900 <__gethex+0x100>
 800993e:	eba5 0308 	sub.w	r3, r5, r8
 8009942:	3b01      	subs	r3, #1
 8009944:	4621      	mov	r1, r4
 8009946:	2b07      	cmp	r3, #7
 8009948:	dc0a      	bgt.n	8009960 <__gethex+0x160>
 800994a:	4648      	mov	r0, r9
 800994c:	f7fd ff56 	bl	80077fc <_Balloc>
 8009950:	4604      	mov	r4, r0
 8009952:	b940      	cbnz	r0, 8009966 <__gethex+0x166>
 8009954:	4b61      	ldr	r3, [pc, #388]	; (8009adc <__gethex+0x2dc>)
 8009956:	4602      	mov	r2, r0
 8009958:	21e4      	movs	r1, #228	; 0xe4
 800995a:	4861      	ldr	r0, [pc, #388]	; (8009ae0 <__gethex+0x2e0>)
 800995c:	f7ff feb4 	bl	80096c8 <__assert_func>
 8009960:	3101      	adds	r1, #1
 8009962:	105b      	asrs	r3, r3, #1
 8009964:	e7ef      	b.n	8009946 <__gethex+0x146>
 8009966:	f100 0a14 	add.w	sl, r0, #20
 800996a:	2300      	movs	r3, #0
 800996c:	495a      	ldr	r1, [pc, #360]	; (8009ad8 <__gethex+0x2d8>)
 800996e:	f8cd a004 	str.w	sl, [sp, #4]
 8009972:	469b      	mov	fp, r3
 8009974:	45a8      	cmp	r8, r5
 8009976:	d342      	bcc.n	80099fe <__gethex+0x1fe>
 8009978:	9801      	ldr	r0, [sp, #4]
 800997a:	f840 bb04 	str.w	fp, [r0], #4
 800997e:	eba0 000a 	sub.w	r0, r0, sl
 8009982:	1080      	asrs	r0, r0, #2
 8009984:	6120      	str	r0, [r4, #16]
 8009986:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800998a:	4658      	mov	r0, fp
 800998c:	f7fe f828 	bl	80079e0 <__hi0bits>
 8009990:	683d      	ldr	r5, [r7, #0]
 8009992:	eba8 0000 	sub.w	r0, r8, r0
 8009996:	42a8      	cmp	r0, r5
 8009998:	dd59      	ble.n	8009a4e <__gethex+0x24e>
 800999a:	eba0 0805 	sub.w	r8, r0, r5
 800999e:	4641      	mov	r1, r8
 80099a0:	4620      	mov	r0, r4
 80099a2:	f7fe fbb7 	bl	8008114 <__any_on>
 80099a6:	4683      	mov	fp, r0
 80099a8:	b1b8      	cbz	r0, 80099da <__gethex+0x1da>
 80099aa:	f108 33ff 	add.w	r3, r8, #4294967295
 80099ae:	1159      	asrs	r1, r3, #5
 80099b0:	f003 021f 	and.w	r2, r3, #31
 80099b4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80099b8:	f04f 0b01 	mov.w	fp, #1
 80099bc:	fa0b f202 	lsl.w	r2, fp, r2
 80099c0:	420a      	tst	r2, r1
 80099c2:	d00a      	beq.n	80099da <__gethex+0x1da>
 80099c4:	455b      	cmp	r3, fp
 80099c6:	dd06      	ble.n	80099d6 <__gethex+0x1d6>
 80099c8:	f1a8 0102 	sub.w	r1, r8, #2
 80099cc:	4620      	mov	r0, r4
 80099ce:	f7fe fba1 	bl	8008114 <__any_on>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d138      	bne.n	8009a48 <__gethex+0x248>
 80099d6:	f04f 0b02 	mov.w	fp, #2
 80099da:	4641      	mov	r1, r8
 80099dc:	4620      	mov	r0, r4
 80099de:	f7ff fea7 	bl	8009730 <rshift>
 80099e2:	4446      	add	r6, r8
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	42b3      	cmp	r3, r6
 80099e8:	da41      	bge.n	8009a6e <__gethex+0x26e>
 80099ea:	4621      	mov	r1, r4
 80099ec:	4648      	mov	r0, r9
 80099ee:	f7fd ff45 	bl	800787c <_Bfree>
 80099f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099f4:	2300      	movs	r3, #0
 80099f6:	6013      	str	r3, [r2, #0]
 80099f8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80099fc:	e78a      	b.n	8009914 <__gethex+0x114>
 80099fe:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009a02:	2a2e      	cmp	r2, #46	; 0x2e
 8009a04:	d014      	beq.n	8009a30 <__gethex+0x230>
 8009a06:	2b20      	cmp	r3, #32
 8009a08:	d106      	bne.n	8009a18 <__gethex+0x218>
 8009a0a:	9b01      	ldr	r3, [sp, #4]
 8009a0c:	f843 bb04 	str.w	fp, [r3], #4
 8009a10:	f04f 0b00 	mov.w	fp, #0
 8009a14:	9301      	str	r3, [sp, #4]
 8009a16:	465b      	mov	r3, fp
 8009a18:	7828      	ldrb	r0, [r5, #0]
 8009a1a:	9303      	str	r3, [sp, #12]
 8009a1c:	f7ff feda 	bl	80097d4 <__hexdig_fun>
 8009a20:	9b03      	ldr	r3, [sp, #12]
 8009a22:	f000 000f 	and.w	r0, r0, #15
 8009a26:	4098      	lsls	r0, r3
 8009a28:	ea4b 0b00 	orr.w	fp, fp, r0
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	e7a1      	b.n	8009974 <__gethex+0x174>
 8009a30:	45a8      	cmp	r8, r5
 8009a32:	d8e8      	bhi.n	8009a06 <__gethex+0x206>
 8009a34:	2201      	movs	r2, #1
 8009a36:	4628      	mov	r0, r5
 8009a38:	9303      	str	r3, [sp, #12]
 8009a3a:	f7ff fde9 	bl	8009610 <strncmp>
 8009a3e:	4926      	ldr	r1, [pc, #152]	; (8009ad8 <__gethex+0x2d8>)
 8009a40:	9b03      	ldr	r3, [sp, #12]
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d1df      	bne.n	8009a06 <__gethex+0x206>
 8009a46:	e795      	b.n	8009974 <__gethex+0x174>
 8009a48:	f04f 0b03 	mov.w	fp, #3
 8009a4c:	e7c5      	b.n	80099da <__gethex+0x1da>
 8009a4e:	da0b      	bge.n	8009a68 <__gethex+0x268>
 8009a50:	eba5 0800 	sub.w	r8, r5, r0
 8009a54:	4621      	mov	r1, r4
 8009a56:	4642      	mov	r2, r8
 8009a58:	4648      	mov	r0, r9
 8009a5a:	f7fe f929 	bl	8007cb0 <__lshift>
 8009a5e:	eba6 0608 	sub.w	r6, r6, r8
 8009a62:	4604      	mov	r4, r0
 8009a64:	f100 0a14 	add.w	sl, r0, #20
 8009a68:	f04f 0b00 	mov.w	fp, #0
 8009a6c:	e7ba      	b.n	80099e4 <__gethex+0x1e4>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	42b3      	cmp	r3, r6
 8009a72:	dd73      	ble.n	8009b5c <__gethex+0x35c>
 8009a74:	1b9e      	subs	r6, r3, r6
 8009a76:	42b5      	cmp	r5, r6
 8009a78:	dc34      	bgt.n	8009ae4 <__gethex+0x2e4>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d023      	beq.n	8009ac8 <__gethex+0x2c8>
 8009a80:	2b03      	cmp	r3, #3
 8009a82:	d025      	beq.n	8009ad0 <__gethex+0x2d0>
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d115      	bne.n	8009ab4 <__gethex+0x2b4>
 8009a88:	42b5      	cmp	r5, r6
 8009a8a:	d113      	bne.n	8009ab4 <__gethex+0x2b4>
 8009a8c:	2d01      	cmp	r5, #1
 8009a8e:	d10b      	bne.n	8009aa8 <__gethex+0x2a8>
 8009a90:	9a02      	ldr	r2, [sp, #8]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6013      	str	r3, [r2, #0]
 8009a96:	2301      	movs	r3, #1
 8009a98:	6123      	str	r3, [r4, #16]
 8009a9a:	f8ca 3000 	str.w	r3, [sl]
 8009a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009aa0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009aa4:	601c      	str	r4, [r3, #0]
 8009aa6:	e735      	b.n	8009914 <__gethex+0x114>
 8009aa8:	1e69      	subs	r1, r5, #1
 8009aaa:	4620      	mov	r0, r4
 8009aac:	f7fe fb32 	bl	8008114 <__any_on>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d1ed      	bne.n	8009a90 <__gethex+0x290>
 8009ab4:	4621      	mov	r1, r4
 8009ab6:	4648      	mov	r0, r9
 8009ab8:	f7fd fee0 	bl	800787c <_Bfree>
 8009abc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009abe:	2300      	movs	r3, #0
 8009ac0:	6013      	str	r3, [r2, #0]
 8009ac2:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009ac6:	e725      	b.n	8009914 <__gethex+0x114>
 8009ac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1f2      	bne.n	8009ab4 <__gethex+0x2b4>
 8009ace:	e7df      	b.n	8009a90 <__gethex+0x290>
 8009ad0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1dc      	bne.n	8009a90 <__gethex+0x290>
 8009ad6:	e7ed      	b.n	8009ab4 <__gethex+0x2b4>
 8009ad8:	0800a3ec 	.word	0x0800a3ec
 8009adc:	0800a285 	.word	0x0800a285
 8009ae0:	0800a596 	.word	0x0800a596
 8009ae4:	f106 38ff 	add.w	r8, r6, #4294967295
 8009ae8:	f1bb 0f00 	cmp.w	fp, #0
 8009aec:	d133      	bne.n	8009b56 <__gethex+0x356>
 8009aee:	f1b8 0f00 	cmp.w	r8, #0
 8009af2:	d004      	beq.n	8009afe <__gethex+0x2fe>
 8009af4:	4641      	mov	r1, r8
 8009af6:	4620      	mov	r0, r4
 8009af8:	f7fe fb0c 	bl	8008114 <__any_on>
 8009afc:	4683      	mov	fp, r0
 8009afe:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009b02:	2301      	movs	r3, #1
 8009b04:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009b08:	f008 081f 	and.w	r8, r8, #31
 8009b0c:	fa03 f308 	lsl.w	r3, r3, r8
 8009b10:	4213      	tst	r3, r2
 8009b12:	4631      	mov	r1, r6
 8009b14:	4620      	mov	r0, r4
 8009b16:	bf18      	it	ne
 8009b18:	f04b 0b02 	orrne.w	fp, fp, #2
 8009b1c:	1bad      	subs	r5, r5, r6
 8009b1e:	f7ff fe07 	bl	8009730 <rshift>
 8009b22:	687e      	ldr	r6, [r7, #4]
 8009b24:	f04f 0802 	mov.w	r8, #2
 8009b28:	f1bb 0f00 	cmp.w	fp, #0
 8009b2c:	d04a      	beq.n	8009bc4 <__gethex+0x3c4>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d016      	beq.n	8009b62 <__gethex+0x362>
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d018      	beq.n	8009b6a <__gethex+0x36a>
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d109      	bne.n	8009b50 <__gethex+0x350>
 8009b3c:	f01b 0f02 	tst.w	fp, #2
 8009b40:	d006      	beq.n	8009b50 <__gethex+0x350>
 8009b42:	f8da 3000 	ldr.w	r3, [sl]
 8009b46:	ea4b 0b03 	orr.w	fp, fp, r3
 8009b4a:	f01b 0f01 	tst.w	fp, #1
 8009b4e:	d10f      	bne.n	8009b70 <__gethex+0x370>
 8009b50:	f048 0810 	orr.w	r8, r8, #16
 8009b54:	e036      	b.n	8009bc4 <__gethex+0x3c4>
 8009b56:	f04f 0b01 	mov.w	fp, #1
 8009b5a:	e7d0      	b.n	8009afe <__gethex+0x2fe>
 8009b5c:	f04f 0801 	mov.w	r8, #1
 8009b60:	e7e2      	b.n	8009b28 <__gethex+0x328>
 8009b62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b64:	f1c3 0301 	rsb	r3, r3, #1
 8009b68:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d0ef      	beq.n	8009b50 <__gethex+0x350>
 8009b70:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b74:	f104 0214 	add.w	r2, r4, #20
 8009b78:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009b7c:	9301      	str	r3, [sp, #4]
 8009b7e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009b82:	2300      	movs	r3, #0
 8009b84:	4694      	mov	ip, r2
 8009b86:	f852 1b04 	ldr.w	r1, [r2], #4
 8009b8a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009b8e:	d01e      	beq.n	8009bce <__gethex+0x3ce>
 8009b90:	3101      	adds	r1, #1
 8009b92:	f8cc 1000 	str.w	r1, [ip]
 8009b96:	f1b8 0f02 	cmp.w	r8, #2
 8009b9a:	f104 0214 	add.w	r2, r4, #20
 8009b9e:	d13d      	bne.n	8009c1c <__gethex+0x41c>
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	42ab      	cmp	r3, r5
 8009ba6:	d10b      	bne.n	8009bc0 <__gethex+0x3c0>
 8009ba8:	1169      	asrs	r1, r5, #5
 8009baa:	2301      	movs	r3, #1
 8009bac:	f005 051f 	and.w	r5, r5, #31
 8009bb0:	fa03 f505 	lsl.w	r5, r3, r5
 8009bb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bb8:	421d      	tst	r5, r3
 8009bba:	bf18      	it	ne
 8009bbc:	f04f 0801 	movne.w	r8, #1
 8009bc0:	f048 0820 	orr.w	r8, r8, #32
 8009bc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bc6:	601c      	str	r4, [r3, #0]
 8009bc8:	9b02      	ldr	r3, [sp, #8]
 8009bca:	601e      	str	r6, [r3, #0]
 8009bcc:	e6a2      	b.n	8009914 <__gethex+0x114>
 8009bce:	4290      	cmp	r0, r2
 8009bd0:	f842 3c04 	str.w	r3, [r2, #-4]
 8009bd4:	d8d6      	bhi.n	8009b84 <__gethex+0x384>
 8009bd6:	68a2      	ldr	r2, [r4, #8]
 8009bd8:	4593      	cmp	fp, r2
 8009bda:	db17      	blt.n	8009c0c <__gethex+0x40c>
 8009bdc:	6861      	ldr	r1, [r4, #4]
 8009bde:	4648      	mov	r0, r9
 8009be0:	3101      	adds	r1, #1
 8009be2:	f7fd fe0b 	bl	80077fc <_Balloc>
 8009be6:	4682      	mov	sl, r0
 8009be8:	b918      	cbnz	r0, 8009bf2 <__gethex+0x3f2>
 8009bea:	4b1b      	ldr	r3, [pc, #108]	; (8009c58 <__gethex+0x458>)
 8009bec:	4602      	mov	r2, r0
 8009bee:	2184      	movs	r1, #132	; 0x84
 8009bf0:	e6b3      	b.n	800995a <__gethex+0x15a>
 8009bf2:	6922      	ldr	r2, [r4, #16]
 8009bf4:	3202      	adds	r2, #2
 8009bf6:	f104 010c 	add.w	r1, r4, #12
 8009bfa:	0092      	lsls	r2, r2, #2
 8009bfc:	300c      	adds	r0, #12
 8009bfe:	f7ff fd4b 	bl	8009698 <memcpy>
 8009c02:	4621      	mov	r1, r4
 8009c04:	4648      	mov	r0, r9
 8009c06:	f7fd fe39 	bl	800787c <_Bfree>
 8009c0a:	4654      	mov	r4, sl
 8009c0c:	6922      	ldr	r2, [r4, #16]
 8009c0e:	1c51      	adds	r1, r2, #1
 8009c10:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009c14:	6121      	str	r1, [r4, #16]
 8009c16:	2101      	movs	r1, #1
 8009c18:	6151      	str	r1, [r2, #20]
 8009c1a:	e7bc      	b.n	8009b96 <__gethex+0x396>
 8009c1c:	6921      	ldr	r1, [r4, #16]
 8009c1e:	4559      	cmp	r1, fp
 8009c20:	dd0b      	ble.n	8009c3a <__gethex+0x43a>
 8009c22:	2101      	movs	r1, #1
 8009c24:	4620      	mov	r0, r4
 8009c26:	f7ff fd83 	bl	8009730 <rshift>
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	3601      	adds	r6, #1
 8009c2e:	42b3      	cmp	r3, r6
 8009c30:	f6ff aedb 	blt.w	80099ea <__gethex+0x1ea>
 8009c34:	f04f 0801 	mov.w	r8, #1
 8009c38:	e7c2      	b.n	8009bc0 <__gethex+0x3c0>
 8009c3a:	f015 051f 	ands.w	r5, r5, #31
 8009c3e:	d0f9      	beq.n	8009c34 <__gethex+0x434>
 8009c40:	9b01      	ldr	r3, [sp, #4]
 8009c42:	441a      	add	r2, r3
 8009c44:	f1c5 0520 	rsb	r5, r5, #32
 8009c48:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009c4c:	f7fd fec8 	bl	80079e0 <__hi0bits>
 8009c50:	42a8      	cmp	r0, r5
 8009c52:	dbe6      	blt.n	8009c22 <__gethex+0x422>
 8009c54:	e7ee      	b.n	8009c34 <__gethex+0x434>
 8009c56:	bf00      	nop
 8009c58:	0800a285 	.word	0x0800a285

08009c5c <L_shift>:
 8009c5c:	f1c2 0208 	rsb	r2, r2, #8
 8009c60:	0092      	lsls	r2, r2, #2
 8009c62:	b570      	push	{r4, r5, r6, lr}
 8009c64:	f1c2 0620 	rsb	r6, r2, #32
 8009c68:	6843      	ldr	r3, [r0, #4]
 8009c6a:	6804      	ldr	r4, [r0, #0]
 8009c6c:	fa03 f506 	lsl.w	r5, r3, r6
 8009c70:	432c      	orrs	r4, r5
 8009c72:	40d3      	lsrs	r3, r2
 8009c74:	6004      	str	r4, [r0, #0]
 8009c76:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c7a:	4288      	cmp	r0, r1
 8009c7c:	d3f4      	bcc.n	8009c68 <L_shift+0xc>
 8009c7e:	bd70      	pop	{r4, r5, r6, pc}

08009c80 <__match>:
 8009c80:	b530      	push	{r4, r5, lr}
 8009c82:	6803      	ldr	r3, [r0, #0]
 8009c84:	3301      	adds	r3, #1
 8009c86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c8a:	b914      	cbnz	r4, 8009c92 <__match+0x12>
 8009c8c:	6003      	str	r3, [r0, #0]
 8009c8e:	2001      	movs	r0, #1
 8009c90:	bd30      	pop	{r4, r5, pc}
 8009c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009c9a:	2d19      	cmp	r5, #25
 8009c9c:	bf98      	it	ls
 8009c9e:	3220      	addls	r2, #32
 8009ca0:	42a2      	cmp	r2, r4
 8009ca2:	d0f0      	beq.n	8009c86 <__match+0x6>
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	e7f3      	b.n	8009c90 <__match+0x10>

08009ca8 <__hexnan>:
 8009ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cac:	680b      	ldr	r3, [r1, #0]
 8009cae:	6801      	ldr	r1, [r0, #0]
 8009cb0:	115e      	asrs	r6, r3, #5
 8009cb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009cb6:	f013 031f 	ands.w	r3, r3, #31
 8009cba:	b087      	sub	sp, #28
 8009cbc:	bf18      	it	ne
 8009cbe:	3604      	addne	r6, #4
 8009cc0:	2500      	movs	r5, #0
 8009cc2:	1f37      	subs	r7, r6, #4
 8009cc4:	4682      	mov	sl, r0
 8009cc6:	4690      	mov	r8, r2
 8009cc8:	9301      	str	r3, [sp, #4]
 8009cca:	f846 5c04 	str.w	r5, [r6, #-4]
 8009cce:	46b9      	mov	r9, r7
 8009cd0:	463c      	mov	r4, r7
 8009cd2:	9502      	str	r5, [sp, #8]
 8009cd4:	46ab      	mov	fp, r5
 8009cd6:	784a      	ldrb	r2, [r1, #1]
 8009cd8:	1c4b      	adds	r3, r1, #1
 8009cda:	9303      	str	r3, [sp, #12]
 8009cdc:	b342      	cbz	r2, 8009d30 <__hexnan+0x88>
 8009cde:	4610      	mov	r0, r2
 8009ce0:	9105      	str	r1, [sp, #20]
 8009ce2:	9204      	str	r2, [sp, #16]
 8009ce4:	f7ff fd76 	bl	80097d4 <__hexdig_fun>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	d14f      	bne.n	8009d8c <__hexnan+0xe4>
 8009cec:	9a04      	ldr	r2, [sp, #16]
 8009cee:	9905      	ldr	r1, [sp, #20]
 8009cf0:	2a20      	cmp	r2, #32
 8009cf2:	d818      	bhi.n	8009d26 <__hexnan+0x7e>
 8009cf4:	9b02      	ldr	r3, [sp, #8]
 8009cf6:	459b      	cmp	fp, r3
 8009cf8:	dd13      	ble.n	8009d22 <__hexnan+0x7a>
 8009cfa:	454c      	cmp	r4, r9
 8009cfc:	d206      	bcs.n	8009d0c <__hexnan+0x64>
 8009cfe:	2d07      	cmp	r5, #7
 8009d00:	dc04      	bgt.n	8009d0c <__hexnan+0x64>
 8009d02:	462a      	mov	r2, r5
 8009d04:	4649      	mov	r1, r9
 8009d06:	4620      	mov	r0, r4
 8009d08:	f7ff ffa8 	bl	8009c5c <L_shift>
 8009d0c:	4544      	cmp	r4, r8
 8009d0e:	d950      	bls.n	8009db2 <__hexnan+0x10a>
 8009d10:	2300      	movs	r3, #0
 8009d12:	f1a4 0904 	sub.w	r9, r4, #4
 8009d16:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d1a:	f8cd b008 	str.w	fp, [sp, #8]
 8009d1e:	464c      	mov	r4, r9
 8009d20:	461d      	mov	r5, r3
 8009d22:	9903      	ldr	r1, [sp, #12]
 8009d24:	e7d7      	b.n	8009cd6 <__hexnan+0x2e>
 8009d26:	2a29      	cmp	r2, #41	; 0x29
 8009d28:	d155      	bne.n	8009dd6 <__hexnan+0x12e>
 8009d2a:	3102      	adds	r1, #2
 8009d2c:	f8ca 1000 	str.w	r1, [sl]
 8009d30:	f1bb 0f00 	cmp.w	fp, #0
 8009d34:	d04f      	beq.n	8009dd6 <__hexnan+0x12e>
 8009d36:	454c      	cmp	r4, r9
 8009d38:	d206      	bcs.n	8009d48 <__hexnan+0xa0>
 8009d3a:	2d07      	cmp	r5, #7
 8009d3c:	dc04      	bgt.n	8009d48 <__hexnan+0xa0>
 8009d3e:	462a      	mov	r2, r5
 8009d40:	4649      	mov	r1, r9
 8009d42:	4620      	mov	r0, r4
 8009d44:	f7ff ff8a 	bl	8009c5c <L_shift>
 8009d48:	4544      	cmp	r4, r8
 8009d4a:	d934      	bls.n	8009db6 <__hexnan+0x10e>
 8009d4c:	f1a8 0204 	sub.w	r2, r8, #4
 8009d50:	4623      	mov	r3, r4
 8009d52:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d56:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d5a:	429f      	cmp	r7, r3
 8009d5c:	d2f9      	bcs.n	8009d52 <__hexnan+0xaa>
 8009d5e:	1b3b      	subs	r3, r7, r4
 8009d60:	f023 0303 	bic.w	r3, r3, #3
 8009d64:	3304      	adds	r3, #4
 8009d66:	3e03      	subs	r6, #3
 8009d68:	3401      	adds	r4, #1
 8009d6a:	42a6      	cmp	r6, r4
 8009d6c:	bf38      	it	cc
 8009d6e:	2304      	movcc	r3, #4
 8009d70:	4443      	add	r3, r8
 8009d72:	2200      	movs	r2, #0
 8009d74:	f843 2b04 	str.w	r2, [r3], #4
 8009d78:	429f      	cmp	r7, r3
 8009d7a:	d2fb      	bcs.n	8009d74 <__hexnan+0xcc>
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	b91b      	cbnz	r3, 8009d88 <__hexnan+0xe0>
 8009d80:	4547      	cmp	r7, r8
 8009d82:	d126      	bne.n	8009dd2 <__hexnan+0x12a>
 8009d84:	2301      	movs	r3, #1
 8009d86:	603b      	str	r3, [r7, #0]
 8009d88:	2005      	movs	r0, #5
 8009d8a:	e025      	b.n	8009dd8 <__hexnan+0x130>
 8009d8c:	3501      	adds	r5, #1
 8009d8e:	2d08      	cmp	r5, #8
 8009d90:	f10b 0b01 	add.w	fp, fp, #1
 8009d94:	dd06      	ble.n	8009da4 <__hexnan+0xfc>
 8009d96:	4544      	cmp	r4, r8
 8009d98:	d9c3      	bls.n	8009d22 <__hexnan+0x7a>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009da0:	2501      	movs	r5, #1
 8009da2:	3c04      	subs	r4, #4
 8009da4:	6822      	ldr	r2, [r4, #0]
 8009da6:	f000 000f 	and.w	r0, r0, #15
 8009daa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009dae:	6020      	str	r0, [r4, #0]
 8009db0:	e7b7      	b.n	8009d22 <__hexnan+0x7a>
 8009db2:	2508      	movs	r5, #8
 8009db4:	e7b5      	b.n	8009d22 <__hexnan+0x7a>
 8009db6:	9b01      	ldr	r3, [sp, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d0df      	beq.n	8009d7c <__hexnan+0xd4>
 8009dbc:	f1c3 0320 	rsb	r3, r3, #32
 8009dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc4:	40da      	lsrs	r2, r3
 8009dc6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009dca:	4013      	ands	r3, r2
 8009dcc:	f846 3c04 	str.w	r3, [r6, #-4]
 8009dd0:	e7d4      	b.n	8009d7c <__hexnan+0xd4>
 8009dd2:	3f04      	subs	r7, #4
 8009dd4:	e7d2      	b.n	8009d7c <__hexnan+0xd4>
 8009dd6:	2004      	movs	r0, #4
 8009dd8:	b007      	add	sp, #28
 8009dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009dde <__ascii_mbtowc>:
 8009dde:	b082      	sub	sp, #8
 8009de0:	b901      	cbnz	r1, 8009de4 <__ascii_mbtowc+0x6>
 8009de2:	a901      	add	r1, sp, #4
 8009de4:	b142      	cbz	r2, 8009df8 <__ascii_mbtowc+0x1a>
 8009de6:	b14b      	cbz	r3, 8009dfc <__ascii_mbtowc+0x1e>
 8009de8:	7813      	ldrb	r3, [r2, #0]
 8009dea:	600b      	str	r3, [r1, #0]
 8009dec:	7812      	ldrb	r2, [r2, #0]
 8009dee:	1e10      	subs	r0, r2, #0
 8009df0:	bf18      	it	ne
 8009df2:	2001      	movne	r0, #1
 8009df4:	b002      	add	sp, #8
 8009df6:	4770      	bx	lr
 8009df8:	4610      	mov	r0, r2
 8009dfa:	e7fb      	b.n	8009df4 <__ascii_mbtowc+0x16>
 8009dfc:	f06f 0001 	mvn.w	r0, #1
 8009e00:	e7f8      	b.n	8009df4 <__ascii_mbtowc+0x16>

08009e02 <_realloc_r>:
 8009e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e06:	4680      	mov	r8, r0
 8009e08:	4614      	mov	r4, r2
 8009e0a:	460e      	mov	r6, r1
 8009e0c:	b921      	cbnz	r1, 8009e18 <_realloc_r+0x16>
 8009e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e12:	4611      	mov	r1, r2
 8009e14:	f7fd bc66 	b.w	80076e4 <_malloc_r>
 8009e18:	b92a      	cbnz	r2, 8009e26 <_realloc_r+0x24>
 8009e1a:	f7fd fbef 	bl	80075fc <_free_r>
 8009e1e:	4625      	mov	r5, r4
 8009e20:	4628      	mov	r0, r5
 8009e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e26:	f000 f842 	bl	8009eae <_malloc_usable_size_r>
 8009e2a:	4284      	cmp	r4, r0
 8009e2c:	4607      	mov	r7, r0
 8009e2e:	d802      	bhi.n	8009e36 <_realloc_r+0x34>
 8009e30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e34:	d812      	bhi.n	8009e5c <_realloc_r+0x5a>
 8009e36:	4621      	mov	r1, r4
 8009e38:	4640      	mov	r0, r8
 8009e3a:	f7fd fc53 	bl	80076e4 <_malloc_r>
 8009e3e:	4605      	mov	r5, r0
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d0ed      	beq.n	8009e20 <_realloc_r+0x1e>
 8009e44:	42bc      	cmp	r4, r7
 8009e46:	4622      	mov	r2, r4
 8009e48:	4631      	mov	r1, r6
 8009e4a:	bf28      	it	cs
 8009e4c:	463a      	movcs	r2, r7
 8009e4e:	f7ff fc23 	bl	8009698 <memcpy>
 8009e52:	4631      	mov	r1, r6
 8009e54:	4640      	mov	r0, r8
 8009e56:	f7fd fbd1 	bl	80075fc <_free_r>
 8009e5a:	e7e1      	b.n	8009e20 <_realloc_r+0x1e>
 8009e5c:	4635      	mov	r5, r6
 8009e5e:	e7df      	b.n	8009e20 <_realloc_r+0x1e>

08009e60 <__ascii_wctomb>:
 8009e60:	b149      	cbz	r1, 8009e76 <__ascii_wctomb+0x16>
 8009e62:	2aff      	cmp	r2, #255	; 0xff
 8009e64:	bf85      	ittet	hi
 8009e66:	238a      	movhi	r3, #138	; 0x8a
 8009e68:	6003      	strhi	r3, [r0, #0]
 8009e6a:	700a      	strbls	r2, [r1, #0]
 8009e6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e70:	bf98      	it	ls
 8009e72:	2001      	movls	r0, #1
 8009e74:	4770      	bx	lr
 8009e76:	4608      	mov	r0, r1
 8009e78:	4770      	bx	lr
	...

08009e7c <fiprintf>:
 8009e7c:	b40e      	push	{r1, r2, r3}
 8009e7e:	b503      	push	{r0, r1, lr}
 8009e80:	4601      	mov	r1, r0
 8009e82:	ab03      	add	r3, sp, #12
 8009e84:	4805      	ldr	r0, [pc, #20]	; (8009e9c <fiprintf+0x20>)
 8009e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e8a:	6800      	ldr	r0, [r0, #0]
 8009e8c:	9301      	str	r3, [sp, #4]
 8009e8e:	f7ff f97b 	bl	8009188 <_vfiprintf_r>
 8009e92:	b002      	add	sp, #8
 8009e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e98:	b003      	add	sp, #12
 8009e9a:	4770      	bx	lr
 8009e9c:	20000074 	.word	0x20000074

08009ea0 <abort>:
 8009ea0:	b508      	push	{r3, lr}
 8009ea2:	2006      	movs	r0, #6
 8009ea4:	f000 f834 	bl	8009f10 <raise>
 8009ea8:	2001      	movs	r0, #1
 8009eaa:	f7f7 fd97 	bl	80019dc <_exit>

08009eae <_malloc_usable_size_r>:
 8009eae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eb2:	1f18      	subs	r0, r3, #4
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	bfbc      	itt	lt
 8009eb8:	580b      	ldrlt	r3, [r1, r0]
 8009eba:	18c0      	addlt	r0, r0, r3
 8009ebc:	4770      	bx	lr

08009ebe <_raise_r>:
 8009ebe:	291f      	cmp	r1, #31
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	460d      	mov	r5, r1
 8009ec6:	d904      	bls.n	8009ed2 <_raise_r+0x14>
 8009ec8:	2316      	movs	r3, #22
 8009eca:	6003      	str	r3, [r0, #0]
 8009ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed0:	bd38      	pop	{r3, r4, r5, pc}
 8009ed2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009ed4:	b112      	cbz	r2, 8009edc <_raise_r+0x1e>
 8009ed6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009eda:	b94b      	cbnz	r3, 8009ef0 <_raise_r+0x32>
 8009edc:	4620      	mov	r0, r4
 8009ede:	f000 f831 	bl	8009f44 <_getpid_r>
 8009ee2:	462a      	mov	r2, r5
 8009ee4:	4601      	mov	r1, r0
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eec:	f000 b818 	b.w	8009f20 <_kill_r>
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d00a      	beq.n	8009f0a <_raise_r+0x4c>
 8009ef4:	1c59      	adds	r1, r3, #1
 8009ef6:	d103      	bne.n	8009f00 <_raise_r+0x42>
 8009ef8:	2316      	movs	r3, #22
 8009efa:	6003      	str	r3, [r0, #0]
 8009efc:	2001      	movs	r0, #1
 8009efe:	e7e7      	b.n	8009ed0 <_raise_r+0x12>
 8009f00:	2400      	movs	r4, #0
 8009f02:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f06:	4628      	mov	r0, r5
 8009f08:	4798      	blx	r3
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	e7e0      	b.n	8009ed0 <_raise_r+0x12>
	...

08009f10 <raise>:
 8009f10:	4b02      	ldr	r3, [pc, #8]	; (8009f1c <raise+0xc>)
 8009f12:	4601      	mov	r1, r0
 8009f14:	6818      	ldr	r0, [r3, #0]
 8009f16:	f7ff bfd2 	b.w	8009ebe <_raise_r>
 8009f1a:	bf00      	nop
 8009f1c:	20000074 	.word	0x20000074

08009f20 <_kill_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	4d07      	ldr	r5, [pc, #28]	; (8009f40 <_kill_r+0x20>)
 8009f24:	2300      	movs	r3, #0
 8009f26:	4604      	mov	r4, r0
 8009f28:	4608      	mov	r0, r1
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	602b      	str	r3, [r5, #0]
 8009f2e:	f7f7 fd45 	bl	80019bc <_kill>
 8009f32:	1c43      	adds	r3, r0, #1
 8009f34:	d102      	bne.n	8009f3c <_kill_r+0x1c>
 8009f36:	682b      	ldr	r3, [r5, #0]
 8009f38:	b103      	cbz	r3, 8009f3c <_kill_r+0x1c>
 8009f3a:	6023      	str	r3, [r4, #0]
 8009f3c:	bd38      	pop	{r3, r4, r5, pc}
 8009f3e:	bf00      	nop
 8009f40:	20000508 	.word	0x20000508

08009f44 <_getpid_r>:
 8009f44:	f7f7 bd32 	b.w	80019ac <_getpid>

08009f48 <_init>:
 8009f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4a:	bf00      	nop
 8009f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f4e:	bc08      	pop	{r3}
 8009f50:	469e      	mov	lr, r3
 8009f52:	4770      	bx	lr

08009f54 <_fini>:
 8009f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f56:	bf00      	nop
 8009f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f5a:	bc08      	pop	{r3}
 8009f5c:	469e      	mov	lr, r3
 8009f5e:	4770      	bx	lr
