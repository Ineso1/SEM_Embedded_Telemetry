
BNO055_stm32_f303re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ec8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800a068  0800a068  0001a068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6f8  0800a6f8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a6f8  0800a6f8  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a6f8  0800a6f8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6f8  0800a6f8  0001a6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6fc  0800a6fc  0001a6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000334  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000518  20000518  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012ac7  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b36  00000000  00000000  00032d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001078  00000000  00000000  00035858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cca  00000000  00000000  000368d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023795  00000000  00000000  0003759a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017c23  00000000  00000000  0005ad2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce6b6  00000000  00000000  00072952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005a60  00000000  00000000  00141008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00146a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a050 	.word	0x0800a050

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800a050 	.word	0x0800a050

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <bno055_set_i2c_handler>:
    .mag_id = 0,
    .gyr_id = 0,
    .bl_rev_id = 0
};

void bno055_set_i2c_handler(I2C_HandleTypeDef* hi2c){
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
    i2c_dev = hi2c;
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <bno055_set_i2c_handler+0x1c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000200 	.word	0x20000200

08000d24 <bno055_writeData>:

uint8_t bno055_writeData(uint8_t* txdata) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af02      	add	r7, sp, #8
 8000d2a:	6078      	str	r0, [r7, #4]
    uint8_t status;
    status = HAL_I2C_Master_Transmit(i2c_dev, BNO055_I2C_ADDR_LO << 1, txdata, sizeof(txdata), 10);
 8000d2c:	4b5a      	ldr	r3, [pc, #360]	; (8000e98 <bno055_writeData+0x174>)
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	230a      	movs	r3, #10
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2304      	movs	r3, #4
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	2150      	movs	r1, #80	; 0x50
 8000d3a:	f001 fd83 	bl	8002844 <HAL_I2C_Master_Transmit>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 8000d42:	7dfb      	ldrb	r3, [r7, #23]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d101      	bne.n	8000d4c <bno055_writeData+0x28>
        return 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e0a1      	b.n	8000e90 <bno055_writeData+0x16c>
    }

    if (status == HAL_ERROR) {
 8000d4c:	7dfb      	ldrb	r3, [r7, #23]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d103      	bne.n	8000d5a <bno055_writeData+0x36>
        printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000d52:	4852      	ldr	r0, [pc, #328]	; (8000e9c <bno055_writeData+0x178>)
 8000d54:	f005 fca2 	bl	800669c <puts>
 8000d58:	e012      	b.n	8000d80 <bno055_writeData+0x5c>
    } else if (status == HAL_TIMEOUT) {
 8000d5a:	7dfb      	ldrb	r3, [r7, #23]
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d103      	bne.n	8000d68 <bno055_writeData+0x44>
        printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000d60:	484f      	ldr	r0, [pc, #316]	; (8000ea0 <bno055_writeData+0x17c>)
 8000d62:	f005 fc9b 	bl	800669c <puts>
 8000d66:	e00b      	b.n	8000d80 <bno055_writeData+0x5c>
    } else if (status == HAL_BUSY) {
 8000d68:	7dfb      	ldrb	r3, [r7, #23]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d103      	bne.n	8000d76 <bno055_writeData+0x52>
        printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000d6e:	484d      	ldr	r0, [pc, #308]	; (8000ea4 <bno055_writeData+0x180>)
 8000d70:	f005 fc94 	bl	800669c <puts>
 8000d74:	e004      	b.n	8000d80 <bno055_writeData+0x5c>
    } else {
        printf("Unknown status data %d", status);
 8000d76:	7dfb      	ldrb	r3, [r7, #23]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	484b      	ldr	r0, [pc, #300]	; (8000ea8 <bno055_writeData+0x184>)
 8000d7c:	f005 fc28 	bl	80065d0 <iprintf>
    }

    uint32_t error = HAL_I2C_GetError(i2c_dev);
 8000d80:	4b45      	ldr	r3, [pc, #276]	; (8000e98 <bno055_writeData+0x174>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 ff55 	bl	8002c34 <HAL_I2C_GetError>
 8000d8a:	6138      	str	r0, [r7, #16]
    if (error == HAL_I2C_ERROR_NONE) {
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <bno055_writeData+0x72>
        return 1;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e07c      	b.n	8000e90 <bno055_writeData+0x16c>
    } else if (error == HAL_I2C_ERROR_BERR) {
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d103      	bne.n	8000da4 <bno055_writeData+0x80>
        printf("HAL_I2C_ERROR_BERR\r\n");
 8000d9c:	4843      	ldr	r0, [pc, #268]	; (8000eac <bno055_writeData+0x188>)
 8000d9e:	f005 fc7d 	bl	800669c <puts>
 8000da2:	e021      	b.n	8000de8 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_ARLO) {
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d103      	bne.n	8000db2 <bno055_writeData+0x8e>
        printf("HAL_I2C_ERROR_ARLO\r\n");
 8000daa:	4841      	ldr	r0, [pc, #260]	; (8000eb0 <bno055_writeData+0x18c>)
 8000dac:	f005 fc76 	bl	800669c <puts>
 8000db0:	e01a      	b.n	8000de8 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_AF) {
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d103      	bne.n	8000dc0 <bno055_writeData+0x9c>
        printf("HAL_I2C_ERROR_AF\r\n");
 8000db8:	483e      	ldr	r0, [pc, #248]	; (8000eb4 <bno055_writeData+0x190>)
 8000dba:	f005 fc6f 	bl	800669c <puts>
 8000dbe:	e013      	b.n	8000de8 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_OVR) {
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	2b08      	cmp	r3, #8
 8000dc4:	d103      	bne.n	8000dce <bno055_writeData+0xaa>
        printf("HAL_I2C_ERROR_OVR\r\n");
 8000dc6:	483c      	ldr	r0, [pc, #240]	; (8000eb8 <bno055_writeData+0x194>)
 8000dc8:	f005 fc68 	bl	800669c <puts>
 8000dcc:	e00c      	b.n	8000de8 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_DMA) {
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	2b10      	cmp	r3, #16
 8000dd2:	d103      	bne.n	8000ddc <bno055_writeData+0xb8>
        printf("HAL_I2C_ERROR_DMA\r\n");
 8000dd4:	4839      	ldr	r0, [pc, #228]	; (8000ebc <bno055_writeData+0x198>)
 8000dd6:	f005 fc61 	bl	800669c <puts>
 8000dda:	e005      	b.n	8000de8 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	2b20      	cmp	r3, #32
 8000de0:	d102      	bne.n	8000de8 <bno055_writeData+0xc4>
        printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000de2:	4837      	ldr	r0, [pc, #220]	; (8000ec0 <bno055_writeData+0x19c>)
 8000de4:	f005 fc5a 	bl	800669c <puts>
    }

    HAL_I2C_StateTypeDef state = HAL_I2C_GetState(i2c_dev);
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <bno055_writeData+0x174>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 ff13 	bl	8002c18 <HAL_I2C_GetState>
 8000df2:	4603      	mov	r3, r0
 8000df4:	73fb      	strb	r3, [r7, #15]
    if (state == HAL_I2C_STATE_RESET) {
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d103      	bne.n	8000e04 <bno055_writeData+0xe0>
        printf("HAL_I2C_STATE_RESET\r\n");
 8000dfc:	4831      	ldr	r0, [pc, #196]	; (8000ec4 <bno055_writeData+0x1a0>)
 8000dfe:	f005 fc4d 	bl	800669c <puts>
 8000e02:	e044      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_READY) {
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	2b20      	cmp	r3, #32
 8000e08:	d103      	bne.n	8000e12 <bno055_writeData+0xee>
        printf("HAL_I2C_STATE_RESET\r\n");
 8000e0a:	482e      	ldr	r0, [pc, #184]	; (8000ec4 <bno055_writeData+0x1a0>)
 8000e0c:	f005 fc46 	bl	800669c <puts>
 8000e10:	e03d      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY) {
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	2b24      	cmp	r3, #36	; 0x24
 8000e16:	d103      	bne.n	8000e20 <bno055_writeData+0xfc>
        printf("HAL_I2C_STATE_BUSY\r\n");
 8000e18:	482b      	ldr	r0, [pc, #172]	; (8000ec8 <bno055_writeData+0x1a4>)
 8000e1a:	f005 fc3f 	bl	800669c <puts>
 8000e1e:	e036      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b21      	cmp	r3, #33	; 0x21
 8000e24:	d103      	bne.n	8000e2e <bno055_writeData+0x10a>
        printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000e26:	4829      	ldr	r0, [pc, #164]	; (8000ecc <bno055_writeData+0x1a8>)
 8000e28:	f005 fc38 	bl	800669c <puts>
 8000e2c:	e02f      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	2b22      	cmp	r3, #34	; 0x22
 8000e32:	d103      	bne.n	8000e3c <bno055_writeData+0x118>
        printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000e34:	4826      	ldr	r0, [pc, #152]	; (8000ed0 <bno055_writeData+0x1ac>)
 8000e36:	f005 fc31 	bl	800669c <puts>
 8000e3a:	e028      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_LISTEN) {
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	2b28      	cmp	r3, #40	; 0x28
 8000e40:	d103      	bne.n	8000e4a <bno055_writeData+0x126>
        printf("HAL_I2C_STATE_LISTEN\r\n");
 8000e42:	4824      	ldr	r0, [pc, #144]	; (8000ed4 <bno055_writeData+0x1b0>)
 8000e44:	f005 fc2a 	bl	800669c <puts>
 8000e48:	e021      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	2b29      	cmp	r3, #41	; 0x29
 8000e4e:	d103      	bne.n	8000e58 <bno055_writeData+0x134>
        printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000e50:	4821      	ldr	r0, [pc, #132]	; (8000ed8 <bno055_writeData+0x1b4>)
 8000e52:	f005 fc23 	bl	800669c <puts>
 8000e56:	e01a      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8000e5c:	d103      	bne.n	8000e66 <bno055_writeData+0x142>
        printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000e5e:	481f      	ldr	r0, [pc, #124]	; (8000edc <bno055_writeData+0x1b8>)
 8000e60:	f005 fc1c 	bl	800669c <puts>
 8000e64:	e013      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_ABORT) {
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b60      	cmp	r3, #96	; 0x60
 8000e6a:	d103      	bne.n	8000e74 <bno055_writeData+0x150>
        printf("HAL_I2C_STATE_ABORT\r\n");
 8000e6c:	481c      	ldr	r0, [pc, #112]	; (8000ee0 <bno055_writeData+0x1bc>)
 8000e6e:	f005 fc15 	bl	800669c <puts>
 8000e72:	e00c      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	2ba0      	cmp	r3, #160	; 0xa0
 8000e78:	d103      	bne.n	8000e82 <bno055_writeData+0x15e>
        printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000e7a:	481a      	ldr	r0, [pc, #104]	; (8000ee4 <bno055_writeData+0x1c0>)
 8000e7c:	f005 fc0e 	bl	800669c <puts>
 8000e80:	e005      	b.n	8000e8e <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_ERROR) {
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	2be0      	cmp	r3, #224	; 0xe0
 8000e86:	d102      	bne.n	8000e8e <bno055_writeData+0x16a>
        printf("HAL_I2C_STATE_ERROR\r\n");
 8000e88:	4817      	ldr	r0, [pc, #92]	; (8000ee8 <bno055_writeData+0x1c4>)
 8000e8a:	f005 fc07 	bl	800669c <puts>
    }
    return 1;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000200 	.word	0x20000200
 8000e9c:	0800a068 	.word	0x0800a068
 8000ea0:	0800a08c 	.word	0x0800a08c
 8000ea4:	0800a0b4 	.word	0x0800a0b4
 8000ea8:	0800a0d8 	.word	0x0800a0d8
 8000eac:	0800a0f0 	.word	0x0800a0f0
 8000eb0:	0800a104 	.word	0x0800a104
 8000eb4:	0800a118 	.word	0x0800a118
 8000eb8:	0800a12c 	.word	0x0800a12c
 8000ebc:	0800a140 	.word	0x0800a140
 8000ec0:	0800a154 	.word	0x0800a154
 8000ec4:	0800a16c 	.word	0x0800a16c
 8000ec8:	0800a184 	.word	0x0800a184
 8000ecc:	0800a198 	.word	0x0800a198
 8000ed0:	0800a1b0 	.word	0x0800a1b0
 8000ed4:	0800a1c8 	.word	0x0800a1c8
 8000ed8:	0800a1e0 	.word	0x0800a1e0
 8000edc:	0800a200 	.word	0x0800a200
 8000ee0:	0800a220 	.word	0x0800a220
 8000ee4:	0800a238 	.word	0x0800a238
 8000ee8:	0800a250 	.word	0x0800a250

08000eec <bno055_readData>:


uint8_t bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
	status = HAL_I2C_Master_Transmit(i2c_dev, BNO055_I2C_ADDR_LO << 1, &reg, 1, 10);
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <bno055_readData+0x68>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	1dfa      	adds	r2, r7, #7
 8000f02:	230a      	movs	r3, #10
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2301      	movs	r3, #1
 8000f08:	2150      	movs	r1, #80	; 0x50
 8000f0a:	f001 fc9b 	bl	8002844 <HAL_I2C_Master_Transmit>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <bno055_readData+0x30>
		return 1;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e017      	b.n	8000f4c <bno055_readData+0x60>
	}
    bno055_delay(10);
 8000f1c:	200a      	movs	r0, #10
 8000f1e:	f000 f81b 	bl	8000f58 <bno055_delay>
    status = HAL_I2C_Master_Receive(i2c_dev, BNO055_I2C_ADDR_LO << 1, data, len, 10);
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <bno055_readData+0x68>)
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	220a      	movs	r2, #10
 8000f2c:	9200      	str	r2, [sp, #0]
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	2150      	movs	r1, #80	; 0x50
 8000f32:	f001 fd7b 	bl	8002a2c <HAL_I2C_Master_Receive>
 8000f36:	4603      	mov	r3, r0
 8000f38:	73fb      	strb	r3, [r7, #15]
    bno055_delay(10);
 8000f3a:	200a      	movs	r0, #10
 8000f3c:	f000 f80c 	bl	8000f58 <bno055_delay>
    if (status == HAL_OK) {
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <bno055_readData+0x5e>
		return 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <bno055_readData+0x60>
	}
	else{
		return 1;
 8000f4a:	2301      	movs	r3, #1
	}
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000200 	.word	0x20000200

08000f58 <bno055_delay>:


void bno055_delay(uint32_t ms){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 ffc7 	bl	8001ef4 <HAL_Delay>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <bno055_init>:

BNO055_FUNC_RETURN bno055_init(bno055_conf_t * bno055_conf, bno055_verification_t * bno055_verification){
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b090      	sub	sp, #64	; 0x40
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
    BNO055_FUNC_RETURN ret = ERROR_DEFAULT;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t conf_page0 [2] = {BNO055_PAGE_ID, 0x00};
 8000f7e:	2307      	movs	r3, #7
 8000f80:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uint8_t op_mode_conf [2] = {BNO055_OPR_MODE, OPERATION_MODE_CONFIG};
 8000f82:	233d      	movs	r3, #61	; 0x3d
 8000f84:	873b      	strh	r3, [r7, #56]	; 0x38

    ret += bno055_writeData(conf_page0);
 8000f86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff feca 	bl	8000d24 <bno055_writeData>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f98:	4413      	add	r3, r2
 8000f9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 8000f9e:	200a      	movs	r0, #10
 8000fa0:	f7ff ffda 	bl	8000f58 <bno055_delay>

    ret +=bno055_writeData(op_mode_conf);
 8000fa4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff febb 	bl	8000d24 <bno055_writeData>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000fb6:	4413      	add	r3, r2
 8000fb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(550);
 8000fbc:	f240 2026 	movw	r0, #550	; 0x226
 8000fc0:	f7ff ffca 	bl	8000f58 <bno055_delay>

	uint8_t conf_page1 [2] = {BNO055_PAGE_ID, 0x01};
 8000fc4:	f240 1307 	movw	r3, #263	; 0x107
 8000fc8:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t acc_conf [2] = {BNO055_ACC_CONFIG, bno055_conf->acc_operation_mode << 5 | bno055_conf->acc_bandwidth << 2 | bno055_conf->acc_g_range };
 8000fca:	2308      	movs	r3, #8
 8000fcc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	799b      	ldrb	r3, [r3, #6]
 8000fd4:	015b      	lsls	r3, r3, #5
 8000fd6:	b25a      	sxtb	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	795b      	ldrb	r3, [r3, #5]
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b25a      	sxtb	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	791b      	ldrb	r3, [r3, #4]
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t gyr_conf0 [2] = {BNO055_GYRO_CONFIG_0, bno055_conf->gyr_bandwidth << 3 | bno055_conf->gyr_range };
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7a1b      	ldrb	r3, [r3, #8]
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	b25a      	sxtb	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	79db      	ldrb	r3, [r3, #7]
 8001006:	b25b      	sxtb	r3, r3
 8001008:	4313      	orrs	r3, r2
 800100a:	b25b      	sxtb	r3, r3
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t gyr_conf1 [2] = {BNO055_GYRO_CONFIG_1, bno055_conf->gyr_op_mode };
 8001012:	230b      	movs	r3, #11
 8001014:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7a5b      	ldrb	r3, [r3, #9]
 800101c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t mag_conf [2] = {BNO055_MAG_CONFIG, bno055_conf->mag_pwr_mode << 5 | bno055_conf->mag_op_mode << 3 | bno055_conf->mag_data_rate };
 8001020:	2309      	movs	r3, #9
 8001022:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7b1b      	ldrb	r3, [r3, #12]
 800102a:	015b      	lsls	r3, r3, #5
 800102c:	b25a      	sxtb	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7adb      	ldrb	r3, [r3, #11]
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	b25b      	sxtb	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b25a      	sxtb	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7a9b      	ldrb	r3, [r3, #10]
 800103e:	b25b      	sxtb	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b25b      	sxtb	r3, r3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	ret += bno055_writeData(conf_page1);
 800104a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fe68 	bl	8000d24 <bno055_writeData>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800105c:	4413      	add	r3, r2
 800105e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 8001062:	200a      	movs	r0, #10
 8001064:	f7ff ff78 	bl	8000f58 <bno055_delay>


	ret += bno055_writeData(acc_conf);
 8001068:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fe59 	bl	8000d24 <bno055_writeData>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800107a:	4413      	add	r3, r2
 800107c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 8001080:	200a      	movs	r0, #10
 8001082:	f7ff ff69 	bl	8000f58 <bno055_delay>

	ret += bno055_writeData(gyr_conf0);
 8001086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fe4a 	bl	8000d24 <bno055_writeData>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001098:	4413      	add	r3, r2
 800109a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 800109e:	200a      	movs	r0, #10
 80010a0:	f7ff ff5a 	bl	8000f58 <bno055_delay>

	ret += bno055_writeData(gyr_conf1);
 80010a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fe3b 	bl	8000d24 <bno055_writeData>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010b6:	4413      	add	r3, r2
 80010b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 80010bc:	200a      	movs	r0, #10
 80010be:	f7ff ff4b 	bl	8000f58 <bno055_delay>

	ret += bno055_writeData(mag_conf);
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fe2c 	bl	8000d24 <bno055_writeData>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010d4:	4413      	add	r3, r2
 80010d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 80010da:	200a      	movs	r0, #10
 80010dc:	f7ff ff3c 	bl	8000f58 <bno055_delay>


    uint8_t pwr_mode [2] = {BNO055_PWR_MODE, bno055_conf->pwr_mode};
 80010e0:	233e      	movs	r3, #62	; 0x3e
 80010e2:	f887 3020 	strb.w	r3, [r7, #32]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    uint8_t op_mode [2] = {BNO055_OPR_MODE, bno055_conf->op_mode};
 80010ee:	233d      	movs	r3, #61	; 0x3d
 80010f0:	773b      	strb	r3, [r7, #28]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	785b      	ldrb	r3, [r3, #1]
 80010f6:	777b      	strb	r3, [r7, #29]
    uint8_t axis_remap_conf [2] = {BNO055_AXIS_MAP_CONFIG, bno055_conf->axis_remap_conf};
 80010f8:	2341      	movs	r3, #65	; 0x41
 80010fa:	763b      	strb	r3, [r7, #24]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	789b      	ldrb	r3, [r3, #2]
 8001100:	767b      	strb	r3, [r7, #25]
    uint8_t axis_remap_sign [2] = {BNO055_AXIS_MAP_SIGN, bno055_conf->axis_remap_sign};
 8001102:	2342      	movs	r3, #66	; 0x42
 8001104:	753b      	strb	r3, [r7, #20]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	78db      	ldrb	r3, [r3, #3]
 800110a:	757b      	strb	r3, [r7, #21]

    uint8_t unit_sel [2] = {BNO055_UNIT_SEL, bno055_conf->unit_sel};
 800110c:	233b      	movs	r3, #59	; 0x3b
 800110e:	743b      	strb	r3, [r7, #16]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7b5b      	ldrb	r3, [r3, #13]
 8001114:	747b      	strb	r3, [r7, #17]

    ret += bno055_writeData(conf_page0);
 8001116:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fe02 	bl	8000d24 <bno055_writeData>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001128:	4413      	add	r3, r2
 800112a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 800112e:	200a      	movs	r0, #10
 8001130:	f7ff ff12 	bl	8000f58 <bno055_delay>

	ret += bno055_writeData(pwr_mode);
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fdf3 	bl	8000d24 <bno055_writeData>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001146:	4413      	add	r3, r2
 8001148:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 800114c:	200a      	movs	r0, #10
 800114e:	f7ff ff03 	bl	8000f58 <bno055_delay>

    ret += bno055_writeData(axis_remap_conf);
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fde4 	bl	8000d24 <bno055_writeData>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001164:	4413      	add	r3, r2
 8001166:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 800116a:	200a      	movs	r0, #10
 800116c:	f7ff fef4 	bl	8000f58 <bno055_delay>

    ret += bno055_writeData(axis_remap_sign);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fdd5 	bl	8000d24 <bno055_writeData>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001182:	4413      	add	r3, r2
 8001184:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 8001188:	200a      	movs	r0, #10
 800118a:	f7ff fee5 	bl	8000f58 <bno055_delay>

    ret += bno055_writeData(unit_sel);
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fdc6 	bl	8000d24 <bno055_writeData>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011a0:	4413      	add	r3, r2
 80011a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 80011a6:	200a      	movs	r0, #10
 80011a8:	f7ff fed6 	bl	8000f58 <bno055_delay>

    ret += bno055_writeData(op_mode);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fdb7 	bl	8000d24 <bno055_writeData>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011be:	4413      	add	r3, r2
 80011c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 80011c4:	200a      	movs	r0, #10
 80011c6:	f7ff fec7 	bl	8000f58 <bno055_delay>

    uint8_t sw_id[2] = {0, 0};
 80011ca:	2300      	movs	r3, #0
 80011cc:	81bb      	strh	r3, [r7, #12]
    uint8_t data = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	72fb      	strb	r3, [r7, #11]

    ret += bno055_readData(BNO055_CHIP_ID, &data, 1);
 80011d2:	f107 030b 	add.w	r3, r7, #11
 80011d6:	2201      	movs	r2, #1
 80011d8:	4619      	mov	r1, r3
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fe86 	bl	8000eec <bno055_readData>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011e8:	4413      	add	r3, r2
 80011ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->chip_id = data;
 80011ee:	7afa      	ldrb	r2, [r7, #11]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	701a      	strb	r2, [r3, #0]
    bno055_delay(10);
 80011f4:	200a      	movs	r0, #10
 80011f6:	f7ff feaf 	bl	8000f58 <bno055_delay>

    ret += bno055_readData(BNO055_ACC_ID, &data, 1);
 80011fa:	f107 030b 	add.w	r3, r7, #11
 80011fe:	2201      	movs	r2, #1
 8001200:	4619      	mov	r1, r3
 8001202:	2001      	movs	r0, #1
 8001204:	f7ff fe72 	bl	8000eec <bno055_readData>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001210:	4413      	add	r3, r2
 8001212:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->acc_id = data;
 8001216:	7afa      	ldrb	r2, [r7, #11]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	715a      	strb	r2, [r3, #5]
    bno055_delay(10);
 800121c:	200a      	movs	r0, #10
 800121e:	f7ff fe9b 	bl	8000f58 <bno055_delay>

    ret += bno055_readData(BNO055_MAG_ID, &data, 1);
 8001222:	f107 030b 	add.w	r3, r7, #11
 8001226:	2201      	movs	r2, #1
 8001228:	4619      	mov	r1, r3
 800122a:	2002      	movs	r0, #2
 800122c:	f7ff fe5e 	bl	8000eec <bno055_readData>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001238:	4413      	add	r3, r2
 800123a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->mag_id = data;
 800123e:	7afa      	ldrb	r2, [r7, #11]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	719a      	strb	r2, [r3, #6]
    bno055_delay(10);
 8001244:	200a      	movs	r0, #10
 8001246:	f7ff fe87 	bl	8000f58 <bno055_delay>

    ret += bno055_readData(BNO055_GYR_ID, &data, 1);
 800124a:	f107 030b 	add.w	r3, r7, #11
 800124e:	2201      	movs	r2, #1
 8001250:	4619      	mov	r1, r3
 8001252:	2003      	movs	r0, #3
 8001254:	f7ff fe4a 	bl	8000eec <bno055_readData>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001260:	4413      	add	r3, r2
 8001262:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->gyr_id = data;
 8001266:	7afa      	ldrb	r2, [r7, #11]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	71da      	strb	r2, [r3, #7]
    bno055_delay(10);
 800126c:	200a      	movs	r0, #10
 800126e:	f7ff fe73 	bl	8000f58 <bno055_delay>

    ret += bno055_readData(BNO055_BL_REV_ID, &data, 1);
 8001272:	f107 030b 	add.w	r3, r7, #11
 8001276:	2201      	movs	r2, #1
 8001278:	4619      	mov	r1, r3
 800127a:	2006      	movs	r0, #6
 800127c:	f7ff fe36 	bl	8000eec <bno055_readData>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001288:	4413      	add	r3, r2
 800128a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->bl_rev_id = data;
 800128e:	7afa      	ldrb	r2, [r7, #11]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	721a      	strb	r2, [r3, #8]
    bno055_delay(10);
 8001294:	200a      	movs	r0, #10
 8001296:	f7ff fe5f 	bl	8000f58 <bno055_delay>

    ret += bno055_readData(BNO055_SW_REV_ID_LSB, sw_id, 2);
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	2202      	movs	r2, #2
 80012a0:	4619      	mov	r1, r3
 80012a2:	2004      	movs	r0, #4
 80012a4:	f7ff fe22 	bl	8000eec <bno055_readData>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80012b0:	4413      	add	r3, r2
 80012b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->sw_rev_id = (uint16_t)((sw_id[1] << 8)|(sw_id[0]));
 80012b6:	7b7b      	ldrb	r3, [r7, #13]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	7b3b      	ldrb	r3, [r7, #12]
 80012be:	b21b      	sxth	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	805a      	strh	r2, [r3, #2]
    bno055_delay(10);
 80012ca:	200a      	movs	r0, #10
 80012cc:	f7ff fe44 	bl	8000f58 <bno055_delay>

    ret += bno055_readData(BNO055_PAGE_ID, &data, 1);
 80012d0:	f107 030b 	add.w	r3, r7, #11
 80012d4:	2201      	movs	r2, #1
 80012d6:	4619      	mov	r1, r3
 80012d8:	2007      	movs	r0, #7
 80012da:	f7ff fe07 	bl	8000eec <bno055_readData>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80012e6:	4413      	add	r3, r2
 80012e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->page_id = data;
 80012ec:	7afa      	ldrb	r2, [r7, #11]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	711a      	strb	r2, [r3, #4]
    bno055_delay(100);
 80012f2:	2064      	movs	r0, #100	; 0x64
 80012f4:	f7ff fe30 	bl	8000f58 <bno055_delay>

    return ret;
 80012f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3740      	adds	r7, #64	; 0x40
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <bno055_read_euler_hrp>:
    uint8_t data[2] = {0,0};
    ret += bno055_readData(BNO055_EUL_PITCH_LSB, data, 2);
    *euler_p = (uint16_t)((data[1] << 8)|(data[0]));
    return ret;
}
BNO055_FUNC_RETURN bno055_read_euler_hrp(bno055_euler_t* euler_hrp){
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    BNO055_FUNC_RETURN ret = ERROR_DEFAULT;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]
    uint8_t data[6] = {0,0,0,0,0,0};
 8001310:	4a22      	ldr	r2, [pc, #136]	; (800139c <bno055_read_euler_hrp+0x98>)
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	e892 0003 	ldmia.w	r2, {r0, r1}
 800131a:	6018      	str	r0, [r3, #0]
 800131c:	3304      	adds	r3, #4
 800131e:	8019      	strh	r1, [r3, #0]
    ret += bno055_readData(BNO055_EUL_HEADING_LSB, data, 6);
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	2206      	movs	r2, #6
 8001326:	4619      	mov	r1, r3
 8001328:	201a      	movs	r0, #26
 800132a:	f7ff fddf 	bl	8000eec <bno055_readData>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	4413      	add	r3, r2
 8001336:	73fb      	strb	r3, [r7, #15]
    euler_hrp->h = (float)(uint16_t)((data[1] << 8)|(data[0]));
 8001338:	7a7b      	ldrb	r3, [r7, #9]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	b21a      	sxth	r2, r3
 800133e:	7a3b      	ldrb	r3, [r7, #8]
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b21b      	sxth	r3, r3
 8001346:	b29b      	uxth	r3, r3
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	edc3 7a00 	vstr	s15, [r3]
    euler_hrp->r = (float)(uint16_t)((data[3] << 8)|(data[2]));
 8001356:	7afb      	ldrb	r3, [r7, #11]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	7abb      	ldrb	r3, [r7, #10]
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b21b      	sxth	r3, r3
 8001364:	b29b      	uxth	r3, r3
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edc3 7a01 	vstr	s15, [r3, #4]
    euler_hrp->p = (float)(uint16_t)((data[5] << 8)|(data[4]));
 8001374:	7b7b      	ldrb	r3, [r7, #13]
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	b21a      	sxth	r2, r3
 800137a:	7b3b      	ldrb	r3, [r7, #12]
 800137c:	b21b      	sxth	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b21b      	sxth	r3, r3
 8001382:	b29b      	uxth	r3, r3
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	edc3 7a02 	vstr	s15, [r3, #8]
    return ret;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	0800a268 	.word	0x0800a268

080013a0 <bno055_read_linear_acc_xyz>:
    uint8_t data[2] = {0,0};
    ret += bno055_readData(BNO055_LIA_DATA_Z_LSB, data, 2);
    *linear_acc_z = (uint16_t)((data[1] << 8)|(data[0]));
    return ret;
}
BNO055_FUNC_RETURN bno055_read_linear_acc_xyz(bno055_linear_acc_t* linear_acc_xyz){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
    BNO055_FUNC_RETURN ret = ERROR_DEFAULT;
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
    uint8_t data[6] = {0,0,0,0,0,0};
 80013ac:	4a22      	ldr	r2, [pc, #136]	; (8001438 <bno055_read_linear_acc_xyz+0x98>)
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013b6:	6018      	str	r0, [r3, #0]
 80013b8:	3304      	adds	r3, #4
 80013ba:	8019      	strh	r1, [r3, #0]
    ret += bno055_readData(BNO055_EUL_HEADING_LSB, data, 6);
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	2206      	movs	r2, #6
 80013c2:	4619      	mov	r1, r3
 80013c4:	201a      	movs	r0, #26
 80013c6:	f7ff fd91 	bl	8000eec <bno055_readData>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	4413      	add	r3, r2
 80013d2:	73fb      	strb	r3, [r7, #15]
    linear_acc_xyz->x = (float)(uint16_t)((data[1] << 8)|(data[0]));
 80013d4:	7a7b      	ldrb	r3, [r7, #9]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	b21a      	sxth	r2, r3
 80013da:	7a3b      	ldrb	r3, [r7, #8]
 80013dc:	b21b      	sxth	r3, r3
 80013de:	4313      	orrs	r3, r2
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	edc3 7a00 	vstr	s15, [r3]
    linear_acc_xyz->y = (float)(uint16_t)((data[3] << 8)|(data[2]));
 80013f2:	7afb      	ldrb	r3, [r7, #11]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	7abb      	ldrb	r3, [r7, #10]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b21b      	sxth	r3, r3
 8001400:	b29b      	uxth	r3, r3
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	edc3 7a01 	vstr	s15, [r3, #4]
    linear_acc_xyz->z = (float)(uint16_t)((data[5] << 8)|(data[4]));
 8001410:	7b7b      	ldrb	r3, [r7, #13]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	b21a      	sxth	r2, r3
 8001416:	7b3b      	ldrb	r3, [r7, #12]
 8001418:	b21b      	sxth	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b21b      	sxth	r3, r3
 800141e:	b29b      	uxth	r3, r3
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	edc3 7a02 	vstr	s15, [r3, #8]
    return ret;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	0800a268 	.word	0x0800a268

0800143c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_DMA_Init+0x48>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <MX_DMA_Init+0x48>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6153      	str	r3, [r2, #20]
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <MX_DMA_Init+0x48>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	2010      	movs	r0, #16
 8001460:	f000 fe47 	bl	80020f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001464:	2010      	movs	r0, #16
 8001466:	f000 fe60 	bl	800212a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2011      	movs	r0, #17
 8001470:	f000 fe3f 	bl	80020f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001474:	2011      	movs	r0, #17
 8001476:	f000 fe58 	bl	800212a <HAL_NVIC_EnableIRQ>

}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000

08001488 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149e:	4b2b      	ldr	r3, [pc, #172]	; (800154c <MX_GPIO_Init+0xc4>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	4a2a      	ldr	r2, [pc, #168]	; (800154c <MX_GPIO_Init+0xc4>)
 80014a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014a8:	6153      	str	r3, [r2, #20]
 80014aa:	4b28      	ldr	r3, [pc, #160]	; (800154c <MX_GPIO_Init+0xc4>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <MX_GPIO_Init+0xc4>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	4a24      	ldr	r2, [pc, #144]	; (800154c <MX_GPIO_Init+0xc4>)
 80014bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014c0:	6153      	str	r3, [r2, #20]
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <MX_GPIO_Init+0xc4>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <MX_GPIO_Init+0xc4>)
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	4a1e      	ldr	r2, [pc, #120]	; (800154c <MX_GPIO_Init+0xc4>)
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	6153      	str	r3, [r2, #20]
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <MX_GPIO_Init+0xc4>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b19      	ldr	r3, [pc, #100]	; (800154c <MX_GPIO_Init+0xc4>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	4a18      	ldr	r2, [pc, #96]	; (800154c <MX_GPIO_Init+0xc4>)
 80014ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f0:	6153      	str	r3, [r2, #20]
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <MX_GPIO_Init+0xc4>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2120      	movs	r1, #32
 8001502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001506:	f001 f8db 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800150a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001510:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	480b      	ldr	r0, [pc, #44]	; (8001550 <MX_GPIO_Init+0xc8>)
 8001522:	f000 ff43 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001526:	2320      	movs	r3, #32
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001540:	f000 ff34 	bl	80023ac <HAL_GPIO_Init>

}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	; 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000
 8001550:	48000800 	.word	0x48000800

08001554 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_I2C1_Init+0x74>)
 800155a:	4a1c      	ldr	r2, [pc, #112]	; (80015cc <MX_I2C1_Init+0x78>)
 800155c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001560:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <MX_I2C1_Init+0x7c>)
 8001562:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <MX_I2C1_Init+0x74>)
 800156c:	2201      	movs	r2, #1
 800156e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_I2C1_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_I2C1_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800158e:	480e      	ldr	r0, [pc, #56]	; (80015c8 <MX_I2C1_Init+0x74>)
 8001590:	f001 f8c8 	bl	8002724 <HAL_I2C_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800159a:	f000 fa23 	bl	80019e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800159e:	2100      	movs	r1, #0
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <MX_I2C1_Init+0x74>)
 80015a2:	f001 fde5 	bl	8003170 <HAL_I2CEx_ConfigAnalogFilter>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015ac:	f000 fa1a 	bl	80019e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015b0:	2100      	movs	r1, #0
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_I2C1_Init+0x74>)
 80015b4:	f001 fe27 	bl	8003206 <HAL_I2CEx_ConfigDigitalFilter>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015be:	f000 fa11 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000210 	.word	0x20000210
 80015cc:	40005400 	.word	0x40005400
 80015d0:	2000090e 	.word	0x2000090e

080015d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a4c      	ldr	r2, [pc, #304]	; (8001724 <HAL_I2C_MspInit+0x150>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	f040 8092 	bne.w	800171c <HAL_I2C_MspInit+0x148>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	4b4b      	ldr	r3, [pc, #300]	; (8001728 <HAL_I2C_MspInit+0x154>)
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_I2C_MspInit+0x154>)
 80015fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001602:	6153      	str	r3, [r2, #20]
 8001604:	4b48      	ldr	r3, [pc, #288]	; (8001728 <HAL_I2C_MspInit+0x154>)
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001610:	4b45      	ldr	r3, [pc, #276]	; (8001728 <HAL_I2C_MspInit+0x154>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	4a44      	ldr	r2, [pc, #272]	; (8001728 <HAL_I2C_MspInit+0x154>)
 8001616:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161a:	6153      	str	r3, [r2, #20]
 800161c:	4b42      	ldr	r3, [pc, #264]	; (8001728 <HAL_I2C_MspInit+0x154>)
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800162c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162e:	2312      	movs	r3, #18
 8001630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001632:	2301      	movs	r3, #1
 8001634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800163a:	2304      	movs	r3, #4
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001648:	f000 feb0 	bl	80023ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001650:	2312      	movs	r3, #18
 8001652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001654:	2301      	movs	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800165c:	2304      	movs	r3, #4
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4831      	ldr	r0, [pc, #196]	; (800172c <HAL_I2C_MspInit+0x158>)
 8001668:	f000 fea0 	bl	80023ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800166c:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <HAL_I2C_MspInit+0x154>)
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	4a2d      	ldr	r2, [pc, #180]	; (8001728 <HAL_I2C_MspInit+0x154>)
 8001672:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001676:	61d3      	str	r3, [r2, #28]
 8001678:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <HAL_I2C_MspInit+0x154>)
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001684:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <HAL_I2C_MspInit+0x15c>)
 8001686:	4a2b      	ldr	r2, [pc, #172]	; (8001734 <HAL_I2C_MspInit+0x160>)
 8001688:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800168a:	4b29      	ldr	r3, [pc, #164]	; (8001730 <HAL_I2C_MspInit+0x15c>)
 800168c:	2200      	movs	r2, #0
 800168e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <HAL_I2C_MspInit+0x15c>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001696:	4b26      	ldr	r3, [pc, #152]	; (8001730 <HAL_I2C_MspInit+0x15c>)
 8001698:	2280      	movs	r2, #128	; 0x80
 800169a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <HAL_I2C_MspInit+0x15c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a2:	4b23      	ldr	r3, [pc, #140]	; (8001730 <HAL_I2C_MspInit+0x15c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80016a8:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_I2C_MspInit+0x15c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <HAL_I2C_MspInit+0x15c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80016b4:	481e      	ldr	r0, [pc, #120]	; (8001730 <HAL_I2C_MspInit+0x15c>)
 80016b6:	f000 fd52 	bl	800215e <HAL_DMA_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 80016c0:	f000 f990 	bl	80019e4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a1a      	ldr	r2, [pc, #104]	; (8001730 <HAL_I2C_MspInit+0x15c>)
 80016c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80016ca:	4a19      	ldr	r2, [pc, #100]	; (8001730 <HAL_I2C_MspInit+0x15c>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80016d0:	4b19      	ldr	r3, [pc, #100]	; (8001738 <HAL_I2C_MspInit+0x164>)
 80016d2:	4a1a      	ldr	r2, [pc, #104]	; (800173c <HAL_I2C_MspInit+0x168>)
 80016d4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_I2C_MspInit+0x164>)
 80016d8:	2210      	movs	r2, #16
 80016da:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <HAL_I2C_MspInit+0x164>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_I2C_MspInit+0x164>)
 80016e4:	2280      	movs	r2, #128	; 0x80
 80016e6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <HAL_I2C_MspInit+0x164>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_I2C_MspInit+0x164>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80016f4:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_I2C_MspInit+0x164>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_I2C_MspInit+0x164>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001700:	480d      	ldr	r0, [pc, #52]	; (8001738 <HAL_I2C_MspInit+0x164>)
 8001702:	f000 fd2c 	bl	800215e <HAL_DMA_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_I2C_MspInit+0x13c>
    {
      Error_Handler();
 800170c:	f000 f96a 	bl	80019e4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <HAL_I2C_MspInit+0x164>)
 8001714:	639a      	str	r2, [r3, #56]	; 0x38
 8001716:	4a08      	ldr	r2, [pc, #32]	; (8001738 <HAL_I2C_MspInit+0x164>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800171c:	bf00      	nop
 800171e:	3728      	adds	r7, #40	; 0x28
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40005400 	.word	0x40005400
 8001728:	40021000 	.word	0x40021000
 800172c:	48000400 	.word	0x48000400
 8001730:	20000264 	.word	0x20000264
 8001734:	40020080 	.word	0x40020080
 8001738:	200002a8 	.word	0x200002a8
 800173c:	4002006c 	.word	0x4002006c

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b0b8      	sub	sp, #224	; 0xe0
 8001744:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001746:	f000 fb6f 	bl	8001e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174a:	f000 f8d5 	bl	80018f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174e:	f7ff fe9b 	bl	8001488 <MX_GPIO_Init>
  MX_DMA_Init();
 8001752:	f7ff fe73 	bl	800143c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001756:	f000 facb 	bl	8001cf0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800175a:	f7ff fefb 	bl	8001554 <MX_I2C1_Init>
  MX_TIM17_Init();
 800175e:	f000 fa81 	bl	8001c64 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  bno055_set_i2c_handler(&hi2c1);
 8001762:	485d      	ldr	r0, [pc, #372]	; (80018d8 <main+0x198>)
 8001764:	f7ff face 	bl	8000d04 <bno055_set_i2c_handler>
  /* USER CODE END 2 */
  // Initialize BNO055 configuration
  ret = bno055_init(&default_bno055_config, &default_bno055_verification);
 8001768:	495c      	ldr	r1, [pc, #368]	; (80018dc <main+0x19c>)
 800176a:	485d      	ldr	r0, [pc, #372]	; (80018e0 <main+0x1a0>)
 800176c:	f7ff fbff 	bl	8000f6e <bno055_init>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	4b5b      	ldr	r3, [pc, #364]	; (80018e4 <main+0x1a4>)
 8001776:	701a      	strb	r2, [r3, #0]
  bno055_euler_t euler_hrp;
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8001778:	2064      	movs	r0, #100	; 0x64
 800177a:	f000 fbbb 	bl	8001ef4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800177e:	2120      	movs	r1, #32
 8001780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001784:	f000 ffb4 	bl	80026f0 <HAL_GPIO_TogglePin>
	  bno055_read_euler_hrp(&euler_hrp);
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fdba 	bl	8001304 <bno055_read_euler_hrp>
	  bno055_read_linear_acc_xyz(&acc_xyz);
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fe03 	bl	80013a0 <bno055_read_linear_acc_xyz>
	  f_gyro_x = (int16_t)gyro_x / 16.0;
	  f_gyro_y = (int16_t)gyro_y / 16.0;
	  f_gyro_z = (int16_t)gyro_z / 16.0;
	   */

	  f_gyro_x = (int16_t)euler_hrp.h / 16.0;
 800179a:	edd7 7a01 	vldr	s15, [r7, #4]
 800179e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a2:	ee17 3a90 	vmov	r3, s15
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fec3 	bl	8000534 <__aeabi_i2d>
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	4b4d      	ldr	r3, [pc, #308]	; (80018e8 <main+0x1a8>)
 80017b4:	f7ff f852 	bl	800085c <__aeabi_ddiv>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	  f_gyro_y = (int16_t)euler_hrp.r / 16.0;
 80017c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c8:	ee17 3a90 	vmov	r3, s15
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe feb0 	bl	8000534 <__aeabi_i2d>
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	4b43      	ldr	r3, [pc, #268]	; (80018e8 <main+0x1a8>)
 80017da:	f7ff f83f 	bl	800085c <__aeabi_ddiv>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	  f_gyro_z = (int16_t)euler_hrp.p / 16.0;
 80017e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ee:	ee17 3a90 	vmov	r3, s15
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fe9d 	bl	8000534 <__aeabi_i2d>
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <main+0x1a8>)
 8001800:	f7ff f82c 	bl	800085c <__aeabi_ddiv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98

	  f_acc_x = (int16_t)acc_xyz.x / 100.0;
 800180c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001814:	ee17 3a90 	vmov	r3, s15
 8001818:	b21b      	sxth	r3, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe8a 	bl	8000534 <__aeabi_i2d>
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4b31      	ldr	r3, [pc, #196]	; (80018ec <main+0x1ac>)
 8001826:	f7ff f819 	bl	800085c <__aeabi_ddiv>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	  f_acc_y = (int16_t)acc_xyz.y / 100.0;
 8001832:	edd7 7a05 	vldr	s15, [r7, #20]
 8001836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800183a:	ee17 3a90 	vmov	r3, s15
 800183e:	b21b      	sxth	r3, r3
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe77 	bl	8000534 <__aeabi_i2d>
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	4b28      	ldr	r3, [pc, #160]	; (80018ec <main+0x1ac>)
 800184c:	f7ff f806 	bl	800085c <__aeabi_ddiv>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	  f_acc_z = (int16_t)acc_xyz.z / 100.0;
 8001858:	edd7 7a06 	vldr	s15, [r7, #24]
 800185c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001860:	ee17 3a90 	vmov	r3, s15
 8001864:	b21b      	sxth	r3, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe64 	bl	8000534 <__aeabi_i2d>
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <main+0x1ac>)
 8001872:	f7fe fff3 	bl	800085c <__aeabi_ddiv>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

	  //snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f\r\n", f_gyro_x, f_gyro_y, f_gyro_z);
	  //snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f\r\n", f_acc_x, f_acc_y, f_acc_z);
	  snprintf(buffer, sizeof(buffer), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\r\n", f_gyro_x, f_gyro_y, f_gyro_z, f_acc_x, f_acc_y, f_acc_z);
 800187e:	f107 001c 	add.w	r0, r7, #28
 8001882:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001886:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800188a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800188e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001892:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001896:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800189a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800189e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018a2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80018a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018aa:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80018ae:	e9cd 2300 	strd	r2, r3, [sp]
 80018b2:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <main+0x1b0>)
 80018b4:	2164      	movs	r1, #100	; 0x64
 80018b6:	f004 fef9 	bl	80066ac <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fcde 	bl	8000280 <strlen>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f107 011c 	add.w	r1, r7, #28
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295
 80018d0:	4808      	ldr	r0, [pc, #32]	; (80018f4 <main+0x1b4>)
 80018d2:	f003 fad1 	bl	8004e78 <HAL_UART_Transmit>
	  HAL_Delay(100);
 80018d6:	e74f      	b.n	8001778 <main+0x38>
 80018d8:	20000210 	.word	0x20000210
 80018dc:	20000204 	.word	0x20000204
 80018e0:	20000000 	.word	0x20000000
 80018e4:	200002ec 	.word	0x200002ec
 80018e8:	40300000 	.word	0x40300000
 80018ec:	40590000 	.word	0x40590000
 80018f0:	0800a278 	.word	0x0800a278
 80018f4:	20000340 	.word	0x20000340

080018f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b0a6      	sub	sp, #152	; 0x98
 80018fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001902:	2228      	movs	r2, #40	; 0x28
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f004 fffc 	bl	8006904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2258      	movs	r2, #88	; 0x58
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f004 ffee 	bl	8006904 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001928:	2302      	movs	r3, #2
 800192a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800192c:	2301      	movs	r3, #1
 800192e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001930:	2310      	movs	r3, #16
 8001932:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001936:	2302      	movs	r3, #2
 8001938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800193c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001940:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001944:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001948:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001952:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001956:	4618      	mov	r0, r3
 8001958:	f001 fca2 	bl	80032a0 <HAL_RCC_OscConfig>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001962:	f000 f83f 	bl	80019e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001966:	230f      	movs	r3, #15
 8001968:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800196a:	2302      	movs	r3, #2
 800196c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800196e:	2300      	movs	r3, #0
 8001970:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001976:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800197c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001980:	2102      	movs	r1, #2
 8001982:	4618      	mov	r0, r3
 8001984:	f002 fce0 	bl	8004348 <HAL_RCC_ClockConfig>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800198e:	f000 f829 	bl	80019e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <SystemClock_Config+0xc4>)
 8001994:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 800199e:	2300      	movs	r3, #0
 80019a0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 ff05 	bl	80047b4 <HAL_RCCEx_PeriphCLKConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80019b0:	f000 f818 	bl	80019e4 <Error_Handler>
  }
}
 80019b4:	bf00      	nop
 80019b6:	3798      	adds	r7, #152	; 0x98
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	01000022 	.word	0x01000022

080019c0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80019c8:	1d39      	adds	r1, r7, #4
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	2201      	movs	r2, #1
 80019d0:	4803      	ldr	r0, [pc, #12]	; (80019e0 <__io_putchar+0x20>)
 80019d2:	f003 fa51 	bl	8004e78 <HAL_UART_Transmit>
  return ch;
 80019d6:	687b      	ldr	r3, [r7, #4]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000340 	.word	0x20000340

080019e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
}
 80019ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ec:	e7fe      	b.n	80019ec <Error_Handler+0x8>
	...

080019f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_MspInit+0x44>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <HAL_MspInit+0x44>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6193      	str	r3, [r2, #24]
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_MspInit+0x44>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_MspInit+0x44>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_MspInit+0x44>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	61d3      	str	r3, [r2, #28]
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_MspInit+0x44>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a26:	2007      	movs	r0, #7
 8001a28:	f000 fb58 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000

08001a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <NMI_Handler+0x4>

08001a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <HardFault_Handler+0x4>

08001a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <MemManage_Handler+0x4>

08001a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <BusFault_Handler+0x4>

08001a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <UsageFault_Handler+0x4>

08001a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a84:	f000 fa16 	bl	8001eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <DMA1_Channel6_IRQHandler+0x10>)
 8001a92:	f000 fbab 	bl	80021ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200002a8 	.word	0x200002a8

08001aa0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <DMA1_Channel7_IRQHandler+0x10>)
 8001aa6:	f000 fba1 	bl	80021ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000264 	.word	0x20000264

08001ab4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return 1;
 8001ab8:	2301      	movs	r3, #1
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_kill>:

int _kill(int pid, int sig)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ace:	f004 ff6b 	bl	80069a8 <__errno>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2216      	movs	r2, #22
 8001ad6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_exit>:

void _exit (int status)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001aec:	f04f 31ff 	mov.w	r1, #4294967295
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ffe7 	bl	8001ac4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001af6:	e7fe      	b.n	8001af6 <_exit+0x12>

08001af8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	e00a      	b.n	8001b20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b0a:	f3af 8000 	nop.w
 8001b0e:	4601      	mov	r1, r0
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	60ba      	str	r2, [r7, #8]
 8001b16:	b2ca      	uxtb	r2, r1
 8001b18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	dbf0      	blt.n	8001b0a <_read+0x12>
  }

  return len;
 8001b28:	687b      	ldr	r3, [r7, #4]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	e009      	b.n	8001b58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	60ba      	str	r2, [r7, #8]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff37 	bl	80019c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dbf1      	blt.n	8001b44 <_write+0x12>
  }
  return len;
 8001b60:	687b      	ldr	r3, [r7, #4]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_close>:

int _close(int file)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b92:	605a      	str	r2, [r3, #4]
  return 0;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <_isatty>:

int _isatty(int file)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <_sbrk+0x5c>)
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <_sbrk+0x60>)
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <_sbrk+0x64>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <_sbrk+0x68>)
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d207      	bcs.n	8001c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c04:	f004 fed0 	bl	80069a8 <__errno>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	e009      	b.n	8001c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <_sbrk+0x64>)
 8001c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20010000 	.word	0x20010000
 8001c34:	00000400 	.word	0x00000400
 8001c38:	200002f0 	.word	0x200002f0
 8001c3c:	20000518 	.word	0x20000518

08001c40 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <SystemInit+0x20>)
 8001c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <SystemInit+0x20>)
 8001c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <MX_TIM17_Init+0x44>)
 8001c6a:	4a10      	ldr	r2, [pc, #64]	; (8001cac <MX_TIM17_Init+0x48>)
 8001c6c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_TIM17_Init+0x44>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <MX_TIM17_Init+0x44>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <MX_TIM17_Init+0x44>)
 8001c7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c80:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <MX_TIM17_Init+0x44>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <MX_TIM17_Init+0x44>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <MX_TIM17_Init+0x44>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001c94:	4804      	ldr	r0, [pc, #16]	; (8001ca8 <MX_TIM17_Init+0x44>)
 8001c96:	f002 ffab 	bl	8004bf0 <HAL_TIM_Base_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001ca0:	f7ff fea0 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	200002f4 	.word	0x200002f4
 8001cac:	40014800 	.word	0x40014800

08001cb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_TIM_Base_MspInit+0x38>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10b      	bne.n	8001cda <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_TIM_Base_MspInit+0x3c>)
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	4a09      	ldr	r2, [pc, #36]	; (8001cec <HAL_TIM_Base_MspInit+0x3c>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ccc:	6193      	str	r3, [r2, #24]
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_TIM_Base_MspInit+0x3c>)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40014800 	.word	0x40014800
 8001cec:	40021000 	.word	0x40021000

08001cf0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001cf6:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <MX_USART2_UART_Init+0x5c>)
 8001cf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001cfc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001d00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d16:	220c      	movs	r2, #12
 8001d18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_USART2_UART_Init+0x58>)
 8001d34:	f003 f852 	bl	8004ddc <HAL_UART_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d3e:	f7ff fe51 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000340 	.word	0x20000340
 8001d4c:	40004400 	.word	0x40004400

08001d50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <HAL_UART_MspInit+0x7c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d128      	bne.n	8001dc4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_UART_MspInit+0x80>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	4a16      	ldr	r2, [pc, #88]	; (8001dd0 <HAL_UART_MspInit+0x80>)
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d7c:	61d3      	str	r3, [r2, #28]
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_UART_MspInit+0x80>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_UART_MspInit+0x80>)
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_UART_MspInit+0x80>)
 8001d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d94:	6153      	str	r3, [r2, #20]
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_UART_MspInit+0x80>)
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001da2:	230c      	movs	r3, #12
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001db2:	2307      	movs	r3, #7
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc0:	f000 faf4 	bl	80023ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3728      	adds	r7, #40	; 0x28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40004400 	.word	0x40004400
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e0c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dd8:	f7ff ff32 	bl	8001c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ddc:	480c      	ldr	r0, [pc, #48]	; (8001e10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dde:	490d      	ldr	r1, [pc, #52]	; (8001e14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001de0:	4a0d      	ldr	r2, [pc, #52]	; (8001e18 <LoopForever+0xe>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de4:	e002      	b.n	8001dec <LoopCopyDataInit>

08001de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dea:	3304      	adds	r3, #4

08001dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df0:	d3f9      	bcc.n	8001de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001df4:	4c0a      	ldr	r4, [pc, #40]	; (8001e20 <LoopForever+0x16>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df8:	e001      	b.n	8001dfe <LoopFillZerobss>

08001dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dfc:	3204      	adds	r2, #4

08001dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e00:	d3fb      	bcc.n	8001dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e02:	f004 fdd7 	bl	80069b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e06:	f7ff fc9b 	bl	8001740 <main>

08001e0a <LoopForever>:

LoopForever:
    b LoopForever
 8001e0a:	e7fe      	b.n	8001e0a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e0c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e14:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001e18:	0800a700 	.word	0x0800a700
  ldr r2, =_sbss
 8001e1c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001e20:	20000518 	.word	0x20000518

08001e24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC1_2_IRQHandler>
	...

08001e28 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <HAL_Init+0x28>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a07      	ldr	r2, [pc, #28]	; (8001e50 <HAL_Init+0x28>)
 8001e32:	f043 0310 	orr.w	r3, r3, #16
 8001e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e38:	2003      	movs	r0, #3
 8001e3a:	f000 f94f 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f000 f808 	bl	8001e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e44:	f7ff fdd4 	bl	80019f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40022000 	.word	0x40022000

08001e54 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_InitTick+0x54>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_InitTick+0x58>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	4619      	mov	r1, r3
 8001e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f967 	bl	8002146 <HAL_SYSTICK_Config>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00e      	b.n	8001ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b0f      	cmp	r3, #15
 8001e86:	d80a      	bhi.n	8001e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f000 f92f 	bl	80020f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e94:	4a06      	ldr	r2, [pc, #24]	; (8001eb0 <HAL_InitTick+0x5c>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e000      	b.n	8001ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000010 	.word	0x20000010
 8001eac:	20000018 	.word	0x20000018
 8001eb0:	20000014 	.word	0x20000014

08001eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_IncTick+0x20>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_IncTick+0x24>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <HAL_IncTick+0x24>)
 8001ec6:	6013      	str	r3, [r2, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000018 	.word	0x20000018
 8001ed8:	200003c8 	.word	0x200003c8

08001edc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <HAL_GetTick+0x14>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	200003c8 	.word	0x200003c8

08001ef4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001efc:	f7ff ffee 	bl	8001edc <HAL_GetTick>
 8001f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0c:	d005      	beq.n	8001f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_Delay+0x44>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f1a:	bf00      	nop
 8001f1c:	f7ff ffde 	bl	8001edc <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d8f7      	bhi.n	8001f1c <HAL_Delay+0x28>
  {
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000018 	.word	0x20000018

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <__NVIC_EnableIRQ+0x38>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	; (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	; (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
         );
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	; 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f7ff ff8e 	bl	8001fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff29 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002104:	f7ff ff3e 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 8002108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f7ff ff8e 	bl	8002030 <NVIC_EncodePriority>
 8002114:	4602      	mov	r2, r0
 8002116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff5d 	bl	8001fdc <__NVIC_SetPriority>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff31 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ffa2 	bl	8002098 <SysTick_Config>
 8002154:	4603      	mov	r3, r0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e037      	b.n	80021e4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800218a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800218e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f8b4 	bl	8002334 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}  
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	2204      	movs	r2, #4
 800220a:	409a      	lsls	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d024      	beq.n	800225e <HAL_DMA_IRQHandler+0x72>
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	2b00      	cmp	r3, #0
 800221c:	d01f      	beq.n	800225e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d107      	bne.n	800223c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0204 	bic.w	r2, r2, #4
 800223a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	2104      	movs	r1, #4
 8002246:	fa01 f202 	lsl.w	r2, r1, r2
 800224a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d06a      	beq.n	800232a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800225c:	e065      	b.n	800232a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	2202      	movs	r2, #2
 8002264:	409a      	lsls	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d02c      	beq.n	80022c8 <HAL_DMA_IRQHandler+0xdc>
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d027      	beq.n	80022c8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10b      	bne.n	800229e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 020a 	bic.w	r2, r2, #10
 8002294:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a6:	2102      	movs	r1, #2
 80022a8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ac:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d035      	beq.n	800232a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80022c6:	e030      	b.n	800232a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	2208      	movs	r2, #8
 80022ce:	409a      	lsls	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d028      	beq.n	800232a <HAL_DMA_IRQHandler+0x13e>
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d023      	beq.n	800232a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 020e 	bic.w	r2, r2, #14
 80022f0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	2101      	movs	r1, #1
 80022fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002300:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	2b00      	cmp	r3, #0
 800231e:	d004      	beq.n	800232a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	4798      	blx	r3
    }
  }
}  
 8002328:	e7ff      	b.n	800232a <HAL_DMA_IRQHandler+0x13e>
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <DMA_CalcBaseAndBitshift+0x60>)
 8002344:	429a      	cmp	r2, r3
 8002346:	d80f      	bhi.n	8002368 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <DMA_CalcBaseAndBitshift+0x64>)
 8002350:	4413      	add	r3, r2
 8002352:	4a12      	ldr	r2, [pc, #72]	; (800239c <DMA_CalcBaseAndBitshift+0x68>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	009a      	lsls	r2, r3, #2
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a0f      	ldr	r2, [pc, #60]	; (80023a0 <DMA_CalcBaseAndBitshift+0x6c>)
 8002364:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002366:	e00e      	b.n	8002386 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <DMA_CalcBaseAndBitshift+0x70>)
 8002370:	4413      	add	r3, r2
 8002372:	4a0a      	ldr	r2, [pc, #40]	; (800239c <DMA_CalcBaseAndBitshift+0x68>)
 8002374:	fba2 2303 	umull	r2, r3, r2, r3
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	009a      	lsls	r2, r3, #2
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a09      	ldr	r2, [pc, #36]	; (80023a8 <DMA_CalcBaseAndBitshift+0x74>)
 8002384:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40020407 	.word	0x40020407
 8002398:	bffdfff8 	.word	0xbffdfff8
 800239c:	cccccccd 	.word	0xcccccccd
 80023a0:	40020000 	.word	0x40020000
 80023a4:	bffdfbf8 	.word	0xbffdfbf8
 80023a8:	40020400 	.word	0x40020400

080023ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ba:	e160      	b.n	800267e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2101      	movs	r1, #1
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	4013      	ands	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 8152 	beq.w	8002678 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d005      	beq.n	80023ec <HAL_GPIO_Init+0x40>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d130      	bne.n	800244e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	2203      	movs	r2, #3
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002422:	2201      	movs	r2, #1
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	f003 0201 	and.w	r2, r3, #1
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b03      	cmp	r3, #3
 8002458:	d017      	beq.n	800248a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2203      	movs	r2, #3
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d123      	bne.n	80024de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	08da      	lsrs	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3208      	adds	r2, #8
 800249e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	220f      	movs	r2, #15
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	08da      	lsrs	r2, r3, #3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3208      	adds	r2, #8
 80024d8:	6939      	ldr	r1, [r7, #16]
 80024da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0203 	and.w	r2, r3, #3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 80ac 	beq.w	8002678 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002520:	4b5e      	ldr	r3, [pc, #376]	; (800269c <HAL_GPIO_Init+0x2f0>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	4a5d      	ldr	r2, [pc, #372]	; (800269c <HAL_GPIO_Init+0x2f0>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6193      	str	r3, [r2, #24]
 800252c:	4b5b      	ldr	r3, [pc, #364]	; (800269c <HAL_GPIO_Init+0x2f0>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002538:	4a59      	ldr	r2, [pc, #356]	; (80026a0 <HAL_GPIO_Init+0x2f4>)
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	220f      	movs	r2, #15
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002562:	d025      	beq.n	80025b0 <HAL_GPIO_Init+0x204>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a4f      	ldr	r2, [pc, #316]	; (80026a4 <HAL_GPIO_Init+0x2f8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d01f      	beq.n	80025ac <HAL_GPIO_Init+0x200>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a4e      	ldr	r2, [pc, #312]	; (80026a8 <HAL_GPIO_Init+0x2fc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d019      	beq.n	80025a8 <HAL_GPIO_Init+0x1fc>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a4d      	ldr	r2, [pc, #308]	; (80026ac <HAL_GPIO_Init+0x300>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d013      	beq.n	80025a4 <HAL_GPIO_Init+0x1f8>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a4c      	ldr	r2, [pc, #304]	; (80026b0 <HAL_GPIO_Init+0x304>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00d      	beq.n	80025a0 <HAL_GPIO_Init+0x1f4>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a4b      	ldr	r2, [pc, #300]	; (80026b4 <HAL_GPIO_Init+0x308>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d007      	beq.n	800259c <HAL_GPIO_Init+0x1f0>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a4a      	ldr	r2, [pc, #296]	; (80026b8 <HAL_GPIO_Init+0x30c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d101      	bne.n	8002598 <HAL_GPIO_Init+0x1ec>
 8002594:	2306      	movs	r3, #6
 8002596:	e00c      	b.n	80025b2 <HAL_GPIO_Init+0x206>
 8002598:	2307      	movs	r3, #7
 800259a:	e00a      	b.n	80025b2 <HAL_GPIO_Init+0x206>
 800259c:	2305      	movs	r3, #5
 800259e:	e008      	b.n	80025b2 <HAL_GPIO_Init+0x206>
 80025a0:	2304      	movs	r3, #4
 80025a2:	e006      	b.n	80025b2 <HAL_GPIO_Init+0x206>
 80025a4:	2303      	movs	r3, #3
 80025a6:	e004      	b.n	80025b2 <HAL_GPIO_Init+0x206>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e002      	b.n	80025b2 <HAL_GPIO_Init+0x206>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_GPIO_Init+0x206>
 80025b0:	2300      	movs	r3, #0
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	f002 0203 	and.w	r2, r2, #3
 80025b8:	0092      	lsls	r2, r2, #2
 80025ba:	4093      	lsls	r3, r2
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025c2:	4937      	ldr	r1, [pc, #220]	; (80026a0 <HAL_GPIO_Init+0x2f4>)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3302      	adds	r3, #2
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025d0:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <HAL_GPIO_Init+0x310>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	43db      	mvns	r3, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025f4:	4a31      	ldr	r2, [pc, #196]	; (80026bc <HAL_GPIO_Init+0x310>)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025fa:	4b30      	ldr	r3, [pc, #192]	; (80026bc <HAL_GPIO_Init+0x310>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800261e:	4a27      	ldr	r2, [pc, #156]	; (80026bc <HAL_GPIO_Init+0x310>)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002624:	4b25      	ldr	r3, [pc, #148]	; (80026bc <HAL_GPIO_Init+0x310>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43db      	mvns	r3, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002648:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <HAL_GPIO_Init+0x310>)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_GPIO_Init+0x310>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	43db      	mvns	r3, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002672:	4a12      	ldr	r2, [pc, #72]	; (80026bc <HAL_GPIO_Init+0x310>)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3301      	adds	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f ae97 	bne.w	80023bc <HAL_GPIO_Init+0x10>
  }
}
 800268e:	bf00      	nop
 8002690:	bf00      	nop
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40021000 	.word	0x40021000
 80026a0:	40010000 	.word	0x40010000
 80026a4:	48000400 	.word	0x48000400
 80026a8:	48000800 	.word	0x48000800
 80026ac:	48000c00 	.word	0x48000c00
 80026b0:	48001000 	.word	0x48001000
 80026b4:	48001400 	.word	0x48001400
 80026b8:	48001800 	.word	0x48001800
 80026bc:	40010400 	.word	0x40010400

080026c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
 80026cc:	4613      	mov	r3, r2
 80026ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d0:	787b      	ldrb	r3, [r7, #1]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026d6:	887a      	ldrh	r2, [r7, #2]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026dc:	e002      	b.n	80026e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	041a      	lsls	r2, r3, #16
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	43d9      	mvns	r1, r3
 800270e:	887b      	ldrh	r3, [r7, #2]
 8002710:	400b      	ands	r3, r1
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	619a      	str	r2, [r3, #24]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e081      	b.n	800283a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe ff42 	bl	80015d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	; 0x24
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002774:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002784:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	e006      	b.n	80027ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d104      	bne.n	80027be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69d9      	ldr	r1, [r3, #28]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af02      	add	r7, sp, #8
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	607a      	str	r2, [r7, #4]
 800284e:	461a      	mov	r2, r3
 8002850:	460b      	mov	r3, r1
 8002852:	817b      	strh	r3, [r7, #10]
 8002854:	4613      	mov	r3, r2
 8002856:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b20      	cmp	r3, #32
 8002862:	f040 80da 	bne.w	8002a1a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_I2C_Master_Transmit+0x30>
 8002870:	2302      	movs	r3, #2
 8002872:	e0d3      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x1d8>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800287c:	f7ff fb2e 	bl	8001edc <HAL_GetTick>
 8002880:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	2319      	movs	r3, #25
 8002888:	2201      	movs	r2, #1
 800288a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 fa00 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0be      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2221      	movs	r2, #33	; 0x21
 80028a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2210      	movs	r2, #16
 80028aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	893a      	ldrh	r2, [r7, #8]
 80028be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2bff      	cmp	r3, #255	; 0xff
 80028ce:	d90e      	bls.n	80028ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	22ff      	movs	r2, #255	; 0xff
 80028d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	8979      	ldrh	r1, [r7, #10]
 80028de:	4b51      	ldr	r3, [pc, #324]	; (8002a24 <HAL_I2C_Master_Transmit+0x1e0>)
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fc10 	bl	800310c <I2C_TransferConfig>
 80028ec:	e06c      	b.n	80029c8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	8979      	ldrh	r1, [r7, #10]
 8002900:	4b48      	ldr	r3, [pc, #288]	; (8002a24 <HAL_I2C_Master_Transmit+0x1e0>)
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 fbff 	bl	800310c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800290e:	e05b      	b.n	80029c8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	6a39      	ldr	r1, [r7, #32]
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 fa0c 	bl	8002d32 <I2C_WaitOnTXISFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e07b      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	781a      	ldrb	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d034      	beq.n	80029c8 <HAL_I2C_Master_Transmit+0x184>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002962:	2b00      	cmp	r3, #0
 8002964:	d130      	bne.n	80029c8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	2200      	movs	r2, #0
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f98f 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e04d      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	2bff      	cmp	r3, #255	; 0xff
 8002988:	d90e      	bls.n	80029a8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	22ff      	movs	r2, #255	; 0xff
 800298e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002994:	b2da      	uxtb	r2, r3
 8002996:	8979      	ldrh	r1, [r7, #10]
 8002998:	2300      	movs	r3, #0
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 fbb3 	bl	800310c <I2C_TransferConfig>
 80029a6:	e00f      	b.n	80029c8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	8979      	ldrh	r1, [r7, #10]
 80029ba:	2300      	movs	r3, #0
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fba2 	bl	800310c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d19e      	bne.n	8002910 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	6a39      	ldr	r1, [r7, #32]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 f9f2 	bl	8002dc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e01a      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2220      	movs	r2, #32
 80029ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_I2C_Master_Transmit+0x1e4>)
 80029fa:	400b      	ands	r3, r1
 80029fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e000      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
  }
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	80002000 	.word	0x80002000
 8002a28:	fe00e800 	.word	0xfe00e800

08002a2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	461a      	mov	r2, r3
 8002a38:	460b      	mov	r3, r1
 8002a3a:	817b      	strh	r3, [r7, #10]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	f040 80db 	bne.w	8002c04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_I2C_Master_Receive+0x30>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e0d4      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a64:	f7ff fa3a 	bl	8001edc <HAL_GetTick>
 8002a68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	2319      	movs	r3, #25
 8002a70:	2201      	movs	r2, #1
 8002a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f90c 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0bf      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2222      	movs	r2, #34	; 0x22
 8002a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2210      	movs	r2, #16
 8002a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	893a      	ldrh	r2, [r7, #8]
 8002aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2bff      	cmp	r3, #255	; 0xff
 8002ab6:	d90e      	bls.n	8002ad6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	22ff      	movs	r2, #255	; 0xff
 8002abc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	8979      	ldrh	r1, [r7, #10]
 8002ac6:	4b52      	ldr	r3, [pc, #328]	; (8002c10 <HAL_I2C_Master_Receive+0x1e4>)
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fb1c 	bl	800310c <I2C_TransferConfig>
 8002ad4:	e06d      	b.n	8002bb2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	8979      	ldrh	r1, [r7, #10]
 8002ae8:	4b49      	ldr	r3, [pc, #292]	; (8002c10 <HAL_I2C_Master_Receive+0x1e4>)
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 fb0b 	bl	800310c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002af6:	e05c      	b.n	8002bb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	6a39      	ldr	r1, [r7, #32]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f9a3 	bl	8002e48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e07c      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d034      	beq.n	8002bb2 <HAL_I2C_Master_Receive+0x186>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d130      	bne.n	8002bb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	2200      	movs	r2, #0
 8002b58:	2180      	movs	r1, #128	; 0x80
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f89a 	bl	8002c94 <I2C_WaitOnFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e04d      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2bff      	cmp	r3, #255	; 0xff
 8002b72:	d90e      	bls.n	8002b92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	22ff      	movs	r2, #255	; 0xff
 8002b78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	8979      	ldrh	r1, [r7, #10]
 8002b82:	2300      	movs	r3, #0
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fabe 	bl	800310c <I2C_TransferConfig>
 8002b90:	e00f      	b.n	8002bb2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	8979      	ldrh	r1, [r7, #10]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 faad 	bl	800310c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d19d      	bne.n	8002af8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	6a39      	ldr	r1, [r7, #32]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f8fd 	bl	8002dc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e01a      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6859      	ldr	r1, [r3, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_I2C_Master_Receive+0x1e8>)
 8002be4:	400b      	ands	r3, r1
 8002be6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e000      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
  }
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	80002400 	.word	0x80002400
 8002c14:	fe00e800 	.word	0xfe00e800

08002c18 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c26:	b2db      	uxtb	r3, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d103      	bne.n	8002c6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2200      	movs	r2, #0
 8002c68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d007      	beq.n	8002c88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	619a      	str	r2, [r3, #24]
  }
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca4:	e031      	b.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d02d      	beq.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cae:	f7ff f915 	bl	8001edc <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d302      	bcc.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d122      	bne.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d113      	bne.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f043 0220 	orr.w	r2, r3, #32
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e00f      	b.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4013      	ands	r3, r2
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	bf0c      	ite	eq
 8002d1a:	2301      	moveq	r3, #1
 8002d1c:	2300      	movne	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d0be      	beq.n	8002ca6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d3e:	e033      	b.n	8002da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f901 	bl	8002f4c <I2C_IsErrorOccurred>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e031      	b.n	8002db8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5a:	d025      	beq.n	8002da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5c:	f7ff f8be 	bl	8001edc <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d302      	bcc.n	8002d72 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d11a      	bne.n	8002da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d013      	beq.n	8002da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e007      	b.n	8002db8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d1c4      	bne.n	8002d40 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dcc:	e02f      	b.n	8002e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f8ba 	bl	8002f4c <I2C_IsErrorOccurred>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e02d      	b.n	8002e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de2:	f7ff f87b 	bl	8001edc <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d11a      	bne.n	8002e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d013      	beq.n	8002e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f043 0220 	orr.w	r2, r3, #32
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e007      	b.n	8002e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d1c8      	bne.n	8002dce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e54:	e06b      	b.n	8002f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f876 	bl	8002f4c <I2C_IsErrorOccurred>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e069      	b.n	8002f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b20      	cmp	r3, #32
 8002e76:	d138      	bne.n	8002eea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d105      	bne.n	8002e92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e055      	b.n	8002f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b10      	cmp	r3, #16
 8002e9e:	d107      	bne.n	8002eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2210      	movs	r2, #16
 8002ea6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2204      	movs	r2, #4
 8002eac:	645a      	str	r2, [r3, #68]	; 0x44
 8002eae:	e002      	b.n	8002eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8002eca:	400b      	ands	r3, r1
 8002ecc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e029      	b.n	8002f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7fe fff7 	bl	8001edc <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d00f      	beq.n	8002f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f043 0220 	orr.w	r2, r3, #32
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e007      	b.n	8002f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d18c      	bne.n	8002e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	fe00e800 	.word	0xfe00e800

08002f4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d068      	beq.n	800304a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2210      	movs	r2, #16
 8002f7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f80:	e049      	b.n	8003016 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d045      	beq.n	8003016 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f8a:	f7fe ffa7 	bl	8001edc <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d302      	bcc.n	8002fa0 <I2C_IsErrorOccurred+0x54>
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d13a      	bne.n	8003016 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002faa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc2:	d121      	bne.n	8003008 <I2C_IsErrorOccurred+0xbc>
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fca:	d01d      	beq.n	8003008 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002fcc:	7cfb      	ldrb	r3, [r7, #19]
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d01a      	beq.n	8003008 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fe0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fe2:	f7fe ff7b 	bl	8001edc <HAL_GetTick>
 8002fe6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fe8:	e00e      	b.n	8003008 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fea:	f7fe ff77 	bl	8001edc <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b19      	cmp	r3, #25
 8002ff6:	d907      	bls.n	8003008 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f043 0320 	orr.w	r3, r3, #32
 8002ffe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003006:	e006      	b.n	8003016 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b20      	cmp	r3, #32
 8003014:	d1e9      	bne.n	8002fea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b20      	cmp	r3, #32
 8003022:	d003      	beq.n	800302c <I2C_IsErrorOccurred+0xe0>
 8003024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0aa      	beq.n	8002f82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800302c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003030:	2b00      	cmp	r3, #0
 8003032:	d103      	bne.n	800303c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2220      	movs	r2, #32
 800303a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	f043 0304 	orr.w	r3, r3, #4
 8003042:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00b      	beq.n	8003074 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800306c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00b      	beq.n	8003096 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	f043 0308 	orr.w	r3, r3, #8
 8003084:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800308e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00b      	beq.n	80030b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	f043 0302 	orr.w	r3, r3, #2
 80030a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80030b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01c      	beq.n	80030fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f7ff fdc3 	bl	8002c4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <I2C_IsErrorOccurred+0x1bc>)
 80030d2:	400b      	ands	r3, r1
 80030d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	431a      	orrs	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80030fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3728      	adds	r7, #40	; 0x28
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	fe00e800 	.word	0xfe00e800

0800310c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	460b      	mov	r3, r1
 8003118:	817b      	strh	r3, [r7, #10]
 800311a:	4613      	mov	r3, r2
 800311c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800311e:	897b      	ldrh	r3, [r7, #10]
 8003120:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003124:	7a7b      	ldrb	r3, [r7, #9]
 8003126:	041b      	lsls	r3, r3, #16
 8003128:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800312c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	4313      	orrs	r3, r2
 8003136:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800313a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	0d5b      	lsrs	r3, r3, #21
 8003146:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <I2C_TransferConfig+0x60>)
 800314c:	430b      	orrs	r3, r1
 800314e:	43db      	mvns	r3, r3
 8003150:	ea02 0103 	and.w	r1, r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800315e:	bf00      	nop
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	03ff63ff 	.word	0x03ff63ff

08003170 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b20      	cmp	r3, #32
 8003184:	d138      	bne.n	80031f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003190:	2302      	movs	r3, #2
 8003192:	e032      	b.n	80031fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2224      	movs	r2, #36	; 0x24
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6819      	ldr	r1, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	e000      	b.n	80031fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031f8:	2302      	movs	r3, #2
  }
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003206:	b480      	push	{r7}
 8003208:	b085      	sub	sp, #20
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b20      	cmp	r3, #32
 800321a:	d139      	bne.n	8003290 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003226:	2302      	movs	r3, #2
 8003228:	e033      	b.n	8003292 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2224      	movs	r2, #36	; 0x24
 8003236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0201 	bic.w	r2, r2, #1
 8003248:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003258:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	e000      	b.n	8003292 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003290:	2302      	movs	r3, #2
  }
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d102      	bne.n	80032c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	f001 b83a 	b.w	800433a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 816f 	beq.w	80035ba <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032dc:	4bb5      	ldr	r3, [pc, #724]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 030c 	and.w	r3, r3, #12
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d00c      	beq.n	8003302 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032e8:	4bb2      	ldr	r3, [pc, #712]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d15c      	bne.n	80033ae <HAL_RCC_OscConfig+0x10e>
 80032f4:	4baf      	ldr	r3, [pc, #700]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003300:	d155      	bne.n	80033ae <HAL_RCC_OscConfig+0x10e>
 8003302:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003306:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003316:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331a:	fab3 f383 	clz	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	095b      	lsrs	r3, r3, #5
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d102      	bne.n	8003334 <HAL_RCC_OscConfig+0x94>
 800332e:	4ba1      	ldr	r3, [pc, #644]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	e015      	b.n	8003360 <HAL_RCC_OscConfig+0xc0>
 8003334:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003338:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003340:	fa93 f3a3 	rbit	r3, r3
 8003344:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003348:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800334c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003350:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800335c:	4b95      	ldr	r3, [pc, #596]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003364:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003368:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800336c:	fa92 f2a2 	rbit	r2, r2
 8003370:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003374:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003378:	fab2 f282 	clz	r2, r2
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	f042 0220 	orr.w	r2, r2, #32
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	f002 021f 	and.w	r2, r2, #31
 8003388:	2101      	movs	r1, #1
 800338a:	fa01 f202 	lsl.w	r2, r1, r2
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 8111 	beq.w	80035b8 <HAL_RCC_OscConfig+0x318>
 8003396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800339a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f040 8108 	bne.w	80035b8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f000 bfc6 	b.w	800433a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033be:	d106      	bne.n	80033ce <HAL_RCC_OscConfig+0x12e>
 80033c0:	4b7c      	ldr	r3, [pc, #496]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a7b      	ldr	r2, [pc, #492]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 80033c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	e036      	b.n	800343c <HAL_RCC_OscConfig+0x19c>
 80033ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x158>
 80033de:	4b75      	ldr	r3, [pc, #468]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a74      	ldr	r2, [pc, #464]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 80033e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	4b72      	ldr	r3, [pc, #456]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a71      	ldr	r2, [pc, #452]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 80033f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	e021      	b.n	800343c <HAL_RCC_OscConfig+0x19c>
 80033f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003408:	d10c      	bne.n	8003424 <HAL_RCC_OscConfig+0x184>
 800340a:	4b6a      	ldr	r3, [pc, #424]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a69      	ldr	r2, [pc, #420]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 8003410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	4b67      	ldr	r3, [pc, #412]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a66      	ldr	r2, [pc, #408]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 800341c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e00b      	b.n	800343c <HAL_RCC_OscConfig+0x19c>
 8003424:	4b63      	ldr	r3, [pc, #396]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a62      	ldr	r2, [pc, #392]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 800342a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	4b60      	ldr	r3, [pc, #384]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a5f      	ldr	r2, [pc, #380]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 8003436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800343a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800343c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003440:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d059      	beq.n	8003500 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fe fd46 	bl	8001edc <HAL_GetTick>
 8003450:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003456:	f7fe fd41 	bl	8001edc <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	; 0x64
 8003464:	d902      	bls.n	800346c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	f000 bf67 	b.w	800433a <HAL_RCC_OscConfig+0x109a>
 800346c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003470:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003478:	fa93 f3a3 	rbit	r3, r3
 800347c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003480:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003484:	fab3 f383 	clz	r3, r3
 8003488:	b2db      	uxtb	r3, r3
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	b2db      	uxtb	r3, r3
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b01      	cmp	r3, #1
 8003496:	d102      	bne.n	800349e <HAL_RCC_OscConfig+0x1fe>
 8003498:	4b46      	ldr	r3, [pc, #280]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	e015      	b.n	80034ca <HAL_RCC_OscConfig+0x22a>
 800349e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034a2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80034b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034b6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80034ba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80034c6:	4b3b      	ldr	r3, [pc, #236]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034ce:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80034d2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80034d6:	fa92 f2a2 	rbit	r2, r2
 80034da:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80034de:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80034e2:	fab2 f282 	clz	r2, r2
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	f042 0220 	orr.w	r2, r2, #32
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	f002 021f 	and.w	r2, r2, #31
 80034f2:	2101      	movs	r1, #1
 80034f4:	fa01 f202 	lsl.w	r2, r1, r2
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0ab      	beq.n	8003456 <HAL_RCC_OscConfig+0x1b6>
 80034fe:	e05c      	b.n	80035ba <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7fe fcec 	bl	8001edc <HAL_GetTick>
 8003504:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800350a:	f7fe fce7 	bl	8001edc <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	; 0x64
 8003518:	d902      	bls.n	8003520 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	f000 bf0d 	b.w	800433a <HAL_RCC_OscConfig+0x109a>
 8003520:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003524:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800352c:	fa93 f3a3 	rbit	r3, r3
 8003530:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003534:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d102      	bne.n	8003552 <HAL_RCC_OscConfig+0x2b2>
 800354c:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	e015      	b.n	800357e <HAL_RCC_OscConfig+0x2de>
 8003552:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003556:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003566:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800356a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800356e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800357a:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <HAL_RCC_OscConfig+0x314>)
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003582:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003586:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800358a:	fa92 f2a2 	rbit	r2, r2
 800358e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003592:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003596:	fab2 f282 	clz	r2, r2
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	f042 0220 	orr.w	r2, r2, #32
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	f002 021f 	and.w	r2, r2, #31
 80035a6:	2101      	movs	r1, #1
 80035a8:	fa01 f202 	lsl.w	r2, r1, r2
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1ab      	bne.n	800350a <HAL_RCC_OscConfig+0x26a>
 80035b2:	e002      	b.n	80035ba <HAL_RCC_OscConfig+0x31a>
 80035b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 817f 	beq.w	80038ce <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035d0:	4ba7      	ldr	r3, [pc, #668]	; (8003870 <HAL_RCC_OscConfig+0x5d0>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00c      	beq.n	80035f6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035dc:	4ba4      	ldr	r3, [pc, #656]	; (8003870 <HAL_RCC_OscConfig+0x5d0>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 030c 	and.w	r3, r3, #12
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d173      	bne.n	80036d0 <HAL_RCC_OscConfig+0x430>
 80035e8:	4ba1      	ldr	r3, [pc, #644]	; (8003870 <HAL_RCC_OscConfig+0x5d0>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80035f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f4:	d16c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x430>
 80035f6:	2302      	movs	r3, #2
 80035f8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003608:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360c:	fab3 f383 	clz	r3, r3
 8003610:	b2db      	uxtb	r3, r3
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d102      	bne.n	8003626 <HAL_RCC_OscConfig+0x386>
 8003620:	4b93      	ldr	r3, [pc, #588]	; (8003870 <HAL_RCC_OscConfig+0x5d0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	e013      	b.n	800364e <HAL_RCC_OscConfig+0x3ae>
 8003626:	2302      	movs	r3, #2
 8003628:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003638:	2302      	movs	r3, #2
 800363a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800363e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800364a:	4b89      	ldr	r3, [pc, #548]	; (8003870 <HAL_RCC_OscConfig+0x5d0>)
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	2202      	movs	r2, #2
 8003650:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003654:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003658:	fa92 f2a2 	rbit	r2, r2
 800365c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003660:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003664:	fab2 f282 	clz	r2, r2
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	f042 0220 	orr.w	r2, r2, #32
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	f002 021f 	and.w	r2, r2, #31
 8003674:	2101      	movs	r1, #1
 8003676:	fa01 f202 	lsl.w	r2, r1, r2
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <HAL_RCC_OscConfig+0x3f6>
 8003680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003684:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d002      	beq.n	8003696 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f000 be52 	b.w	800433a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003696:	4b76      	ldr	r3, [pc, #472]	; (8003870 <HAL_RCC_OscConfig+0x5d0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800369e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	21f8      	movs	r1, #248	; 0xf8
 80036ac:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80036b4:	fa91 f1a1 	rbit	r1, r1
 80036b8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80036bc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80036c0:	fab1 f181 	clz	r1, r1
 80036c4:	b2c9      	uxtb	r1, r1
 80036c6:	408b      	lsls	r3, r1
 80036c8:	4969      	ldr	r1, [pc, #420]	; (8003870 <HAL_RCC_OscConfig+0x5d0>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ce:	e0fe      	b.n	80038ce <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 8088 	beq.w	80037f2 <HAL_RCC_OscConfig+0x552>
 80036e2:	2301      	movs	r3, #1
 80036e4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80036ec:	fa93 f3a3 	rbit	r3, r3
 80036f0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80036f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f8:	fab3 f383 	clz	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003702:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	461a      	mov	r2, r3
 800370a:	2301      	movs	r3, #1
 800370c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370e:	f7fe fbe5 	bl	8001edc <HAL_GetTick>
 8003712:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003716:	e00a      	b.n	800372e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003718:	f7fe fbe0 	bl	8001edc <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d902      	bls.n	800372e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	f000 be06 	b.w	800433a <HAL_RCC_OscConfig+0x109a>
 800372e:	2302      	movs	r3, #2
 8003730:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003734:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003738:	fa93 f3a3 	rbit	r3, r3
 800373c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003740:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003744:	fab3 f383 	clz	r3, r3
 8003748:	b2db      	uxtb	r3, r3
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d102      	bne.n	800375e <HAL_RCC_OscConfig+0x4be>
 8003758:	4b45      	ldr	r3, [pc, #276]	; (8003870 <HAL_RCC_OscConfig+0x5d0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	e013      	b.n	8003786 <HAL_RCC_OscConfig+0x4e6>
 800375e:	2302      	movs	r3, #2
 8003760:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003768:	fa93 f3a3 	rbit	r3, r3
 800376c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003770:	2302      	movs	r3, #2
 8003772:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003776:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800377a:	fa93 f3a3 	rbit	r3, r3
 800377e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003782:	4b3b      	ldr	r3, [pc, #236]	; (8003870 <HAL_RCC_OscConfig+0x5d0>)
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	2202      	movs	r2, #2
 8003788:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800378c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003790:	fa92 f2a2 	rbit	r2, r2
 8003794:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003798:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800379c:	fab2 f282 	clz	r2, r2
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	f042 0220 	orr.w	r2, r2, #32
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	f002 021f 	and.w	r2, r2, #31
 80037ac:	2101      	movs	r1, #1
 80037ae:	fa01 f202 	lsl.w	r2, r1, r2
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0af      	beq.n	8003718 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b8:	4b2d      	ldr	r3, [pc, #180]	; (8003870 <HAL_RCC_OscConfig+0x5d0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	21f8      	movs	r1, #248	; 0xf8
 80037ce:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80037d6:	fa91 f1a1 	rbit	r1, r1
 80037da:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80037de:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80037e2:	fab1 f181 	clz	r1, r1
 80037e6:	b2c9      	uxtb	r1, r1
 80037e8:	408b      	lsls	r3, r1
 80037ea:	4921      	ldr	r1, [pc, #132]	; (8003870 <HAL_RCC_OscConfig+0x5d0>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	600b      	str	r3, [r1, #0]
 80037f0:	e06d      	b.n	80038ce <HAL_RCC_OscConfig+0x62e>
 80037f2:	2301      	movs	r3, #1
 80037f4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003804:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003808:	fab3 f383 	clz	r3, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003812:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	461a      	mov	r2, r3
 800381a:	2300      	movs	r3, #0
 800381c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381e:	f7fe fb5d 	bl	8001edc <HAL_GetTick>
 8003822:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003828:	f7fe fb58 	bl	8001edc <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d902      	bls.n	800383e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	f000 bd7e 	b.w	800433a <HAL_RCC_OscConfig+0x109a>
 800383e:	2302      	movs	r3, #2
 8003840:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003848:	fa93 f3a3 	rbit	r3, r3
 800384c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003850:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003854:	fab3 f383 	clz	r3, r3
 8003858:	b2db      	uxtb	r3, r3
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	d105      	bne.n	8003874 <HAL_RCC_OscConfig+0x5d4>
 8003868:	4b01      	ldr	r3, [pc, #4]	; (8003870 <HAL_RCC_OscConfig+0x5d0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	e016      	b.n	800389c <HAL_RCC_OscConfig+0x5fc>
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000
 8003874:	2302      	movs	r3, #2
 8003876:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800387e:	fa93 f3a3 	rbit	r3, r3
 8003882:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003886:	2302      	movs	r3, #2
 8003888:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800388c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003898:	4bbf      	ldr	r3, [pc, #764]	; (8003b98 <HAL_RCC_OscConfig+0x8f8>)
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	2202      	movs	r2, #2
 800389e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80038a2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80038a6:	fa92 f2a2 	rbit	r2, r2
 80038aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80038ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80038b2:	fab2 f282 	clz	r2, r2
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	f042 0220 	orr.w	r2, r2, #32
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	f002 021f 	and.w	r2, r2, #31
 80038c2:	2101      	movs	r1, #1
 80038c4:	fa01 f202 	lsl.w	r2, r1, r2
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1ac      	bne.n	8003828 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8113 	beq.w	8003b0a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d07c      	beq.n	80039ee <HAL_RCC_OscConfig+0x74e>
 80038f4:	2301      	movs	r3, #1
 80038f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038fe:	fa93 f3a3 	rbit	r3, r3
 8003902:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003906:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390a:	fab3 f383 	clz	r3, r3
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	4ba2      	ldr	r3, [pc, #648]	; (8003b9c <HAL_RCC_OscConfig+0x8fc>)
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	461a      	mov	r2, r3
 800391a:	2301      	movs	r3, #1
 800391c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391e:	f7fe fadd 	bl	8001edc <HAL_GetTick>
 8003922:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003926:	e00a      	b.n	800393e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003928:	f7fe fad8 	bl	8001edc <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d902      	bls.n	800393e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	f000 bcfe 	b.w	800433a <HAL_RCC_OscConfig+0x109a>
 800393e:	2302      	movs	r3, #2
 8003940:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003948:	fa93 f2a3 	rbit	r2, r3
 800394c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003950:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800395a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800395e:	2202      	movs	r2, #2
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003966:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	fa93 f2a3 	rbit	r2, r3
 8003970:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800397e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003982:	2202      	movs	r2, #2
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800398a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	fa93 f2a3 	rbit	r2, r3
 8003994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003998:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800399c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399e:	4b7e      	ldr	r3, [pc, #504]	; (8003b98 <HAL_RCC_OscConfig+0x8f8>)
 80039a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80039aa:	2102      	movs	r1, #2
 80039ac:	6019      	str	r1, [r3, #0]
 80039ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	fa93 f1a3 	rbit	r1, r3
 80039bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039c4:	6019      	str	r1, [r3, #0]
  return result;
 80039c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	fab3 f383 	clz	r3, r3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	2101      	movs	r1, #1
 80039e2:	fa01 f303 	lsl.w	r3, r1, r3
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d09d      	beq.n	8003928 <HAL_RCC_OscConfig+0x688>
 80039ec:	e08d      	b.n	8003b0a <HAL_RCC_OscConfig+0x86a>
 80039ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	fa93 f2a3 	rbit	r2, r3
 8003a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a0c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a10:	601a      	str	r2, [r3, #0]
  return result;
 8003a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a16:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a1a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a1c:	fab3 f383 	clz	r3, r3
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	4b5d      	ldr	r3, [pc, #372]	; (8003b9c <HAL_RCC_OscConfig+0x8fc>)
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a30:	f7fe fa54 	bl	8001edc <HAL_GetTick>
 8003a34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a3a:	f7fe fa4f 	bl	8001edc <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d902      	bls.n	8003a50 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	f000 bc75 	b.w	800433a <HAL_RCC_OscConfig+0x109a>
 8003a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a54:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003a58:	2202      	movs	r2, #2
 8003a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a60:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	fa93 f2a3 	rbit	r2, r3
 8003a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	fa93 f2a3 	rbit	r2, r3
 8003a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a9c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	fa93 f2a3 	rbit	r2, r3
 8003ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ab6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003aba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003abc:	4b36      	ldr	r3, [pc, #216]	; (8003b98 <HAL_RCC_OscConfig+0x8f8>)
 8003abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ac4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ac8:	2102      	movs	r1, #2
 8003aca:	6019      	str	r1, [r3, #0]
 8003acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	fa93 f1a3 	rbit	r1, r3
 8003ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ade:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ae2:	6019      	str	r1, [r3, #0]
  return result;
 8003ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	fab3 f383 	clz	r3, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f003 031f 	and.w	r3, r3, #31
 8003afe:	2101      	movs	r1, #1
 8003b00:	fa01 f303 	lsl.w	r3, r1, r3
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d197      	bne.n	8003a3a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 81a5 	beq.w	8003e6a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b20:	2300      	movs	r3, #0
 8003b22:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b26:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <HAL_RCC_OscConfig+0x8f8>)
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d116      	bne.n	8003b60 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <HAL_RCC_OscConfig+0x8f8>)
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	4a18      	ldr	r2, [pc, #96]	; (8003b98 <HAL_RCC_OscConfig+0x8f8>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	61d3      	str	r3, [r2, #28]
 8003b3e:	4b16      	ldr	r3, [pc, #88]	; (8003b98 <HAL_RCC_OscConfig+0x8f8>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b58:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b60:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <HAL_RCC_OscConfig+0x900>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d121      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <HAL_RCC_OscConfig+0x900>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a0b      	ldr	r2, [pc, #44]	; (8003ba0 <HAL_RCC_OscConfig+0x900>)
 8003b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b76:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b78:	f7fe f9b0 	bl	8001edc <HAL_GetTick>
 8003b7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b80:	e010      	b.n	8003ba4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b82:	f7fe f9ab 	bl	8001edc <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	; 0x64
 8003b90:	d908      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e3d1      	b.n	800433a <HAL_RCC_OscConfig+0x109a>
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	10908120 	.word	0x10908120
 8003ba0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba4:	4b8d      	ldr	r3, [pc, #564]	; (8003ddc <HAL_RCC_OscConfig+0xb3c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0e8      	beq.n	8003b82 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d106      	bne.n	8003bce <HAL_RCC_OscConfig+0x92e>
 8003bc0:	4b87      	ldr	r3, [pc, #540]	; (8003de0 <HAL_RCC_OscConfig+0xb40>)
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	4a86      	ldr	r2, [pc, #536]	; (8003de0 <HAL_RCC_OscConfig+0xb40>)
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	6213      	str	r3, [r2, #32]
 8003bcc:	e035      	b.n	8003c3a <HAL_RCC_OscConfig+0x99a>
 8003bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x958>
 8003bde:	4b80      	ldr	r3, [pc, #512]	; (8003de0 <HAL_RCC_OscConfig+0xb40>)
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	4a7f      	ldr	r2, [pc, #508]	; (8003de0 <HAL_RCC_OscConfig+0xb40>)
 8003be4:	f023 0301 	bic.w	r3, r3, #1
 8003be8:	6213      	str	r3, [r2, #32]
 8003bea:	4b7d      	ldr	r3, [pc, #500]	; (8003de0 <HAL_RCC_OscConfig+0xb40>)
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	4a7c      	ldr	r2, [pc, #496]	; (8003de0 <HAL_RCC_OscConfig+0xb40>)
 8003bf0:	f023 0304 	bic.w	r3, r3, #4
 8003bf4:	6213      	str	r3, [r2, #32]
 8003bf6:	e020      	b.n	8003c3a <HAL_RCC_OscConfig+0x99a>
 8003bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b05      	cmp	r3, #5
 8003c06:	d10c      	bne.n	8003c22 <HAL_RCC_OscConfig+0x982>
 8003c08:	4b75      	ldr	r3, [pc, #468]	; (8003de0 <HAL_RCC_OscConfig+0xb40>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	4a74      	ldr	r2, [pc, #464]	; (8003de0 <HAL_RCC_OscConfig+0xb40>)
 8003c0e:	f043 0304 	orr.w	r3, r3, #4
 8003c12:	6213      	str	r3, [r2, #32]
 8003c14:	4b72      	ldr	r3, [pc, #456]	; (8003de0 <HAL_RCC_OscConfig+0xb40>)
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	4a71      	ldr	r2, [pc, #452]	; (8003de0 <HAL_RCC_OscConfig+0xb40>)
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	6213      	str	r3, [r2, #32]
 8003c20:	e00b      	b.n	8003c3a <HAL_RCC_OscConfig+0x99a>
 8003c22:	4b6f      	ldr	r3, [pc, #444]	; (8003de0 <HAL_RCC_OscConfig+0xb40>)
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	4a6e      	ldr	r2, [pc, #440]	; (8003de0 <HAL_RCC_OscConfig+0xb40>)
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	6213      	str	r3, [r2, #32]
 8003c2e:	4b6c      	ldr	r3, [pc, #432]	; (8003de0 <HAL_RCC_OscConfig+0xb40>)
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	4a6b      	ldr	r2, [pc, #428]	; (8003de0 <HAL_RCC_OscConfig+0xb40>)
 8003c34:	f023 0304 	bic.w	r3, r3, #4
 8003c38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 8081 	beq.w	8003d4e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4c:	f7fe f946 	bl	8001edc <HAL_GetTick>
 8003c50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c54:	e00b      	b.n	8003c6e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c56:	f7fe f941 	bl	8001edc <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e365      	b.n	800433a <HAL_RCC_OscConfig+0x109a>
 8003c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c72:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003c76:	2202      	movs	r2, #2
 8003c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c7e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	fa93 f2a3 	rbit	r2, r3
 8003c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c96:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ca2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	fa93 f2a3 	rbit	r2, r3
 8003cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cb0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003cb4:	601a      	str	r2, [r3, #0]
  return result;
 8003cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cba:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003cbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc0:	fab3 f383 	clz	r3, r3
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	f043 0302 	orr.w	r3, r3, #2
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d102      	bne.n	8003cda <HAL_RCC_OscConfig+0xa3a>
 8003cd4:	4b42      	ldr	r3, [pc, #264]	; (8003de0 <HAL_RCC_OscConfig+0xb40>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	e013      	b.n	8003d02 <HAL_RCC_OscConfig+0xa62>
 8003cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cde:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	fa93 f2a3 	rbit	r2, r3
 8003cf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	4b38      	ldr	r3, [pc, #224]	; (8003de0 <HAL_RCC_OscConfig+0xb40>)
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d06:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	6011      	str	r1, [r2, #0]
 8003d0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d12:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	fa92 f1a2 	rbit	r1, r2
 8003d1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d20:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003d24:	6011      	str	r1, [r2, #0]
  return result;
 8003d26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d2a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	fab2 f282 	clz	r2, r2
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	f002 021f 	and.w	r2, r2, #31
 8003d40:	2101      	movs	r1, #1
 8003d42:	fa01 f202 	lsl.w	r2, r1, r2
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d084      	beq.n	8003c56 <HAL_RCC_OscConfig+0x9b6>
 8003d4c:	e083      	b.n	8003e56 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4e:	f7fe f8c5 	bl	8001edc <HAL_GetTick>
 8003d52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d56:	e00b      	b.n	8003d70 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d58:	f7fe f8c0 	bl	8001edc <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e2e4      	b.n	800433a <HAL_RCC_OscConfig+0x109a>
 8003d70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d74:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003d78:	2202      	movs	r2, #2
 8003d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d80:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	fa93 f2a3 	rbit	r2, r3
 8003d8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d8e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d98:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	fa93 f2a3 	rbit	r2, r3
 8003dae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003db2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003db6:	601a      	str	r2, [r3, #0]
  return result;
 8003db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dbc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003dc0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc2:	fab3 f383 	clz	r3, r3
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	095b      	lsrs	r3, r3, #5
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	f043 0302 	orr.w	r3, r3, #2
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d106      	bne.n	8003de4 <HAL_RCC_OscConfig+0xb44>
 8003dd6:	4b02      	ldr	r3, [pc, #8]	; (8003de0 <HAL_RCC_OscConfig+0xb40>)
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	e017      	b.n	8003e0c <HAL_RCC_OscConfig+0xb6c>
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	40021000 	.word	0x40021000
 8003de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003de8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003dec:	2202      	movs	r2, #2
 8003dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003df4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	fa93 f2a3 	rbit	r2, r3
 8003dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e02:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	4bb3      	ldr	r3, [pc, #716]	; (80040d8 <HAL_RCC_OscConfig+0xe38>)
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e10:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e14:	2102      	movs	r1, #2
 8003e16:	6011      	str	r1, [r2, #0]
 8003e18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e1c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	fa92 f1a2 	rbit	r1, r2
 8003e26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e2a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003e2e:	6011      	str	r1, [r2, #0]
  return result;
 8003e30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e34:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003e38:	6812      	ldr	r2, [r2, #0]
 8003e3a:	fab2 f282 	clz	r2, r2
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	f002 021f 	and.w	r2, r2, #31
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d180      	bne.n	8003d58 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e56:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d105      	bne.n	8003e6a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5e:	4b9e      	ldr	r3, [pc, #632]	; (80040d8 <HAL_RCC_OscConfig+0xe38>)
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	4a9d      	ldr	r2, [pc, #628]	; (80040d8 <HAL_RCC_OscConfig+0xe38>)
 8003e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e68:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 825e 	beq.w	8004338 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e7c:	4b96      	ldr	r3, [pc, #600]	; (80040d8 <HAL_RCC_OscConfig+0xe38>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	f000 821f 	beq.w	80042c8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	f040 8170 	bne.w	800417c <HAL_RCC_OscConfig+0xedc>
 8003e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ea0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ea4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	fa93 f2a3 	rbit	r2, r3
 8003eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ebc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003ec0:	601a      	str	r2, [r3, #0]
  return result;
 8003ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ec6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003eca:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ecc:	fab3 f383 	clz	r3, r3
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ed6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	461a      	mov	r2, r3
 8003ede:	2300      	movs	r3, #0
 8003ee0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee2:	f7fd fffb 	bl	8001edc <HAL_GetTick>
 8003ee6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eea:	e009      	b.n	8003f00 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eec:	f7fd fff6 	bl	8001edc <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e21c      	b.n	800433a <HAL_RCC_OscConfig+0x109a>
 8003f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f04:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f12:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	fa93 f2a3 	rbit	r2, r3
 8003f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f20:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f24:	601a      	str	r2, [r3, #0]
  return result;
 8003f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f2a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f30:	fab3 f383 	clz	r3, r3
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d102      	bne.n	8003f4a <HAL_RCC_OscConfig+0xcaa>
 8003f44:	4b64      	ldr	r3, [pc, #400]	; (80040d8 <HAL_RCC_OscConfig+0xe38>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	e027      	b.n	8003f9a <HAL_RCC_OscConfig+0xcfa>
 8003f4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f4e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003f52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f5c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	fa93 f2a3 	rbit	r2, r3
 8003f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f6a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f74:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003f78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f82:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	fa93 f2a3 	rbit	r2, r3
 8003f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f90:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	4b50      	ldr	r3, [pc, #320]	; (80040d8 <HAL_RCC_OscConfig+0xe38>)
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f9e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003fa2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fa6:	6011      	str	r1, [r2, #0]
 8003fa8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	fa92 f1a2 	rbit	r1, r2
 8003fb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fba:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003fbe:	6011      	str	r1, [r2, #0]
  return result;
 8003fc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fc4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	fab2 f282 	clz	r2, r2
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	f042 0220 	orr.w	r2, r2, #32
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	f002 021f 	and.w	r2, r2, #31
 8003fda:	2101      	movs	r1, #1
 8003fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d182      	bne.n	8003eec <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fe6:	4b3c      	ldr	r3, [pc, #240]	; (80040d8 <HAL_RCC_OscConfig+0xe38>)
 8003fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fea:	f023 020f 	bic.w	r2, r3, #15
 8003fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	4937      	ldr	r1, [pc, #220]	; (80040d8 <HAL_RCC_OscConfig+0xe38>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004000:	4b35      	ldr	r3, [pc, #212]	; (80040d8 <HAL_RCC_OscConfig+0xe38>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004008:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800400c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6a19      	ldr	r1, [r3, #32]
 8004014:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004018:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	430b      	orrs	r3, r1
 8004022:	492d      	ldr	r1, [pc, #180]	; (80040d8 <HAL_RCC_OscConfig+0xe38>)
 8004024:	4313      	orrs	r3, r2
 8004026:	604b      	str	r3, [r1, #4]
 8004028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800402c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004030:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004034:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800403a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	fa93 f2a3 	rbit	r2, r3
 8004044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004048:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800404c:	601a      	str	r2, [r3, #0]
  return result;
 800404e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004052:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004056:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004058:	fab3 f383 	clz	r3, r3
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004062:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	461a      	mov	r2, r3
 800406a:	2301      	movs	r3, #1
 800406c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406e:	f7fd ff35 	bl	8001edc <HAL_GetTick>
 8004072:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004076:	e009      	b.n	800408c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004078:	f7fd ff30 	bl	8001edc <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e156      	b.n	800433a <HAL_RCC_OscConfig+0x109a>
 800408c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004090:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004094:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800409e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	fa93 f2a3 	rbit	r2, r3
 80040a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80040b0:	601a      	str	r2, [r3, #0]
  return result;
 80040b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040b6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80040ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040bc:	fab3 f383 	clz	r3, r3
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d105      	bne.n	80040dc <HAL_RCC_OscConfig+0xe3c>
 80040d0:	4b01      	ldr	r3, [pc, #4]	; (80040d8 <HAL_RCC_OscConfig+0xe38>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	e02a      	b.n	800412c <HAL_RCC_OscConfig+0xe8c>
 80040d6:	bf00      	nop
 80040d8:	40021000 	.word	0x40021000
 80040dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040e0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80040e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ee:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	fa93 f2a3 	rbit	r2, r3
 80040f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040fc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004106:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800410a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004114:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	fa93 f2a3 	rbit	r2, r3
 800411e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004122:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	4b86      	ldr	r3, [pc, #536]	; (8004344 <HAL_RCC_OscConfig+0x10a4>)
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004130:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004134:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004138:	6011      	str	r1, [r2, #0]
 800413a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800413e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	fa92 f1a2 	rbit	r1, r2
 8004148:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800414c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004150:	6011      	str	r1, [r2, #0]
  return result;
 8004152:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004156:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	fab2 f282 	clz	r2, r2
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	f042 0220 	orr.w	r2, r2, #32
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	f002 021f 	and.w	r2, r2, #31
 800416c:	2101      	movs	r1, #1
 800416e:	fa01 f202 	lsl.w	r2, r1, r2
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	f43f af7f 	beq.w	8004078 <HAL_RCC_OscConfig+0xdd8>
 800417a:	e0dd      	b.n	8004338 <HAL_RCC_OscConfig+0x1098>
 800417c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004180:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004184:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800418e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	fa93 f2a3 	rbit	r2, r3
 8004198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800419c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80041a0:	601a      	str	r2, [r3, #0]
  return result;
 80041a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041a6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80041aa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ac:	fab3 f383 	clz	r3, r3
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	461a      	mov	r2, r3
 80041be:	2300      	movs	r3, #0
 80041c0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c2:	f7fd fe8b 	bl	8001edc <HAL_GetTick>
 80041c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ca:	e009      	b.n	80041e0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041cc:	f7fd fe86 	bl	8001edc <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e0ac      	b.n	800433a <HAL_RCC_OscConfig+0x109a>
 80041e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80041e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	fa93 f2a3 	rbit	r2, r3
 80041fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004200:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004204:	601a      	str	r2, [r3, #0]
  return result;
 8004206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800420a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800420e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004210:	fab3 f383 	clz	r3, r3
 8004214:	b2db      	uxtb	r3, r3
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	b2db      	uxtb	r3, r3
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	d102      	bne.n	800422a <HAL_RCC_OscConfig+0xf8a>
 8004224:	4b47      	ldr	r3, [pc, #284]	; (8004344 <HAL_RCC_OscConfig+0x10a4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	e027      	b.n	800427a <HAL_RCC_OscConfig+0xfda>
 800422a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800422e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004232:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800423c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	fa93 f2a3 	rbit	r2, r3
 8004246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800424a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004254:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004258:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004262:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	fa93 f2a3 	rbit	r2, r3
 800426c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004270:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	4b33      	ldr	r3, [pc, #204]	; (8004344 <HAL_RCC_OscConfig+0x10a4>)
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800427e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004282:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004286:	6011      	str	r1, [r2, #0]
 8004288:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800428c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	fa92 f1a2 	rbit	r1, r2
 8004296:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800429a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800429e:	6011      	str	r1, [r2, #0]
  return result;
 80042a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80042a4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	fab2 f282 	clz	r2, r2
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	f042 0220 	orr.w	r2, r2, #32
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	f002 021f 	and.w	r2, r2, #31
 80042ba:	2101      	movs	r1, #1
 80042bc:	fa01 f202 	lsl.w	r2, r1, r2
 80042c0:	4013      	ands	r3, r2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d182      	bne.n	80041cc <HAL_RCC_OscConfig+0xf2c>
 80042c6:	e037      	b.n	8004338 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e02e      	b.n	800433a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042dc:	4b19      	ldr	r3, [pc, #100]	; (8004344 <HAL_RCC_OscConfig+0x10a4>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80042e4:	4b17      	ldr	r3, [pc, #92]	; (8004344 <HAL_RCC_OscConfig+0x10a4>)
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80042f0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80042f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	429a      	cmp	r2, r3
 8004302:	d117      	bne.n	8004334 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004304:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004308:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800430c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004310:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004318:	429a      	cmp	r2, r3
 800431a:	d10b      	bne.n	8004334 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800431c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004320:	f003 020f 	and.w	r2, r3, #15
 8004324:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004328:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e000      	b.n	800433a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40021000 	.word	0x40021000

08004348 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b09e      	sub	sp, #120	; 0x78
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e162      	b.n	8004626 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004360:	4b90      	ldr	r3, [pc, #576]	; (80045a4 <HAL_RCC_ClockConfig+0x25c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d910      	bls.n	8004390 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436e:	4b8d      	ldr	r3, [pc, #564]	; (80045a4 <HAL_RCC_ClockConfig+0x25c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 0207 	bic.w	r2, r3, #7
 8004376:	498b      	ldr	r1, [pc, #556]	; (80045a4 <HAL_RCC_ClockConfig+0x25c>)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	4b89      	ldr	r3, [pc, #548]	; (80045a4 <HAL_RCC_ClockConfig+0x25c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e14a      	b.n	8004626 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800439c:	4b82      	ldr	r3, [pc, #520]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	497f      	ldr	r1, [pc, #508]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80dc 	beq.w	8004574 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d13c      	bne.n	800443e <HAL_RCC_ClockConfig+0xf6>
 80043c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043c8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043cc:	fa93 f3a3 	rbit	r3, r3
 80043d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80043d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d4:	fab3 f383 	clz	r3, r3
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d102      	bne.n	80043ee <HAL_RCC_ClockConfig+0xa6>
 80043e8:	4b6f      	ldr	r3, [pc, #444]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	e00f      	b.n	800440e <HAL_RCC_ClockConfig+0xc6>
 80043ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	667b      	str	r3, [r7, #100]	; 0x64
 80043fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004400:	663b      	str	r3, [r7, #96]	; 0x60
 8004402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004404:	fa93 f3a3 	rbit	r3, r3
 8004408:	65fb      	str	r3, [r7, #92]	; 0x5c
 800440a:	4b67      	ldr	r3, [pc, #412]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004412:	65ba      	str	r2, [r7, #88]	; 0x58
 8004414:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004416:	fa92 f2a2 	rbit	r2, r2
 800441a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800441c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800441e:	fab2 f282 	clz	r2, r2
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	f042 0220 	orr.w	r2, r2, #32
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	f002 021f 	and.w	r2, r2, #31
 800442e:	2101      	movs	r1, #1
 8004430:	fa01 f202 	lsl.w	r2, r1, r2
 8004434:	4013      	ands	r3, r2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d17b      	bne.n	8004532 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e0f3      	b.n	8004626 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d13c      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x178>
 8004446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800444a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444e:	fa93 f3a3 	rbit	r3, r3
 8004452:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004456:	fab3 f383 	clz	r3, r3
 800445a:	b2db      	uxtb	r3, r3
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b01      	cmp	r3, #1
 8004468:	d102      	bne.n	8004470 <HAL_RCC_ClockConfig+0x128>
 800446a:	4b4f      	ldr	r3, [pc, #316]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	e00f      	b.n	8004490 <HAL_RCC_ClockConfig+0x148>
 8004470:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004474:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004478:	fa93 f3a3 	rbit	r3, r3
 800447c:	647b      	str	r3, [r7, #68]	; 0x44
 800447e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004482:	643b      	str	r3, [r7, #64]	; 0x40
 8004484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004486:	fa93 f3a3 	rbit	r3, r3
 800448a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800448c:	4b46      	ldr	r3, [pc, #280]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004494:	63ba      	str	r2, [r7, #56]	; 0x38
 8004496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004498:	fa92 f2a2 	rbit	r2, r2
 800449c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800449e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044a0:	fab2 f282 	clz	r2, r2
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	f042 0220 	orr.w	r2, r2, #32
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	f002 021f 	and.w	r2, r2, #31
 80044b0:	2101      	movs	r1, #1
 80044b2:	fa01 f202 	lsl.w	r2, r1, r2
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d13a      	bne.n	8004532 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0b2      	b.n	8004626 <HAL_RCC_ClockConfig+0x2de>
 80044c0:	2302      	movs	r3, #2
 80044c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	fa93 f3a3 	rbit	r3, r3
 80044ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80044cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ce:	fab3 f383 	clz	r3, r3
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d102      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x1a0>
 80044e2:	4b31      	ldr	r3, [pc, #196]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	e00d      	b.n	8004504 <HAL_RCC_ClockConfig+0x1bc>
 80044e8:	2302      	movs	r3, #2
 80044ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	fa93 f3a3 	rbit	r3, r3
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
 80044f4:	2302      	movs	r3, #2
 80044f6:	623b      	str	r3, [r7, #32]
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	fa93 f3a3 	rbit	r3, r3
 80044fe:	61fb      	str	r3, [r7, #28]
 8004500:	4b29      	ldr	r3, [pc, #164]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	2202      	movs	r2, #2
 8004506:	61ba      	str	r2, [r7, #24]
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	fa92 f2a2 	rbit	r2, r2
 800450e:	617a      	str	r2, [r7, #20]
  return result;
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	fab2 f282 	clz	r2, r2
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	f042 0220 	orr.w	r2, r2, #32
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	f002 021f 	and.w	r2, r2, #31
 8004522:	2101      	movs	r1, #1
 8004524:	fa01 f202 	lsl.w	r2, r1, r2
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e079      	b.n	8004626 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004532:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f023 0203 	bic.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	491a      	ldr	r1, [pc, #104]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 8004540:	4313      	orrs	r3, r2
 8004542:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004544:	f7fd fcca 	bl	8001edc <HAL_GetTick>
 8004548:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	e00a      	b.n	8004562 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454c:	f7fd fcc6 	bl	8001edc <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e061      	b.n	8004626 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004562:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <HAL_RCC_ClockConfig+0x260>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f003 020c 	and.w	r2, r3, #12
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	429a      	cmp	r2, r3
 8004572:	d1eb      	bne.n	800454c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004574:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <HAL_RCC_ClockConfig+0x25c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d214      	bcs.n	80045ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <HAL_RCC_ClockConfig+0x25c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 0207 	bic.w	r2, r3, #7
 800458a:	4906      	ldr	r1, [pc, #24]	; (80045a4 <HAL_RCC_ClockConfig+0x25c>)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <HAL_RCC_ClockConfig+0x25c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d005      	beq.n	80045ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e040      	b.n	8004626 <HAL_RCC_ClockConfig+0x2de>
 80045a4:	40022000 	.word	0x40022000
 80045a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b8:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <HAL_RCC_ClockConfig+0x2e8>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	491a      	ldr	r1, [pc, #104]	; (8004630 <HAL_RCC_ClockConfig+0x2e8>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045d6:	4b16      	ldr	r3, [pc, #88]	; (8004630 <HAL_RCC_ClockConfig+0x2e8>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4912      	ldr	r1, [pc, #72]	; (8004630 <HAL_RCC_ClockConfig+0x2e8>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80045ea:	f000 f829 	bl	8004640 <HAL_RCC_GetSysClockFreq>
 80045ee:	4601      	mov	r1, r0
 80045f0:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <HAL_RCC_ClockConfig+0x2e8>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045f8:	22f0      	movs	r2, #240	; 0xf0
 80045fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	fa92 f2a2 	rbit	r2, r2
 8004602:	60fa      	str	r2, [r7, #12]
  return result;
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	fab2 f282 	clz	r2, r2
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	40d3      	lsrs	r3, r2
 800460e:	4a09      	ldr	r2, [pc, #36]	; (8004634 <HAL_RCC_ClockConfig+0x2ec>)
 8004610:	5cd3      	ldrb	r3, [r2, r3]
 8004612:	fa21 f303 	lsr.w	r3, r1, r3
 8004616:	4a08      	ldr	r2, [pc, #32]	; (8004638 <HAL_RCC_ClockConfig+0x2f0>)
 8004618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800461a:	4b08      	ldr	r3, [pc, #32]	; (800463c <HAL_RCC_ClockConfig+0x2f4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fd fc18 	bl	8001e54 <HAL_InitTick>
  
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3778      	adds	r7, #120	; 0x78
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40021000 	.word	0x40021000
 8004634:	0800a298 	.word	0x0800a298
 8004638:	20000010 	.word	0x20000010
 800463c:	20000014 	.word	0x20000014

08004640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004640:	b480      	push	{r7}
 8004642:	b08b      	sub	sp, #44	; 0x2c
 8004644:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004646:	2300      	movs	r3, #0
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	2300      	movs	r3, #0
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	2300      	movs	r3, #0
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800465a:	4b2a      	ldr	r3, [pc, #168]	; (8004704 <HAL_RCC_GetSysClockFreq+0xc4>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b04      	cmp	r3, #4
 8004668:	d002      	beq.n	8004670 <HAL_RCC_GetSysClockFreq+0x30>
 800466a:	2b08      	cmp	r3, #8
 800466c:	d003      	beq.n	8004676 <HAL_RCC_GetSysClockFreq+0x36>
 800466e:	e03f      	b.n	80046f0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004670:	4b25      	ldr	r3, [pc, #148]	; (8004708 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004672:	623b      	str	r3, [r7, #32]
      break;
 8004674:	e03f      	b.n	80046f6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800467c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004680:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	fa92 f2a2 	rbit	r2, r2
 8004688:	607a      	str	r2, [r7, #4]
  return result;
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	fab2 f282 	clz	r2, r2
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	40d3      	lsrs	r3, r2
 8004694:	4a1d      	ldr	r2, [pc, #116]	; (800470c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004696:	5cd3      	ldrb	r3, [r2, r3]
 8004698:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800469a:	4b1a      	ldr	r3, [pc, #104]	; (8004704 <HAL_RCC_GetSysClockFreq+0xc4>)
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	220f      	movs	r2, #15
 80046a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	fa92 f2a2 	rbit	r2, r2
 80046ac:	60fa      	str	r2, [r7, #12]
  return result;
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	fab2 f282 	clz	r2, r2
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	40d3      	lsrs	r3, r2
 80046b8:	4a15      	ldr	r2, [pc, #84]	; (8004710 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046ba:	5cd3      	ldrb	r3, [r2, r3]
 80046bc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d008      	beq.n	80046da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046c8:	4a0f      	ldr	r2, [pc, #60]	; (8004708 <HAL_RCC_GetSysClockFreq+0xc8>)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
 80046d8:	e007      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046da:	4a0b      	ldr	r2, [pc, #44]	; (8004708 <HAL_RCC_GetSysClockFreq+0xc8>)
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	fb02 f303 	mul.w	r3, r2, r3
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	623b      	str	r3, [r7, #32]
      break;
 80046ee:	e002      	b.n	80046f6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <HAL_RCC_GetSysClockFreq+0xc8>)
 80046f2:	623b      	str	r3, [r7, #32]
      break;
 80046f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046f6:	6a3b      	ldr	r3, [r7, #32]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	372c      	adds	r7, #44	; 0x2c
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	40021000 	.word	0x40021000
 8004708:	007a1200 	.word	0x007a1200
 800470c:	0800a2b0 	.word	0x0800a2b0
 8004710:	0800a2c0 	.word	0x0800a2c0

08004714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004718:	4b03      	ldr	r3, [pc, #12]	; (8004728 <HAL_RCC_GetHCLKFreq+0x14>)
 800471a:	681b      	ldr	r3, [r3, #0]
}
 800471c:	4618      	mov	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000010 	.word	0x20000010

0800472c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004732:	f7ff ffef 	bl	8004714 <HAL_RCC_GetHCLKFreq>
 8004736:	4601      	mov	r1, r0
 8004738:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004740:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004744:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	fa92 f2a2 	rbit	r2, r2
 800474c:	603a      	str	r2, [r7, #0]
  return result;
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	fab2 f282 	clz	r2, r2
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	40d3      	lsrs	r3, r2
 8004758:	4a04      	ldr	r2, [pc, #16]	; (800476c <HAL_RCC_GetPCLK1Freq+0x40>)
 800475a:	5cd3      	ldrb	r3, [r2, r3]
 800475c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40021000 	.word	0x40021000
 800476c:	0800a2a8 	.word	0x0800a2a8

08004770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004776:	f7ff ffcd 	bl	8004714 <HAL_RCC_GetHCLKFreq>
 800477a:	4601      	mov	r1, r0
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004784:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004788:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	fa92 f2a2 	rbit	r2, r2
 8004790:	603a      	str	r2, [r7, #0]
  return result;
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	fab2 f282 	clz	r2, r2
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	40d3      	lsrs	r3, r2
 800479c:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800479e:	5cd3      	ldrb	r3, [r2, r3]
 80047a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40021000 	.word	0x40021000
 80047b0:	0800a2a8 	.word	0x0800a2a8

080047b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b092      	sub	sp, #72	; 0x48
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80047c4:	2300      	movs	r3, #0
 80047c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 80d4 	beq.w	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047d8:	4b4e      	ldr	r3, [pc, #312]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10e      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e4:	4b4b      	ldr	r3, [pc, #300]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	4a4a      	ldr	r2, [pc, #296]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ee:	61d3      	str	r3, [r2, #28]
 80047f0:	4b48      	ldr	r3, [pc, #288]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004802:	4b45      	ldr	r3, [pc, #276]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480a:	2b00      	cmp	r3, #0
 800480c:	d118      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800480e:	4b42      	ldr	r3, [pc, #264]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a41      	ldr	r2, [pc, #260]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004818:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800481a:	f7fd fb5f 	bl	8001edc <HAL_GetTick>
 800481e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004820:	e008      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004822:	f7fd fb5b 	bl	8001edc <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b64      	cmp	r3, #100	; 0x64
 800482e:	d901      	bls.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e1d6      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004834:	4b38      	ldr	r3, [pc, #224]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004840:	4b34      	ldr	r3, [pc, #208]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004848:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800484a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 8084 	beq.w	800495a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800485a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800485c:	429a      	cmp	r2, r3
 800485e:	d07c      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004860:	4b2c      	ldr	r3, [pc, #176]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800486a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800486e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	fa93 f3a3 	rbit	r3, r3
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800487a:	fab3 f383 	clz	r3, r3
 800487e:	b2db      	uxtb	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	4b26      	ldr	r3, [pc, #152]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	461a      	mov	r2, r3
 800488a:	2301      	movs	r3, #1
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004892:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004896:	fa93 f3a3 	rbit	r3, r3
 800489a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800489c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800489e:	fab3 f383 	clz	r3, r3
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	4b1d      	ldr	r3, [pc, #116]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	461a      	mov	r2, r3
 80048ae:	2300      	movs	r3, #0
 80048b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048b2:	4a18      	ldr	r2, [pc, #96]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d04b      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c2:	f7fd fb0b 	bl	8001edc <HAL_GetTick>
 80048c6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c8:	e00a      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ca:	f7fd fb07 	bl	8001edc <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d8:	4293      	cmp	r3, r2
 80048da:	d901      	bls.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e180      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80048e0:	2302      	movs	r3, #2
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	fa93 f3a3 	rbit	r3, r3
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
 80048ec:	2302      	movs	r3, #2
 80048ee:	623b      	str	r3, [r7, #32]
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	fa93 f3a3 	rbit	r3, r3
 80048f6:	61fb      	str	r3, [r7, #28]
  return result;
 80048f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fa:	fab3 f383 	clz	r3, r3
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	095b      	lsrs	r3, r3, #5
 8004902:	b2db      	uxtb	r3, r3
 8004904:	f043 0302 	orr.w	r3, r3, #2
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d108      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800490e:	4b01      	ldr	r3, [pc, #4]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	e00d      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004914:	40021000 	.word	0x40021000
 8004918:	40007000 	.word	0x40007000
 800491c:	10908100 	.word	0x10908100
 8004920:	2302      	movs	r3, #2
 8004922:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	fa93 f3a3 	rbit	r3, r3
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	4b9a      	ldr	r3, [pc, #616]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	2202      	movs	r2, #2
 8004932:	613a      	str	r2, [r7, #16]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	fa92 f2a2 	rbit	r2, r2
 800493a:	60fa      	str	r2, [r7, #12]
  return result;
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	fab2 f282 	clz	r2, r2
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	f002 021f 	and.w	r2, r2, #31
 800494e:	2101      	movs	r1, #1
 8004950:	fa01 f202 	lsl.w	r2, r1, r2
 8004954:	4013      	ands	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0b7      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800495a:	4b8f      	ldr	r3, [pc, #572]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	498c      	ldr	r1, [pc, #560]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004968:	4313      	orrs	r3, r2
 800496a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800496c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004970:	2b01      	cmp	r3, #1
 8004972:	d105      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004974:	4b88      	ldr	r3, [pc, #544]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	4a87      	ldr	r2, [pc, #540]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800497a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800497e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800498c:	4b82      	ldr	r3, [pc, #520]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	f023 0203 	bic.w	r2, r3, #3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	497f      	ldr	r1, [pc, #508]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800499a:	4313      	orrs	r3, r2
 800499c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d008      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049aa:	4b7b      	ldr	r3, [pc, #492]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	4978      	ldr	r1, [pc, #480]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049c8:	4b73      	ldr	r3, [pc, #460]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	4970      	ldr	r1, [pc, #448]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d008      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049e6:	4b6c      	ldr	r3, [pc, #432]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	f023 0210 	bic.w	r2, r3, #16
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	4969      	ldr	r1, [pc, #420]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004a04:	4b64      	ldr	r3, [pc, #400]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a10:	4961      	ldr	r1, [pc, #388]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a22:	4b5d      	ldr	r3, [pc, #372]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	f023 0220 	bic.w	r2, r3, #32
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	495a      	ldr	r1, [pc, #360]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a40:	4b55      	ldr	r3, [pc, #340]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a44:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	4952      	ldr	r1, [pc, #328]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d008      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a5e:	4b4e      	ldr	r3, [pc, #312]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	494b      	ldr	r1, [pc, #300]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a7c:	4b46      	ldr	r3, [pc, #280]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	4943      	ldr	r1, [pc, #268]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d008      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a9a:	4b3f      	ldr	r3, [pc, #252]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	493c      	ldr	r1, [pc, #240]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ab8:	4b37      	ldr	r3, [pc, #220]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	4934      	ldr	r1, [pc, #208]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d008      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004ad6:	4b30      	ldr	r3, [pc, #192]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ada:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	492d      	ldr	r1, [pc, #180]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004af4:	4b28      	ldr	r3, [pc, #160]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b00:	4925      	ldr	r1, [pc, #148]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d008      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004b12:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b16:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	491e      	ldr	r1, [pc, #120]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d008      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004b30:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	4916      	ldr	r1, [pc, #88]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d008      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004b4e:	4b12      	ldr	r3, [pc, #72]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5a:	490f      	ldr	r1, [pc, #60]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b78:	4907      	ldr	r1, [pc, #28]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00c      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004b8a:	4b03      	ldr	r3, [pc, #12]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	e002      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9e:	4913      	ldr	r1, [pc, #76]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004bb0:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbc:	490b      	ldr	r1, [pc, #44]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d008      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004bce:	4b07      	ldr	r3, [pc, #28]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bda:	4904      	ldr	r1, [pc, #16]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3748      	adds	r7, #72	; 0x48
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40021000 	.word	0x40021000

08004bf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e049      	b.n	8004c96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fd f84a 	bl	8001cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4610      	mov	r0, r2
 8004c30:	f000 f836 	bl	8004ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a42      	ldr	r2, [pc, #264]	; (8004dbc <TIM_Base_SetConfig+0x11c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d013      	beq.n	8004ce0 <TIM_Base_SetConfig+0x40>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbe:	d00f      	beq.n	8004ce0 <TIM_Base_SetConfig+0x40>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a3f      	ldr	r2, [pc, #252]	; (8004dc0 <TIM_Base_SetConfig+0x120>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d00b      	beq.n	8004ce0 <TIM_Base_SetConfig+0x40>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a3e      	ldr	r2, [pc, #248]	; (8004dc4 <TIM_Base_SetConfig+0x124>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d007      	beq.n	8004ce0 <TIM_Base_SetConfig+0x40>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a3d      	ldr	r2, [pc, #244]	; (8004dc8 <TIM_Base_SetConfig+0x128>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <TIM_Base_SetConfig+0x40>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a3c      	ldr	r2, [pc, #240]	; (8004dcc <TIM_Base_SetConfig+0x12c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d108      	bne.n	8004cf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a31      	ldr	r2, [pc, #196]	; (8004dbc <TIM_Base_SetConfig+0x11c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01f      	beq.n	8004d3a <TIM_Base_SetConfig+0x9a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d00:	d01b      	beq.n	8004d3a <TIM_Base_SetConfig+0x9a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a2e      	ldr	r2, [pc, #184]	; (8004dc0 <TIM_Base_SetConfig+0x120>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d017      	beq.n	8004d3a <TIM_Base_SetConfig+0x9a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a2d      	ldr	r2, [pc, #180]	; (8004dc4 <TIM_Base_SetConfig+0x124>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <TIM_Base_SetConfig+0x9a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a2c      	ldr	r2, [pc, #176]	; (8004dc8 <TIM_Base_SetConfig+0x128>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00f      	beq.n	8004d3a <TIM_Base_SetConfig+0x9a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a2c      	ldr	r2, [pc, #176]	; (8004dd0 <TIM_Base_SetConfig+0x130>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00b      	beq.n	8004d3a <TIM_Base_SetConfig+0x9a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a2b      	ldr	r2, [pc, #172]	; (8004dd4 <TIM_Base_SetConfig+0x134>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d007      	beq.n	8004d3a <TIM_Base_SetConfig+0x9a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a2a      	ldr	r2, [pc, #168]	; (8004dd8 <TIM_Base_SetConfig+0x138>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d003      	beq.n	8004d3a <TIM_Base_SetConfig+0x9a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a25      	ldr	r2, [pc, #148]	; (8004dcc <TIM_Base_SetConfig+0x12c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d108      	bne.n	8004d4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a12      	ldr	r2, [pc, #72]	; (8004dbc <TIM_Base_SetConfig+0x11c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d013      	beq.n	8004da0 <TIM_Base_SetConfig+0x100>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a13      	ldr	r2, [pc, #76]	; (8004dc8 <TIM_Base_SetConfig+0x128>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00f      	beq.n	8004da0 <TIM_Base_SetConfig+0x100>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <TIM_Base_SetConfig+0x130>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00b      	beq.n	8004da0 <TIM_Base_SetConfig+0x100>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a12      	ldr	r2, [pc, #72]	; (8004dd4 <TIM_Base_SetConfig+0x134>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d007      	beq.n	8004da0 <TIM_Base_SetConfig+0x100>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a11      	ldr	r2, [pc, #68]	; (8004dd8 <TIM_Base_SetConfig+0x138>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d003      	beq.n	8004da0 <TIM_Base_SetConfig+0x100>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a0c      	ldr	r2, [pc, #48]	; (8004dcc <TIM_Base_SetConfig+0x12c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d103      	bne.n	8004da8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	615a      	str	r2, [r3, #20]
}
 8004dae:	bf00      	nop
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40012c00 	.word	0x40012c00
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40000800 	.word	0x40000800
 8004dc8:	40013400 	.word	0x40013400
 8004dcc:	40015000 	.word	0x40015000
 8004dd0:	40014000 	.word	0x40014000
 8004dd4:	40014400 	.word	0x40014400
 8004dd8:	40014800 	.word	0x40014800

08004ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e040      	b.n	8004e70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fc ffa6 	bl	8001d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2224      	movs	r2, #36	; 0x24
 8004e08:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0201 	bic.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f8b6 	bl	8004f8c <UART_SetConfig>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e022      	b.n	8004e70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fa7e 	bl	8005334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fb05 	bl	8005478 <UART_CheckIdleState>
 8004e6e:	4603      	mov	r3, r0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	; 0x28
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	4613      	mov	r3, r2
 8004e86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	d178      	bne.n	8004f82 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <HAL_UART_Transmit+0x24>
 8004e96:	88fb      	ldrh	r3, [r7, #6]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e071      	b.n	8004f84 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2221      	movs	r2, #33	; 0x21
 8004eac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eae:	f7fd f815 	bl	8001edc <HAL_GetTick>
 8004eb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	88fa      	ldrh	r2, [r7, #6]
 8004eb8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	88fa      	ldrh	r2, [r7, #6]
 8004ec0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ecc:	d108      	bne.n	8004ee0 <HAL_UART_Transmit+0x68>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d104      	bne.n	8004ee0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	e003      	b.n	8004ee8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ee8:	e030      	b.n	8004f4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2180      	movs	r1, #128	; 0x80
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fb67 	bl	80055c8 <UART_WaitOnFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d004      	beq.n	8004f0a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e03c      	b.n	8004f84 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10b      	bne.n	8004f28 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	881a      	ldrh	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f1c:	b292      	uxth	r2, r2
 8004f1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	3302      	adds	r3, #2
 8004f24:	61bb      	str	r3, [r7, #24]
 8004f26:	e008      	b.n	8004f3a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	781a      	ldrb	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	b292      	uxth	r2, r2
 8004f32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	3301      	adds	r3, #1
 8004f38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1c8      	bne.n	8004eea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2140      	movs	r1, #64	; 0x40
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 fb30 	bl	80055c8 <UART_WaitOnFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d004      	beq.n	8004f78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e005      	b.n	8004f84 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e000      	b.n	8004f84 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004f82:	2302      	movs	r3, #2
  }
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3720      	adds	r7, #32
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b92      	ldr	r3, [pc, #584]	; (8005200 <UART_SetConfig+0x274>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	6979      	ldr	r1, [r7, #20]
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a80      	ldr	r2, [pc, #512]	; (8005204 <UART_SetConfig+0x278>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d120      	bne.n	800504a <UART_SetConfig+0xbe>
 8005008:	4b7f      	ldr	r3, [pc, #508]	; (8005208 <UART_SetConfig+0x27c>)
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	f003 0303 	and.w	r3, r3, #3
 8005010:	2b03      	cmp	r3, #3
 8005012:	d817      	bhi.n	8005044 <UART_SetConfig+0xb8>
 8005014:	a201      	add	r2, pc, #4	; (adr r2, 800501c <UART_SetConfig+0x90>)
 8005016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501a:	bf00      	nop
 800501c:	0800502d 	.word	0x0800502d
 8005020:	08005039 	.word	0x08005039
 8005024:	0800503f 	.word	0x0800503f
 8005028:	08005033 	.word	0x08005033
 800502c:	2301      	movs	r3, #1
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e0b5      	b.n	800519e <UART_SetConfig+0x212>
 8005032:	2302      	movs	r3, #2
 8005034:	77fb      	strb	r3, [r7, #31]
 8005036:	e0b2      	b.n	800519e <UART_SetConfig+0x212>
 8005038:	2304      	movs	r3, #4
 800503a:	77fb      	strb	r3, [r7, #31]
 800503c:	e0af      	b.n	800519e <UART_SetConfig+0x212>
 800503e:	2308      	movs	r3, #8
 8005040:	77fb      	strb	r3, [r7, #31]
 8005042:	e0ac      	b.n	800519e <UART_SetConfig+0x212>
 8005044:	2310      	movs	r3, #16
 8005046:	77fb      	strb	r3, [r7, #31]
 8005048:	e0a9      	b.n	800519e <UART_SetConfig+0x212>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a6f      	ldr	r2, [pc, #444]	; (800520c <UART_SetConfig+0x280>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d124      	bne.n	800509e <UART_SetConfig+0x112>
 8005054:	4b6c      	ldr	r3, [pc, #432]	; (8005208 <UART_SetConfig+0x27c>)
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800505c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005060:	d011      	beq.n	8005086 <UART_SetConfig+0xfa>
 8005062:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005066:	d817      	bhi.n	8005098 <UART_SetConfig+0x10c>
 8005068:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800506c:	d011      	beq.n	8005092 <UART_SetConfig+0x106>
 800506e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005072:	d811      	bhi.n	8005098 <UART_SetConfig+0x10c>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <UART_SetConfig+0xf4>
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507c:	d006      	beq.n	800508c <UART_SetConfig+0x100>
 800507e:	e00b      	b.n	8005098 <UART_SetConfig+0x10c>
 8005080:	2300      	movs	r3, #0
 8005082:	77fb      	strb	r3, [r7, #31]
 8005084:	e08b      	b.n	800519e <UART_SetConfig+0x212>
 8005086:	2302      	movs	r3, #2
 8005088:	77fb      	strb	r3, [r7, #31]
 800508a:	e088      	b.n	800519e <UART_SetConfig+0x212>
 800508c:	2304      	movs	r3, #4
 800508e:	77fb      	strb	r3, [r7, #31]
 8005090:	e085      	b.n	800519e <UART_SetConfig+0x212>
 8005092:	2308      	movs	r3, #8
 8005094:	77fb      	strb	r3, [r7, #31]
 8005096:	e082      	b.n	800519e <UART_SetConfig+0x212>
 8005098:	2310      	movs	r3, #16
 800509a:	77fb      	strb	r3, [r7, #31]
 800509c:	e07f      	b.n	800519e <UART_SetConfig+0x212>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a5b      	ldr	r2, [pc, #364]	; (8005210 <UART_SetConfig+0x284>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d124      	bne.n	80050f2 <UART_SetConfig+0x166>
 80050a8:	4b57      	ldr	r3, [pc, #348]	; (8005208 <UART_SetConfig+0x27c>)
 80050aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80050b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80050b4:	d011      	beq.n	80050da <UART_SetConfig+0x14e>
 80050b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80050ba:	d817      	bhi.n	80050ec <UART_SetConfig+0x160>
 80050bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050c0:	d011      	beq.n	80050e6 <UART_SetConfig+0x15a>
 80050c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050c6:	d811      	bhi.n	80050ec <UART_SetConfig+0x160>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <UART_SetConfig+0x148>
 80050cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050d0:	d006      	beq.n	80050e0 <UART_SetConfig+0x154>
 80050d2:	e00b      	b.n	80050ec <UART_SetConfig+0x160>
 80050d4:	2300      	movs	r3, #0
 80050d6:	77fb      	strb	r3, [r7, #31]
 80050d8:	e061      	b.n	800519e <UART_SetConfig+0x212>
 80050da:	2302      	movs	r3, #2
 80050dc:	77fb      	strb	r3, [r7, #31]
 80050de:	e05e      	b.n	800519e <UART_SetConfig+0x212>
 80050e0:	2304      	movs	r3, #4
 80050e2:	77fb      	strb	r3, [r7, #31]
 80050e4:	e05b      	b.n	800519e <UART_SetConfig+0x212>
 80050e6:	2308      	movs	r3, #8
 80050e8:	77fb      	strb	r3, [r7, #31]
 80050ea:	e058      	b.n	800519e <UART_SetConfig+0x212>
 80050ec:	2310      	movs	r3, #16
 80050ee:	77fb      	strb	r3, [r7, #31]
 80050f0:	e055      	b.n	800519e <UART_SetConfig+0x212>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a47      	ldr	r2, [pc, #284]	; (8005214 <UART_SetConfig+0x288>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d124      	bne.n	8005146 <UART_SetConfig+0x1ba>
 80050fc:	4b42      	ldr	r3, [pc, #264]	; (8005208 <UART_SetConfig+0x27c>)
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005104:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005108:	d011      	beq.n	800512e <UART_SetConfig+0x1a2>
 800510a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800510e:	d817      	bhi.n	8005140 <UART_SetConfig+0x1b4>
 8005110:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005114:	d011      	beq.n	800513a <UART_SetConfig+0x1ae>
 8005116:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800511a:	d811      	bhi.n	8005140 <UART_SetConfig+0x1b4>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <UART_SetConfig+0x19c>
 8005120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005124:	d006      	beq.n	8005134 <UART_SetConfig+0x1a8>
 8005126:	e00b      	b.n	8005140 <UART_SetConfig+0x1b4>
 8005128:	2300      	movs	r3, #0
 800512a:	77fb      	strb	r3, [r7, #31]
 800512c:	e037      	b.n	800519e <UART_SetConfig+0x212>
 800512e:	2302      	movs	r3, #2
 8005130:	77fb      	strb	r3, [r7, #31]
 8005132:	e034      	b.n	800519e <UART_SetConfig+0x212>
 8005134:	2304      	movs	r3, #4
 8005136:	77fb      	strb	r3, [r7, #31]
 8005138:	e031      	b.n	800519e <UART_SetConfig+0x212>
 800513a:	2308      	movs	r3, #8
 800513c:	77fb      	strb	r3, [r7, #31]
 800513e:	e02e      	b.n	800519e <UART_SetConfig+0x212>
 8005140:	2310      	movs	r3, #16
 8005142:	77fb      	strb	r3, [r7, #31]
 8005144:	e02b      	b.n	800519e <UART_SetConfig+0x212>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a33      	ldr	r2, [pc, #204]	; (8005218 <UART_SetConfig+0x28c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d124      	bne.n	800519a <UART_SetConfig+0x20e>
 8005150:	4b2d      	ldr	r3, [pc, #180]	; (8005208 <UART_SetConfig+0x27c>)
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005154:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005158:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800515c:	d011      	beq.n	8005182 <UART_SetConfig+0x1f6>
 800515e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005162:	d817      	bhi.n	8005194 <UART_SetConfig+0x208>
 8005164:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005168:	d011      	beq.n	800518e <UART_SetConfig+0x202>
 800516a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800516e:	d811      	bhi.n	8005194 <UART_SetConfig+0x208>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <UART_SetConfig+0x1f0>
 8005174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005178:	d006      	beq.n	8005188 <UART_SetConfig+0x1fc>
 800517a:	e00b      	b.n	8005194 <UART_SetConfig+0x208>
 800517c:	2300      	movs	r3, #0
 800517e:	77fb      	strb	r3, [r7, #31]
 8005180:	e00d      	b.n	800519e <UART_SetConfig+0x212>
 8005182:	2302      	movs	r3, #2
 8005184:	77fb      	strb	r3, [r7, #31]
 8005186:	e00a      	b.n	800519e <UART_SetConfig+0x212>
 8005188:	2304      	movs	r3, #4
 800518a:	77fb      	strb	r3, [r7, #31]
 800518c:	e007      	b.n	800519e <UART_SetConfig+0x212>
 800518e:	2308      	movs	r3, #8
 8005190:	77fb      	strb	r3, [r7, #31]
 8005192:	e004      	b.n	800519e <UART_SetConfig+0x212>
 8005194:	2310      	movs	r3, #16
 8005196:	77fb      	strb	r3, [r7, #31]
 8005198:	e001      	b.n	800519e <UART_SetConfig+0x212>
 800519a:	2310      	movs	r3, #16
 800519c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a6:	d16b      	bne.n	8005280 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80051a8:	7ffb      	ldrb	r3, [r7, #31]
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d838      	bhi.n	8005220 <UART_SetConfig+0x294>
 80051ae:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <UART_SetConfig+0x228>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	080051d9 	.word	0x080051d9
 80051b8:	080051e1 	.word	0x080051e1
 80051bc:	080051e9 	.word	0x080051e9
 80051c0:	08005221 	.word	0x08005221
 80051c4:	080051ef 	.word	0x080051ef
 80051c8:	08005221 	.word	0x08005221
 80051cc:	08005221 	.word	0x08005221
 80051d0:	08005221 	.word	0x08005221
 80051d4:	080051f7 	.word	0x080051f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d8:	f7ff faa8 	bl	800472c <HAL_RCC_GetPCLK1Freq>
 80051dc:	61b8      	str	r0, [r7, #24]
        break;
 80051de:	e024      	b.n	800522a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051e0:	f7ff fac6 	bl	8004770 <HAL_RCC_GetPCLK2Freq>
 80051e4:	61b8      	str	r0, [r7, #24]
        break;
 80051e6:	e020      	b.n	800522a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e8:	4b0c      	ldr	r3, [pc, #48]	; (800521c <UART_SetConfig+0x290>)
 80051ea:	61bb      	str	r3, [r7, #24]
        break;
 80051ec:	e01d      	b.n	800522a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ee:	f7ff fa27 	bl	8004640 <HAL_RCC_GetSysClockFreq>
 80051f2:	61b8      	str	r0, [r7, #24]
        break;
 80051f4:	e019      	b.n	800522a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051fa:	61bb      	str	r3, [r7, #24]
        break;
 80051fc:	e015      	b.n	800522a <UART_SetConfig+0x29e>
 80051fe:	bf00      	nop
 8005200:	efff69f3 	.word	0xefff69f3
 8005204:	40013800 	.word	0x40013800
 8005208:	40021000 	.word	0x40021000
 800520c:	40004400 	.word	0x40004400
 8005210:	40004800 	.word	0x40004800
 8005214:	40004c00 	.word	0x40004c00
 8005218:	40005000 	.word	0x40005000
 800521c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	77bb      	strb	r3, [r7, #30]
        break;
 8005228:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d073      	beq.n	8005318 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	005a      	lsls	r2, r3, #1
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	085b      	lsrs	r3, r3, #1
 800523a:	441a      	add	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b0f      	cmp	r3, #15
 800524a:	d916      	bls.n	800527a <UART_SetConfig+0x2ee>
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005252:	d212      	bcs.n	800527a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	b29b      	uxth	r3, r3
 8005258:	f023 030f 	bic.w	r3, r3, #15
 800525c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	085b      	lsrs	r3, r3, #1
 8005262:	b29b      	uxth	r3, r3
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	b29a      	uxth	r2, r3
 800526a:	89fb      	ldrh	r3, [r7, #14]
 800526c:	4313      	orrs	r3, r2
 800526e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	89fa      	ldrh	r2, [r7, #14]
 8005276:	60da      	str	r2, [r3, #12]
 8005278:	e04e      	b.n	8005318 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	77bb      	strb	r3, [r7, #30]
 800527e:	e04b      	b.n	8005318 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005280:	7ffb      	ldrb	r3, [r7, #31]
 8005282:	2b08      	cmp	r3, #8
 8005284:	d827      	bhi.n	80052d6 <UART_SetConfig+0x34a>
 8005286:	a201      	add	r2, pc, #4	; (adr r2, 800528c <UART_SetConfig+0x300>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	080052b1 	.word	0x080052b1
 8005290:	080052b9 	.word	0x080052b9
 8005294:	080052c1 	.word	0x080052c1
 8005298:	080052d7 	.word	0x080052d7
 800529c:	080052c7 	.word	0x080052c7
 80052a0:	080052d7 	.word	0x080052d7
 80052a4:	080052d7 	.word	0x080052d7
 80052a8:	080052d7 	.word	0x080052d7
 80052ac:	080052cf 	.word	0x080052cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b0:	f7ff fa3c 	bl	800472c <HAL_RCC_GetPCLK1Freq>
 80052b4:	61b8      	str	r0, [r7, #24]
        break;
 80052b6:	e013      	b.n	80052e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052b8:	f7ff fa5a 	bl	8004770 <HAL_RCC_GetPCLK2Freq>
 80052bc:	61b8      	str	r0, [r7, #24]
        break;
 80052be:	e00f      	b.n	80052e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c0:	4b1b      	ldr	r3, [pc, #108]	; (8005330 <UART_SetConfig+0x3a4>)
 80052c2:	61bb      	str	r3, [r7, #24]
        break;
 80052c4:	e00c      	b.n	80052e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052c6:	f7ff f9bb 	bl	8004640 <HAL_RCC_GetSysClockFreq>
 80052ca:	61b8      	str	r0, [r7, #24]
        break;
 80052cc:	e008      	b.n	80052e0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052d2:	61bb      	str	r3, [r7, #24]
        break;
 80052d4:	e004      	b.n	80052e0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	77bb      	strb	r3, [r7, #30]
        break;
 80052de:	bf00      	nop
    }

    if (pclk != 0U)
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d018      	beq.n	8005318 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	085a      	lsrs	r2, r3, #1
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	441a      	add	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	2b0f      	cmp	r3, #15
 80052fe:	d909      	bls.n	8005314 <UART_SetConfig+0x388>
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005306:	d205      	bcs.n	8005314 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	b29a      	uxth	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	60da      	str	r2, [r3, #12]
 8005312:	e001      	b.n	8005318 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005324:	7fbb      	ldrb	r3, [r7, #30]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3720      	adds	r7, #32
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	007a1200 	.word	0x007a1200

08005334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01a      	beq.n	800544a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005432:	d10a      	bne.n	800544a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	605a      	str	r2, [r3, #4]
  }
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b098      	sub	sp, #96	; 0x60
 800547c:	af02      	add	r7, sp, #8
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005488:	f7fc fd28 	bl	8001edc <HAL_GetTick>
 800548c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b08      	cmp	r3, #8
 800549a:	d12e      	bne.n	80054fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800549c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a4:	2200      	movs	r2, #0
 80054a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f88c 	bl	80055c8 <UART_WaitOnFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d021      	beq.n	80054fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ca:	653b      	str	r3, [r7, #80]	; 0x50
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	461a      	mov	r2, r3
 80054d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d4:	647b      	str	r3, [r7, #68]	; 0x44
 80054d6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054dc:	e841 2300 	strex	r3, r2, [r1]
 80054e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1e6      	bne.n	80054b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e062      	b.n	80055c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b04      	cmp	r3, #4
 8005506:	d149      	bne.n	800559c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005508:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005510:	2200      	movs	r2, #0
 8005512:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f856 	bl	80055c8 <UART_WaitOnFlagUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d03c      	beq.n	800559c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	e853 3f00 	ldrex	r3, [r3]
 800552e:	623b      	str	r3, [r7, #32]
   return(result);
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005540:	633b      	str	r3, [r7, #48]	; 0x30
 8005542:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005544:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e6      	bne.n	8005522 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3308      	adds	r3, #8
 800555a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	60fb      	str	r3, [r7, #12]
   return(result);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0301 	bic.w	r3, r3, #1
 800556a:	64bb      	str	r3, [r7, #72]	; 0x48
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3308      	adds	r3, #8
 8005572:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005574:	61fa      	str	r2, [r7, #28]
 8005576:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	69b9      	ldr	r1, [r7, #24]
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	617b      	str	r3, [r7, #20]
   return(result);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e5      	bne.n	8005554 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e011      	b.n	80055c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3758      	adds	r7, #88	; 0x58
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	4613      	mov	r3, r2
 80055d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d8:	e049      	b.n	800566e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e0:	d045      	beq.n	800566e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e2:	f7fc fc7b 	bl	8001edc <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d302      	bcc.n	80055f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e048      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	d031      	beq.n	800566e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b08      	cmp	r3, #8
 8005616:	d110      	bne.n	800563a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2208      	movs	r2, #8
 800561e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 f838 	bl	8005696 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2208      	movs	r2, #8
 800562a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e029      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005648:	d111      	bne.n	800566e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f81e 	bl	8005696 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e00f      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4013      	ands	r3, r2
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	429a      	cmp	r2, r3
 800567c:	bf0c      	ite	eq
 800567e:	2301      	moveq	r3, #1
 8005680:	2300      	movne	r3, #0
 8005682:	b2db      	uxtb	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	79fb      	ldrb	r3, [r7, #7]
 8005688:	429a      	cmp	r2, r3
 800568a:	d0a6      	beq.n	80055da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005696:	b480      	push	{r7}
 8005698:	b095      	sub	sp, #84	; 0x54
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a6:	e853 3f00 	ldrex	r3, [r3]
 80056aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056bc:	643b      	str	r3, [r7, #64]	; 0x40
 80056be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056c4:	e841 2300 	strex	r3, r2, [r1]
 80056c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e6      	bne.n	800569e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3308      	adds	r3, #8
 80056d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	61fb      	str	r3, [r7, #28]
   return(result);
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f023 0301 	bic.w	r3, r3, #1
 80056e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3308      	adds	r3, #8
 80056ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e5      	bne.n	80056d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005708:	2b01      	cmp	r3, #1
 800570a:	d118      	bne.n	800573e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	60bb      	str	r3, [r7, #8]
   return(result);
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f023 0310 	bic.w	r3, r3, #16
 8005720:	647b      	str	r3, [r7, #68]	; 0x44
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800572a:	61bb      	str	r3, [r7, #24]
 800572c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572e:	6979      	ldr	r1, [r7, #20]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	613b      	str	r3, [r7, #16]
   return(result);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1e6      	bne.n	800570c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005752:	bf00      	nop
 8005754:	3754      	adds	r7, #84	; 0x54
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <__cvt>:
 800575e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005762:	ec55 4b10 	vmov	r4, r5, d0
 8005766:	2d00      	cmp	r5, #0
 8005768:	460e      	mov	r6, r1
 800576a:	4619      	mov	r1, r3
 800576c:	462b      	mov	r3, r5
 800576e:	bfbb      	ittet	lt
 8005770:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005774:	461d      	movlt	r5, r3
 8005776:	2300      	movge	r3, #0
 8005778:	232d      	movlt	r3, #45	; 0x2d
 800577a:	700b      	strb	r3, [r1, #0]
 800577c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800577e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005782:	4691      	mov	r9, r2
 8005784:	f023 0820 	bic.w	r8, r3, #32
 8005788:	bfbc      	itt	lt
 800578a:	4622      	movlt	r2, r4
 800578c:	4614      	movlt	r4, r2
 800578e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005792:	d005      	beq.n	80057a0 <__cvt+0x42>
 8005794:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005798:	d100      	bne.n	800579c <__cvt+0x3e>
 800579a:	3601      	adds	r6, #1
 800579c:	2102      	movs	r1, #2
 800579e:	e000      	b.n	80057a2 <__cvt+0x44>
 80057a0:	2103      	movs	r1, #3
 80057a2:	ab03      	add	r3, sp, #12
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	ab02      	add	r3, sp, #8
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	ec45 4b10 	vmov	d0, r4, r5
 80057ae:	4653      	mov	r3, sl
 80057b0:	4632      	mov	r2, r6
 80057b2:	f001 f9b5 	bl	8006b20 <_dtoa_r>
 80057b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057ba:	4607      	mov	r7, r0
 80057bc:	d102      	bne.n	80057c4 <__cvt+0x66>
 80057be:	f019 0f01 	tst.w	r9, #1
 80057c2:	d022      	beq.n	800580a <__cvt+0xac>
 80057c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057c8:	eb07 0906 	add.w	r9, r7, r6
 80057cc:	d110      	bne.n	80057f0 <__cvt+0x92>
 80057ce:	783b      	ldrb	r3, [r7, #0]
 80057d0:	2b30      	cmp	r3, #48	; 0x30
 80057d2:	d10a      	bne.n	80057ea <__cvt+0x8c>
 80057d4:	2200      	movs	r2, #0
 80057d6:	2300      	movs	r3, #0
 80057d8:	4620      	mov	r0, r4
 80057da:	4629      	mov	r1, r5
 80057dc:	f7fb f97c 	bl	8000ad8 <__aeabi_dcmpeq>
 80057e0:	b918      	cbnz	r0, 80057ea <__cvt+0x8c>
 80057e2:	f1c6 0601 	rsb	r6, r6, #1
 80057e6:	f8ca 6000 	str.w	r6, [sl]
 80057ea:	f8da 3000 	ldr.w	r3, [sl]
 80057ee:	4499      	add	r9, r3
 80057f0:	2200      	movs	r2, #0
 80057f2:	2300      	movs	r3, #0
 80057f4:	4620      	mov	r0, r4
 80057f6:	4629      	mov	r1, r5
 80057f8:	f7fb f96e 	bl	8000ad8 <__aeabi_dcmpeq>
 80057fc:	b108      	cbz	r0, 8005802 <__cvt+0xa4>
 80057fe:	f8cd 900c 	str.w	r9, [sp, #12]
 8005802:	2230      	movs	r2, #48	; 0x30
 8005804:	9b03      	ldr	r3, [sp, #12]
 8005806:	454b      	cmp	r3, r9
 8005808:	d307      	bcc.n	800581a <__cvt+0xbc>
 800580a:	9b03      	ldr	r3, [sp, #12]
 800580c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800580e:	1bdb      	subs	r3, r3, r7
 8005810:	4638      	mov	r0, r7
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	b004      	add	sp, #16
 8005816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800581a:	1c59      	adds	r1, r3, #1
 800581c:	9103      	str	r1, [sp, #12]
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e7f0      	b.n	8005804 <__cvt+0xa6>

08005822 <__exponent>:
 8005822:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005824:	4603      	mov	r3, r0
 8005826:	2900      	cmp	r1, #0
 8005828:	bfb8      	it	lt
 800582a:	4249      	neglt	r1, r1
 800582c:	f803 2b02 	strb.w	r2, [r3], #2
 8005830:	bfb4      	ite	lt
 8005832:	222d      	movlt	r2, #45	; 0x2d
 8005834:	222b      	movge	r2, #43	; 0x2b
 8005836:	2909      	cmp	r1, #9
 8005838:	7042      	strb	r2, [r0, #1]
 800583a:	dd2a      	ble.n	8005892 <__exponent+0x70>
 800583c:	f10d 0207 	add.w	r2, sp, #7
 8005840:	4617      	mov	r7, r2
 8005842:	260a      	movs	r6, #10
 8005844:	4694      	mov	ip, r2
 8005846:	fb91 f5f6 	sdiv	r5, r1, r6
 800584a:	fb06 1415 	mls	r4, r6, r5, r1
 800584e:	3430      	adds	r4, #48	; 0x30
 8005850:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005854:	460c      	mov	r4, r1
 8005856:	2c63      	cmp	r4, #99	; 0x63
 8005858:	f102 32ff 	add.w	r2, r2, #4294967295
 800585c:	4629      	mov	r1, r5
 800585e:	dcf1      	bgt.n	8005844 <__exponent+0x22>
 8005860:	3130      	adds	r1, #48	; 0x30
 8005862:	f1ac 0402 	sub.w	r4, ip, #2
 8005866:	f802 1c01 	strb.w	r1, [r2, #-1]
 800586a:	1c41      	adds	r1, r0, #1
 800586c:	4622      	mov	r2, r4
 800586e:	42ba      	cmp	r2, r7
 8005870:	d30a      	bcc.n	8005888 <__exponent+0x66>
 8005872:	f10d 0209 	add.w	r2, sp, #9
 8005876:	eba2 020c 	sub.w	r2, r2, ip
 800587a:	42bc      	cmp	r4, r7
 800587c:	bf88      	it	hi
 800587e:	2200      	movhi	r2, #0
 8005880:	4413      	add	r3, r2
 8005882:	1a18      	subs	r0, r3, r0
 8005884:	b003      	add	sp, #12
 8005886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005888:	f812 5b01 	ldrb.w	r5, [r2], #1
 800588c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005890:	e7ed      	b.n	800586e <__exponent+0x4c>
 8005892:	2330      	movs	r3, #48	; 0x30
 8005894:	3130      	adds	r1, #48	; 0x30
 8005896:	7083      	strb	r3, [r0, #2]
 8005898:	70c1      	strb	r1, [r0, #3]
 800589a:	1d03      	adds	r3, r0, #4
 800589c:	e7f1      	b.n	8005882 <__exponent+0x60>
	...

080058a0 <_printf_float>:
 80058a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a4:	ed2d 8b02 	vpush	{d8}
 80058a8:	b08d      	sub	sp, #52	; 0x34
 80058aa:	460c      	mov	r4, r1
 80058ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80058b0:	4616      	mov	r6, r2
 80058b2:	461f      	mov	r7, r3
 80058b4:	4605      	mov	r5, r0
 80058b6:	f001 f82d 	bl	8006914 <_localeconv_r>
 80058ba:	f8d0 a000 	ldr.w	sl, [r0]
 80058be:	4650      	mov	r0, sl
 80058c0:	f7fa fcde 	bl	8000280 <strlen>
 80058c4:	2300      	movs	r3, #0
 80058c6:	930a      	str	r3, [sp, #40]	; 0x28
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	9305      	str	r3, [sp, #20]
 80058cc:	f8d8 3000 	ldr.w	r3, [r8]
 80058d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80058d4:	3307      	adds	r3, #7
 80058d6:	f023 0307 	bic.w	r3, r3, #7
 80058da:	f103 0208 	add.w	r2, r3, #8
 80058de:	f8c8 2000 	str.w	r2, [r8]
 80058e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80058ea:	9307      	str	r3, [sp, #28]
 80058ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80058f0:	ee08 0a10 	vmov	s16, r0
 80058f4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80058f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058fc:	4b9e      	ldr	r3, [pc, #632]	; (8005b78 <_printf_float+0x2d8>)
 80058fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005902:	f7fb f91b 	bl	8000b3c <__aeabi_dcmpun>
 8005906:	bb88      	cbnz	r0, 800596c <_printf_float+0xcc>
 8005908:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800590c:	4b9a      	ldr	r3, [pc, #616]	; (8005b78 <_printf_float+0x2d8>)
 800590e:	f04f 32ff 	mov.w	r2, #4294967295
 8005912:	f7fb f8f5 	bl	8000b00 <__aeabi_dcmple>
 8005916:	bb48      	cbnz	r0, 800596c <_printf_float+0xcc>
 8005918:	2200      	movs	r2, #0
 800591a:	2300      	movs	r3, #0
 800591c:	4640      	mov	r0, r8
 800591e:	4649      	mov	r1, r9
 8005920:	f7fb f8e4 	bl	8000aec <__aeabi_dcmplt>
 8005924:	b110      	cbz	r0, 800592c <_printf_float+0x8c>
 8005926:	232d      	movs	r3, #45	; 0x2d
 8005928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800592c:	4a93      	ldr	r2, [pc, #588]	; (8005b7c <_printf_float+0x2dc>)
 800592e:	4b94      	ldr	r3, [pc, #592]	; (8005b80 <_printf_float+0x2e0>)
 8005930:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005934:	bf94      	ite	ls
 8005936:	4690      	movls	r8, r2
 8005938:	4698      	movhi	r8, r3
 800593a:	2303      	movs	r3, #3
 800593c:	6123      	str	r3, [r4, #16]
 800593e:	9b05      	ldr	r3, [sp, #20]
 8005940:	f023 0304 	bic.w	r3, r3, #4
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	f04f 0900 	mov.w	r9, #0
 800594a:	9700      	str	r7, [sp, #0]
 800594c:	4633      	mov	r3, r6
 800594e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005950:	4621      	mov	r1, r4
 8005952:	4628      	mov	r0, r5
 8005954:	f000 f9da 	bl	8005d0c <_printf_common>
 8005958:	3001      	adds	r0, #1
 800595a:	f040 8090 	bne.w	8005a7e <_printf_float+0x1de>
 800595e:	f04f 30ff 	mov.w	r0, #4294967295
 8005962:	b00d      	add	sp, #52	; 0x34
 8005964:	ecbd 8b02 	vpop	{d8}
 8005968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596c:	4642      	mov	r2, r8
 800596e:	464b      	mov	r3, r9
 8005970:	4640      	mov	r0, r8
 8005972:	4649      	mov	r1, r9
 8005974:	f7fb f8e2 	bl	8000b3c <__aeabi_dcmpun>
 8005978:	b140      	cbz	r0, 800598c <_printf_float+0xec>
 800597a:	464b      	mov	r3, r9
 800597c:	2b00      	cmp	r3, #0
 800597e:	bfbc      	itt	lt
 8005980:	232d      	movlt	r3, #45	; 0x2d
 8005982:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005986:	4a7f      	ldr	r2, [pc, #508]	; (8005b84 <_printf_float+0x2e4>)
 8005988:	4b7f      	ldr	r3, [pc, #508]	; (8005b88 <_printf_float+0x2e8>)
 800598a:	e7d1      	b.n	8005930 <_printf_float+0x90>
 800598c:	6863      	ldr	r3, [r4, #4]
 800598e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005992:	9206      	str	r2, [sp, #24]
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	d13f      	bne.n	8005a18 <_printf_float+0x178>
 8005998:	2306      	movs	r3, #6
 800599a:	6063      	str	r3, [r4, #4]
 800599c:	9b05      	ldr	r3, [sp, #20]
 800599e:	6861      	ldr	r1, [r4, #4]
 80059a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80059a4:	2300      	movs	r3, #0
 80059a6:	9303      	str	r3, [sp, #12]
 80059a8:	ab0a      	add	r3, sp, #40	; 0x28
 80059aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80059ae:	ab09      	add	r3, sp, #36	; 0x24
 80059b0:	ec49 8b10 	vmov	d0, r8, r9
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	6022      	str	r2, [r4, #0]
 80059b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80059bc:	4628      	mov	r0, r5
 80059be:	f7ff fece 	bl	800575e <__cvt>
 80059c2:	9b06      	ldr	r3, [sp, #24]
 80059c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059c6:	2b47      	cmp	r3, #71	; 0x47
 80059c8:	4680      	mov	r8, r0
 80059ca:	d108      	bne.n	80059de <_printf_float+0x13e>
 80059cc:	1cc8      	adds	r0, r1, #3
 80059ce:	db02      	blt.n	80059d6 <_printf_float+0x136>
 80059d0:	6863      	ldr	r3, [r4, #4]
 80059d2:	4299      	cmp	r1, r3
 80059d4:	dd41      	ble.n	8005a5a <_printf_float+0x1ba>
 80059d6:	f1ab 0302 	sub.w	r3, fp, #2
 80059da:	fa5f fb83 	uxtb.w	fp, r3
 80059de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059e2:	d820      	bhi.n	8005a26 <_printf_float+0x186>
 80059e4:	3901      	subs	r1, #1
 80059e6:	465a      	mov	r2, fp
 80059e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059ec:	9109      	str	r1, [sp, #36]	; 0x24
 80059ee:	f7ff ff18 	bl	8005822 <__exponent>
 80059f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059f4:	1813      	adds	r3, r2, r0
 80059f6:	2a01      	cmp	r2, #1
 80059f8:	4681      	mov	r9, r0
 80059fa:	6123      	str	r3, [r4, #16]
 80059fc:	dc02      	bgt.n	8005a04 <_printf_float+0x164>
 80059fe:	6822      	ldr	r2, [r4, #0]
 8005a00:	07d2      	lsls	r2, r2, #31
 8005a02:	d501      	bpl.n	8005a08 <_printf_float+0x168>
 8005a04:	3301      	adds	r3, #1
 8005a06:	6123      	str	r3, [r4, #16]
 8005a08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d09c      	beq.n	800594a <_printf_float+0xaa>
 8005a10:	232d      	movs	r3, #45	; 0x2d
 8005a12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a16:	e798      	b.n	800594a <_printf_float+0xaa>
 8005a18:	9a06      	ldr	r2, [sp, #24]
 8005a1a:	2a47      	cmp	r2, #71	; 0x47
 8005a1c:	d1be      	bne.n	800599c <_printf_float+0xfc>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1bc      	bne.n	800599c <_printf_float+0xfc>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e7b9      	b.n	800599a <_printf_float+0xfa>
 8005a26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a2a:	d118      	bne.n	8005a5e <_printf_float+0x1be>
 8005a2c:	2900      	cmp	r1, #0
 8005a2e:	6863      	ldr	r3, [r4, #4]
 8005a30:	dd0b      	ble.n	8005a4a <_printf_float+0x1aa>
 8005a32:	6121      	str	r1, [r4, #16]
 8005a34:	b913      	cbnz	r3, 8005a3c <_printf_float+0x19c>
 8005a36:	6822      	ldr	r2, [r4, #0]
 8005a38:	07d0      	lsls	r0, r2, #31
 8005a3a:	d502      	bpl.n	8005a42 <_printf_float+0x1a2>
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	440b      	add	r3, r1
 8005a40:	6123      	str	r3, [r4, #16]
 8005a42:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a44:	f04f 0900 	mov.w	r9, #0
 8005a48:	e7de      	b.n	8005a08 <_printf_float+0x168>
 8005a4a:	b913      	cbnz	r3, 8005a52 <_printf_float+0x1b2>
 8005a4c:	6822      	ldr	r2, [r4, #0]
 8005a4e:	07d2      	lsls	r2, r2, #31
 8005a50:	d501      	bpl.n	8005a56 <_printf_float+0x1b6>
 8005a52:	3302      	adds	r3, #2
 8005a54:	e7f4      	b.n	8005a40 <_printf_float+0x1a0>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e7f2      	b.n	8005a40 <_printf_float+0x1a0>
 8005a5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a60:	4299      	cmp	r1, r3
 8005a62:	db05      	blt.n	8005a70 <_printf_float+0x1d0>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	6121      	str	r1, [r4, #16]
 8005a68:	07d8      	lsls	r0, r3, #31
 8005a6a:	d5ea      	bpl.n	8005a42 <_printf_float+0x1a2>
 8005a6c:	1c4b      	adds	r3, r1, #1
 8005a6e:	e7e7      	b.n	8005a40 <_printf_float+0x1a0>
 8005a70:	2900      	cmp	r1, #0
 8005a72:	bfd4      	ite	le
 8005a74:	f1c1 0202 	rsble	r2, r1, #2
 8005a78:	2201      	movgt	r2, #1
 8005a7a:	4413      	add	r3, r2
 8005a7c:	e7e0      	b.n	8005a40 <_printf_float+0x1a0>
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	055a      	lsls	r2, r3, #21
 8005a82:	d407      	bmi.n	8005a94 <_printf_float+0x1f4>
 8005a84:	6923      	ldr	r3, [r4, #16]
 8005a86:	4642      	mov	r2, r8
 8005a88:	4631      	mov	r1, r6
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	47b8      	blx	r7
 8005a8e:	3001      	adds	r0, #1
 8005a90:	d12c      	bne.n	8005aec <_printf_float+0x24c>
 8005a92:	e764      	b.n	800595e <_printf_float+0xbe>
 8005a94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a98:	f240 80e0 	bls.w	8005c5c <_printf_float+0x3bc>
 8005a9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f7fb f818 	bl	8000ad8 <__aeabi_dcmpeq>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d034      	beq.n	8005b16 <_printf_float+0x276>
 8005aac:	4a37      	ldr	r2, [pc, #220]	; (8005b8c <_printf_float+0x2ec>)
 8005aae:	2301      	movs	r3, #1
 8005ab0:	4631      	mov	r1, r6
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	47b8      	blx	r7
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	f43f af51 	beq.w	800595e <_printf_float+0xbe>
 8005abc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	db02      	blt.n	8005aca <_printf_float+0x22a>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	07d8      	lsls	r0, r3, #31
 8005ac8:	d510      	bpl.n	8005aec <_printf_float+0x24c>
 8005aca:	ee18 3a10 	vmov	r3, s16
 8005ace:	4652      	mov	r2, sl
 8005ad0:	4631      	mov	r1, r6
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	47b8      	blx	r7
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	f43f af41 	beq.w	800595e <_printf_float+0xbe>
 8005adc:	f04f 0800 	mov.w	r8, #0
 8005ae0:	f104 091a 	add.w	r9, r4, #26
 8005ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	4543      	cmp	r3, r8
 8005aea:	dc09      	bgt.n	8005b00 <_printf_float+0x260>
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	079b      	lsls	r3, r3, #30
 8005af0:	f100 8107 	bmi.w	8005d02 <_printf_float+0x462>
 8005af4:	68e0      	ldr	r0, [r4, #12]
 8005af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005af8:	4298      	cmp	r0, r3
 8005afa:	bfb8      	it	lt
 8005afc:	4618      	movlt	r0, r3
 8005afe:	e730      	b.n	8005962 <_printf_float+0xc2>
 8005b00:	2301      	movs	r3, #1
 8005b02:	464a      	mov	r2, r9
 8005b04:	4631      	mov	r1, r6
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	f43f af27 	beq.w	800595e <_printf_float+0xbe>
 8005b10:	f108 0801 	add.w	r8, r8, #1
 8005b14:	e7e6      	b.n	8005ae4 <_printf_float+0x244>
 8005b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	dc39      	bgt.n	8005b90 <_printf_float+0x2f0>
 8005b1c:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <_printf_float+0x2ec>)
 8005b1e:	2301      	movs	r3, #1
 8005b20:	4631      	mov	r1, r6
 8005b22:	4628      	mov	r0, r5
 8005b24:	47b8      	blx	r7
 8005b26:	3001      	adds	r0, #1
 8005b28:	f43f af19 	beq.w	800595e <_printf_float+0xbe>
 8005b2c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005b30:	4313      	orrs	r3, r2
 8005b32:	d102      	bne.n	8005b3a <_printf_float+0x29a>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	07d9      	lsls	r1, r3, #31
 8005b38:	d5d8      	bpl.n	8005aec <_printf_float+0x24c>
 8005b3a:	ee18 3a10 	vmov	r3, s16
 8005b3e:	4652      	mov	r2, sl
 8005b40:	4631      	mov	r1, r6
 8005b42:	4628      	mov	r0, r5
 8005b44:	47b8      	blx	r7
 8005b46:	3001      	adds	r0, #1
 8005b48:	f43f af09 	beq.w	800595e <_printf_float+0xbe>
 8005b4c:	f04f 0900 	mov.w	r9, #0
 8005b50:	f104 0a1a 	add.w	sl, r4, #26
 8005b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b56:	425b      	negs	r3, r3
 8005b58:	454b      	cmp	r3, r9
 8005b5a:	dc01      	bgt.n	8005b60 <_printf_float+0x2c0>
 8005b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b5e:	e792      	b.n	8005a86 <_printf_float+0x1e6>
 8005b60:	2301      	movs	r3, #1
 8005b62:	4652      	mov	r2, sl
 8005b64:	4631      	mov	r1, r6
 8005b66:	4628      	mov	r0, r5
 8005b68:	47b8      	blx	r7
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	f43f aef7 	beq.w	800595e <_printf_float+0xbe>
 8005b70:	f109 0901 	add.w	r9, r9, #1
 8005b74:	e7ee      	b.n	8005b54 <_printf_float+0x2b4>
 8005b76:	bf00      	nop
 8005b78:	7fefffff 	.word	0x7fefffff
 8005b7c:	0800a2d0 	.word	0x0800a2d0
 8005b80:	0800a2d4 	.word	0x0800a2d4
 8005b84:	0800a2d8 	.word	0x0800a2d8
 8005b88:	0800a2dc 	.word	0x0800a2dc
 8005b8c:	0800a2e0 	.word	0x0800a2e0
 8005b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b94:	429a      	cmp	r2, r3
 8005b96:	bfa8      	it	ge
 8005b98:	461a      	movge	r2, r3
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	4691      	mov	r9, r2
 8005b9e:	dc37      	bgt.n	8005c10 <_printf_float+0x370>
 8005ba0:	f04f 0b00 	mov.w	fp, #0
 8005ba4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ba8:	f104 021a 	add.w	r2, r4, #26
 8005bac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bae:	9305      	str	r3, [sp, #20]
 8005bb0:	eba3 0309 	sub.w	r3, r3, r9
 8005bb4:	455b      	cmp	r3, fp
 8005bb6:	dc33      	bgt.n	8005c20 <_printf_float+0x380>
 8005bb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	db3b      	blt.n	8005c38 <_printf_float+0x398>
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	07da      	lsls	r2, r3, #31
 8005bc4:	d438      	bmi.n	8005c38 <_printf_float+0x398>
 8005bc6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005bca:	eba2 0903 	sub.w	r9, r2, r3
 8005bce:	9b05      	ldr	r3, [sp, #20]
 8005bd0:	1ad2      	subs	r2, r2, r3
 8005bd2:	4591      	cmp	r9, r2
 8005bd4:	bfa8      	it	ge
 8005bd6:	4691      	movge	r9, r2
 8005bd8:	f1b9 0f00 	cmp.w	r9, #0
 8005bdc:	dc35      	bgt.n	8005c4a <_printf_float+0x3aa>
 8005bde:	f04f 0800 	mov.w	r8, #0
 8005be2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005be6:	f104 0a1a 	add.w	sl, r4, #26
 8005bea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bee:	1a9b      	subs	r3, r3, r2
 8005bf0:	eba3 0309 	sub.w	r3, r3, r9
 8005bf4:	4543      	cmp	r3, r8
 8005bf6:	f77f af79 	ble.w	8005aec <_printf_float+0x24c>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4652      	mov	r2, sl
 8005bfe:	4631      	mov	r1, r6
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b8      	blx	r7
 8005c04:	3001      	adds	r0, #1
 8005c06:	f43f aeaa 	beq.w	800595e <_printf_float+0xbe>
 8005c0a:	f108 0801 	add.w	r8, r8, #1
 8005c0e:	e7ec      	b.n	8005bea <_printf_float+0x34a>
 8005c10:	4613      	mov	r3, r2
 8005c12:	4631      	mov	r1, r6
 8005c14:	4642      	mov	r2, r8
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b8      	blx	r7
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d1c0      	bne.n	8005ba0 <_printf_float+0x300>
 8005c1e:	e69e      	b.n	800595e <_printf_float+0xbe>
 8005c20:	2301      	movs	r3, #1
 8005c22:	4631      	mov	r1, r6
 8005c24:	4628      	mov	r0, r5
 8005c26:	9205      	str	r2, [sp, #20]
 8005c28:	47b8      	blx	r7
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	f43f ae97 	beq.w	800595e <_printf_float+0xbe>
 8005c30:	9a05      	ldr	r2, [sp, #20]
 8005c32:	f10b 0b01 	add.w	fp, fp, #1
 8005c36:	e7b9      	b.n	8005bac <_printf_float+0x30c>
 8005c38:	ee18 3a10 	vmov	r3, s16
 8005c3c:	4652      	mov	r2, sl
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4628      	mov	r0, r5
 8005c42:	47b8      	blx	r7
 8005c44:	3001      	adds	r0, #1
 8005c46:	d1be      	bne.n	8005bc6 <_printf_float+0x326>
 8005c48:	e689      	b.n	800595e <_printf_float+0xbe>
 8005c4a:	9a05      	ldr	r2, [sp, #20]
 8005c4c:	464b      	mov	r3, r9
 8005c4e:	4442      	add	r2, r8
 8005c50:	4631      	mov	r1, r6
 8005c52:	4628      	mov	r0, r5
 8005c54:	47b8      	blx	r7
 8005c56:	3001      	adds	r0, #1
 8005c58:	d1c1      	bne.n	8005bde <_printf_float+0x33e>
 8005c5a:	e680      	b.n	800595e <_printf_float+0xbe>
 8005c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c5e:	2a01      	cmp	r2, #1
 8005c60:	dc01      	bgt.n	8005c66 <_printf_float+0x3c6>
 8005c62:	07db      	lsls	r3, r3, #31
 8005c64:	d53a      	bpl.n	8005cdc <_printf_float+0x43c>
 8005c66:	2301      	movs	r3, #1
 8005c68:	4642      	mov	r2, r8
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	47b8      	blx	r7
 8005c70:	3001      	adds	r0, #1
 8005c72:	f43f ae74 	beq.w	800595e <_printf_float+0xbe>
 8005c76:	ee18 3a10 	vmov	r3, s16
 8005c7a:	4652      	mov	r2, sl
 8005c7c:	4631      	mov	r1, r6
 8005c7e:	4628      	mov	r0, r5
 8005c80:	47b8      	blx	r7
 8005c82:	3001      	adds	r0, #1
 8005c84:	f43f ae6b 	beq.w	800595e <_printf_float+0xbe>
 8005c88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005c94:	f7fa ff20 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c98:	b9d8      	cbnz	r0, 8005cd2 <_printf_float+0x432>
 8005c9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005c9e:	f108 0201 	add.w	r2, r8, #1
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b8      	blx	r7
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d10e      	bne.n	8005cca <_printf_float+0x42a>
 8005cac:	e657      	b.n	800595e <_printf_float+0xbe>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	4652      	mov	r2, sl
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	47b8      	blx	r7
 8005cb8:	3001      	adds	r0, #1
 8005cba:	f43f ae50 	beq.w	800595e <_printf_float+0xbe>
 8005cbe:	f108 0801 	add.w	r8, r8, #1
 8005cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	4543      	cmp	r3, r8
 8005cc8:	dcf1      	bgt.n	8005cae <_printf_float+0x40e>
 8005cca:	464b      	mov	r3, r9
 8005ccc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005cd0:	e6da      	b.n	8005a88 <_printf_float+0x1e8>
 8005cd2:	f04f 0800 	mov.w	r8, #0
 8005cd6:	f104 0a1a 	add.w	sl, r4, #26
 8005cda:	e7f2      	b.n	8005cc2 <_printf_float+0x422>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	4642      	mov	r2, r8
 8005ce0:	e7df      	b.n	8005ca2 <_printf_float+0x402>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	464a      	mov	r2, r9
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4628      	mov	r0, r5
 8005cea:	47b8      	blx	r7
 8005cec:	3001      	adds	r0, #1
 8005cee:	f43f ae36 	beq.w	800595e <_printf_float+0xbe>
 8005cf2:	f108 0801 	add.w	r8, r8, #1
 8005cf6:	68e3      	ldr	r3, [r4, #12]
 8005cf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cfa:	1a5b      	subs	r3, r3, r1
 8005cfc:	4543      	cmp	r3, r8
 8005cfe:	dcf0      	bgt.n	8005ce2 <_printf_float+0x442>
 8005d00:	e6f8      	b.n	8005af4 <_printf_float+0x254>
 8005d02:	f04f 0800 	mov.w	r8, #0
 8005d06:	f104 0919 	add.w	r9, r4, #25
 8005d0a:	e7f4      	b.n	8005cf6 <_printf_float+0x456>

08005d0c <_printf_common>:
 8005d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d10:	4616      	mov	r6, r2
 8005d12:	4699      	mov	r9, r3
 8005d14:	688a      	ldr	r2, [r1, #8]
 8005d16:	690b      	ldr	r3, [r1, #16]
 8005d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	bfb8      	it	lt
 8005d20:	4613      	movlt	r3, r2
 8005d22:	6033      	str	r3, [r6, #0]
 8005d24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d28:	4607      	mov	r7, r0
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	b10a      	cbz	r2, 8005d32 <_printf_common+0x26>
 8005d2e:	3301      	adds	r3, #1
 8005d30:	6033      	str	r3, [r6, #0]
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	0699      	lsls	r1, r3, #26
 8005d36:	bf42      	ittt	mi
 8005d38:	6833      	ldrmi	r3, [r6, #0]
 8005d3a:	3302      	addmi	r3, #2
 8005d3c:	6033      	strmi	r3, [r6, #0]
 8005d3e:	6825      	ldr	r5, [r4, #0]
 8005d40:	f015 0506 	ands.w	r5, r5, #6
 8005d44:	d106      	bne.n	8005d54 <_printf_common+0x48>
 8005d46:	f104 0a19 	add.w	sl, r4, #25
 8005d4a:	68e3      	ldr	r3, [r4, #12]
 8005d4c:	6832      	ldr	r2, [r6, #0]
 8005d4e:	1a9b      	subs	r3, r3, r2
 8005d50:	42ab      	cmp	r3, r5
 8005d52:	dc26      	bgt.n	8005da2 <_printf_common+0x96>
 8005d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d58:	1e13      	subs	r3, r2, #0
 8005d5a:	6822      	ldr	r2, [r4, #0]
 8005d5c:	bf18      	it	ne
 8005d5e:	2301      	movne	r3, #1
 8005d60:	0692      	lsls	r2, r2, #26
 8005d62:	d42b      	bmi.n	8005dbc <_printf_common+0xb0>
 8005d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d68:	4649      	mov	r1, r9
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	47c0      	blx	r8
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d01e      	beq.n	8005db0 <_printf_common+0xa4>
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	6922      	ldr	r2, [r4, #16]
 8005d76:	f003 0306 	and.w	r3, r3, #6
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	bf02      	ittt	eq
 8005d7e:	68e5      	ldreq	r5, [r4, #12]
 8005d80:	6833      	ldreq	r3, [r6, #0]
 8005d82:	1aed      	subeq	r5, r5, r3
 8005d84:	68a3      	ldr	r3, [r4, #8]
 8005d86:	bf0c      	ite	eq
 8005d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d8c:	2500      	movne	r5, #0
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	bfc4      	itt	gt
 8005d92:	1a9b      	subgt	r3, r3, r2
 8005d94:	18ed      	addgt	r5, r5, r3
 8005d96:	2600      	movs	r6, #0
 8005d98:	341a      	adds	r4, #26
 8005d9a:	42b5      	cmp	r5, r6
 8005d9c:	d11a      	bne.n	8005dd4 <_printf_common+0xc8>
 8005d9e:	2000      	movs	r0, #0
 8005da0:	e008      	b.n	8005db4 <_printf_common+0xa8>
 8005da2:	2301      	movs	r3, #1
 8005da4:	4652      	mov	r2, sl
 8005da6:	4649      	mov	r1, r9
 8005da8:	4638      	mov	r0, r7
 8005daa:	47c0      	blx	r8
 8005dac:	3001      	adds	r0, #1
 8005dae:	d103      	bne.n	8005db8 <_printf_common+0xac>
 8005db0:	f04f 30ff 	mov.w	r0, #4294967295
 8005db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db8:	3501      	adds	r5, #1
 8005dba:	e7c6      	b.n	8005d4a <_printf_common+0x3e>
 8005dbc:	18e1      	adds	r1, r4, r3
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	2030      	movs	r0, #48	; 0x30
 8005dc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dc6:	4422      	add	r2, r4
 8005dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	e7c7      	b.n	8005d64 <_printf_common+0x58>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	4649      	mov	r1, r9
 8005dda:	4638      	mov	r0, r7
 8005ddc:	47c0      	blx	r8
 8005dde:	3001      	adds	r0, #1
 8005de0:	d0e6      	beq.n	8005db0 <_printf_common+0xa4>
 8005de2:	3601      	adds	r6, #1
 8005de4:	e7d9      	b.n	8005d9a <_printf_common+0x8e>
	...

08005de8 <_printf_i>:
 8005de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dec:	7e0f      	ldrb	r7, [r1, #24]
 8005dee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005df0:	2f78      	cmp	r7, #120	; 0x78
 8005df2:	4691      	mov	r9, r2
 8005df4:	4680      	mov	r8, r0
 8005df6:	460c      	mov	r4, r1
 8005df8:	469a      	mov	sl, r3
 8005dfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005dfe:	d807      	bhi.n	8005e10 <_printf_i+0x28>
 8005e00:	2f62      	cmp	r7, #98	; 0x62
 8005e02:	d80a      	bhi.n	8005e1a <_printf_i+0x32>
 8005e04:	2f00      	cmp	r7, #0
 8005e06:	f000 80d4 	beq.w	8005fb2 <_printf_i+0x1ca>
 8005e0a:	2f58      	cmp	r7, #88	; 0x58
 8005e0c:	f000 80c0 	beq.w	8005f90 <_printf_i+0x1a8>
 8005e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e18:	e03a      	b.n	8005e90 <_printf_i+0xa8>
 8005e1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e1e:	2b15      	cmp	r3, #21
 8005e20:	d8f6      	bhi.n	8005e10 <_printf_i+0x28>
 8005e22:	a101      	add	r1, pc, #4	; (adr r1, 8005e28 <_printf_i+0x40>)
 8005e24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e28:	08005e81 	.word	0x08005e81
 8005e2c:	08005e95 	.word	0x08005e95
 8005e30:	08005e11 	.word	0x08005e11
 8005e34:	08005e11 	.word	0x08005e11
 8005e38:	08005e11 	.word	0x08005e11
 8005e3c:	08005e11 	.word	0x08005e11
 8005e40:	08005e95 	.word	0x08005e95
 8005e44:	08005e11 	.word	0x08005e11
 8005e48:	08005e11 	.word	0x08005e11
 8005e4c:	08005e11 	.word	0x08005e11
 8005e50:	08005e11 	.word	0x08005e11
 8005e54:	08005f99 	.word	0x08005f99
 8005e58:	08005ec1 	.word	0x08005ec1
 8005e5c:	08005f53 	.word	0x08005f53
 8005e60:	08005e11 	.word	0x08005e11
 8005e64:	08005e11 	.word	0x08005e11
 8005e68:	08005fbb 	.word	0x08005fbb
 8005e6c:	08005e11 	.word	0x08005e11
 8005e70:	08005ec1 	.word	0x08005ec1
 8005e74:	08005e11 	.word	0x08005e11
 8005e78:	08005e11 	.word	0x08005e11
 8005e7c:	08005f5b 	.word	0x08005f5b
 8005e80:	682b      	ldr	r3, [r5, #0]
 8005e82:	1d1a      	adds	r2, r3, #4
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	602a      	str	r2, [r5, #0]
 8005e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e90:	2301      	movs	r3, #1
 8005e92:	e09f      	b.n	8005fd4 <_printf_i+0x1ec>
 8005e94:	6820      	ldr	r0, [r4, #0]
 8005e96:	682b      	ldr	r3, [r5, #0]
 8005e98:	0607      	lsls	r7, r0, #24
 8005e9a:	f103 0104 	add.w	r1, r3, #4
 8005e9e:	6029      	str	r1, [r5, #0]
 8005ea0:	d501      	bpl.n	8005ea6 <_printf_i+0xbe>
 8005ea2:	681e      	ldr	r6, [r3, #0]
 8005ea4:	e003      	b.n	8005eae <_printf_i+0xc6>
 8005ea6:	0646      	lsls	r6, r0, #25
 8005ea8:	d5fb      	bpl.n	8005ea2 <_printf_i+0xba>
 8005eaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005eae:	2e00      	cmp	r6, #0
 8005eb0:	da03      	bge.n	8005eba <_printf_i+0xd2>
 8005eb2:	232d      	movs	r3, #45	; 0x2d
 8005eb4:	4276      	negs	r6, r6
 8005eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eba:	485a      	ldr	r0, [pc, #360]	; (8006024 <_printf_i+0x23c>)
 8005ebc:	230a      	movs	r3, #10
 8005ebe:	e012      	b.n	8005ee6 <_printf_i+0xfe>
 8005ec0:	682b      	ldr	r3, [r5, #0]
 8005ec2:	6820      	ldr	r0, [r4, #0]
 8005ec4:	1d19      	adds	r1, r3, #4
 8005ec6:	6029      	str	r1, [r5, #0]
 8005ec8:	0605      	lsls	r5, r0, #24
 8005eca:	d501      	bpl.n	8005ed0 <_printf_i+0xe8>
 8005ecc:	681e      	ldr	r6, [r3, #0]
 8005ece:	e002      	b.n	8005ed6 <_printf_i+0xee>
 8005ed0:	0641      	lsls	r1, r0, #25
 8005ed2:	d5fb      	bpl.n	8005ecc <_printf_i+0xe4>
 8005ed4:	881e      	ldrh	r6, [r3, #0]
 8005ed6:	4853      	ldr	r0, [pc, #332]	; (8006024 <_printf_i+0x23c>)
 8005ed8:	2f6f      	cmp	r7, #111	; 0x6f
 8005eda:	bf0c      	ite	eq
 8005edc:	2308      	moveq	r3, #8
 8005ede:	230a      	movne	r3, #10
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ee6:	6865      	ldr	r5, [r4, #4]
 8005ee8:	60a5      	str	r5, [r4, #8]
 8005eea:	2d00      	cmp	r5, #0
 8005eec:	bfa2      	ittt	ge
 8005eee:	6821      	ldrge	r1, [r4, #0]
 8005ef0:	f021 0104 	bicge.w	r1, r1, #4
 8005ef4:	6021      	strge	r1, [r4, #0]
 8005ef6:	b90e      	cbnz	r6, 8005efc <_printf_i+0x114>
 8005ef8:	2d00      	cmp	r5, #0
 8005efa:	d04b      	beq.n	8005f94 <_printf_i+0x1ac>
 8005efc:	4615      	mov	r5, r2
 8005efe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f02:	fb03 6711 	mls	r7, r3, r1, r6
 8005f06:	5dc7      	ldrb	r7, [r0, r7]
 8005f08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f0c:	4637      	mov	r7, r6
 8005f0e:	42bb      	cmp	r3, r7
 8005f10:	460e      	mov	r6, r1
 8005f12:	d9f4      	bls.n	8005efe <_printf_i+0x116>
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d10b      	bne.n	8005f30 <_printf_i+0x148>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	07de      	lsls	r6, r3, #31
 8005f1c:	d508      	bpl.n	8005f30 <_printf_i+0x148>
 8005f1e:	6923      	ldr	r3, [r4, #16]
 8005f20:	6861      	ldr	r1, [r4, #4]
 8005f22:	4299      	cmp	r1, r3
 8005f24:	bfde      	ittt	le
 8005f26:	2330      	movle	r3, #48	; 0x30
 8005f28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f30:	1b52      	subs	r2, r2, r5
 8005f32:	6122      	str	r2, [r4, #16]
 8005f34:	f8cd a000 	str.w	sl, [sp]
 8005f38:	464b      	mov	r3, r9
 8005f3a:	aa03      	add	r2, sp, #12
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4640      	mov	r0, r8
 8005f40:	f7ff fee4 	bl	8005d0c <_printf_common>
 8005f44:	3001      	adds	r0, #1
 8005f46:	d14a      	bne.n	8005fde <_printf_i+0x1f6>
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4c:	b004      	add	sp, #16
 8005f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	f043 0320 	orr.w	r3, r3, #32
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	4833      	ldr	r0, [pc, #204]	; (8006028 <_printf_i+0x240>)
 8005f5c:	2778      	movs	r7, #120	; 0x78
 8005f5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	6829      	ldr	r1, [r5, #0]
 8005f66:	061f      	lsls	r7, r3, #24
 8005f68:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f6c:	d402      	bmi.n	8005f74 <_printf_i+0x18c>
 8005f6e:	065f      	lsls	r7, r3, #25
 8005f70:	bf48      	it	mi
 8005f72:	b2b6      	uxthmi	r6, r6
 8005f74:	07df      	lsls	r7, r3, #31
 8005f76:	bf48      	it	mi
 8005f78:	f043 0320 	orrmi.w	r3, r3, #32
 8005f7c:	6029      	str	r1, [r5, #0]
 8005f7e:	bf48      	it	mi
 8005f80:	6023      	strmi	r3, [r4, #0]
 8005f82:	b91e      	cbnz	r6, 8005f8c <_printf_i+0x1a4>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	f023 0320 	bic.w	r3, r3, #32
 8005f8a:	6023      	str	r3, [r4, #0]
 8005f8c:	2310      	movs	r3, #16
 8005f8e:	e7a7      	b.n	8005ee0 <_printf_i+0xf8>
 8005f90:	4824      	ldr	r0, [pc, #144]	; (8006024 <_printf_i+0x23c>)
 8005f92:	e7e4      	b.n	8005f5e <_printf_i+0x176>
 8005f94:	4615      	mov	r5, r2
 8005f96:	e7bd      	b.n	8005f14 <_printf_i+0x12c>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	6826      	ldr	r6, [r4, #0]
 8005f9c:	6961      	ldr	r1, [r4, #20]
 8005f9e:	1d18      	adds	r0, r3, #4
 8005fa0:	6028      	str	r0, [r5, #0]
 8005fa2:	0635      	lsls	r5, r6, #24
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	d501      	bpl.n	8005fac <_printf_i+0x1c4>
 8005fa8:	6019      	str	r1, [r3, #0]
 8005faa:	e002      	b.n	8005fb2 <_printf_i+0x1ca>
 8005fac:	0670      	lsls	r0, r6, #25
 8005fae:	d5fb      	bpl.n	8005fa8 <_printf_i+0x1c0>
 8005fb0:	8019      	strh	r1, [r3, #0]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	6123      	str	r3, [r4, #16]
 8005fb6:	4615      	mov	r5, r2
 8005fb8:	e7bc      	b.n	8005f34 <_printf_i+0x14c>
 8005fba:	682b      	ldr	r3, [r5, #0]
 8005fbc:	1d1a      	adds	r2, r3, #4
 8005fbe:	602a      	str	r2, [r5, #0]
 8005fc0:	681d      	ldr	r5, [r3, #0]
 8005fc2:	6862      	ldr	r2, [r4, #4]
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	f7fa f90a 	bl	80001e0 <memchr>
 8005fcc:	b108      	cbz	r0, 8005fd2 <_printf_i+0x1ea>
 8005fce:	1b40      	subs	r0, r0, r5
 8005fd0:	6060      	str	r0, [r4, #4]
 8005fd2:	6863      	ldr	r3, [r4, #4]
 8005fd4:	6123      	str	r3, [r4, #16]
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fdc:	e7aa      	b.n	8005f34 <_printf_i+0x14c>
 8005fde:	6923      	ldr	r3, [r4, #16]
 8005fe0:	462a      	mov	r2, r5
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	47d0      	blx	sl
 8005fe8:	3001      	adds	r0, #1
 8005fea:	d0ad      	beq.n	8005f48 <_printf_i+0x160>
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	079b      	lsls	r3, r3, #30
 8005ff0:	d413      	bmi.n	800601a <_printf_i+0x232>
 8005ff2:	68e0      	ldr	r0, [r4, #12]
 8005ff4:	9b03      	ldr	r3, [sp, #12]
 8005ff6:	4298      	cmp	r0, r3
 8005ff8:	bfb8      	it	lt
 8005ffa:	4618      	movlt	r0, r3
 8005ffc:	e7a6      	b.n	8005f4c <_printf_i+0x164>
 8005ffe:	2301      	movs	r3, #1
 8006000:	4632      	mov	r2, r6
 8006002:	4649      	mov	r1, r9
 8006004:	4640      	mov	r0, r8
 8006006:	47d0      	blx	sl
 8006008:	3001      	adds	r0, #1
 800600a:	d09d      	beq.n	8005f48 <_printf_i+0x160>
 800600c:	3501      	adds	r5, #1
 800600e:	68e3      	ldr	r3, [r4, #12]
 8006010:	9903      	ldr	r1, [sp, #12]
 8006012:	1a5b      	subs	r3, r3, r1
 8006014:	42ab      	cmp	r3, r5
 8006016:	dcf2      	bgt.n	8005ffe <_printf_i+0x216>
 8006018:	e7eb      	b.n	8005ff2 <_printf_i+0x20a>
 800601a:	2500      	movs	r5, #0
 800601c:	f104 0619 	add.w	r6, r4, #25
 8006020:	e7f5      	b.n	800600e <_printf_i+0x226>
 8006022:	bf00      	nop
 8006024:	0800a2e2 	.word	0x0800a2e2
 8006028:	0800a2f3 	.word	0x0800a2f3

0800602c <_scanf_float>:
 800602c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006030:	b087      	sub	sp, #28
 8006032:	4617      	mov	r7, r2
 8006034:	9303      	str	r3, [sp, #12]
 8006036:	688b      	ldr	r3, [r1, #8]
 8006038:	1e5a      	subs	r2, r3, #1
 800603a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800603e:	bf83      	ittte	hi
 8006040:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006044:	195b      	addhi	r3, r3, r5
 8006046:	9302      	strhi	r3, [sp, #8]
 8006048:	2300      	movls	r3, #0
 800604a:	bf86      	itte	hi
 800604c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006050:	608b      	strhi	r3, [r1, #8]
 8006052:	9302      	strls	r3, [sp, #8]
 8006054:	680b      	ldr	r3, [r1, #0]
 8006056:	468b      	mov	fp, r1
 8006058:	2500      	movs	r5, #0
 800605a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800605e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006062:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006066:	4680      	mov	r8, r0
 8006068:	460c      	mov	r4, r1
 800606a:	465e      	mov	r6, fp
 800606c:	46aa      	mov	sl, r5
 800606e:	46a9      	mov	r9, r5
 8006070:	9501      	str	r5, [sp, #4]
 8006072:	68a2      	ldr	r2, [r4, #8]
 8006074:	b152      	cbz	r2, 800608c <_scanf_float+0x60>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b4e      	cmp	r3, #78	; 0x4e
 800607c:	d864      	bhi.n	8006148 <_scanf_float+0x11c>
 800607e:	2b40      	cmp	r3, #64	; 0x40
 8006080:	d83c      	bhi.n	80060fc <_scanf_float+0xd0>
 8006082:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006086:	b2c8      	uxtb	r0, r1
 8006088:	280e      	cmp	r0, #14
 800608a:	d93a      	bls.n	8006102 <_scanf_float+0xd6>
 800608c:	f1b9 0f00 	cmp.w	r9, #0
 8006090:	d003      	beq.n	800609a <_scanf_float+0x6e>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006098:	6023      	str	r3, [r4, #0]
 800609a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800609e:	f1ba 0f01 	cmp.w	sl, #1
 80060a2:	f200 8113 	bhi.w	80062cc <_scanf_float+0x2a0>
 80060a6:	455e      	cmp	r6, fp
 80060a8:	f200 8105 	bhi.w	80062b6 <_scanf_float+0x28a>
 80060ac:	2501      	movs	r5, #1
 80060ae:	4628      	mov	r0, r5
 80060b0:	b007      	add	sp, #28
 80060b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80060ba:	2a0d      	cmp	r2, #13
 80060bc:	d8e6      	bhi.n	800608c <_scanf_float+0x60>
 80060be:	a101      	add	r1, pc, #4	; (adr r1, 80060c4 <_scanf_float+0x98>)
 80060c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80060c4:	08006203 	.word	0x08006203
 80060c8:	0800608d 	.word	0x0800608d
 80060cc:	0800608d 	.word	0x0800608d
 80060d0:	0800608d 	.word	0x0800608d
 80060d4:	08006263 	.word	0x08006263
 80060d8:	0800623b 	.word	0x0800623b
 80060dc:	0800608d 	.word	0x0800608d
 80060e0:	0800608d 	.word	0x0800608d
 80060e4:	08006211 	.word	0x08006211
 80060e8:	0800608d 	.word	0x0800608d
 80060ec:	0800608d 	.word	0x0800608d
 80060f0:	0800608d 	.word	0x0800608d
 80060f4:	0800608d 	.word	0x0800608d
 80060f8:	080061c9 	.word	0x080061c9
 80060fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006100:	e7db      	b.n	80060ba <_scanf_float+0x8e>
 8006102:	290e      	cmp	r1, #14
 8006104:	d8c2      	bhi.n	800608c <_scanf_float+0x60>
 8006106:	a001      	add	r0, pc, #4	; (adr r0, 800610c <_scanf_float+0xe0>)
 8006108:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800610c:	080061bb 	.word	0x080061bb
 8006110:	0800608d 	.word	0x0800608d
 8006114:	080061bb 	.word	0x080061bb
 8006118:	0800624f 	.word	0x0800624f
 800611c:	0800608d 	.word	0x0800608d
 8006120:	08006169 	.word	0x08006169
 8006124:	080061a5 	.word	0x080061a5
 8006128:	080061a5 	.word	0x080061a5
 800612c:	080061a5 	.word	0x080061a5
 8006130:	080061a5 	.word	0x080061a5
 8006134:	080061a5 	.word	0x080061a5
 8006138:	080061a5 	.word	0x080061a5
 800613c:	080061a5 	.word	0x080061a5
 8006140:	080061a5 	.word	0x080061a5
 8006144:	080061a5 	.word	0x080061a5
 8006148:	2b6e      	cmp	r3, #110	; 0x6e
 800614a:	d809      	bhi.n	8006160 <_scanf_float+0x134>
 800614c:	2b60      	cmp	r3, #96	; 0x60
 800614e:	d8b2      	bhi.n	80060b6 <_scanf_float+0x8a>
 8006150:	2b54      	cmp	r3, #84	; 0x54
 8006152:	d077      	beq.n	8006244 <_scanf_float+0x218>
 8006154:	2b59      	cmp	r3, #89	; 0x59
 8006156:	d199      	bne.n	800608c <_scanf_float+0x60>
 8006158:	2d07      	cmp	r5, #7
 800615a:	d197      	bne.n	800608c <_scanf_float+0x60>
 800615c:	2508      	movs	r5, #8
 800615e:	e029      	b.n	80061b4 <_scanf_float+0x188>
 8006160:	2b74      	cmp	r3, #116	; 0x74
 8006162:	d06f      	beq.n	8006244 <_scanf_float+0x218>
 8006164:	2b79      	cmp	r3, #121	; 0x79
 8006166:	e7f6      	b.n	8006156 <_scanf_float+0x12a>
 8006168:	6821      	ldr	r1, [r4, #0]
 800616a:	05c8      	lsls	r0, r1, #23
 800616c:	d51a      	bpl.n	80061a4 <_scanf_float+0x178>
 800616e:	9b02      	ldr	r3, [sp, #8]
 8006170:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006174:	6021      	str	r1, [r4, #0]
 8006176:	f109 0901 	add.w	r9, r9, #1
 800617a:	b11b      	cbz	r3, 8006184 <_scanf_float+0x158>
 800617c:	3b01      	subs	r3, #1
 800617e:	3201      	adds	r2, #1
 8006180:	9302      	str	r3, [sp, #8]
 8006182:	60a2      	str	r2, [r4, #8]
 8006184:	68a3      	ldr	r3, [r4, #8]
 8006186:	3b01      	subs	r3, #1
 8006188:	60a3      	str	r3, [r4, #8]
 800618a:	6923      	ldr	r3, [r4, #16]
 800618c:	3301      	adds	r3, #1
 800618e:	6123      	str	r3, [r4, #16]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3b01      	subs	r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	607b      	str	r3, [r7, #4]
 8006198:	f340 8084 	ble.w	80062a4 <_scanf_float+0x278>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	3301      	adds	r3, #1
 80061a0:	603b      	str	r3, [r7, #0]
 80061a2:	e766      	b.n	8006072 <_scanf_float+0x46>
 80061a4:	eb1a 0f05 	cmn.w	sl, r5
 80061a8:	f47f af70 	bne.w	800608c <_scanf_float+0x60>
 80061ac:	6822      	ldr	r2, [r4, #0]
 80061ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80061b2:	6022      	str	r2, [r4, #0]
 80061b4:	f806 3b01 	strb.w	r3, [r6], #1
 80061b8:	e7e4      	b.n	8006184 <_scanf_float+0x158>
 80061ba:	6822      	ldr	r2, [r4, #0]
 80061bc:	0610      	lsls	r0, r2, #24
 80061be:	f57f af65 	bpl.w	800608c <_scanf_float+0x60>
 80061c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061c6:	e7f4      	b.n	80061b2 <_scanf_float+0x186>
 80061c8:	f1ba 0f00 	cmp.w	sl, #0
 80061cc:	d10e      	bne.n	80061ec <_scanf_float+0x1c0>
 80061ce:	f1b9 0f00 	cmp.w	r9, #0
 80061d2:	d10e      	bne.n	80061f2 <_scanf_float+0x1c6>
 80061d4:	6822      	ldr	r2, [r4, #0]
 80061d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80061da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80061de:	d108      	bne.n	80061f2 <_scanf_float+0x1c6>
 80061e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80061e4:	6022      	str	r2, [r4, #0]
 80061e6:	f04f 0a01 	mov.w	sl, #1
 80061ea:	e7e3      	b.n	80061b4 <_scanf_float+0x188>
 80061ec:	f1ba 0f02 	cmp.w	sl, #2
 80061f0:	d055      	beq.n	800629e <_scanf_float+0x272>
 80061f2:	2d01      	cmp	r5, #1
 80061f4:	d002      	beq.n	80061fc <_scanf_float+0x1d0>
 80061f6:	2d04      	cmp	r5, #4
 80061f8:	f47f af48 	bne.w	800608c <_scanf_float+0x60>
 80061fc:	3501      	adds	r5, #1
 80061fe:	b2ed      	uxtb	r5, r5
 8006200:	e7d8      	b.n	80061b4 <_scanf_float+0x188>
 8006202:	f1ba 0f01 	cmp.w	sl, #1
 8006206:	f47f af41 	bne.w	800608c <_scanf_float+0x60>
 800620a:	f04f 0a02 	mov.w	sl, #2
 800620e:	e7d1      	b.n	80061b4 <_scanf_float+0x188>
 8006210:	b97d      	cbnz	r5, 8006232 <_scanf_float+0x206>
 8006212:	f1b9 0f00 	cmp.w	r9, #0
 8006216:	f47f af3c 	bne.w	8006092 <_scanf_float+0x66>
 800621a:	6822      	ldr	r2, [r4, #0]
 800621c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006220:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006224:	f47f af39 	bne.w	800609a <_scanf_float+0x6e>
 8006228:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800622c:	6022      	str	r2, [r4, #0]
 800622e:	2501      	movs	r5, #1
 8006230:	e7c0      	b.n	80061b4 <_scanf_float+0x188>
 8006232:	2d03      	cmp	r5, #3
 8006234:	d0e2      	beq.n	80061fc <_scanf_float+0x1d0>
 8006236:	2d05      	cmp	r5, #5
 8006238:	e7de      	b.n	80061f8 <_scanf_float+0x1cc>
 800623a:	2d02      	cmp	r5, #2
 800623c:	f47f af26 	bne.w	800608c <_scanf_float+0x60>
 8006240:	2503      	movs	r5, #3
 8006242:	e7b7      	b.n	80061b4 <_scanf_float+0x188>
 8006244:	2d06      	cmp	r5, #6
 8006246:	f47f af21 	bne.w	800608c <_scanf_float+0x60>
 800624a:	2507      	movs	r5, #7
 800624c:	e7b2      	b.n	80061b4 <_scanf_float+0x188>
 800624e:	6822      	ldr	r2, [r4, #0]
 8006250:	0591      	lsls	r1, r2, #22
 8006252:	f57f af1b 	bpl.w	800608c <_scanf_float+0x60>
 8006256:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800625a:	6022      	str	r2, [r4, #0]
 800625c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006260:	e7a8      	b.n	80061b4 <_scanf_float+0x188>
 8006262:	6822      	ldr	r2, [r4, #0]
 8006264:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006268:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800626c:	d006      	beq.n	800627c <_scanf_float+0x250>
 800626e:	0550      	lsls	r0, r2, #21
 8006270:	f57f af0c 	bpl.w	800608c <_scanf_float+0x60>
 8006274:	f1b9 0f00 	cmp.w	r9, #0
 8006278:	f43f af0f 	beq.w	800609a <_scanf_float+0x6e>
 800627c:	0591      	lsls	r1, r2, #22
 800627e:	bf58      	it	pl
 8006280:	9901      	ldrpl	r1, [sp, #4]
 8006282:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006286:	bf58      	it	pl
 8006288:	eba9 0101 	subpl.w	r1, r9, r1
 800628c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006290:	bf58      	it	pl
 8006292:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006296:	6022      	str	r2, [r4, #0]
 8006298:	f04f 0900 	mov.w	r9, #0
 800629c:	e78a      	b.n	80061b4 <_scanf_float+0x188>
 800629e:	f04f 0a03 	mov.w	sl, #3
 80062a2:	e787      	b.n	80061b4 <_scanf_float+0x188>
 80062a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80062a8:	4639      	mov	r1, r7
 80062aa:	4640      	mov	r0, r8
 80062ac:	4798      	blx	r3
 80062ae:	2800      	cmp	r0, #0
 80062b0:	f43f aedf 	beq.w	8006072 <_scanf_float+0x46>
 80062b4:	e6ea      	b.n	800608c <_scanf_float+0x60>
 80062b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062be:	463a      	mov	r2, r7
 80062c0:	4640      	mov	r0, r8
 80062c2:	4798      	blx	r3
 80062c4:	6923      	ldr	r3, [r4, #16]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	6123      	str	r3, [r4, #16]
 80062ca:	e6ec      	b.n	80060a6 <_scanf_float+0x7a>
 80062cc:	1e6b      	subs	r3, r5, #1
 80062ce:	2b06      	cmp	r3, #6
 80062d0:	d825      	bhi.n	800631e <_scanf_float+0x2f2>
 80062d2:	2d02      	cmp	r5, #2
 80062d4:	d836      	bhi.n	8006344 <_scanf_float+0x318>
 80062d6:	455e      	cmp	r6, fp
 80062d8:	f67f aee8 	bls.w	80060ac <_scanf_float+0x80>
 80062dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062e4:	463a      	mov	r2, r7
 80062e6:	4640      	mov	r0, r8
 80062e8:	4798      	blx	r3
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	6123      	str	r3, [r4, #16]
 80062f0:	e7f1      	b.n	80062d6 <_scanf_float+0x2aa>
 80062f2:	9802      	ldr	r0, [sp, #8]
 80062f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80062fc:	9002      	str	r0, [sp, #8]
 80062fe:	463a      	mov	r2, r7
 8006300:	4640      	mov	r0, r8
 8006302:	4798      	blx	r3
 8006304:	6923      	ldr	r3, [r4, #16]
 8006306:	3b01      	subs	r3, #1
 8006308:	6123      	str	r3, [r4, #16]
 800630a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800630e:	fa5f fa8a 	uxtb.w	sl, sl
 8006312:	f1ba 0f02 	cmp.w	sl, #2
 8006316:	d1ec      	bne.n	80062f2 <_scanf_float+0x2c6>
 8006318:	3d03      	subs	r5, #3
 800631a:	b2ed      	uxtb	r5, r5
 800631c:	1b76      	subs	r6, r6, r5
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	05da      	lsls	r2, r3, #23
 8006322:	d52f      	bpl.n	8006384 <_scanf_float+0x358>
 8006324:	055b      	lsls	r3, r3, #21
 8006326:	d510      	bpl.n	800634a <_scanf_float+0x31e>
 8006328:	455e      	cmp	r6, fp
 800632a:	f67f aebf 	bls.w	80060ac <_scanf_float+0x80>
 800632e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006332:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006336:	463a      	mov	r2, r7
 8006338:	4640      	mov	r0, r8
 800633a:	4798      	blx	r3
 800633c:	6923      	ldr	r3, [r4, #16]
 800633e:	3b01      	subs	r3, #1
 8006340:	6123      	str	r3, [r4, #16]
 8006342:	e7f1      	b.n	8006328 <_scanf_float+0x2fc>
 8006344:	46aa      	mov	sl, r5
 8006346:	9602      	str	r6, [sp, #8]
 8006348:	e7df      	b.n	800630a <_scanf_float+0x2de>
 800634a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800634e:	6923      	ldr	r3, [r4, #16]
 8006350:	2965      	cmp	r1, #101	; 0x65
 8006352:	f103 33ff 	add.w	r3, r3, #4294967295
 8006356:	f106 35ff 	add.w	r5, r6, #4294967295
 800635a:	6123      	str	r3, [r4, #16]
 800635c:	d00c      	beq.n	8006378 <_scanf_float+0x34c>
 800635e:	2945      	cmp	r1, #69	; 0x45
 8006360:	d00a      	beq.n	8006378 <_scanf_float+0x34c>
 8006362:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006366:	463a      	mov	r2, r7
 8006368:	4640      	mov	r0, r8
 800636a:	4798      	blx	r3
 800636c:	6923      	ldr	r3, [r4, #16]
 800636e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006372:	3b01      	subs	r3, #1
 8006374:	1eb5      	subs	r5, r6, #2
 8006376:	6123      	str	r3, [r4, #16]
 8006378:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800637c:	463a      	mov	r2, r7
 800637e:	4640      	mov	r0, r8
 8006380:	4798      	blx	r3
 8006382:	462e      	mov	r6, r5
 8006384:	6825      	ldr	r5, [r4, #0]
 8006386:	f015 0510 	ands.w	r5, r5, #16
 800638a:	d158      	bne.n	800643e <_scanf_float+0x412>
 800638c:	7035      	strb	r5, [r6, #0]
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006398:	d11c      	bne.n	80063d4 <_scanf_float+0x3a8>
 800639a:	9b01      	ldr	r3, [sp, #4]
 800639c:	454b      	cmp	r3, r9
 800639e:	eba3 0209 	sub.w	r2, r3, r9
 80063a2:	d124      	bne.n	80063ee <_scanf_float+0x3c2>
 80063a4:	2200      	movs	r2, #0
 80063a6:	4659      	mov	r1, fp
 80063a8:	4640      	mov	r0, r8
 80063aa:	f002 fd65 	bl	8008e78 <_strtod_r>
 80063ae:	9b03      	ldr	r3, [sp, #12]
 80063b0:	6821      	ldr	r1, [r4, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f011 0f02 	tst.w	r1, #2
 80063b8:	ec57 6b10 	vmov	r6, r7, d0
 80063bc:	f103 0204 	add.w	r2, r3, #4
 80063c0:	d020      	beq.n	8006404 <_scanf_float+0x3d8>
 80063c2:	9903      	ldr	r1, [sp, #12]
 80063c4:	600a      	str	r2, [r1, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	e9c3 6700 	strd	r6, r7, [r3]
 80063cc:	68e3      	ldr	r3, [r4, #12]
 80063ce:	3301      	adds	r3, #1
 80063d0:	60e3      	str	r3, [r4, #12]
 80063d2:	e66c      	b.n	80060ae <_scanf_float+0x82>
 80063d4:	9b04      	ldr	r3, [sp, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0e4      	beq.n	80063a4 <_scanf_float+0x378>
 80063da:	9905      	ldr	r1, [sp, #20]
 80063dc:	230a      	movs	r3, #10
 80063de:	462a      	mov	r2, r5
 80063e0:	3101      	adds	r1, #1
 80063e2:	4640      	mov	r0, r8
 80063e4:	f002 fdd0 	bl	8008f88 <_strtol_r>
 80063e8:	9b04      	ldr	r3, [sp, #16]
 80063ea:	9e05      	ldr	r6, [sp, #20]
 80063ec:	1ac2      	subs	r2, r0, r3
 80063ee:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80063f2:	429e      	cmp	r6, r3
 80063f4:	bf28      	it	cs
 80063f6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80063fa:	4912      	ldr	r1, [pc, #72]	; (8006444 <_scanf_float+0x418>)
 80063fc:	4630      	mov	r0, r6
 80063fe:	f000 f989 	bl	8006714 <siprintf>
 8006402:	e7cf      	b.n	80063a4 <_scanf_float+0x378>
 8006404:	f011 0f04 	tst.w	r1, #4
 8006408:	9903      	ldr	r1, [sp, #12]
 800640a:	600a      	str	r2, [r1, #0]
 800640c:	d1db      	bne.n	80063c6 <_scanf_float+0x39a>
 800640e:	f8d3 8000 	ldr.w	r8, [r3]
 8006412:	ee10 2a10 	vmov	r2, s0
 8006416:	ee10 0a10 	vmov	r0, s0
 800641a:	463b      	mov	r3, r7
 800641c:	4639      	mov	r1, r7
 800641e:	f7fa fb8d 	bl	8000b3c <__aeabi_dcmpun>
 8006422:	b128      	cbz	r0, 8006430 <_scanf_float+0x404>
 8006424:	4808      	ldr	r0, [pc, #32]	; (8006448 <_scanf_float+0x41c>)
 8006426:	f000 faed 	bl	8006a04 <nanf>
 800642a:	ed88 0a00 	vstr	s0, [r8]
 800642e:	e7cd      	b.n	80063cc <_scanf_float+0x3a0>
 8006430:	4630      	mov	r0, r6
 8006432:	4639      	mov	r1, r7
 8006434:	f7fa fbe0 	bl	8000bf8 <__aeabi_d2f>
 8006438:	f8c8 0000 	str.w	r0, [r8]
 800643c:	e7c6      	b.n	80063cc <_scanf_float+0x3a0>
 800643e:	2500      	movs	r5, #0
 8006440:	e635      	b.n	80060ae <_scanf_float+0x82>
 8006442:	bf00      	nop
 8006444:	0800a304 	.word	0x0800a304
 8006448:	0800a695 	.word	0x0800a695

0800644c <std>:
 800644c:	2300      	movs	r3, #0
 800644e:	b510      	push	{r4, lr}
 8006450:	4604      	mov	r4, r0
 8006452:	e9c0 3300 	strd	r3, r3, [r0]
 8006456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800645a:	6083      	str	r3, [r0, #8]
 800645c:	8181      	strh	r1, [r0, #12]
 800645e:	6643      	str	r3, [r0, #100]	; 0x64
 8006460:	81c2      	strh	r2, [r0, #14]
 8006462:	6183      	str	r3, [r0, #24]
 8006464:	4619      	mov	r1, r3
 8006466:	2208      	movs	r2, #8
 8006468:	305c      	adds	r0, #92	; 0x5c
 800646a:	f000 fa4b 	bl	8006904 <memset>
 800646e:	4b0d      	ldr	r3, [pc, #52]	; (80064a4 <std+0x58>)
 8006470:	6263      	str	r3, [r4, #36]	; 0x24
 8006472:	4b0d      	ldr	r3, [pc, #52]	; (80064a8 <std+0x5c>)
 8006474:	62a3      	str	r3, [r4, #40]	; 0x28
 8006476:	4b0d      	ldr	r3, [pc, #52]	; (80064ac <std+0x60>)
 8006478:	62e3      	str	r3, [r4, #44]	; 0x2c
 800647a:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <std+0x64>)
 800647c:	6323      	str	r3, [r4, #48]	; 0x30
 800647e:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <std+0x68>)
 8006480:	6224      	str	r4, [r4, #32]
 8006482:	429c      	cmp	r4, r3
 8006484:	d006      	beq.n	8006494 <std+0x48>
 8006486:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800648a:	4294      	cmp	r4, r2
 800648c:	d002      	beq.n	8006494 <std+0x48>
 800648e:	33d0      	adds	r3, #208	; 0xd0
 8006490:	429c      	cmp	r4, r3
 8006492:	d105      	bne.n	80064a0 <std+0x54>
 8006494:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800649c:	f000 baae 	b.w	80069fc <__retarget_lock_init_recursive>
 80064a0:	bd10      	pop	{r4, pc}
 80064a2:	bf00      	nop
 80064a4:	08006755 	.word	0x08006755
 80064a8:	08006777 	.word	0x08006777
 80064ac:	080067af 	.word	0x080067af
 80064b0:	080067d3 	.word	0x080067d3
 80064b4:	200003cc 	.word	0x200003cc

080064b8 <stdio_exit_handler>:
 80064b8:	4a02      	ldr	r2, [pc, #8]	; (80064c4 <stdio_exit_handler+0xc>)
 80064ba:	4903      	ldr	r1, [pc, #12]	; (80064c8 <stdio_exit_handler+0x10>)
 80064bc:	4803      	ldr	r0, [pc, #12]	; (80064cc <stdio_exit_handler+0x14>)
 80064be:	f000 b869 	b.w	8006594 <_fwalk_sglue>
 80064c2:	bf00      	nop
 80064c4:	2000001c 	.word	0x2000001c
 80064c8:	080095d1 	.word	0x080095d1
 80064cc:	20000028 	.word	0x20000028

080064d0 <cleanup_stdio>:
 80064d0:	6841      	ldr	r1, [r0, #4]
 80064d2:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <cleanup_stdio+0x34>)
 80064d4:	4299      	cmp	r1, r3
 80064d6:	b510      	push	{r4, lr}
 80064d8:	4604      	mov	r4, r0
 80064da:	d001      	beq.n	80064e0 <cleanup_stdio+0x10>
 80064dc:	f003 f878 	bl	80095d0 <_fflush_r>
 80064e0:	68a1      	ldr	r1, [r4, #8]
 80064e2:	4b09      	ldr	r3, [pc, #36]	; (8006508 <cleanup_stdio+0x38>)
 80064e4:	4299      	cmp	r1, r3
 80064e6:	d002      	beq.n	80064ee <cleanup_stdio+0x1e>
 80064e8:	4620      	mov	r0, r4
 80064ea:	f003 f871 	bl	80095d0 <_fflush_r>
 80064ee:	68e1      	ldr	r1, [r4, #12]
 80064f0:	4b06      	ldr	r3, [pc, #24]	; (800650c <cleanup_stdio+0x3c>)
 80064f2:	4299      	cmp	r1, r3
 80064f4:	d004      	beq.n	8006500 <cleanup_stdio+0x30>
 80064f6:	4620      	mov	r0, r4
 80064f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064fc:	f003 b868 	b.w	80095d0 <_fflush_r>
 8006500:	bd10      	pop	{r4, pc}
 8006502:	bf00      	nop
 8006504:	200003cc 	.word	0x200003cc
 8006508:	20000434 	.word	0x20000434
 800650c:	2000049c 	.word	0x2000049c

08006510 <global_stdio_init.part.0>:
 8006510:	b510      	push	{r4, lr}
 8006512:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <global_stdio_init.part.0+0x30>)
 8006514:	4c0b      	ldr	r4, [pc, #44]	; (8006544 <global_stdio_init.part.0+0x34>)
 8006516:	4a0c      	ldr	r2, [pc, #48]	; (8006548 <global_stdio_init.part.0+0x38>)
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	4620      	mov	r0, r4
 800651c:	2200      	movs	r2, #0
 800651e:	2104      	movs	r1, #4
 8006520:	f7ff ff94 	bl	800644c <std>
 8006524:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006528:	2201      	movs	r2, #1
 800652a:	2109      	movs	r1, #9
 800652c:	f7ff ff8e 	bl	800644c <std>
 8006530:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006534:	2202      	movs	r2, #2
 8006536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800653a:	2112      	movs	r1, #18
 800653c:	f7ff bf86 	b.w	800644c <std>
 8006540:	20000504 	.word	0x20000504
 8006544:	200003cc 	.word	0x200003cc
 8006548:	080064b9 	.word	0x080064b9

0800654c <__sfp_lock_acquire>:
 800654c:	4801      	ldr	r0, [pc, #4]	; (8006554 <__sfp_lock_acquire+0x8>)
 800654e:	f000 ba56 	b.w	80069fe <__retarget_lock_acquire_recursive>
 8006552:	bf00      	nop
 8006554:	2000050d 	.word	0x2000050d

08006558 <__sfp_lock_release>:
 8006558:	4801      	ldr	r0, [pc, #4]	; (8006560 <__sfp_lock_release+0x8>)
 800655a:	f000 ba51 	b.w	8006a00 <__retarget_lock_release_recursive>
 800655e:	bf00      	nop
 8006560:	2000050d 	.word	0x2000050d

08006564 <__sinit>:
 8006564:	b510      	push	{r4, lr}
 8006566:	4604      	mov	r4, r0
 8006568:	f7ff fff0 	bl	800654c <__sfp_lock_acquire>
 800656c:	6a23      	ldr	r3, [r4, #32]
 800656e:	b11b      	cbz	r3, 8006578 <__sinit+0x14>
 8006570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006574:	f7ff bff0 	b.w	8006558 <__sfp_lock_release>
 8006578:	4b04      	ldr	r3, [pc, #16]	; (800658c <__sinit+0x28>)
 800657a:	6223      	str	r3, [r4, #32]
 800657c:	4b04      	ldr	r3, [pc, #16]	; (8006590 <__sinit+0x2c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1f5      	bne.n	8006570 <__sinit+0xc>
 8006584:	f7ff ffc4 	bl	8006510 <global_stdio_init.part.0>
 8006588:	e7f2      	b.n	8006570 <__sinit+0xc>
 800658a:	bf00      	nop
 800658c:	080064d1 	.word	0x080064d1
 8006590:	20000504 	.word	0x20000504

08006594 <_fwalk_sglue>:
 8006594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006598:	4607      	mov	r7, r0
 800659a:	4688      	mov	r8, r1
 800659c:	4614      	mov	r4, r2
 800659e:	2600      	movs	r6, #0
 80065a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065a4:	f1b9 0901 	subs.w	r9, r9, #1
 80065a8:	d505      	bpl.n	80065b6 <_fwalk_sglue+0x22>
 80065aa:	6824      	ldr	r4, [r4, #0]
 80065ac:	2c00      	cmp	r4, #0
 80065ae:	d1f7      	bne.n	80065a0 <_fwalk_sglue+0xc>
 80065b0:	4630      	mov	r0, r6
 80065b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065b6:	89ab      	ldrh	r3, [r5, #12]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d907      	bls.n	80065cc <_fwalk_sglue+0x38>
 80065bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065c0:	3301      	adds	r3, #1
 80065c2:	d003      	beq.n	80065cc <_fwalk_sglue+0x38>
 80065c4:	4629      	mov	r1, r5
 80065c6:	4638      	mov	r0, r7
 80065c8:	47c0      	blx	r8
 80065ca:	4306      	orrs	r6, r0
 80065cc:	3568      	adds	r5, #104	; 0x68
 80065ce:	e7e9      	b.n	80065a4 <_fwalk_sglue+0x10>

080065d0 <iprintf>:
 80065d0:	b40f      	push	{r0, r1, r2, r3}
 80065d2:	b507      	push	{r0, r1, r2, lr}
 80065d4:	4906      	ldr	r1, [pc, #24]	; (80065f0 <iprintf+0x20>)
 80065d6:	ab04      	add	r3, sp, #16
 80065d8:	6808      	ldr	r0, [r1, #0]
 80065da:	f853 2b04 	ldr.w	r2, [r3], #4
 80065de:	6881      	ldr	r1, [r0, #8]
 80065e0:	9301      	str	r3, [sp, #4]
 80065e2:	f002 fe55 	bl	8009290 <_vfiprintf_r>
 80065e6:	b003      	add	sp, #12
 80065e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80065ec:	b004      	add	sp, #16
 80065ee:	4770      	bx	lr
 80065f0:	20000074 	.word	0x20000074

080065f4 <_puts_r>:
 80065f4:	6a03      	ldr	r3, [r0, #32]
 80065f6:	b570      	push	{r4, r5, r6, lr}
 80065f8:	6884      	ldr	r4, [r0, #8]
 80065fa:	4605      	mov	r5, r0
 80065fc:	460e      	mov	r6, r1
 80065fe:	b90b      	cbnz	r3, 8006604 <_puts_r+0x10>
 8006600:	f7ff ffb0 	bl	8006564 <__sinit>
 8006604:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006606:	07db      	lsls	r3, r3, #31
 8006608:	d405      	bmi.n	8006616 <_puts_r+0x22>
 800660a:	89a3      	ldrh	r3, [r4, #12]
 800660c:	0598      	lsls	r0, r3, #22
 800660e:	d402      	bmi.n	8006616 <_puts_r+0x22>
 8006610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006612:	f000 f9f4 	bl	80069fe <__retarget_lock_acquire_recursive>
 8006616:	89a3      	ldrh	r3, [r4, #12]
 8006618:	0719      	lsls	r1, r3, #28
 800661a:	d513      	bpl.n	8006644 <_puts_r+0x50>
 800661c:	6923      	ldr	r3, [r4, #16]
 800661e:	b18b      	cbz	r3, 8006644 <_puts_r+0x50>
 8006620:	3e01      	subs	r6, #1
 8006622:	68a3      	ldr	r3, [r4, #8]
 8006624:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006628:	3b01      	subs	r3, #1
 800662a:	60a3      	str	r3, [r4, #8]
 800662c:	b9e9      	cbnz	r1, 800666a <_puts_r+0x76>
 800662e:	2b00      	cmp	r3, #0
 8006630:	da2e      	bge.n	8006690 <_puts_r+0x9c>
 8006632:	4622      	mov	r2, r4
 8006634:	210a      	movs	r1, #10
 8006636:	4628      	mov	r0, r5
 8006638:	f000 f8cf 	bl	80067da <__swbuf_r>
 800663c:	3001      	adds	r0, #1
 800663e:	d007      	beq.n	8006650 <_puts_r+0x5c>
 8006640:	250a      	movs	r5, #10
 8006642:	e007      	b.n	8006654 <_puts_r+0x60>
 8006644:	4621      	mov	r1, r4
 8006646:	4628      	mov	r0, r5
 8006648:	f000 f904 	bl	8006854 <__swsetup_r>
 800664c:	2800      	cmp	r0, #0
 800664e:	d0e7      	beq.n	8006620 <_puts_r+0x2c>
 8006650:	f04f 35ff 	mov.w	r5, #4294967295
 8006654:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006656:	07da      	lsls	r2, r3, #31
 8006658:	d405      	bmi.n	8006666 <_puts_r+0x72>
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	059b      	lsls	r3, r3, #22
 800665e:	d402      	bmi.n	8006666 <_puts_r+0x72>
 8006660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006662:	f000 f9cd 	bl	8006a00 <__retarget_lock_release_recursive>
 8006666:	4628      	mov	r0, r5
 8006668:	bd70      	pop	{r4, r5, r6, pc}
 800666a:	2b00      	cmp	r3, #0
 800666c:	da04      	bge.n	8006678 <_puts_r+0x84>
 800666e:	69a2      	ldr	r2, [r4, #24]
 8006670:	429a      	cmp	r2, r3
 8006672:	dc06      	bgt.n	8006682 <_puts_r+0x8e>
 8006674:	290a      	cmp	r1, #10
 8006676:	d004      	beq.n	8006682 <_puts_r+0x8e>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	6022      	str	r2, [r4, #0]
 800667e:	7019      	strb	r1, [r3, #0]
 8006680:	e7cf      	b.n	8006622 <_puts_r+0x2e>
 8006682:	4622      	mov	r2, r4
 8006684:	4628      	mov	r0, r5
 8006686:	f000 f8a8 	bl	80067da <__swbuf_r>
 800668a:	3001      	adds	r0, #1
 800668c:	d1c9      	bne.n	8006622 <_puts_r+0x2e>
 800668e:	e7df      	b.n	8006650 <_puts_r+0x5c>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	250a      	movs	r5, #10
 8006694:	1c5a      	adds	r2, r3, #1
 8006696:	6022      	str	r2, [r4, #0]
 8006698:	701d      	strb	r5, [r3, #0]
 800669a:	e7db      	b.n	8006654 <_puts_r+0x60>

0800669c <puts>:
 800669c:	4b02      	ldr	r3, [pc, #8]	; (80066a8 <puts+0xc>)
 800669e:	4601      	mov	r1, r0
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	f7ff bfa7 	b.w	80065f4 <_puts_r>
 80066a6:	bf00      	nop
 80066a8:	20000074 	.word	0x20000074

080066ac <sniprintf>:
 80066ac:	b40c      	push	{r2, r3}
 80066ae:	b530      	push	{r4, r5, lr}
 80066b0:	4b17      	ldr	r3, [pc, #92]	; (8006710 <sniprintf+0x64>)
 80066b2:	1e0c      	subs	r4, r1, #0
 80066b4:	681d      	ldr	r5, [r3, #0]
 80066b6:	b09d      	sub	sp, #116	; 0x74
 80066b8:	da08      	bge.n	80066cc <sniprintf+0x20>
 80066ba:	238b      	movs	r3, #139	; 0x8b
 80066bc:	602b      	str	r3, [r5, #0]
 80066be:	f04f 30ff 	mov.w	r0, #4294967295
 80066c2:	b01d      	add	sp, #116	; 0x74
 80066c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066c8:	b002      	add	sp, #8
 80066ca:	4770      	bx	lr
 80066cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80066d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80066d4:	bf14      	ite	ne
 80066d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80066da:	4623      	moveq	r3, r4
 80066dc:	9304      	str	r3, [sp, #16]
 80066de:	9307      	str	r3, [sp, #28]
 80066e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066e4:	9002      	str	r0, [sp, #8]
 80066e6:	9006      	str	r0, [sp, #24]
 80066e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80066ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80066ee:	ab21      	add	r3, sp, #132	; 0x84
 80066f0:	a902      	add	r1, sp, #8
 80066f2:	4628      	mov	r0, r5
 80066f4:	9301      	str	r3, [sp, #4]
 80066f6:	f002 fca3 	bl	8009040 <_svfiprintf_r>
 80066fa:	1c43      	adds	r3, r0, #1
 80066fc:	bfbc      	itt	lt
 80066fe:	238b      	movlt	r3, #139	; 0x8b
 8006700:	602b      	strlt	r3, [r5, #0]
 8006702:	2c00      	cmp	r4, #0
 8006704:	d0dd      	beq.n	80066c2 <sniprintf+0x16>
 8006706:	9b02      	ldr	r3, [sp, #8]
 8006708:	2200      	movs	r2, #0
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	e7d9      	b.n	80066c2 <sniprintf+0x16>
 800670e:	bf00      	nop
 8006710:	20000074 	.word	0x20000074

08006714 <siprintf>:
 8006714:	b40e      	push	{r1, r2, r3}
 8006716:	b500      	push	{lr}
 8006718:	b09c      	sub	sp, #112	; 0x70
 800671a:	ab1d      	add	r3, sp, #116	; 0x74
 800671c:	9002      	str	r0, [sp, #8]
 800671e:	9006      	str	r0, [sp, #24]
 8006720:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006724:	4809      	ldr	r0, [pc, #36]	; (800674c <siprintf+0x38>)
 8006726:	9107      	str	r1, [sp, #28]
 8006728:	9104      	str	r1, [sp, #16]
 800672a:	4909      	ldr	r1, [pc, #36]	; (8006750 <siprintf+0x3c>)
 800672c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006730:	9105      	str	r1, [sp, #20]
 8006732:	6800      	ldr	r0, [r0, #0]
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	a902      	add	r1, sp, #8
 8006738:	f002 fc82 	bl	8009040 <_svfiprintf_r>
 800673c:	9b02      	ldr	r3, [sp, #8]
 800673e:	2200      	movs	r2, #0
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	b01c      	add	sp, #112	; 0x70
 8006744:	f85d eb04 	ldr.w	lr, [sp], #4
 8006748:	b003      	add	sp, #12
 800674a:	4770      	bx	lr
 800674c:	20000074 	.word	0x20000074
 8006750:	ffff0208 	.word	0xffff0208

08006754 <__sread>:
 8006754:	b510      	push	{r4, lr}
 8006756:	460c      	mov	r4, r1
 8006758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800675c:	f000 f900 	bl	8006960 <_read_r>
 8006760:	2800      	cmp	r0, #0
 8006762:	bfab      	itete	ge
 8006764:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006766:	89a3      	ldrhlt	r3, [r4, #12]
 8006768:	181b      	addge	r3, r3, r0
 800676a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800676e:	bfac      	ite	ge
 8006770:	6563      	strge	r3, [r4, #84]	; 0x54
 8006772:	81a3      	strhlt	r3, [r4, #12]
 8006774:	bd10      	pop	{r4, pc}

08006776 <__swrite>:
 8006776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800677a:	461f      	mov	r7, r3
 800677c:	898b      	ldrh	r3, [r1, #12]
 800677e:	05db      	lsls	r3, r3, #23
 8006780:	4605      	mov	r5, r0
 8006782:	460c      	mov	r4, r1
 8006784:	4616      	mov	r6, r2
 8006786:	d505      	bpl.n	8006794 <__swrite+0x1e>
 8006788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800678c:	2302      	movs	r3, #2
 800678e:	2200      	movs	r2, #0
 8006790:	f000 f8d4 	bl	800693c <_lseek_r>
 8006794:	89a3      	ldrh	r3, [r4, #12]
 8006796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800679a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800679e:	81a3      	strh	r3, [r4, #12]
 80067a0:	4632      	mov	r2, r6
 80067a2:	463b      	mov	r3, r7
 80067a4:	4628      	mov	r0, r5
 80067a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067aa:	f000 b8eb 	b.w	8006984 <_write_r>

080067ae <__sseek>:
 80067ae:	b510      	push	{r4, lr}
 80067b0:	460c      	mov	r4, r1
 80067b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b6:	f000 f8c1 	bl	800693c <_lseek_r>
 80067ba:	1c43      	adds	r3, r0, #1
 80067bc:	89a3      	ldrh	r3, [r4, #12]
 80067be:	bf15      	itete	ne
 80067c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80067c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067ca:	81a3      	strheq	r3, [r4, #12]
 80067cc:	bf18      	it	ne
 80067ce:	81a3      	strhne	r3, [r4, #12]
 80067d0:	bd10      	pop	{r4, pc}

080067d2 <__sclose>:
 80067d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d6:	f000 b8a1 	b.w	800691c <_close_r>

080067da <__swbuf_r>:
 80067da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067dc:	460e      	mov	r6, r1
 80067de:	4614      	mov	r4, r2
 80067e0:	4605      	mov	r5, r0
 80067e2:	b118      	cbz	r0, 80067ec <__swbuf_r+0x12>
 80067e4:	6a03      	ldr	r3, [r0, #32]
 80067e6:	b90b      	cbnz	r3, 80067ec <__swbuf_r+0x12>
 80067e8:	f7ff febc 	bl	8006564 <__sinit>
 80067ec:	69a3      	ldr	r3, [r4, #24]
 80067ee:	60a3      	str	r3, [r4, #8]
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	071a      	lsls	r2, r3, #28
 80067f4:	d525      	bpl.n	8006842 <__swbuf_r+0x68>
 80067f6:	6923      	ldr	r3, [r4, #16]
 80067f8:	b31b      	cbz	r3, 8006842 <__swbuf_r+0x68>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	6922      	ldr	r2, [r4, #16]
 80067fe:	1a98      	subs	r0, r3, r2
 8006800:	6963      	ldr	r3, [r4, #20]
 8006802:	b2f6      	uxtb	r6, r6
 8006804:	4283      	cmp	r3, r0
 8006806:	4637      	mov	r7, r6
 8006808:	dc04      	bgt.n	8006814 <__swbuf_r+0x3a>
 800680a:	4621      	mov	r1, r4
 800680c:	4628      	mov	r0, r5
 800680e:	f002 fedf 	bl	80095d0 <_fflush_r>
 8006812:	b9e0      	cbnz	r0, 800684e <__swbuf_r+0x74>
 8006814:	68a3      	ldr	r3, [r4, #8]
 8006816:	3b01      	subs	r3, #1
 8006818:	60a3      	str	r3, [r4, #8]
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	6022      	str	r2, [r4, #0]
 8006820:	701e      	strb	r6, [r3, #0]
 8006822:	6962      	ldr	r2, [r4, #20]
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	429a      	cmp	r2, r3
 8006828:	d004      	beq.n	8006834 <__swbuf_r+0x5a>
 800682a:	89a3      	ldrh	r3, [r4, #12]
 800682c:	07db      	lsls	r3, r3, #31
 800682e:	d506      	bpl.n	800683e <__swbuf_r+0x64>
 8006830:	2e0a      	cmp	r6, #10
 8006832:	d104      	bne.n	800683e <__swbuf_r+0x64>
 8006834:	4621      	mov	r1, r4
 8006836:	4628      	mov	r0, r5
 8006838:	f002 feca 	bl	80095d0 <_fflush_r>
 800683c:	b938      	cbnz	r0, 800684e <__swbuf_r+0x74>
 800683e:	4638      	mov	r0, r7
 8006840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006842:	4621      	mov	r1, r4
 8006844:	4628      	mov	r0, r5
 8006846:	f000 f805 	bl	8006854 <__swsetup_r>
 800684a:	2800      	cmp	r0, #0
 800684c:	d0d5      	beq.n	80067fa <__swbuf_r+0x20>
 800684e:	f04f 37ff 	mov.w	r7, #4294967295
 8006852:	e7f4      	b.n	800683e <__swbuf_r+0x64>

08006854 <__swsetup_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4b2a      	ldr	r3, [pc, #168]	; (8006900 <__swsetup_r+0xac>)
 8006858:	4605      	mov	r5, r0
 800685a:	6818      	ldr	r0, [r3, #0]
 800685c:	460c      	mov	r4, r1
 800685e:	b118      	cbz	r0, 8006868 <__swsetup_r+0x14>
 8006860:	6a03      	ldr	r3, [r0, #32]
 8006862:	b90b      	cbnz	r3, 8006868 <__swsetup_r+0x14>
 8006864:	f7ff fe7e 	bl	8006564 <__sinit>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800686e:	0718      	lsls	r0, r3, #28
 8006870:	d422      	bmi.n	80068b8 <__swsetup_r+0x64>
 8006872:	06d9      	lsls	r1, r3, #27
 8006874:	d407      	bmi.n	8006886 <__swsetup_r+0x32>
 8006876:	2309      	movs	r3, #9
 8006878:	602b      	str	r3, [r5, #0]
 800687a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800687e:	81a3      	strh	r3, [r4, #12]
 8006880:	f04f 30ff 	mov.w	r0, #4294967295
 8006884:	e034      	b.n	80068f0 <__swsetup_r+0x9c>
 8006886:	0758      	lsls	r0, r3, #29
 8006888:	d512      	bpl.n	80068b0 <__swsetup_r+0x5c>
 800688a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800688c:	b141      	cbz	r1, 80068a0 <__swsetup_r+0x4c>
 800688e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006892:	4299      	cmp	r1, r3
 8006894:	d002      	beq.n	800689c <__swsetup_r+0x48>
 8006896:	4628      	mov	r0, r5
 8006898:	f000 ff34 	bl	8007704 <_free_r>
 800689c:	2300      	movs	r3, #0
 800689e:	6363      	str	r3, [r4, #52]	; 0x34
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068a6:	81a3      	strh	r3, [r4, #12]
 80068a8:	2300      	movs	r3, #0
 80068aa:	6063      	str	r3, [r4, #4]
 80068ac:	6923      	ldr	r3, [r4, #16]
 80068ae:	6023      	str	r3, [r4, #0]
 80068b0:	89a3      	ldrh	r3, [r4, #12]
 80068b2:	f043 0308 	orr.w	r3, r3, #8
 80068b6:	81a3      	strh	r3, [r4, #12]
 80068b8:	6923      	ldr	r3, [r4, #16]
 80068ba:	b94b      	cbnz	r3, 80068d0 <__swsetup_r+0x7c>
 80068bc:	89a3      	ldrh	r3, [r4, #12]
 80068be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c6:	d003      	beq.n	80068d0 <__swsetup_r+0x7c>
 80068c8:	4621      	mov	r1, r4
 80068ca:	4628      	mov	r0, r5
 80068cc:	f002 fece 	bl	800966c <__smakebuf_r>
 80068d0:	89a0      	ldrh	r0, [r4, #12]
 80068d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068d6:	f010 0301 	ands.w	r3, r0, #1
 80068da:	d00a      	beq.n	80068f2 <__swsetup_r+0x9e>
 80068dc:	2300      	movs	r3, #0
 80068de:	60a3      	str	r3, [r4, #8]
 80068e0:	6963      	ldr	r3, [r4, #20]
 80068e2:	425b      	negs	r3, r3
 80068e4:	61a3      	str	r3, [r4, #24]
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	b943      	cbnz	r3, 80068fc <__swsetup_r+0xa8>
 80068ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068ee:	d1c4      	bne.n	800687a <__swsetup_r+0x26>
 80068f0:	bd38      	pop	{r3, r4, r5, pc}
 80068f2:	0781      	lsls	r1, r0, #30
 80068f4:	bf58      	it	pl
 80068f6:	6963      	ldrpl	r3, [r4, #20]
 80068f8:	60a3      	str	r3, [r4, #8]
 80068fa:	e7f4      	b.n	80068e6 <__swsetup_r+0x92>
 80068fc:	2000      	movs	r0, #0
 80068fe:	e7f7      	b.n	80068f0 <__swsetup_r+0x9c>
 8006900:	20000074 	.word	0x20000074

08006904 <memset>:
 8006904:	4402      	add	r2, r0
 8006906:	4603      	mov	r3, r0
 8006908:	4293      	cmp	r3, r2
 800690a:	d100      	bne.n	800690e <memset+0xa>
 800690c:	4770      	bx	lr
 800690e:	f803 1b01 	strb.w	r1, [r3], #1
 8006912:	e7f9      	b.n	8006908 <memset+0x4>

08006914 <_localeconv_r>:
 8006914:	4800      	ldr	r0, [pc, #0]	; (8006918 <_localeconv_r+0x4>)
 8006916:	4770      	bx	lr
 8006918:	20000168 	.word	0x20000168

0800691c <_close_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	4d06      	ldr	r5, [pc, #24]	; (8006938 <_close_r+0x1c>)
 8006920:	2300      	movs	r3, #0
 8006922:	4604      	mov	r4, r0
 8006924:	4608      	mov	r0, r1
 8006926:	602b      	str	r3, [r5, #0]
 8006928:	f7fb f91f 	bl	8001b6a <_close>
 800692c:	1c43      	adds	r3, r0, #1
 800692e:	d102      	bne.n	8006936 <_close_r+0x1a>
 8006930:	682b      	ldr	r3, [r5, #0]
 8006932:	b103      	cbz	r3, 8006936 <_close_r+0x1a>
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	bd38      	pop	{r3, r4, r5, pc}
 8006938:	20000508 	.word	0x20000508

0800693c <_lseek_r>:
 800693c:	b538      	push	{r3, r4, r5, lr}
 800693e:	4d07      	ldr	r5, [pc, #28]	; (800695c <_lseek_r+0x20>)
 8006940:	4604      	mov	r4, r0
 8006942:	4608      	mov	r0, r1
 8006944:	4611      	mov	r1, r2
 8006946:	2200      	movs	r2, #0
 8006948:	602a      	str	r2, [r5, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	f7fb f934 	bl	8001bb8 <_lseek>
 8006950:	1c43      	adds	r3, r0, #1
 8006952:	d102      	bne.n	800695a <_lseek_r+0x1e>
 8006954:	682b      	ldr	r3, [r5, #0]
 8006956:	b103      	cbz	r3, 800695a <_lseek_r+0x1e>
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	bd38      	pop	{r3, r4, r5, pc}
 800695c:	20000508 	.word	0x20000508

08006960 <_read_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4d07      	ldr	r5, [pc, #28]	; (8006980 <_read_r+0x20>)
 8006964:	4604      	mov	r4, r0
 8006966:	4608      	mov	r0, r1
 8006968:	4611      	mov	r1, r2
 800696a:	2200      	movs	r2, #0
 800696c:	602a      	str	r2, [r5, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	f7fb f8c2 	bl	8001af8 <_read>
 8006974:	1c43      	adds	r3, r0, #1
 8006976:	d102      	bne.n	800697e <_read_r+0x1e>
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	b103      	cbz	r3, 800697e <_read_r+0x1e>
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	bd38      	pop	{r3, r4, r5, pc}
 8006980:	20000508 	.word	0x20000508

08006984 <_write_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4d07      	ldr	r5, [pc, #28]	; (80069a4 <_write_r+0x20>)
 8006988:	4604      	mov	r4, r0
 800698a:	4608      	mov	r0, r1
 800698c:	4611      	mov	r1, r2
 800698e:	2200      	movs	r2, #0
 8006990:	602a      	str	r2, [r5, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	f7fb f8cd 	bl	8001b32 <_write>
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	d102      	bne.n	80069a2 <_write_r+0x1e>
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	b103      	cbz	r3, 80069a2 <_write_r+0x1e>
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	bd38      	pop	{r3, r4, r5, pc}
 80069a4:	20000508 	.word	0x20000508

080069a8 <__errno>:
 80069a8:	4b01      	ldr	r3, [pc, #4]	; (80069b0 <__errno+0x8>)
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	20000074 	.word	0x20000074

080069b4 <__libc_init_array>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	4d0d      	ldr	r5, [pc, #52]	; (80069ec <__libc_init_array+0x38>)
 80069b8:	4c0d      	ldr	r4, [pc, #52]	; (80069f0 <__libc_init_array+0x3c>)
 80069ba:	1b64      	subs	r4, r4, r5
 80069bc:	10a4      	asrs	r4, r4, #2
 80069be:	2600      	movs	r6, #0
 80069c0:	42a6      	cmp	r6, r4
 80069c2:	d109      	bne.n	80069d8 <__libc_init_array+0x24>
 80069c4:	4d0b      	ldr	r5, [pc, #44]	; (80069f4 <__libc_init_array+0x40>)
 80069c6:	4c0c      	ldr	r4, [pc, #48]	; (80069f8 <__libc_init_array+0x44>)
 80069c8:	f003 fb42 	bl	800a050 <_init>
 80069cc:	1b64      	subs	r4, r4, r5
 80069ce:	10a4      	asrs	r4, r4, #2
 80069d0:	2600      	movs	r6, #0
 80069d2:	42a6      	cmp	r6, r4
 80069d4:	d105      	bne.n	80069e2 <__libc_init_array+0x2e>
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069dc:	4798      	blx	r3
 80069de:	3601      	adds	r6, #1
 80069e0:	e7ee      	b.n	80069c0 <__libc_init_array+0xc>
 80069e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e6:	4798      	blx	r3
 80069e8:	3601      	adds	r6, #1
 80069ea:	e7f2      	b.n	80069d2 <__libc_init_array+0x1e>
 80069ec:	0800a6f8 	.word	0x0800a6f8
 80069f0:	0800a6f8 	.word	0x0800a6f8
 80069f4:	0800a6f8 	.word	0x0800a6f8
 80069f8:	0800a6fc 	.word	0x0800a6fc

080069fc <__retarget_lock_init_recursive>:
 80069fc:	4770      	bx	lr

080069fe <__retarget_lock_acquire_recursive>:
 80069fe:	4770      	bx	lr

08006a00 <__retarget_lock_release_recursive>:
 8006a00:	4770      	bx	lr
	...

08006a04 <nanf>:
 8006a04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006a0c <nanf+0x8>
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	7fc00000 	.word	0x7fc00000

08006a10 <quorem>:
 8006a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a14:	6903      	ldr	r3, [r0, #16]
 8006a16:	690c      	ldr	r4, [r1, #16]
 8006a18:	42a3      	cmp	r3, r4
 8006a1a:	4607      	mov	r7, r0
 8006a1c:	db7e      	blt.n	8006b1c <quorem+0x10c>
 8006a1e:	3c01      	subs	r4, #1
 8006a20:	f101 0814 	add.w	r8, r1, #20
 8006a24:	f100 0514 	add.w	r5, r0, #20
 8006a28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a2c:	9301      	str	r3, [sp, #4]
 8006a2e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a36:	3301      	adds	r3, #1
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a42:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a46:	d331      	bcc.n	8006aac <quorem+0x9c>
 8006a48:	f04f 0e00 	mov.w	lr, #0
 8006a4c:	4640      	mov	r0, r8
 8006a4e:	46ac      	mov	ip, r5
 8006a50:	46f2      	mov	sl, lr
 8006a52:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a56:	b293      	uxth	r3, r2
 8006a58:	fb06 e303 	mla	r3, r6, r3, lr
 8006a5c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a60:	0c1a      	lsrs	r2, r3, #16
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	ebaa 0303 	sub.w	r3, sl, r3
 8006a68:	f8dc a000 	ldr.w	sl, [ip]
 8006a6c:	fa13 f38a 	uxtah	r3, r3, sl
 8006a70:	fb06 220e 	mla	r2, r6, lr, r2
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	9b00      	ldr	r3, [sp, #0]
 8006a78:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a7c:	b292      	uxth	r2, r2
 8006a7e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a86:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a8a:	4581      	cmp	r9, r0
 8006a8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a90:	f84c 3b04 	str.w	r3, [ip], #4
 8006a94:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a98:	d2db      	bcs.n	8006a52 <quorem+0x42>
 8006a9a:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a9e:	b92b      	cbnz	r3, 8006aac <quorem+0x9c>
 8006aa0:	9b01      	ldr	r3, [sp, #4]
 8006aa2:	3b04      	subs	r3, #4
 8006aa4:	429d      	cmp	r5, r3
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	d32c      	bcc.n	8006b04 <quorem+0xf4>
 8006aaa:	613c      	str	r4, [r7, #16]
 8006aac:	4638      	mov	r0, r7
 8006aae:	f001 f9ef 	bl	8007e90 <__mcmp>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	db22      	blt.n	8006afc <quorem+0xec>
 8006ab6:	3601      	adds	r6, #1
 8006ab8:	4629      	mov	r1, r5
 8006aba:	2000      	movs	r0, #0
 8006abc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ac0:	f8d1 c000 	ldr.w	ip, [r1]
 8006ac4:	b293      	uxth	r3, r2
 8006ac6:	1ac3      	subs	r3, r0, r3
 8006ac8:	0c12      	lsrs	r2, r2, #16
 8006aca:	fa13 f38c 	uxtah	r3, r3, ip
 8006ace:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006ad2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006adc:	45c1      	cmp	r9, r8
 8006ade:	f841 3b04 	str.w	r3, [r1], #4
 8006ae2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ae6:	d2e9      	bcs.n	8006abc <quorem+0xac>
 8006ae8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006aec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006af0:	b922      	cbnz	r2, 8006afc <quorem+0xec>
 8006af2:	3b04      	subs	r3, #4
 8006af4:	429d      	cmp	r5, r3
 8006af6:	461a      	mov	r2, r3
 8006af8:	d30a      	bcc.n	8006b10 <quorem+0x100>
 8006afa:	613c      	str	r4, [r7, #16]
 8006afc:	4630      	mov	r0, r6
 8006afe:	b003      	add	sp, #12
 8006b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b04:	6812      	ldr	r2, [r2, #0]
 8006b06:	3b04      	subs	r3, #4
 8006b08:	2a00      	cmp	r2, #0
 8006b0a:	d1ce      	bne.n	8006aaa <quorem+0x9a>
 8006b0c:	3c01      	subs	r4, #1
 8006b0e:	e7c9      	b.n	8006aa4 <quorem+0x94>
 8006b10:	6812      	ldr	r2, [r2, #0]
 8006b12:	3b04      	subs	r3, #4
 8006b14:	2a00      	cmp	r2, #0
 8006b16:	d1f0      	bne.n	8006afa <quorem+0xea>
 8006b18:	3c01      	subs	r4, #1
 8006b1a:	e7eb      	b.n	8006af4 <quorem+0xe4>
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	e7ee      	b.n	8006afe <quorem+0xee>

08006b20 <_dtoa_r>:
 8006b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b24:	ed2d 8b04 	vpush	{d8-d9}
 8006b28:	69c5      	ldr	r5, [r0, #28]
 8006b2a:	b093      	sub	sp, #76	; 0x4c
 8006b2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b30:	ec57 6b10 	vmov	r6, r7, d0
 8006b34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b38:	9107      	str	r1, [sp, #28]
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	920a      	str	r2, [sp, #40]	; 0x28
 8006b3e:	930d      	str	r3, [sp, #52]	; 0x34
 8006b40:	b975      	cbnz	r5, 8006b60 <_dtoa_r+0x40>
 8006b42:	2010      	movs	r0, #16
 8006b44:	f000 fe2a 	bl	800779c <malloc>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	61e0      	str	r0, [r4, #28]
 8006b4c:	b920      	cbnz	r0, 8006b58 <_dtoa_r+0x38>
 8006b4e:	4bae      	ldr	r3, [pc, #696]	; (8006e08 <_dtoa_r+0x2e8>)
 8006b50:	21ef      	movs	r1, #239	; 0xef
 8006b52:	48ae      	ldr	r0, [pc, #696]	; (8006e0c <_dtoa_r+0x2ec>)
 8006b54:	f002 fe3c 	bl	80097d0 <__assert_func>
 8006b58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b5c:	6005      	str	r5, [r0, #0]
 8006b5e:	60c5      	str	r5, [r0, #12]
 8006b60:	69e3      	ldr	r3, [r4, #28]
 8006b62:	6819      	ldr	r1, [r3, #0]
 8006b64:	b151      	cbz	r1, 8006b7c <_dtoa_r+0x5c>
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	604a      	str	r2, [r1, #4]
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	4093      	lsls	r3, r2
 8006b6e:	608b      	str	r3, [r1, #8]
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 ff07 	bl	8007984 <_Bfree>
 8006b76:	69e3      	ldr	r3, [r4, #28]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	1e3b      	subs	r3, r7, #0
 8006b7e:	bfbb      	ittet	lt
 8006b80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b84:	9303      	strlt	r3, [sp, #12]
 8006b86:	2300      	movge	r3, #0
 8006b88:	2201      	movlt	r2, #1
 8006b8a:	bfac      	ite	ge
 8006b8c:	f8c8 3000 	strge.w	r3, [r8]
 8006b90:	f8c8 2000 	strlt.w	r2, [r8]
 8006b94:	4b9e      	ldr	r3, [pc, #632]	; (8006e10 <_dtoa_r+0x2f0>)
 8006b96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006b9a:	ea33 0308 	bics.w	r3, r3, r8
 8006b9e:	d11b      	bne.n	8006bd8 <_dtoa_r+0xb8>
 8006ba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ba2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006bac:	4333      	orrs	r3, r6
 8006bae:	f000 8593 	beq.w	80076d8 <_dtoa_r+0xbb8>
 8006bb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bb4:	b963      	cbnz	r3, 8006bd0 <_dtoa_r+0xb0>
 8006bb6:	4b97      	ldr	r3, [pc, #604]	; (8006e14 <_dtoa_r+0x2f4>)
 8006bb8:	e027      	b.n	8006c0a <_dtoa_r+0xea>
 8006bba:	4b97      	ldr	r3, [pc, #604]	; (8006e18 <_dtoa_r+0x2f8>)
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	3308      	adds	r3, #8
 8006bc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bc2:	6013      	str	r3, [r2, #0]
 8006bc4:	9800      	ldr	r0, [sp, #0]
 8006bc6:	b013      	add	sp, #76	; 0x4c
 8006bc8:	ecbd 8b04 	vpop	{d8-d9}
 8006bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd0:	4b90      	ldr	r3, [pc, #576]	; (8006e14 <_dtoa_r+0x2f4>)
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	3303      	adds	r3, #3
 8006bd6:	e7f3      	b.n	8006bc0 <_dtoa_r+0xa0>
 8006bd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	ec51 0b17 	vmov	r0, r1, d7
 8006be2:	eeb0 8a47 	vmov.f32	s16, s14
 8006be6:	eef0 8a67 	vmov.f32	s17, s15
 8006bea:	2300      	movs	r3, #0
 8006bec:	f7f9 ff74 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bf0:	4681      	mov	r9, r0
 8006bf2:	b160      	cbz	r0, 8006c0e <_dtoa_r+0xee>
 8006bf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 8568 	beq.w	80076d2 <_dtoa_r+0xbb2>
 8006c02:	4b86      	ldr	r3, [pc, #536]	; (8006e1c <_dtoa_r+0x2fc>)
 8006c04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	e7da      	b.n	8006bc4 <_dtoa_r+0xa4>
 8006c0e:	aa10      	add	r2, sp, #64	; 0x40
 8006c10:	a911      	add	r1, sp, #68	; 0x44
 8006c12:	4620      	mov	r0, r4
 8006c14:	eeb0 0a48 	vmov.f32	s0, s16
 8006c18:	eef0 0a68 	vmov.f32	s1, s17
 8006c1c:	f001 fa4e 	bl	80080bc <__d2b>
 8006c20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006c24:	4682      	mov	sl, r0
 8006c26:	2d00      	cmp	r5, #0
 8006c28:	d07f      	beq.n	8006d2a <_dtoa_r+0x20a>
 8006c2a:	ee18 3a90 	vmov	r3, s17
 8006c2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c32:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006c36:	ec51 0b18 	vmov	r0, r1, d8
 8006c3a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006c3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c42:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006c46:	4619      	mov	r1, r3
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4b75      	ldr	r3, [pc, #468]	; (8006e20 <_dtoa_r+0x300>)
 8006c4c:	f7f9 fb24 	bl	8000298 <__aeabi_dsub>
 8006c50:	a367      	add	r3, pc, #412	; (adr r3, 8006df0 <_dtoa_r+0x2d0>)
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	f7f9 fcd7 	bl	8000608 <__aeabi_dmul>
 8006c5a:	a367      	add	r3, pc, #412	; (adr r3, 8006df8 <_dtoa_r+0x2d8>)
 8006c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c60:	f7f9 fb1c 	bl	800029c <__adddf3>
 8006c64:	4606      	mov	r6, r0
 8006c66:	4628      	mov	r0, r5
 8006c68:	460f      	mov	r7, r1
 8006c6a:	f7f9 fc63 	bl	8000534 <__aeabi_i2d>
 8006c6e:	a364      	add	r3, pc, #400	; (adr r3, 8006e00 <_dtoa_r+0x2e0>)
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	f7f9 fcc8 	bl	8000608 <__aeabi_dmul>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	4639      	mov	r1, r7
 8006c80:	f7f9 fb0c 	bl	800029c <__adddf3>
 8006c84:	4606      	mov	r6, r0
 8006c86:	460f      	mov	r7, r1
 8006c88:	f7f9 ff6e 	bl	8000b68 <__aeabi_d2iz>
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	4683      	mov	fp, r0
 8006c90:	2300      	movs	r3, #0
 8006c92:	4630      	mov	r0, r6
 8006c94:	4639      	mov	r1, r7
 8006c96:	f7f9 ff29 	bl	8000aec <__aeabi_dcmplt>
 8006c9a:	b148      	cbz	r0, 8006cb0 <_dtoa_r+0x190>
 8006c9c:	4658      	mov	r0, fp
 8006c9e:	f7f9 fc49 	bl	8000534 <__aeabi_i2d>
 8006ca2:	4632      	mov	r2, r6
 8006ca4:	463b      	mov	r3, r7
 8006ca6:	f7f9 ff17 	bl	8000ad8 <__aeabi_dcmpeq>
 8006caa:	b908      	cbnz	r0, 8006cb0 <_dtoa_r+0x190>
 8006cac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006cb0:	f1bb 0f16 	cmp.w	fp, #22
 8006cb4:	d857      	bhi.n	8006d66 <_dtoa_r+0x246>
 8006cb6:	4b5b      	ldr	r3, [pc, #364]	; (8006e24 <_dtoa_r+0x304>)
 8006cb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	ec51 0b18 	vmov	r0, r1, d8
 8006cc4:	f7f9 ff12 	bl	8000aec <__aeabi_dcmplt>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	d04e      	beq.n	8006d6a <_dtoa_r+0x24a>
 8006ccc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	930c      	str	r3, [sp, #48]	; 0x30
 8006cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cd6:	1b5b      	subs	r3, r3, r5
 8006cd8:	1e5a      	subs	r2, r3, #1
 8006cda:	bf45      	ittet	mi
 8006cdc:	f1c3 0301 	rsbmi	r3, r3, #1
 8006ce0:	9305      	strmi	r3, [sp, #20]
 8006ce2:	2300      	movpl	r3, #0
 8006ce4:	2300      	movmi	r3, #0
 8006ce6:	9206      	str	r2, [sp, #24]
 8006ce8:	bf54      	ite	pl
 8006cea:	9305      	strpl	r3, [sp, #20]
 8006cec:	9306      	strmi	r3, [sp, #24]
 8006cee:	f1bb 0f00 	cmp.w	fp, #0
 8006cf2:	db3c      	blt.n	8006d6e <_dtoa_r+0x24e>
 8006cf4:	9b06      	ldr	r3, [sp, #24]
 8006cf6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006cfa:	445b      	add	r3, fp
 8006cfc:	9306      	str	r3, [sp, #24]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	9308      	str	r3, [sp, #32]
 8006d02:	9b07      	ldr	r3, [sp, #28]
 8006d04:	2b09      	cmp	r3, #9
 8006d06:	d868      	bhi.n	8006dda <_dtoa_r+0x2ba>
 8006d08:	2b05      	cmp	r3, #5
 8006d0a:	bfc4      	itt	gt
 8006d0c:	3b04      	subgt	r3, #4
 8006d0e:	9307      	strgt	r3, [sp, #28]
 8006d10:	9b07      	ldr	r3, [sp, #28]
 8006d12:	f1a3 0302 	sub.w	r3, r3, #2
 8006d16:	bfcc      	ite	gt
 8006d18:	2500      	movgt	r5, #0
 8006d1a:	2501      	movle	r5, #1
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	f200 8085 	bhi.w	8006e2c <_dtoa_r+0x30c>
 8006d22:	e8df f003 	tbb	[pc, r3]
 8006d26:	3b2e      	.short	0x3b2e
 8006d28:	5839      	.short	0x5839
 8006d2a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d2e:	441d      	add	r5, r3
 8006d30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	bfc1      	itttt	gt
 8006d38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006d40:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006d44:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006d48:	bfd6      	itet	le
 8006d4a:	f1c3 0320 	rsble	r3, r3, #32
 8006d4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006d52:	fa06 f003 	lslle.w	r0, r6, r3
 8006d56:	f7f9 fbdd 	bl	8000514 <__aeabi_ui2d>
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006d60:	3d01      	subs	r5, #1
 8006d62:	920e      	str	r2, [sp, #56]	; 0x38
 8006d64:	e76f      	b.n	8006c46 <_dtoa_r+0x126>
 8006d66:	2301      	movs	r3, #1
 8006d68:	e7b3      	b.n	8006cd2 <_dtoa_r+0x1b2>
 8006d6a:	900c      	str	r0, [sp, #48]	; 0x30
 8006d6c:	e7b2      	b.n	8006cd4 <_dtoa_r+0x1b4>
 8006d6e:	9b05      	ldr	r3, [sp, #20]
 8006d70:	eba3 030b 	sub.w	r3, r3, fp
 8006d74:	9305      	str	r3, [sp, #20]
 8006d76:	f1cb 0300 	rsb	r3, fp, #0
 8006d7a:	9308      	str	r3, [sp, #32]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d80:	e7bf      	b.n	8006d02 <_dtoa_r+0x1e2>
 8006d82:	2300      	movs	r3, #0
 8006d84:	9309      	str	r3, [sp, #36]	; 0x24
 8006d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	dc52      	bgt.n	8006e32 <_dtoa_r+0x312>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	9301      	str	r3, [sp, #4]
 8006d90:	9304      	str	r3, [sp, #16]
 8006d92:	461a      	mov	r2, r3
 8006d94:	920a      	str	r2, [sp, #40]	; 0x28
 8006d96:	e00b      	b.n	8006db0 <_dtoa_r+0x290>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e7f3      	b.n	8006d84 <_dtoa_r+0x264>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da2:	445b      	add	r3, fp
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	3301      	adds	r3, #1
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	9304      	str	r3, [sp, #16]
 8006dac:	bfb8      	it	lt
 8006dae:	2301      	movlt	r3, #1
 8006db0:	69e0      	ldr	r0, [r4, #28]
 8006db2:	2100      	movs	r1, #0
 8006db4:	2204      	movs	r2, #4
 8006db6:	f102 0614 	add.w	r6, r2, #20
 8006dba:	429e      	cmp	r6, r3
 8006dbc:	d93d      	bls.n	8006e3a <_dtoa_r+0x31a>
 8006dbe:	6041      	str	r1, [r0, #4]
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f000 fd9f 	bl	8007904 <_Balloc>
 8006dc6:	9000      	str	r0, [sp, #0]
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d139      	bne.n	8006e40 <_dtoa_r+0x320>
 8006dcc:	4b16      	ldr	r3, [pc, #88]	; (8006e28 <_dtoa_r+0x308>)
 8006dce:	4602      	mov	r2, r0
 8006dd0:	f240 11af 	movw	r1, #431	; 0x1af
 8006dd4:	e6bd      	b.n	8006b52 <_dtoa_r+0x32>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e7e1      	b.n	8006d9e <_dtoa_r+0x27e>
 8006dda:	2501      	movs	r5, #1
 8006ddc:	2300      	movs	r3, #0
 8006dde:	9307      	str	r3, [sp, #28]
 8006de0:	9509      	str	r5, [sp, #36]	; 0x24
 8006de2:	f04f 33ff 	mov.w	r3, #4294967295
 8006de6:	9301      	str	r3, [sp, #4]
 8006de8:	9304      	str	r3, [sp, #16]
 8006dea:	2200      	movs	r2, #0
 8006dec:	2312      	movs	r3, #18
 8006dee:	e7d1      	b.n	8006d94 <_dtoa_r+0x274>
 8006df0:	636f4361 	.word	0x636f4361
 8006df4:	3fd287a7 	.word	0x3fd287a7
 8006df8:	8b60c8b3 	.word	0x8b60c8b3
 8006dfc:	3fc68a28 	.word	0x3fc68a28
 8006e00:	509f79fb 	.word	0x509f79fb
 8006e04:	3fd34413 	.word	0x3fd34413
 8006e08:	0800a316 	.word	0x0800a316
 8006e0c:	0800a32d 	.word	0x0800a32d
 8006e10:	7ff00000 	.word	0x7ff00000
 8006e14:	0800a312 	.word	0x0800a312
 8006e18:	0800a309 	.word	0x0800a309
 8006e1c:	0800a2e1 	.word	0x0800a2e1
 8006e20:	3ff80000 	.word	0x3ff80000
 8006e24:	0800a418 	.word	0x0800a418
 8006e28:	0800a385 	.word	0x0800a385
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e30:	e7d7      	b.n	8006de2 <_dtoa_r+0x2c2>
 8006e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e34:	9301      	str	r3, [sp, #4]
 8006e36:	9304      	str	r3, [sp, #16]
 8006e38:	e7ba      	b.n	8006db0 <_dtoa_r+0x290>
 8006e3a:	3101      	adds	r1, #1
 8006e3c:	0052      	lsls	r2, r2, #1
 8006e3e:	e7ba      	b.n	8006db6 <_dtoa_r+0x296>
 8006e40:	69e3      	ldr	r3, [r4, #28]
 8006e42:	9a00      	ldr	r2, [sp, #0]
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	9b04      	ldr	r3, [sp, #16]
 8006e48:	2b0e      	cmp	r3, #14
 8006e4a:	f200 80a8 	bhi.w	8006f9e <_dtoa_r+0x47e>
 8006e4e:	2d00      	cmp	r5, #0
 8006e50:	f000 80a5 	beq.w	8006f9e <_dtoa_r+0x47e>
 8006e54:	f1bb 0f00 	cmp.w	fp, #0
 8006e58:	dd38      	ble.n	8006ecc <_dtoa_r+0x3ac>
 8006e5a:	4bc0      	ldr	r3, [pc, #768]	; (800715c <_dtoa_r+0x63c>)
 8006e5c:	f00b 020f 	and.w	r2, fp, #15
 8006e60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e64:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006e68:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006e6c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006e70:	d019      	beq.n	8006ea6 <_dtoa_r+0x386>
 8006e72:	4bbb      	ldr	r3, [pc, #748]	; (8007160 <_dtoa_r+0x640>)
 8006e74:	ec51 0b18 	vmov	r0, r1, d8
 8006e78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e7c:	f7f9 fcee 	bl	800085c <__aeabi_ddiv>
 8006e80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e84:	f008 080f 	and.w	r8, r8, #15
 8006e88:	2503      	movs	r5, #3
 8006e8a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007160 <_dtoa_r+0x640>
 8006e8e:	f1b8 0f00 	cmp.w	r8, #0
 8006e92:	d10a      	bne.n	8006eaa <_dtoa_r+0x38a>
 8006e94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e98:	4632      	mov	r2, r6
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	f7f9 fcde 	bl	800085c <__aeabi_ddiv>
 8006ea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ea4:	e02b      	b.n	8006efe <_dtoa_r+0x3de>
 8006ea6:	2502      	movs	r5, #2
 8006ea8:	e7ef      	b.n	8006e8a <_dtoa_r+0x36a>
 8006eaa:	f018 0f01 	tst.w	r8, #1
 8006eae:	d008      	beq.n	8006ec2 <_dtoa_r+0x3a2>
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	4639      	mov	r1, r7
 8006eb4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006eb8:	f7f9 fba6 	bl	8000608 <__aeabi_dmul>
 8006ebc:	3501      	adds	r5, #1
 8006ebe:	4606      	mov	r6, r0
 8006ec0:	460f      	mov	r7, r1
 8006ec2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006ec6:	f109 0908 	add.w	r9, r9, #8
 8006eca:	e7e0      	b.n	8006e8e <_dtoa_r+0x36e>
 8006ecc:	f000 809f 	beq.w	800700e <_dtoa_r+0x4ee>
 8006ed0:	f1cb 0600 	rsb	r6, fp, #0
 8006ed4:	4ba1      	ldr	r3, [pc, #644]	; (800715c <_dtoa_r+0x63c>)
 8006ed6:	4fa2      	ldr	r7, [pc, #648]	; (8007160 <_dtoa_r+0x640>)
 8006ed8:	f006 020f 	and.w	r2, r6, #15
 8006edc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	ec51 0b18 	vmov	r0, r1, d8
 8006ee8:	f7f9 fb8e 	bl	8000608 <__aeabi_dmul>
 8006eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ef0:	1136      	asrs	r6, r6, #4
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	2502      	movs	r5, #2
 8006ef6:	2e00      	cmp	r6, #0
 8006ef8:	d17e      	bne.n	8006ff8 <_dtoa_r+0x4d8>
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1d0      	bne.n	8006ea0 <_dtoa_r+0x380>
 8006efe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f00:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 8084 	beq.w	8007012 <_dtoa_r+0x4f2>
 8006f0a:	4b96      	ldr	r3, [pc, #600]	; (8007164 <_dtoa_r+0x644>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	4640      	mov	r0, r8
 8006f10:	4649      	mov	r1, r9
 8006f12:	f7f9 fdeb 	bl	8000aec <__aeabi_dcmplt>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d07b      	beq.n	8007012 <_dtoa_r+0x4f2>
 8006f1a:	9b04      	ldr	r3, [sp, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d078      	beq.n	8007012 <_dtoa_r+0x4f2>
 8006f20:	9b01      	ldr	r3, [sp, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	dd39      	ble.n	8006f9a <_dtoa_r+0x47a>
 8006f26:	4b90      	ldr	r3, [pc, #576]	; (8007168 <_dtoa_r+0x648>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	f7f9 fb6b 	bl	8000608 <__aeabi_dmul>
 8006f32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f36:	9e01      	ldr	r6, [sp, #4]
 8006f38:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006f3c:	3501      	adds	r5, #1
 8006f3e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006f42:	4628      	mov	r0, r5
 8006f44:	f7f9 faf6 	bl	8000534 <__aeabi_i2d>
 8006f48:	4642      	mov	r2, r8
 8006f4a:	464b      	mov	r3, r9
 8006f4c:	f7f9 fb5c 	bl	8000608 <__aeabi_dmul>
 8006f50:	4b86      	ldr	r3, [pc, #536]	; (800716c <_dtoa_r+0x64c>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	f7f9 f9a2 	bl	800029c <__adddf3>
 8006f58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f60:	9303      	str	r3, [sp, #12]
 8006f62:	2e00      	cmp	r6, #0
 8006f64:	d158      	bne.n	8007018 <_dtoa_r+0x4f8>
 8006f66:	4b82      	ldr	r3, [pc, #520]	; (8007170 <_dtoa_r+0x650>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	f7f9 f993 	bl	8000298 <__aeabi_dsub>
 8006f72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f76:	4680      	mov	r8, r0
 8006f78:	4689      	mov	r9, r1
 8006f7a:	f7f9 fdd5 	bl	8000b28 <__aeabi_dcmpgt>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	f040 8296 	bne.w	80074b0 <_dtoa_r+0x990>
 8006f84:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006f88:	4640      	mov	r0, r8
 8006f8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f8e:	4649      	mov	r1, r9
 8006f90:	f7f9 fdac 	bl	8000aec <__aeabi_dcmplt>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	f040 8289 	bne.w	80074ac <_dtoa_r+0x98c>
 8006f9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006f9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f2c0 814e 	blt.w	8007242 <_dtoa_r+0x722>
 8006fa6:	f1bb 0f0e 	cmp.w	fp, #14
 8006faa:	f300 814a 	bgt.w	8007242 <_dtoa_r+0x722>
 8006fae:	4b6b      	ldr	r3, [pc, #428]	; (800715c <_dtoa_r+0x63c>)
 8006fb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006fb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f280 80dc 	bge.w	8007178 <_dtoa_r+0x658>
 8006fc0:	9b04      	ldr	r3, [sp, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f300 80d8 	bgt.w	8007178 <_dtoa_r+0x658>
 8006fc8:	f040 826f 	bne.w	80074aa <_dtoa_r+0x98a>
 8006fcc:	4b68      	ldr	r3, [pc, #416]	; (8007170 <_dtoa_r+0x650>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	f7f9 fb18 	bl	8000608 <__aeabi_dmul>
 8006fd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fdc:	f7f9 fd9a 	bl	8000b14 <__aeabi_dcmpge>
 8006fe0:	9e04      	ldr	r6, [sp, #16]
 8006fe2:	4637      	mov	r7, r6
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	f040 8245 	bne.w	8007474 <_dtoa_r+0x954>
 8006fea:	9d00      	ldr	r5, [sp, #0]
 8006fec:	2331      	movs	r3, #49	; 0x31
 8006fee:	f805 3b01 	strb.w	r3, [r5], #1
 8006ff2:	f10b 0b01 	add.w	fp, fp, #1
 8006ff6:	e241      	b.n	800747c <_dtoa_r+0x95c>
 8006ff8:	07f2      	lsls	r2, r6, #31
 8006ffa:	d505      	bpl.n	8007008 <_dtoa_r+0x4e8>
 8006ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007000:	f7f9 fb02 	bl	8000608 <__aeabi_dmul>
 8007004:	3501      	adds	r5, #1
 8007006:	2301      	movs	r3, #1
 8007008:	1076      	asrs	r6, r6, #1
 800700a:	3708      	adds	r7, #8
 800700c:	e773      	b.n	8006ef6 <_dtoa_r+0x3d6>
 800700e:	2502      	movs	r5, #2
 8007010:	e775      	b.n	8006efe <_dtoa_r+0x3de>
 8007012:	9e04      	ldr	r6, [sp, #16]
 8007014:	465f      	mov	r7, fp
 8007016:	e792      	b.n	8006f3e <_dtoa_r+0x41e>
 8007018:	9900      	ldr	r1, [sp, #0]
 800701a:	4b50      	ldr	r3, [pc, #320]	; (800715c <_dtoa_r+0x63c>)
 800701c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007020:	4431      	add	r1, r6
 8007022:	9102      	str	r1, [sp, #8]
 8007024:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007026:	eeb0 9a47 	vmov.f32	s18, s14
 800702a:	eef0 9a67 	vmov.f32	s19, s15
 800702e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007032:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007036:	2900      	cmp	r1, #0
 8007038:	d044      	beq.n	80070c4 <_dtoa_r+0x5a4>
 800703a:	494e      	ldr	r1, [pc, #312]	; (8007174 <_dtoa_r+0x654>)
 800703c:	2000      	movs	r0, #0
 800703e:	f7f9 fc0d 	bl	800085c <__aeabi_ddiv>
 8007042:	ec53 2b19 	vmov	r2, r3, d9
 8007046:	f7f9 f927 	bl	8000298 <__aeabi_dsub>
 800704a:	9d00      	ldr	r5, [sp, #0]
 800704c:	ec41 0b19 	vmov	d9, r0, r1
 8007050:	4649      	mov	r1, r9
 8007052:	4640      	mov	r0, r8
 8007054:	f7f9 fd88 	bl	8000b68 <__aeabi_d2iz>
 8007058:	4606      	mov	r6, r0
 800705a:	f7f9 fa6b 	bl	8000534 <__aeabi_i2d>
 800705e:	4602      	mov	r2, r0
 8007060:	460b      	mov	r3, r1
 8007062:	4640      	mov	r0, r8
 8007064:	4649      	mov	r1, r9
 8007066:	f7f9 f917 	bl	8000298 <__aeabi_dsub>
 800706a:	3630      	adds	r6, #48	; 0x30
 800706c:	f805 6b01 	strb.w	r6, [r5], #1
 8007070:	ec53 2b19 	vmov	r2, r3, d9
 8007074:	4680      	mov	r8, r0
 8007076:	4689      	mov	r9, r1
 8007078:	f7f9 fd38 	bl	8000aec <__aeabi_dcmplt>
 800707c:	2800      	cmp	r0, #0
 800707e:	d164      	bne.n	800714a <_dtoa_r+0x62a>
 8007080:	4642      	mov	r2, r8
 8007082:	464b      	mov	r3, r9
 8007084:	4937      	ldr	r1, [pc, #220]	; (8007164 <_dtoa_r+0x644>)
 8007086:	2000      	movs	r0, #0
 8007088:	f7f9 f906 	bl	8000298 <__aeabi_dsub>
 800708c:	ec53 2b19 	vmov	r2, r3, d9
 8007090:	f7f9 fd2c 	bl	8000aec <__aeabi_dcmplt>
 8007094:	2800      	cmp	r0, #0
 8007096:	f040 80b6 	bne.w	8007206 <_dtoa_r+0x6e6>
 800709a:	9b02      	ldr	r3, [sp, #8]
 800709c:	429d      	cmp	r5, r3
 800709e:	f43f af7c 	beq.w	8006f9a <_dtoa_r+0x47a>
 80070a2:	4b31      	ldr	r3, [pc, #196]	; (8007168 <_dtoa_r+0x648>)
 80070a4:	ec51 0b19 	vmov	r0, r1, d9
 80070a8:	2200      	movs	r2, #0
 80070aa:	f7f9 faad 	bl	8000608 <__aeabi_dmul>
 80070ae:	4b2e      	ldr	r3, [pc, #184]	; (8007168 <_dtoa_r+0x648>)
 80070b0:	ec41 0b19 	vmov	d9, r0, r1
 80070b4:	2200      	movs	r2, #0
 80070b6:	4640      	mov	r0, r8
 80070b8:	4649      	mov	r1, r9
 80070ba:	f7f9 faa5 	bl	8000608 <__aeabi_dmul>
 80070be:	4680      	mov	r8, r0
 80070c0:	4689      	mov	r9, r1
 80070c2:	e7c5      	b.n	8007050 <_dtoa_r+0x530>
 80070c4:	ec51 0b17 	vmov	r0, r1, d7
 80070c8:	f7f9 fa9e 	bl	8000608 <__aeabi_dmul>
 80070cc:	9b02      	ldr	r3, [sp, #8]
 80070ce:	9d00      	ldr	r5, [sp, #0]
 80070d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80070d2:	ec41 0b19 	vmov	d9, r0, r1
 80070d6:	4649      	mov	r1, r9
 80070d8:	4640      	mov	r0, r8
 80070da:	f7f9 fd45 	bl	8000b68 <__aeabi_d2iz>
 80070de:	4606      	mov	r6, r0
 80070e0:	f7f9 fa28 	bl	8000534 <__aeabi_i2d>
 80070e4:	3630      	adds	r6, #48	; 0x30
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	4640      	mov	r0, r8
 80070ec:	4649      	mov	r1, r9
 80070ee:	f7f9 f8d3 	bl	8000298 <__aeabi_dsub>
 80070f2:	f805 6b01 	strb.w	r6, [r5], #1
 80070f6:	9b02      	ldr	r3, [sp, #8]
 80070f8:	429d      	cmp	r5, r3
 80070fa:	4680      	mov	r8, r0
 80070fc:	4689      	mov	r9, r1
 80070fe:	f04f 0200 	mov.w	r2, #0
 8007102:	d124      	bne.n	800714e <_dtoa_r+0x62e>
 8007104:	4b1b      	ldr	r3, [pc, #108]	; (8007174 <_dtoa_r+0x654>)
 8007106:	ec51 0b19 	vmov	r0, r1, d9
 800710a:	f7f9 f8c7 	bl	800029c <__adddf3>
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	4640      	mov	r0, r8
 8007114:	4649      	mov	r1, r9
 8007116:	f7f9 fd07 	bl	8000b28 <__aeabi_dcmpgt>
 800711a:	2800      	cmp	r0, #0
 800711c:	d173      	bne.n	8007206 <_dtoa_r+0x6e6>
 800711e:	ec53 2b19 	vmov	r2, r3, d9
 8007122:	4914      	ldr	r1, [pc, #80]	; (8007174 <_dtoa_r+0x654>)
 8007124:	2000      	movs	r0, #0
 8007126:	f7f9 f8b7 	bl	8000298 <__aeabi_dsub>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	4640      	mov	r0, r8
 8007130:	4649      	mov	r1, r9
 8007132:	f7f9 fcdb 	bl	8000aec <__aeabi_dcmplt>
 8007136:	2800      	cmp	r0, #0
 8007138:	f43f af2f 	beq.w	8006f9a <_dtoa_r+0x47a>
 800713c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800713e:	1e6b      	subs	r3, r5, #1
 8007140:	930f      	str	r3, [sp, #60]	; 0x3c
 8007142:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007146:	2b30      	cmp	r3, #48	; 0x30
 8007148:	d0f8      	beq.n	800713c <_dtoa_r+0x61c>
 800714a:	46bb      	mov	fp, r7
 800714c:	e04a      	b.n	80071e4 <_dtoa_r+0x6c4>
 800714e:	4b06      	ldr	r3, [pc, #24]	; (8007168 <_dtoa_r+0x648>)
 8007150:	f7f9 fa5a 	bl	8000608 <__aeabi_dmul>
 8007154:	4680      	mov	r8, r0
 8007156:	4689      	mov	r9, r1
 8007158:	e7bd      	b.n	80070d6 <_dtoa_r+0x5b6>
 800715a:	bf00      	nop
 800715c:	0800a418 	.word	0x0800a418
 8007160:	0800a3f0 	.word	0x0800a3f0
 8007164:	3ff00000 	.word	0x3ff00000
 8007168:	40240000 	.word	0x40240000
 800716c:	401c0000 	.word	0x401c0000
 8007170:	40140000 	.word	0x40140000
 8007174:	3fe00000 	.word	0x3fe00000
 8007178:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800717c:	9d00      	ldr	r5, [sp, #0]
 800717e:	4642      	mov	r2, r8
 8007180:	464b      	mov	r3, r9
 8007182:	4630      	mov	r0, r6
 8007184:	4639      	mov	r1, r7
 8007186:	f7f9 fb69 	bl	800085c <__aeabi_ddiv>
 800718a:	f7f9 fced 	bl	8000b68 <__aeabi_d2iz>
 800718e:	9001      	str	r0, [sp, #4]
 8007190:	f7f9 f9d0 	bl	8000534 <__aeabi_i2d>
 8007194:	4642      	mov	r2, r8
 8007196:	464b      	mov	r3, r9
 8007198:	f7f9 fa36 	bl	8000608 <__aeabi_dmul>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4630      	mov	r0, r6
 80071a2:	4639      	mov	r1, r7
 80071a4:	f7f9 f878 	bl	8000298 <__aeabi_dsub>
 80071a8:	9e01      	ldr	r6, [sp, #4]
 80071aa:	9f04      	ldr	r7, [sp, #16]
 80071ac:	3630      	adds	r6, #48	; 0x30
 80071ae:	f805 6b01 	strb.w	r6, [r5], #1
 80071b2:	9e00      	ldr	r6, [sp, #0]
 80071b4:	1bae      	subs	r6, r5, r6
 80071b6:	42b7      	cmp	r7, r6
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	d134      	bne.n	8007228 <_dtoa_r+0x708>
 80071be:	f7f9 f86d 	bl	800029c <__adddf3>
 80071c2:	4642      	mov	r2, r8
 80071c4:	464b      	mov	r3, r9
 80071c6:	4606      	mov	r6, r0
 80071c8:	460f      	mov	r7, r1
 80071ca:	f7f9 fcad 	bl	8000b28 <__aeabi_dcmpgt>
 80071ce:	b9c8      	cbnz	r0, 8007204 <_dtoa_r+0x6e4>
 80071d0:	4642      	mov	r2, r8
 80071d2:	464b      	mov	r3, r9
 80071d4:	4630      	mov	r0, r6
 80071d6:	4639      	mov	r1, r7
 80071d8:	f7f9 fc7e 	bl	8000ad8 <__aeabi_dcmpeq>
 80071dc:	b110      	cbz	r0, 80071e4 <_dtoa_r+0x6c4>
 80071de:	9b01      	ldr	r3, [sp, #4]
 80071e0:	07db      	lsls	r3, r3, #31
 80071e2:	d40f      	bmi.n	8007204 <_dtoa_r+0x6e4>
 80071e4:	4651      	mov	r1, sl
 80071e6:	4620      	mov	r0, r4
 80071e8:	f000 fbcc 	bl	8007984 <_Bfree>
 80071ec:	2300      	movs	r3, #0
 80071ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071f0:	702b      	strb	r3, [r5, #0]
 80071f2:	f10b 0301 	add.w	r3, fp, #1
 80071f6:	6013      	str	r3, [r2, #0]
 80071f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f43f ace2 	beq.w	8006bc4 <_dtoa_r+0xa4>
 8007200:	601d      	str	r5, [r3, #0]
 8007202:	e4df      	b.n	8006bc4 <_dtoa_r+0xa4>
 8007204:	465f      	mov	r7, fp
 8007206:	462b      	mov	r3, r5
 8007208:	461d      	mov	r5, r3
 800720a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800720e:	2a39      	cmp	r2, #57	; 0x39
 8007210:	d106      	bne.n	8007220 <_dtoa_r+0x700>
 8007212:	9a00      	ldr	r2, [sp, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d1f7      	bne.n	8007208 <_dtoa_r+0x6e8>
 8007218:	9900      	ldr	r1, [sp, #0]
 800721a:	2230      	movs	r2, #48	; 0x30
 800721c:	3701      	adds	r7, #1
 800721e:	700a      	strb	r2, [r1, #0]
 8007220:	781a      	ldrb	r2, [r3, #0]
 8007222:	3201      	adds	r2, #1
 8007224:	701a      	strb	r2, [r3, #0]
 8007226:	e790      	b.n	800714a <_dtoa_r+0x62a>
 8007228:	4ba3      	ldr	r3, [pc, #652]	; (80074b8 <_dtoa_r+0x998>)
 800722a:	2200      	movs	r2, #0
 800722c:	f7f9 f9ec 	bl	8000608 <__aeabi_dmul>
 8007230:	2200      	movs	r2, #0
 8007232:	2300      	movs	r3, #0
 8007234:	4606      	mov	r6, r0
 8007236:	460f      	mov	r7, r1
 8007238:	f7f9 fc4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800723c:	2800      	cmp	r0, #0
 800723e:	d09e      	beq.n	800717e <_dtoa_r+0x65e>
 8007240:	e7d0      	b.n	80071e4 <_dtoa_r+0x6c4>
 8007242:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007244:	2a00      	cmp	r2, #0
 8007246:	f000 80ca 	beq.w	80073de <_dtoa_r+0x8be>
 800724a:	9a07      	ldr	r2, [sp, #28]
 800724c:	2a01      	cmp	r2, #1
 800724e:	f300 80ad 	bgt.w	80073ac <_dtoa_r+0x88c>
 8007252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007254:	2a00      	cmp	r2, #0
 8007256:	f000 80a5 	beq.w	80073a4 <_dtoa_r+0x884>
 800725a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800725e:	9e08      	ldr	r6, [sp, #32]
 8007260:	9d05      	ldr	r5, [sp, #20]
 8007262:	9a05      	ldr	r2, [sp, #20]
 8007264:	441a      	add	r2, r3
 8007266:	9205      	str	r2, [sp, #20]
 8007268:	9a06      	ldr	r2, [sp, #24]
 800726a:	2101      	movs	r1, #1
 800726c:	441a      	add	r2, r3
 800726e:	4620      	mov	r0, r4
 8007270:	9206      	str	r2, [sp, #24]
 8007272:	f000 fc87 	bl	8007b84 <__i2b>
 8007276:	4607      	mov	r7, r0
 8007278:	b165      	cbz	r5, 8007294 <_dtoa_r+0x774>
 800727a:	9b06      	ldr	r3, [sp, #24]
 800727c:	2b00      	cmp	r3, #0
 800727e:	dd09      	ble.n	8007294 <_dtoa_r+0x774>
 8007280:	42ab      	cmp	r3, r5
 8007282:	9a05      	ldr	r2, [sp, #20]
 8007284:	bfa8      	it	ge
 8007286:	462b      	movge	r3, r5
 8007288:	1ad2      	subs	r2, r2, r3
 800728a:	9205      	str	r2, [sp, #20]
 800728c:	9a06      	ldr	r2, [sp, #24]
 800728e:	1aed      	subs	r5, r5, r3
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	9306      	str	r3, [sp, #24]
 8007294:	9b08      	ldr	r3, [sp, #32]
 8007296:	b1f3      	cbz	r3, 80072d6 <_dtoa_r+0x7b6>
 8007298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 80a3 	beq.w	80073e6 <_dtoa_r+0x8c6>
 80072a0:	2e00      	cmp	r6, #0
 80072a2:	dd10      	ble.n	80072c6 <_dtoa_r+0x7a6>
 80072a4:	4639      	mov	r1, r7
 80072a6:	4632      	mov	r2, r6
 80072a8:	4620      	mov	r0, r4
 80072aa:	f000 fd2b 	bl	8007d04 <__pow5mult>
 80072ae:	4652      	mov	r2, sl
 80072b0:	4601      	mov	r1, r0
 80072b2:	4607      	mov	r7, r0
 80072b4:	4620      	mov	r0, r4
 80072b6:	f000 fc7b 	bl	8007bb0 <__multiply>
 80072ba:	4651      	mov	r1, sl
 80072bc:	4680      	mov	r8, r0
 80072be:	4620      	mov	r0, r4
 80072c0:	f000 fb60 	bl	8007984 <_Bfree>
 80072c4:	46c2      	mov	sl, r8
 80072c6:	9b08      	ldr	r3, [sp, #32]
 80072c8:	1b9a      	subs	r2, r3, r6
 80072ca:	d004      	beq.n	80072d6 <_dtoa_r+0x7b6>
 80072cc:	4651      	mov	r1, sl
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 fd18 	bl	8007d04 <__pow5mult>
 80072d4:	4682      	mov	sl, r0
 80072d6:	2101      	movs	r1, #1
 80072d8:	4620      	mov	r0, r4
 80072da:	f000 fc53 	bl	8007b84 <__i2b>
 80072de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	4606      	mov	r6, r0
 80072e4:	f340 8081 	ble.w	80073ea <_dtoa_r+0x8ca>
 80072e8:	461a      	mov	r2, r3
 80072ea:	4601      	mov	r1, r0
 80072ec:	4620      	mov	r0, r4
 80072ee:	f000 fd09 	bl	8007d04 <__pow5mult>
 80072f2:	9b07      	ldr	r3, [sp, #28]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	4606      	mov	r6, r0
 80072f8:	dd7a      	ble.n	80073f0 <_dtoa_r+0x8d0>
 80072fa:	f04f 0800 	mov.w	r8, #0
 80072fe:	6933      	ldr	r3, [r6, #16]
 8007300:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007304:	6918      	ldr	r0, [r3, #16]
 8007306:	f000 fbef 	bl	8007ae8 <__hi0bits>
 800730a:	f1c0 0020 	rsb	r0, r0, #32
 800730e:	9b06      	ldr	r3, [sp, #24]
 8007310:	4418      	add	r0, r3
 8007312:	f010 001f 	ands.w	r0, r0, #31
 8007316:	f000 8094 	beq.w	8007442 <_dtoa_r+0x922>
 800731a:	f1c0 0320 	rsb	r3, r0, #32
 800731e:	2b04      	cmp	r3, #4
 8007320:	f340 8085 	ble.w	800742e <_dtoa_r+0x90e>
 8007324:	9b05      	ldr	r3, [sp, #20]
 8007326:	f1c0 001c 	rsb	r0, r0, #28
 800732a:	4403      	add	r3, r0
 800732c:	9305      	str	r3, [sp, #20]
 800732e:	9b06      	ldr	r3, [sp, #24]
 8007330:	4403      	add	r3, r0
 8007332:	4405      	add	r5, r0
 8007334:	9306      	str	r3, [sp, #24]
 8007336:	9b05      	ldr	r3, [sp, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	dd05      	ble.n	8007348 <_dtoa_r+0x828>
 800733c:	4651      	mov	r1, sl
 800733e:	461a      	mov	r2, r3
 8007340:	4620      	mov	r0, r4
 8007342:	f000 fd39 	bl	8007db8 <__lshift>
 8007346:	4682      	mov	sl, r0
 8007348:	9b06      	ldr	r3, [sp, #24]
 800734a:	2b00      	cmp	r3, #0
 800734c:	dd05      	ble.n	800735a <_dtoa_r+0x83a>
 800734e:	4631      	mov	r1, r6
 8007350:	461a      	mov	r2, r3
 8007352:	4620      	mov	r0, r4
 8007354:	f000 fd30 	bl	8007db8 <__lshift>
 8007358:	4606      	mov	r6, r0
 800735a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800735c:	2b00      	cmp	r3, #0
 800735e:	d072      	beq.n	8007446 <_dtoa_r+0x926>
 8007360:	4631      	mov	r1, r6
 8007362:	4650      	mov	r0, sl
 8007364:	f000 fd94 	bl	8007e90 <__mcmp>
 8007368:	2800      	cmp	r0, #0
 800736a:	da6c      	bge.n	8007446 <_dtoa_r+0x926>
 800736c:	2300      	movs	r3, #0
 800736e:	4651      	mov	r1, sl
 8007370:	220a      	movs	r2, #10
 8007372:	4620      	mov	r0, r4
 8007374:	f000 fb28 	bl	80079c8 <__multadd>
 8007378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800737a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800737e:	4682      	mov	sl, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 81b0 	beq.w	80076e6 <_dtoa_r+0xbc6>
 8007386:	2300      	movs	r3, #0
 8007388:	4639      	mov	r1, r7
 800738a:	220a      	movs	r2, #10
 800738c:	4620      	mov	r0, r4
 800738e:	f000 fb1b 	bl	80079c8 <__multadd>
 8007392:	9b01      	ldr	r3, [sp, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	4607      	mov	r7, r0
 8007398:	f300 8096 	bgt.w	80074c8 <_dtoa_r+0x9a8>
 800739c:	9b07      	ldr	r3, [sp, #28]
 800739e:	2b02      	cmp	r3, #2
 80073a0:	dc59      	bgt.n	8007456 <_dtoa_r+0x936>
 80073a2:	e091      	b.n	80074c8 <_dtoa_r+0x9a8>
 80073a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073aa:	e758      	b.n	800725e <_dtoa_r+0x73e>
 80073ac:	9b04      	ldr	r3, [sp, #16]
 80073ae:	1e5e      	subs	r6, r3, #1
 80073b0:	9b08      	ldr	r3, [sp, #32]
 80073b2:	42b3      	cmp	r3, r6
 80073b4:	bfbf      	itttt	lt
 80073b6:	9b08      	ldrlt	r3, [sp, #32]
 80073b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80073ba:	9608      	strlt	r6, [sp, #32]
 80073bc:	1af3      	sublt	r3, r6, r3
 80073be:	bfb4      	ite	lt
 80073c0:	18d2      	addlt	r2, r2, r3
 80073c2:	1b9e      	subge	r6, r3, r6
 80073c4:	9b04      	ldr	r3, [sp, #16]
 80073c6:	bfbc      	itt	lt
 80073c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80073ca:	2600      	movlt	r6, #0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	bfb7      	itett	lt
 80073d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80073d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80073d8:	1a9d      	sublt	r5, r3, r2
 80073da:	2300      	movlt	r3, #0
 80073dc:	e741      	b.n	8007262 <_dtoa_r+0x742>
 80073de:	9e08      	ldr	r6, [sp, #32]
 80073e0:	9d05      	ldr	r5, [sp, #20]
 80073e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80073e4:	e748      	b.n	8007278 <_dtoa_r+0x758>
 80073e6:	9a08      	ldr	r2, [sp, #32]
 80073e8:	e770      	b.n	80072cc <_dtoa_r+0x7ac>
 80073ea:	9b07      	ldr	r3, [sp, #28]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	dc19      	bgt.n	8007424 <_dtoa_r+0x904>
 80073f0:	9b02      	ldr	r3, [sp, #8]
 80073f2:	b9bb      	cbnz	r3, 8007424 <_dtoa_r+0x904>
 80073f4:	9b03      	ldr	r3, [sp, #12]
 80073f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073fa:	b99b      	cbnz	r3, 8007424 <_dtoa_r+0x904>
 80073fc:	9b03      	ldr	r3, [sp, #12]
 80073fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007402:	0d1b      	lsrs	r3, r3, #20
 8007404:	051b      	lsls	r3, r3, #20
 8007406:	b183      	cbz	r3, 800742a <_dtoa_r+0x90a>
 8007408:	9b05      	ldr	r3, [sp, #20]
 800740a:	3301      	adds	r3, #1
 800740c:	9305      	str	r3, [sp, #20]
 800740e:	9b06      	ldr	r3, [sp, #24]
 8007410:	3301      	adds	r3, #1
 8007412:	9306      	str	r3, [sp, #24]
 8007414:	f04f 0801 	mov.w	r8, #1
 8007418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800741a:	2b00      	cmp	r3, #0
 800741c:	f47f af6f 	bne.w	80072fe <_dtoa_r+0x7de>
 8007420:	2001      	movs	r0, #1
 8007422:	e774      	b.n	800730e <_dtoa_r+0x7ee>
 8007424:	f04f 0800 	mov.w	r8, #0
 8007428:	e7f6      	b.n	8007418 <_dtoa_r+0x8f8>
 800742a:	4698      	mov	r8, r3
 800742c:	e7f4      	b.n	8007418 <_dtoa_r+0x8f8>
 800742e:	d082      	beq.n	8007336 <_dtoa_r+0x816>
 8007430:	9a05      	ldr	r2, [sp, #20]
 8007432:	331c      	adds	r3, #28
 8007434:	441a      	add	r2, r3
 8007436:	9205      	str	r2, [sp, #20]
 8007438:	9a06      	ldr	r2, [sp, #24]
 800743a:	441a      	add	r2, r3
 800743c:	441d      	add	r5, r3
 800743e:	9206      	str	r2, [sp, #24]
 8007440:	e779      	b.n	8007336 <_dtoa_r+0x816>
 8007442:	4603      	mov	r3, r0
 8007444:	e7f4      	b.n	8007430 <_dtoa_r+0x910>
 8007446:	9b04      	ldr	r3, [sp, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	dc37      	bgt.n	80074bc <_dtoa_r+0x99c>
 800744c:	9b07      	ldr	r3, [sp, #28]
 800744e:	2b02      	cmp	r3, #2
 8007450:	dd34      	ble.n	80074bc <_dtoa_r+0x99c>
 8007452:	9b04      	ldr	r3, [sp, #16]
 8007454:	9301      	str	r3, [sp, #4]
 8007456:	9b01      	ldr	r3, [sp, #4]
 8007458:	b963      	cbnz	r3, 8007474 <_dtoa_r+0x954>
 800745a:	4631      	mov	r1, r6
 800745c:	2205      	movs	r2, #5
 800745e:	4620      	mov	r0, r4
 8007460:	f000 fab2 	bl	80079c8 <__multadd>
 8007464:	4601      	mov	r1, r0
 8007466:	4606      	mov	r6, r0
 8007468:	4650      	mov	r0, sl
 800746a:	f000 fd11 	bl	8007e90 <__mcmp>
 800746e:	2800      	cmp	r0, #0
 8007470:	f73f adbb 	bgt.w	8006fea <_dtoa_r+0x4ca>
 8007474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007476:	9d00      	ldr	r5, [sp, #0]
 8007478:	ea6f 0b03 	mvn.w	fp, r3
 800747c:	f04f 0800 	mov.w	r8, #0
 8007480:	4631      	mov	r1, r6
 8007482:	4620      	mov	r0, r4
 8007484:	f000 fa7e 	bl	8007984 <_Bfree>
 8007488:	2f00      	cmp	r7, #0
 800748a:	f43f aeab 	beq.w	80071e4 <_dtoa_r+0x6c4>
 800748e:	f1b8 0f00 	cmp.w	r8, #0
 8007492:	d005      	beq.n	80074a0 <_dtoa_r+0x980>
 8007494:	45b8      	cmp	r8, r7
 8007496:	d003      	beq.n	80074a0 <_dtoa_r+0x980>
 8007498:	4641      	mov	r1, r8
 800749a:	4620      	mov	r0, r4
 800749c:	f000 fa72 	bl	8007984 <_Bfree>
 80074a0:	4639      	mov	r1, r7
 80074a2:	4620      	mov	r0, r4
 80074a4:	f000 fa6e 	bl	8007984 <_Bfree>
 80074a8:	e69c      	b.n	80071e4 <_dtoa_r+0x6c4>
 80074aa:	2600      	movs	r6, #0
 80074ac:	4637      	mov	r7, r6
 80074ae:	e7e1      	b.n	8007474 <_dtoa_r+0x954>
 80074b0:	46bb      	mov	fp, r7
 80074b2:	4637      	mov	r7, r6
 80074b4:	e599      	b.n	8006fea <_dtoa_r+0x4ca>
 80074b6:	bf00      	nop
 80074b8:	40240000 	.word	0x40240000
 80074bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 80c8 	beq.w	8007654 <_dtoa_r+0xb34>
 80074c4:	9b04      	ldr	r3, [sp, #16]
 80074c6:	9301      	str	r3, [sp, #4]
 80074c8:	2d00      	cmp	r5, #0
 80074ca:	dd05      	ble.n	80074d8 <_dtoa_r+0x9b8>
 80074cc:	4639      	mov	r1, r7
 80074ce:	462a      	mov	r2, r5
 80074d0:	4620      	mov	r0, r4
 80074d2:	f000 fc71 	bl	8007db8 <__lshift>
 80074d6:	4607      	mov	r7, r0
 80074d8:	f1b8 0f00 	cmp.w	r8, #0
 80074dc:	d05b      	beq.n	8007596 <_dtoa_r+0xa76>
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	4620      	mov	r0, r4
 80074e2:	f000 fa0f 	bl	8007904 <_Balloc>
 80074e6:	4605      	mov	r5, r0
 80074e8:	b928      	cbnz	r0, 80074f6 <_dtoa_r+0x9d6>
 80074ea:	4b83      	ldr	r3, [pc, #524]	; (80076f8 <_dtoa_r+0xbd8>)
 80074ec:	4602      	mov	r2, r0
 80074ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 80074f2:	f7ff bb2e 	b.w	8006b52 <_dtoa_r+0x32>
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	3202      	adds	r2, #2
 80074fa:	0092      	lsls	r2, r2, #2
 80074fc:	f107 010c 	add.w	r1, r7, #12
 8007500:	300c      	adds	r0, #12
 8007502:	f002 f94d 	bl	80097a0 <memcpy>
 8007506:	2201      	movs	r2, #1
 8007508:	4629      	mov	r1, r5
 800750a:	4620      	mov	r0, r4
 800750c:	f000 fc54 	bl	8007db8 <__lshift>
 8007510:	9b00      	ldr	r3, [sp, #0]
 8007512:	3301      	adds	r3, #1
 8007514:	9304      	str	r3, [sp, #16]
 8007516:	e9dd 2300 	ldrd	r2, r3, [sp]
 800751a:	4413      	add	r3, r2
 800751c:	9308      	str	r3, [sp, #32]
 800751e:	9b02      	ldr	r3, [sp, #8]
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	46b8      	mov	r8, r7
 8007526:	9306      	str	r3, [sp, #24]
 8007528:	4607      	mov	r7, r0
 800752a:	9b04      	ldr	r3, [sp, #16]
 800752c:	4631      	mov	r1, r6
 800752e:	3b01      	subs	r3, #1
 8007530:	4650      	mov	r0, sl
 8007532:	9301      	str	r3, [sp, #4]
 8007534:	f7ff fa6c 	bl	8006a10 <quorem>
 8007538:	4641      	mov	r1, r8
 800753a:	9002      	str	r0, [sp, #8]
 800753c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007540:	4650      	mov	r0, sl
 8007542:	f000 fca5 	bl	8007e90 <__mcmp>
 8007546:	463a      	mov	r2, r7
 8007548:	9005      	str	r0, [sp, #20]
 800754a:	4631      	mov	r1, r6
 800754c:	4620      	mov	r0, r4
 800754e:	f000 fcbb 	bl	8007ec8 <__mdiff>
 8007552:	68c2      	ldr	r2, [r0, #12]
 8007554:	4605      	mov	r5, r0
 8007556:	bb02      	cbnz	r2, 800759a <_dtoa_r+0xa7a>
 8007558:	4601      	mov	r1, r0
 800755a:	4650      	mov	r0, sl
 800755c:	f000 fc98 	bl	8007e90 <__mcmp>
 8007560:	4602      	mov	r2, r0
 8007562:	4629      	mov	r1, r5
 8007564:	4620      	mov	r0, r4
 8007566:	9209      	str	r2, [sp, #36]	; 0x24
 8007568:	f000 fa0c 	bl	8007984 <_Bfree>
 800756c:	9b07      	ldr	r3, [sp, #28]
 800756e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007570:	9d04      	ldr	r5, [sp, #16]
 8007572:	ea43 0102 	orr.w	r1, r3, r2
 8007576:	9b06      	ldr	r3, [sp, #24]
 8007578:	4319      	orrs	r1, r3
 800757a:	d110      	bne.n	800759e <_dtoa_r+0xa7e>
 800757c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007580:	d029      	beq.n	80075d6 <_dtoa_r+0xab6>
 8007582:	9b05      	ldr	r3, [sp, #20]
 8007584:	2b00      	cmp	r3, #0
 8007586:	dd02      	ble.n	800758e <_dtoa_r+0xa6e>
 8007588:	9b02      	ldr	r3, [sp, #8]
 800758a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800758e:	9b01      	ldr	r3, [sp, #4]
 8007590:	f883 9000 	strb.w	r9, [r3]
 8007594:	e774      	b.n	8007480 <_dtoa_r+0x960>
 8007596:	4638      	mov	r0, r7
 8007598:	e7ba      	b.n	8007510 <_dtoa_r+0x9f0>
 800759a:	2201      	movs	r2, #1
 800759c:	e7e1      	b.n	8007562 <_dtoa_r+0xa42>
 800759e:	9b05      	ldr	r3, [sp, #20]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	db04      	blt.n	80075ae <_dtoa_r+0xa8e>
 80075a4:	9907      	ldr	r1, [sp, #28]
 80075a6:	430b      	orrs	r3, r1
 80075a8:	9906      	ldr	r1, [sp, #24]
 80075aa:	430b      	orrs	r3, r1
 80075ac:	d120      	bne.n	80075f0 <_dtoa_r+0xad0>
 80075ae:	2a00      	cmp	r2, #0
 80075b0:	dded      	ble.n	800758e <_dtoa_r+0xa6e>
 80075b2:	4651      	mov	r1, sl
 80075b4:	2201      	movs	r2, #1
 80075b6:	4620      	mov	r0, r4
 80075b8:	f000 fbfe 	bl	8007db8 <__lshift>
 80075bc:	4631      	mov	r1, r6
 80075be:	4682      	mov	sl, r0
 80075c0:	f000 fc66 	bl	8007e90 <__mcmp>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	dc03      	bgt.n	80075d0 <_dtoa_r+0xab0>
 80075c8:	d1e1      	bne.n	800758e <_dtoa_r+0xa6e>
 80075ca:	f019 0f01 	tst.w	r9, #1
 80075ce:	d0de      	beq.n	800758e <_dtoa_r+0xa6e>
 80075d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075d4:	d1d8      	bne.n	8007588 <_dtoa_r+0xa68>
 80075d6:	9a01      	ldr	r2, [sp, #4]
 80075d8:	2339      	movs	r3, #57	; 0x39
 80075da:	7013      	strb	r3, [r2, #0]
 80075dc:	462b      	mov	r3, r5
 80075de:	461d      	mov	r5, r3
 80075e0:	3b01      	subs	r3, #1
 80075e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80075e6:	2a39      	cmp	r2, #57	; 0x39
 80075e8:	d06c      	beq.n	80076c4 <_dtoa_r+0xba4>
 80075ea:	3201      	adds	r2, #1
 80075ec:	701a      	strb	r2, [r3, #0]
 80075ee:	e747      	b.n	8007480 <_dtoa_r+0x960>
 80075f0:	2a00      	cmp	r2, #0
 80075f2:	dd07      	ble.n	8007604 <_dtoa_r+0xae4>
 80075f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075f8:	d0ed      	beq.n	80075d6 <_dtoa_r+0xab6>
 80075fa:	9a01      	ldr	r2, [sp, #4]
 80075fc:	f109 0301 	add.w	r3, r9, #1
 8007600:	7013      	strb	r3, [r2, #0]
 8007602:	e73d      	b.n	8007480 <_dtoa_r+0x960>
 8007604:	9b04      	ldr	r3, [sp, #16]
 8007606:	9a08      	ldr	r2, [sp, #32]
 8007608:	f803 9c01 	strb.w	r9, [r3, #-1]
 800760c:	4293      	cmp	r3, r2
 800760e:	d043      	beq.n	8007698 <_dtoa_r+0xb78>
 8007610:	4651      	mov	r1, sl
 8007612:	2300      	movs	r3, #0
 8007614:	220a      	movs	r2, #10
 8007616:	4620      	mov	r0, r4
 8007618:	f000 f9d6 	bl	80079c8 <__multadd>
 800761c:	45b8      	cmp	r8, r7
 800761e:	4682      	mov	sl, r0
 8007620:	f04f 0300 	mov.w	r3, #0
 8007624:	f04f 020a 	mov.w	r2, #10
 8007628:	4641      	mov	r1, r8
 800762a:	4620      	mov	r0, r4
 800762c:	d107      	bne.n	800763e <_dtoa_r+0xb1e>
 800762e:	f000 f9cb 	bl	80079c8 <__multadd>
 8007632:	4680      	mov	r8, r0
 8007634:	4607      	mov	r7, r0
 8007636:	9b04      	ldr	r3, [sp, #16]
 8007638:	3301      	adds	r3, #1
 800763a:	9304      	str	r3, [sp, #16]
 800763c:	e775      	b.n	800752a <_dtoa_r+0xa0a>
 800763e:	f000 f9c3 	bl	80079c8 <__multadd>
 8007642:	4639      	mov	r1, r7
 8007644:	4680      	mov	r8, r0
 8007646:	2300      	movs	r3, #0
 8007648:	220a      	movs	r2, #10
 800764a:	4620      	mov	r0, r4
 800764c:	f000 f9bc 	bl	80079c8 <__multadd>
 8007650:	4607      	mov	r7, r0
 8007652:	e7f0      	b.n	8007636 <_dtoa_r+0xb16>
 8007654:	9b04      	ldr	r3, [sp, #16]
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	9d00      	ldr	r5, [sp, #0]
 800765a:	4631      	mov	r1, r6
 800765c:	4650      	mov	r0, sl
 800765e:	f7ff f9d7 	bl	8006a10 <quorem>
 8007662:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007666:	9b00      	ldr	r3, [sp, #0]
 8007668:	f805 9b01 	strb.w	r9, [r5], #1
 800766c:	1aea      	subs	r2, r5, r3
 800766e:	9b01      	ldr	r3, [sp, #4]
 8007670:	4293      	cmp	r3, r2
 8007672:	dd07      	ble.n	8007684 <_dtoa_r+0xb64>
 8007674:	4651      	mov	r1, sl
 8007676:	2300      	movs	r3, #0
 8007678:	220a      	movs	r2, #10
 800767a:	4620      	mov	r0, r4
 800767c:	f000 f9a4 	bl	80079c8 <__multadd>
 8007680:	4682      	mov	sl, r0
 8007682:	e7ea      	b.n	800765a <_dtoa_r+0xb3a>
 8007684:	9b01      	ldr	r3, [sp, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	bfc8      	it	gt
 800768a:	461d      	movgt	r5, r3
 800768c:	9b00      	ldr	r3, [sp, #0]
 800768e:	bfd8      	it	le
 8007690:	2501      	movle	r5, #1
 8007692:	441d      	add	r5, r3
 8007694:	f04f 0800 	mov.w	r8, #0
 8007698:	4651      	mov	r1, sl
 800769a:	2201      	movs	r2, #1
 800769c:	4620      	mov	r0, r4
 800769e:	f000 fb8b 	bl	8007db8 <__lshift>
 80076a2:	4631      	mov	r1, r6
 80076a4:	4682      	mov	sl, r0
 80076a6:	f000 fbf3 	bl	8007e90 <__mcmp>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	dc96      	bgt.n	80075dc <_dtoa_r+0xabc>
 80076ae:	d102      	bne.n	80076b6 <_dtoa_r+0xb96>
 80076b0:	f019 0f01 	tst.w	r9, #1
 80076b4:	d192      	bne.n	80075dc <_dtoa_r+0xabc>
 80076b6:	462b      	mov	r3, r5
 80076b8:	461d      	mov	r5, r3
 80076ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076be:	2a30      	cmp	r2, #48	; 0x30
 80076c0:	d0fa      	beq.n	80076b8 <_dtoa_r+0xb98>
 80076c2:	e6dd      	b.n	8007480 <_dtoa_r+0x960>
 80076c4:	9a00      	ldr	r2, [sp, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d189      	bne.n	80075de <_dtoa_r+0xabe>
 80076ca:	f10b 0b01 	add.w	fp, fp, #1
 80076ce:	2331      	movs	r3, #49	; 0x31
 80076d0:	e796      	b.n	8007600 <_dtoa_r+0xae0>
 80076d2:	4b0a      	ldr	r3, [pc, #40]	; (80076fc <_dtoa_r+0xbdc>)
 80076d4:	f7ff ba99 	b.w	8006c0a <_dtoa_r+0xea>
 80076d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f47f aa6d 	bne.w	8006bba <_dtoa_r+0x9a>
 80076e0:	4b07      	ldr	r3, [pc, #28]	; (8007700 <_dtoa_r+0xbe0>)
 80076e2:	f7ff ba92 	b.w	8006c0a <_dtoa_r+0xea>
 80076e6:	9b01      	ldr	r3, [sp, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	dcb5      	bgt.n	8007658 <_dtoa_r+0xb38>
 80076ec:	9b07      	ldr	r3, [sp, #28]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	f73f aeb1 	bgt.w	8007456 <_dtoa_r+0x936>
 80076f4:	e7b0      	b.n	8007658 <_dtoa_r+0xb38>
 80076f6:	bf00      	nop
 80076f8:	0800a385 	.word	0x0800a385
 80076fc:	0800a2e0 	.word	0x0800a2e0
 8007700:	0800a309 	.word	0x0800a309

08007704 <_free_r>:
 8007704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007706:	2900      	cmp	r1, #0
 8007708:	d044      	beq.n	8007794 <_free_r+0x90>
 800770a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800770e:	9001      	str	r0, [sp, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	f1a1 0404 	sub.w	r4, r1, #4
 8007716:	bfb8      	it	lt
 8007718:	18e4      	addlt	r4, r4, r3
 800771a:	f000 f8e7 	bl	80078ec <__malloc_lock>
 800771e:	4a1e      	ldr	r2, [pc, #120]	; (8007798 <_free_r+0x94>)
 8007720:	9801      	ldr	r0, [sp, #4]
 8007722:	6813      	ldr	r3, [r2, #0]
 8007724:	b933      	cbnz	r3, 8007734 <_free_r+0x30>
 8007726:	6063      	str	r3, [r4, #4]
 8007728:	6014      	str	r4, [r2, #0]
 800772a:	b003      	add	sp, #12
 800772c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007730:	f000 b8e2 	b.w	80078f8 <__malloc_unlock>
 8007734:	42a3      	cmp	r3, r4
 8007736:	d908      	bls.n	800774a <_free_r+0x46>
 8007738:	6825      	ldr	r5, [r4, #0]
 800773a:	1961      	adds	r1, r4, r5
 800773c:	428b      	cmp	r3, r1
 800773e:	bf01      	itttt	eq
 8007740:	6819      	ldreq	r1, [r3, #0]
 8007742:	685b      	ldreq	r3, [r3, #4]
 8007744:	1949      	addeq	r1, r1, r5
 8007746:	6021      	streq	r1, [r4, #0]
 8007748:	e7ed      	b.n	8007726 <_free_r+0x22>
 800774a:	461a      	mov	r2, r3
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	b10b      	cbz	r3, 8007754 <_free_r+0x50>
 8007750:	42a3      	cmp	r3, r4
 8007752:	d9fa      	bls.n	800774a <_free_r+0x46>
 8007754:	6811      	ldr	r1, [r2, #0]
 8007756:	1855      	adds	r5, r2, r1
 8007758:	42a5      	cmp	r5, r4
 800775a:	d10b      	bne.n	8007774 <_free_r+0x70>
 800775c:	6824      	ldr	r4, [r4, #0]
 800775e:	4421      	add	r1, r4
 8007760:	1854      	adds	r4, r2, r1
 8007762:	42a3      	cmp	r3, r4
 8007764:	6011      	str	r1, [r2, #0]
 8007766:	d1e0      	bne.n	800772a <_free_r+0x26>
 8007768:	681c      	ldr	r4, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	6053      	str	r3, [r2, #4]
 800776e:	440c      	add	r4, r1
 8007770:	6014      	str	r4, [r2, #0]
 8007772:	e7da      	b.n	800772a <_free_r+0x26>
 8007774:	d902      	bls.n	800777c <_free_r+0x78>
 8007776:	230c      	movs	r3, #12
 8007778:	6003      	str	r3, [r0, #0]
 800777a:	e7d6      	b.n	800772a <_free_r+0x26>
 800777c:	6825      	ldr	r5, [r4, #0]
 800777e:	1961      	adds	r1, r4, r5
 8007780:	428b      	cmp	r3, r1
 8007782:	bf04      	itt	eq
 8007784:	6819      	ldreq	r1, [r3, #0]
 8007786:	685b      	ldreq	r3, [r3, #4]
 8007788:	6063      	str	r3, [r4, #4]
 800778a:	bf04      	itt	eq
 800778c:	1949      	addeq	r1, r1, r5
 800778e:	6021      	streq	r1, [r4, #0]
 8007790:	6054      	str	r4, [r2, #4]
 8007792:	e7ca      	b.n	800772a <_free_r+0x26>
 8007794:	b003      	add	sp, #12
 8007796:	bd30      	pop	{r4, r5, pc}
 8007798:	20000510 	.word	0x20000510

0800779c <malloc>:
 800779c:	4b02      	ldr	r3, [pc, #8]	; (80077a8 <malloc+0xc>)
 800779e:	4601      	mov	r1, r0
 80077a0:	6818      	ldr	r0, [r3, #0]
 80077a2:	f000 b823 	b.w	80077ec <_malloc_r>
 80077a6:	bf00      	nop
 80077a8:	20000074 	.word	0x20000074

080077ac <sbrk_aligned>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	4e0e      	ldr	r6, [pc, #56]	; (80077e8 <sbrk_aligned+0x3c>)
 80077b0:	460c      	mov	r4, r1
 80077b2:	6831      	ldr	r1, [r6, #0]
 80077b4:	4605      	mov	r5, r0
 80077b6:	b911      	cbnz	r1, 80077be <sbrk_aligned+0x12>
 80077b8:	f001 ffe2 	bl	8009780 <_sbrk_r>
 80077bc:	6030      	str	r0, [r6, #0]
 80077be:	4621      	mov	r1, r4
 80077c0:	4628      	mov	r0, r5
 80077c2:	f001 ffdd 	bl	8009780 <_sbrk_r>
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	d00a      	beq.n	80077e0 <sbrk_aligned+0x34>
 80077ca:	1cc4      	adds	r4, r0, #3
 80077cc:	f024 0403 	bic.w	r4, r4, #3
 80077d0:	42a0      	cmp	r0, r4
 80077d2:	d007      	beq.n	80077e4 <sbrk_aligned+0x38>
 80077d4:	1a21      	subs	r1, r4, r0
 80077d6:	4628      	mov	r0, r5
 80077d8:	f001 ffd2 	bl	8009780 <_sbrk_r>
 80077dc:	3001      	adds	r0, #1
 80077de:	d101      	bne.n	80077e4 <sbrk_aligned+0x38>
 80077e0:	f04f 34ff 	mov.w	r4, #4294967295
 80077e4:	4620      	mov	r0, r4
 80077e6:	bd70      	pop	{r4, r5, r6, pc}
 80077e8:	20000514 	.word	0x20000514

080077ec <_malloc_r>:
 80077ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f0:	1ccd      	adds	r5, r1, #3
 80077f2:	f025 0503 	bic.w	r5, r5, #3
 80077f6:	3508      	adds	r5, #8
 80077f8:	2d0c      	cmp	r5, #12
 80077fa:	bf38      	it	cc
 80077fc:	250c      	movcc	r5, #12
 80077fe:	2d00      	cmp	r5, #0
 8007800:	4607      	mov	r7, r0
 8007802:	db01      	blt.n	8007808 <_malloc_r+0x1c>
 8007804:	42a9      	cmp	r1, r5
 8007806:	d905      	bls.n	8007814 <_malloc_r+0x28>
 8007808:	230c      	movs	r3, #12
 800780a:	603b      	str	r3, [r7, #0]
 800780c:	2600      	movs	r6, #0
 800780e:	4630      	mov	r0, r6
 8007810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007814:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80078e8 <_malloc_r+0xfc>
 8007818:	f000 f868 	bl	80078ec <__malloc_lock>
 800781c:	f8d8 3000 	ldr.w	r3, [r8]
 8007820:	461c      	mov	r4, r3
 8007822:	bb5c      	cbnz	r4, 800787c <_malloc_r+0x90>
 8007824:	4629      	mov	r1, r5
 8007826:	4638      	mov	r0, r7
 8007828:	f7ff ffc0 	bl	80077ac <sbrk_aligned>
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	4604      	mov	r4, r0
 8007830:	d155      	bne.n	80078de <_malloc_r+0xf2>
 8007832:	f8d8 4000 	ldr.w	r4, [r8]
 8007836:	4626      	mov	r6, r4
 8007838:	2e00      	cmp	r6, #0
 800783a:	d145      	bne.n	80078c8 <_malloc_r+0xdc>
 800783c:	2c00      	cmp	r4, #0
 800783e:	d048      	beq.n	80078d2 <_malloc_r+0xe6>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	4631      	mov	r1, r6
 8007844:	4638      	mov	r0, r7
 8007846:	eb04 0903 	add.w	r9, r4, r3
 800784a:	f001 ff99 	bl	8009780 <_sbrk_r>
 800784e:	4581      	cmp	r9, r0
 8007850:	d13f      	bne.n	80078d2 <_malloc_r+0xe6>
 8007852:	6821      	ldr	r1, [r4, #0]
 8007854:	1a6d      	subs	r5, r5, r1
 8007856:	4629      	mov	r1, r5
 8007858:	4638      	mov	r0, r7
 800785a:	f7ff ffa7 	bl	80077ac <sbrk_aligned>
 800785e:	3001      	adds	r0, #1
 8007860:	d037      	beq.n	80078d2 <_malloc_r+0xe6>
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	442b      	add	r3, r5
 8007866:	6023      	str	r3, [r4, #0]
 8007868:	f8d8 3000 	ldr.w	r3, [r8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d038      	beq.n	80078e2 <_malloc_r+0xf6>
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	42a2      	cmp	r2, r4
 8007874:	d12b      	bne.n	80078ce <_malloc_r+0xe2>
 8007876:	2200      	movs	r2, #0
 8007878:	605a      	str	r2, [r3, #4]
 800787a:	e00f      	b.n	800789c <_malloc_r+0xb0>
 800787c:	6822      	ldr	r2, [r4, #0]
 800787e:	1b52      	subs	r2, r2, r5
 8007880:	d41f      	bmi.n	80078c2 <_malloc_r+0xd6>
 8007882:	2a0b      	cmp	r2, #11
 8007884:	d917      	bls.n	80078b6 <_malloc_r+0xca>
 8007886:	1961      	adds	r1, r4, r5
 8007888:	42a3      	cmp	r3, r4
 800788a:	6025      	str	r5, [r4, #0]
 800788c:	bf18      	it	ne
 800788e:	6059      	strne	r1, [r3, #4]
 8007890:	6863      	ldr	r3, [r4, #4]
 8007892:	bf08      	it	eq
 8007894:	f8c8 1000 	streq.w	r1, [r8]
 8007898:	5162      	str	r2, [r4, r5]
 800789a:	604b      	str	r3, [r1, #4]
 800789c:	4638      	mov	r0, r7
 800789e:	f104 060b 	add.w	r6, r4, #11
 80078a2:	f000 f829 	bl	80078f8 <__malloc_unlock>
 80078a6:	f026 0607 	bic.w	r6, r6, #7
 80078aa:	1d23      	adds	r3, r4, #4
 80078ac:	1af2      	subs	r2, r6, r3
 80078ae:	d0ae      	beq.n	800780e <_malloc_r+0x22>
 80078b0:	1b9b      	subs	r3, r3, r6
 80078b2:	50a3      	str	r3, [r4, r2]
 80078b4:	e7ab      	b.n	800780e <_malloc_r+0x22>
 80078b6:	42a3      	cmp	r3, r4
 80078b8:	6862      	ldr	r2, [r4, #4]
 80078ba:	d1dd      	bne.n	8007878 <_malloc_r+0x8c>
 80078bc:	f8c8 2000 	str.w	r2, [r8]
 80078c0:	e7ec      	b.n	800789c <_malloc_r+0xb0>
 80078c2:	4623      	mov	r3, r4
 80078c4:	6864      	ldr	r4, [r4, #4]
 80078c6:	e7ac      	b.n	8007822 <_malloc_r+0x36>
 80078c8:	4634      	mov	r4, r6
 80078ca:	6876      	ldr	r6, [r6, #4]
 80078cc:	e7b4      	b.n	8007838 <_malloc_r+0x4c>
 80078ce:	4613      	mov	r3, r2
 80078d0:	e7cc      	b.n	800786c <_malloc_r+0x80>
 80078d2:	230c      	movs	r3, #12
 80078d4:	603b      	str	r3, [r7, #0]
 80078d6:	4638      	mov	r0, r7
 80078d8:	f000 f80e 	bl	80078f8 <__malloc_unlock>
 80078dc:	e797      	b.n	800780e <_malloc_r+0x22>
 80078de:	6025      	str	r5, [r4, #0]
 80078e0:	e7dc      	b.n	800789c <_malloc_r+0xb0>
 80078e2:	605b      	str	r3, [r3, #4]
 80078e4:	deff      	udf	#255	; 0xff
 80078e6:	bf00      	nop
 80078e8:	20000510 	.word	0x20000510

080078ec <__malloc_lock>:
 80078ec:	4801      	ldr	r0, [pc, #4]	; (80078f4 <__malloc_lock+0x8>)
 80078ee:	f7ff b886 	b.w	80069fe <__retarget_lock_acquire_recursive>
 80078f2:	bf00      	nop
 80078f4:	2000050c 	.word	0x2000050c

080078f8 <__malloc_unlock>:
 80078f8:	4801      	ldr	r0, [pc, #4]	; (8007900 <__malloc_unlock+0x8>)
 80078fa:	f7ff b881 	b.w	8006a00 <__retarget_lock_release_recursive>
 80078fe:	bf00      	nop
 8007900:	2000050c 	.word	0x2000050c

08007904 <_Balloc>:
 8007904:	b570      	push	{r4, r5, r6, lr}
 8007906:	69c6      	ldr	r6, [r0, #28]
 8007908:	4604      	mov	r4, r0
 800790a:	460d      	mov	r5, r1
 800790c:	b976      	cbnz	r6, 800792c <_Balloc+0x28>
 800790e:	2010      	movs	r0, #16
 8007910:	f7ff ff44 	bl	800779c <malloc>
 8007914:	4602      	mov	r2, r0
 8007916:	61e0      	str	r0, [r4, #28]
 8007918:	b920      	cbnz	r0, 8007924 <_Balloc+0x20>
 800791a:	4b18      	ldr	r3, [pc, #96]	; (800797c <_Balloc+0x78>)
 800791c:	4818      	ldr	r0, [pc, #96]	; (8007980 <_Balloc+0x7c>)
 800791e:	216b      	movs	r1, #107	; 0x6b
 8007920:	f001 ff56 	bl	80097d0 <__assert_func>
 8007924:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007928:	6006      	str	r6, [r0, #0]
 800792a:	60c6      	str	r6, [r0, #12]
 800792c:	69e6      	ldr	r6, [r4, #28]
 800792e:	68f3      	ldr	r3, [r6, #12]
 8007930:	b183      	cbz	r3, 8007954 <_Balloc+0x50>
 8007932:	69e3      	ldr	r3, [r4, #28]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800793a:	b9b8      	cbnz	r0, 800796c <_Balloc+0x68>
 800793c:	2101      	movs	r1, #1
 800793e:	fa01 f605 	lsl.w	r6, r1, r5
 8007942:	1d72      	adds	r2, r6, #5
 8007944:	0092      	lsls	r2, r2, #2
 8007946:	4620      	mov	r0, r4
 8007948:	f001 ff60 	bl	800980c <_calloc_r>
 800794c:	b160      	cbz	r0, 8007968 <_Balloc+0x64>
 800794e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007952:	e00e      	b.n	8007972 <_Balloc+0x6e>
 8007954:	2221      	movs	r2, #33	; 0x21
 8007956:	2104      	movs	r1, #4
 8007958:	4620      	mov	r0, r4
 800795a:	f001 ff57 	bl	800980c <_calloc_r>
 800795e:	69e3      	ldr	r3, [r4, #28]
 8007960:	60f0      	str	r0, [r6, #12]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1e4      	bne.n	8007932 <_Balloc+0x2e>
 8007968:	2000      	movs	r0, #0
 800796a:	bd70      	pop	{r4, r5, r6, pc}
 800796c:	6802      	ldr	r2, [r0, #0]
 800796e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007972:	2300      	movs	r3, #0
 8007974:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007978:	e7f7      	b.n	800796a <_Balloc+0x66>
 800797a:	bf00      	nop
 800797c:	0800a316 	.word	0x0800a316
 8007980:	0800a396 	.word	0x0800a396

08007984 <_Bfree>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	69c6      	ldr	r6, [r0, #28]
 8007988:	4605      	mov	r5, r0
 800798a:	460c      	mov	r4, r1
 800798c:	b976      	cbnz	r6, 80079ac <_Bfree+0x28>
 800798e:	2010      	movs	r0, #16
 8007990:	f7ff ff04 	bl	800779c <malloc>
 8007994:	4602      	mov	r2, r0
 8007996:	61e8      	str	r0, [r5, #28]
 8007998:	b920      	cbnz	r0, 80079a4 <_Bfree+0x20>
 800799a:	4b09      	ldr	r3, [pc, #36]	; (80079c0 <_Bfree+0x3c>)
 800799c:	4809      	ldr	r0, [pc, #36]	; (80079c4 <_Bfree+0x40>)
 800799e:	218f      	movs	r1, #143	; 0x8f
 80079a0:	f001 ff16 	bl	80097d0 <__assert_func>
 80079a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079a8:	6006      	str	r6, [r0, #0]
 80079aa:	60c6      	str	r6, [r0, #12]
 80079ac:	b13c      	cbz	r4, 80079be <_Bfree+0x3a>
 80079ae:	69eb      	ldr	r3, [r5, #28]
 80079b0:	6862      	ldr	r2, [r4, #4]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079b8:	6021      	str	r1, [r4, #0]
 80079ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079be:	bd70      	pop	{r4, r5, r6, pc}
 80079c0:	0800a316 	.word	0x0800a316
 80079c4:	0800a396 	.word	0x0800a396

080079c8 <__multadd>:
 80079c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079cc:	690d      	ldr	r5, [r1, #16]
 80079ce:	4607      	mov	r7, r0
 80079d0:	460c      	mov	r4, r1
 80079d2:	461e      	mov	r6, r3
 80079d4:	f101 0c14 	add.w	ip, r1, #20
 80079d8:	2000      	movs	r0, #0
 80079da:	f8dc 3000 	ldr.w	r3, [ip]
 80079de:	b299      	uxth	r1, r3
 80079e0:	fb02 6101 	mla	r1, r2, r1, r6
 80079e4:	0c1e      	lsrs	r6, r3, #16
 80079e6:	0c0b      	lsrs	r3, r1, #16
 80079e8:	fb02 3306 	mla	r3, r2, r6, r3
 80079ec:	b289      	uxth	r1, r1
 80079ee:	3001      	adds	r0, #1
 80079f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079f4:	4285      	cmp	r5, r0
 80079f6:	f84c 1b04 	str.w	r1, [ip], #4
 80079fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079fe:	dcec      	bgt.n	80079da <__multadd+0x12>
 8007a00:	b30e      	cbz	r6, 8007a46 <__multadd+0x7e>
 8007a02:	68a3      	ldr	r3, [r4, #8]
 8007a04:	42ab      	cmp	r3, r5
 8007a06:	dc19      	bgt.n	8007a3c <__multadd+0x74>
 8007a08:	6861      	ldr	r1, [r4, #4]
 8007a0a:	4638      	mov	r0, r7
 8007a0c:	3101      	adds	r1, #1
 8007a0e:	f7ff ff79 	bl	8007904 <_Balloc>
 8007a12:	4680      	mov	r8, r0
 8007a14:	b928      	cbnz	r0, 8007a22 <__multadd+0x5a>
 8007a16:	4602      	mov	r2, r0
 8007a18:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <__multadd+0x84>)
 8007a1a:	480d      	ldr	r0, [pc, #52]	; (8007a50 <__multadd+0x88>)
 8007a1c:	21ba      	movs	r1, #186	; 0xba
 8007a1e:	f001 fed7 	bl	80097d0 <__assert_func>
 8007a22:	6922      	ldr	r2, [r4, #16]
 8007a24:	3202      	adds	r2, #2
 8007a26:	f104 010c 	add.w	r1, r4, #12
 8007a2a:	0092      	lsls	r2, r2, #2
 8007a2c:	300c      	adds	r0, #12
 8007a2e:	f001 feb7 	bl	80097a0 <memcpy>
 8007a32:	4621      	mov	r1, r4
 8007a34:	4638      	mov	r0, r7
 8007a36:	f7ff ffa5 	bl	8007984 <_Bfree>
 8007a3a:	4644      	mov	r4, r8
 8007a3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a40:	3501      	adds	r5, #1
 8007a42:	615e      	str	r6, [r3, #20]
 8007a44:	6125      	str	r5, [r4, #16]
 8007a46:	4620      	mov	r0, r4
 8007a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a4c:	0800a385 	.word	0x0800a385
 8007a50:	0800a396 	.word	0x0800a396

08007a54 <__s2b>:
 8007a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a58:	460c      	mov	r4, r1
 8007a5a:	4615      	mov	r5, r2
 8007a5c:	461f      	mov	r7, r3
 8007a5e:	2209      	movs	r2, #9
 8007a60:	3308      	adds	r3, #8
 8007a62:	4606      	mov	r6, r0
 8007a64:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a68:	2100      	movs	r1, #0
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	db09      	blt.n	8007a84 <__s2b+0x30>
 8007a70:	4630      	mov	r0, r6
 8007a72:	f7ff ff47 	bl	8007904 <_Balloc>
 8007a76:	b940      	cbnz	r0, 8007a8a <__s2b+0x36>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	4b19      	ldr	r3, [pc, #100]	; (8007ae0 <__s2b+0x8c>)
 8007a7c:	4819      	ldr	r0, [pc, #100]	; (8007ae4 <__s2b+0x90>)
 8007a7e:	21d3      	movs	r1, #211	; 0xd3
 8007a80:	f001 fea6 	bl	80097d0 <__assert_func>
 8007a84:	0052      	lsls	r2, r2, #1
 8007a86:	3101      	adds	r1, #1
 8007a88:	e7f0      	b.n	8007a6c <__s2b+0x18>
 8007a8a:	9b08      	ldr	r3, [sp, #32]
 8007a8c:	6143      	str	r3, [r0, #20]
 8007a8e:	2d09      	cmp	r5, #9
 8007a90:	f04f 0301 	mov.w	r3, #1
 8007a94:	6103      	str	r3, [r0, #16]
 8007a96:	dd16      	ble.n	8007ac6 <__s2b+0x72>
 8007a98:	f104 0909 	add.w	r9, r4, #9
 8007a9c:	46c8      	mov	r8, r9
 8007a9e:	442c      	add	r4, r5
 8007aa0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007aa4:	4601      	mov	r1, r0
 8007aa6:	3b30      	subs	r3, #48	; 0x30
 8007aa8:	220a      	movs	r2, #10
 8007aaa:	4630      	mov	r0, r6
 8007aac:	f7ff ff8c 	bl	80079c8 <__multadd>
 8007ab0:	45a0      	cmp	r8, r4
 8007ab2:	d1f5      	bne.n	8007aa0 <__s2b+0x4c>
 8007ab4:	f1a5 0408 	sub.w	r4, r5, #8
 8007ab8:	444c      	add	r4, r9
 8007aba:	1b2d      	subs	r5, r5, r4
 8007abc:	1963      	adds	r3, r4, r5
 8007abe:	42bb      	cmp	r3, r7
 8007ac0:	db04      	blt.n	8007acc <__s2b+0x78>
 8007ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ac6:	340a      	adds	r4, #10
 8007ac8:	2509      	movs	r5, #9
 8007aca:	e7f6      	b.n	8007aba <__s2b+0x66>
 8007acc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007ad0:	4601      	mov	r1, r0
 8007ad2:	3b30      	subs	r3, #48	; 0x30
 8007ad4:	220a      	movs	r2, #10
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	f7ff ff76 	bl	80079c8 <__multadd>
 8007adc:	e7ee      	b.n	8007abc <__s2b+0x68>
 8007ade:	bf00      	nop
 8007ae0:	0800a385 	.word	0x0800a385
 8007ae4:	0800a396 	.word	0x0800a396

08007ae8 <__hi0bits>:
 8007ae8:	0c03      	lsrs	r3, r0, #16
 8007aea:	041b      	lsls	r3, r3, #16
 8007aec:	b9d3      	cbnz	r3, 8007b24 <__hi0bits+0x3c>
 8007aee:	0400      	lsls	r0, r0, #16
 8007af0:	2310      	movs	r3, #16
 8007af2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007af6:	bf04      	itt	eq
 8007af8:	0200      	lsleq	r0, r0, #8
 8007afa:	3308      	addeq	r3, #8
 8007afc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b00:	bf04      	itt	eq
 8007b02:	0100      	lsleq	r0, r0, #4
 8007b04:	3304      	addeq	r3, #4
 8007b06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b0a:	bf04      	itt	eq
 8007b0c:	0080      	lsleq	r0, r0, #2
 8007b0e:	3302      	addeq	r3, #2
 8007b10:	2800      	cmp	r0, #0
 8007b12:	db05      	blt.n	8007b20 <__hi0bits+0x38>
 8007b14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b18:	f103 0301 	add.w	r3, r3, #1
 8007b1c:	bf08      	it	eq
 8007b1e:	2320      	moveq	r3, #32
 8007b20:	4618      	mov	r0, r3
 8007b22:	4770      	bx	lr
 8007b24:	2300      	movs	r3, #0
 8007b26:	e7e4      	b.n	8007af2 <__hi0bits+0xa>

08007b28 <__lo0bits>:
 8007b28:	6803      	ldr	r3, [r0, #0]
 8007b2a:	f013 0207 	ands.w	r2, r3, #7
 8007b2e:	d00c      	beq.n	8007b4a <__lo0bits+0x22>
 8007b30:	07d9      	lsls	r1, r3, #31
 8007b32:	d422      	bmi.n	8007b7a <__lo0bits+0x52>
 8007b34:	079a      	lsls	r2, r3, #30
 8007b36:	bf49      	itett	mi
 8007b38:	085b      	lsrmi	r3, r3, #1
 8007b3a:	089b      	lsrpl	r3, r3, #2
 8007b3c:	6003      	strmi	r3, [r0, #0]
 8007b3e:	2201      	movmi	r2, #1
 8007b40:	bf5c      	itt	pl
 8007b42:	6003      	strpl	r3, [r0, #0]
 8007b44:	2202      	movpl	r2, #2
 8007b46:	4610      	mov	r0, r2
 8007b48:	4770      	bx	lr
 8007b4a:	b299      	uxth	r1, r3
 8007b4c:	b909      	cbnz	r1, 8007b52 <__lo0bits+0x2a>
 8007b4e:	0c1b      	lsrs	r3, r3, #16
 8007b50:	2210      	movs	r2, #16
 8007b52:	b2d9      	uxtb	r1, r3
 8007b54:	b909      	cbnz	r1, 8007b5a <__lo0bits+0x32>
 8007b56:	3208      	adds	r2, #8
 8007b58:	0a1b      	lsrs	r3, r3, #8
 8007b5a:	0719      	lsls	r1, r3, #28
 8007b5c:	bf04      	itt	eq
 8007b5e:	091b      	lsreq	r3, r3, #4
 8007b60:	3204      	addeq	r2, #4
 8007b62:	0799      	lsls	r1, r3, #30
 8007b64:	bf04      	itt	eq
 8007b66:	089b      	lsreq	r3, r3, #2
 8007b68:	3202      	addeq	r2, #2
 8007b6a:	07d9      	lsls	r1, r3, #31
 8007b6c:	d403      	bmi.n	8007b76 <__lo0bits+0x4e>
 8007b6e:	085b      	lsrs	r3, r3, #1
 8007b70:	f102 0201 	add.w	r2, r2, #1
 8007b74:	d003      	beq.n	8007b7e <__lo0bits+0x56>
 8007b76:	6003      	str	r3, [r0, #0]
 8007b78:	e7e5      	b.n	8007b46 <__lo0bits+0x1e>
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	e7e3      	b.n	8007b46 <__lo0bits+0x1e>
 8007b7e:	2220      	movs	r2, #32
 8007b80:	e7e1      	b.n	8007b46 <__lo0bits+0x1e>
	...

08007b84 <__i2b>:
 8007b84:	b510      	push	{r4, lr}
 8007b86:	460c      	mov	r4, r1
 8007b88:	2101      	movs	r1, #1
 8007b8a:	f7ff febb 	bl	8007904 <_Balloc>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	b928      	cbnz	r0, 8007b9e <__i2b+0x1a>
 8007b92:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <__i2b+0x24>)
 8007b94:	4805      	ldr	r0, [pc, #20]	; (8007bac <__i2b+0x28>)
 8007b96:	f240 1145 	movw	r1, #325	; 0x145
 8007b9a:	f001 fe19 	bl	80097d0 <__assert_func>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	6144      	str	r4, [r0, #20]
 8007ba2:	6103      	str	r3, [r0, #16]
 8007ba4:	bd10      	pop	{r4, pc}
 8007ba6:	bf00      	nop
 8007ba8:	0800a385 	.word	0x0800a385
 8007bac:	0800a396 	.word	0x0800a396

08007bb0 <__multiply>:
 8007bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	4691      	mov	r9, r2
 8007bb6:	690a      	ldr	r2, [r1, #16]
 8007bb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	bfb8      	it	lt
 8007bc0:	460b      	movlt	r3, r1
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	bfbc      	itt	lt
 8007bc6:	464c      	movlt	r4, r9
 8007bc8:	4699      	movlt	r9, r3
 8007bca:	6927      	ldr	r7, [r4, #16]
 8007bcc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007bd0:	68a3      	ldr	r3, [r4, #8]
 8007bd2:	6861      	ldr	r1, [r4, #4]
 8007bd4:	eb07 060a 	add.w	r6, r7, sl
 8007bd8:	42b3      	cmp	r3, r6
 8007bda:	b085      	sub	sp, #20
 8007bdc:	bfb8      	it	lt
 8007bde:	3101      	addlt	r1, #1
 8007be0:	f7ff fe90 	bl	8007904 <_Balloc>
 8007be4:	b930      	cbnz	r0, 8007bf4 <__multiply+0x44>
 8007be6:	4602      	mov	r2, r0
 8007be8:	4b44      	ldr	r3, [pc, #272]	; (8007cfc <__multiply+0x14c>)
 8007bea:	4845      	ldr	r0, [pc, #276]	; (8007d00 <__multiply+0x150>)
 8007bec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007bf0:	f001 fdee 	bl	80097d0 <__assert_func>
 8007bf4:	f100 0514 	add.w	r5, r0, #20
 8007bf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007bfc:	462b      	mov	r3, r5
 8007bfe:	2200      	movs	r2, #0
 8007c00:	4543      	cmp	r3, r8
 8007c02:	d321      	bcc.n	8007c48 <__multiply+0x98>
 8007c04:	f104 0314 	add.w	r3, r4, #20
 8007c08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007c0c:	f109 0314 	add.w	r3, r9, #20
 8007c10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007c14:	9202      	str	r2, [sp, #8]
 8007c16:	1b3a      	subs	r2, r7, r4
 8007c18:	3a15      	subs	r2, #21
 8007c1a:	f022 0203 	bic.w	r2, r2, #3
 8007c1e:	3204      	adds	r2, #4
 8007c20:	f104 0115 	add.w	r1, r4, #21
 8007c24:	428f      	cmp	r7, r1
 8007c26:	bf38      	it	cc
 8007c28:	2204      	movcc	r2, #4
 8007c2a:	9201      	str	r2, [sp, #4]
 8007c2c:	9a02      	ldr	r2, [sp, #8]
 8007c2e:	9303      	str	r3, [sp, #12]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d80c      	bhi.n	8007c4e <__multiply+0x9e>
 8007c34:	2e00      	cmp	r6, #0
 8007c36:	dd03      	ble.n	8007c40 <__multiply+0x90>
 8007c38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d05b      	beq.n	8007cf8 <__multiply+0x148>
 8007c40:	6106      	str	r6, [r0, #16]
 8007c42:	b005      	add	sp, #20
 8007c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c48:	f843 2b04 	str.w	r2, [r3], #4
 8007c4c:	e7d8      	b.n	8007c00 <__multiply+0x50>
 8007c4e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c52:	f1ba 0f00 	cmp.w	sl, #0
 8007c56:	d024      	beq.n	8007ca2 <__multiply+0xf2>
 8007c58:	f104 0e14 	add.w	lr, r4, #20
 8007c5c:	46a9      	mov	r9, r5
 8007c5e:	f04f 0c00 	mov.w	ip, #0
 8007c62:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c66:	f8d9 1000 	ldr.w	r1, [r9]
 8007c6a:	fa1f fb82 	uxth.w	fp, r2
 8007c6e:	b289      	uxth	r1, r1
 8007c70:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007c78:	f8d9 2000 	ldr.w	r2, [r9]
 8007c7c:	4461      	add	r1, ip
 8007c7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c82:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c8a:	b289      	uxth	r1, r1
 8007c8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c90:	4577      	cmp	r7, lr
 8007c92:	f849 1b04 	str.w	r1, [r9], #4
 8007c96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c9a:	d8e2      	bhi.n	8007c62 <__multiply+0xb2>
 8007c9c:	9a01      	ldr	r2, [sp, #4]
 8007c9e:	f845 c002 	str.w	ip, [r5, r2]
 8007ca2:	9a03      	ldr	r2, [sp, #12]
 8007ca4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	f1b9 0f00 	cmp.w	r9, #0
 8007cae:	d021      	beq.n	8007cf4 <__multiply+0x144>
 8007cb0:	6829      	ldr	r1, [r5, #0]
 8007cb2:	f104 0c14 	add.w	ip, r4, #20
 8007cb6:	46ae      	mov	lr, r5
 8007cb8:	f04f 0a00 	mov.w	sl, #0
 8007cbc:	f8bc b000 	ldrh.w	fp, [ip]
 8007cc0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007cc4:	fb09 220b 	mla	r2, r9, fp, r2
 8007cc8:	4452      	add	r2, sl
 8007cca:	b289      	uxth	r1, r1
 8007ccc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007cd0:	f84e 1b04 	str.w	r1, [lr], #4
 8007cd4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007cd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007cdc:	f8be 1000 	ldrh.w	r1, [lr]
 8007ce0:	fb09 110a 	mla	r1, r9, sl, r1
 8007ce4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007ce8:	4567      	cmp	r7, ip
 8007cea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007cee:	d8e5      	bhi.n	8007cbc <__multiply+0x10c>
 8007cf0:	9a01      	ldr	r2, [sp, #4]
 8007cf2:	50a9      	str	r1, [r5, r2]
 8007cf4:	3504      	adds	r5, #4
 8007cf6:	e799      	b.n	8007c2c <__multiply+0x7c>
 8007cf8:	3e01      	subs	r6, #1
 8007cfa:	e79b      	b.n	8007c34 <__multiply+0x84>
 8007cfc:	0800a385 	.word	0x0800a385
 8007d00:	0800a396 	.word	0x0800a396

08007d04 <__pow5mult>:
 8007d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d08:	4615      	mov	r5, r2
 8007d0a:	f012 0203 	ands.w	r2, r2, #3
 8007d0e:	4606      	mov	r6, r0
 8007d10:	460f      	mov	r7, r1
 8007d12:	d007      	beq.n	8007d24 <__pow5mult+0x20>
 8007d14:	4c25      	ldr	r4, [pc, #148]	; (8007dac <__pow5mult+0xa8>)
 8007d16:	3a01      	subs	r2, #1
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d1e:	f7ff fe53 	bl	80079c8 <__multadd>
 8007d22:	4607      	mov	r7, r0
 8007d24:	10ad      	asrs	r5, r5, #2
 8007d26:	d03d      	beq.n	8007da4 <__pow5mult+0xa0>
 8007d28:	69f4      	ldr	r4, [r6, #28]
 8007d2a:	b97c      	cbnz	r4, 8007d4c <__pow5mult+0x48>
 8007d2c:	2010      	movs	r0, #16
 8007d2e:	f7ff fd35 	bl	800779c <malloc>
 8007d32:	4602      	mov	r2, r0
 8007d34:	61f0      	str	r0, [r6, #28]
 8007d36:	b928      	cbnz	r0, 8007d44 <__pow5mult+0x40>
 8007d38:	4b1d      	ldr	r3, [pc, #116]	; (8007db0 <__pow5mult+0xac>)
 8007d3a:	481e      	ldr	r0, [pc, #120]	; (8007db4 <__pow5mult+0xb0>)
 8007d3c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007d40:	f001 fd46 	bl	80097d0 <__assert_func>
 8007d44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d48:	6004      	str	r4, [r0, #0]
 8007d4a:	60c4      	str	r4, [r0, #12]
 8007d4c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007d50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d54:	b94c      	cbnz	r4, 8007d6a <__pow5mult+0x66>
 8007d56:	f240 2171 	movw	r1, #625	; 0x271
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f7ff ff12 	bl	8007b84 <__i2b>
 8007d60:	2300      	movs	r3, #0
 8007d62:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d66:	4604      	mov	r4, r0
 8007d68:	6003      	str	r3, [r0, #0]
 8007d6a:	f04f 0900 	mov.w	r9, #0
 8007d6e:	07eb      	lsls	r3, r5, #31
 8007d70:	d50a      	bpl.n	8007d88 <__pow5mult+0x84>
 8007d72:	4639      	mov	r1, r7
 8007d74:	4622      	mov	r2, r4
 8007d76:	4630      	mov	r0, r6
 8007d78:	f7ff ff1a 	bl	8007bb0 <__multiply>
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	4680      	mov	r8, r0
 8007d80:	4630      	mov	r0, r6
 8007d82:	f7ff fdff 	bl	8007984 <_Bfree>
 8007d86:	4647      	mov	r7, r8
 8007d88:	106d      	asrs	r5, r5, #1
 8007d8a:	d00b      	beq.n	8007da4 <__pow5mult+0xa0>
 8007d8c:	6820      	ldr	r0, [r4, #0]
 8007d8e:	b938      	cbnz	r0, 8007da0 <__pow5mult+0x9c>
 8007d90:	4622      	mov	r2, r4
 8007d92:	4621      	mov	r1, r4
 8007d94:	4630      	mov	r0, r6
 8007d96:	f7ff ff0b 	bl	8007bb0 <__multiply>
 8007d9a:	6020      	str	r0, [r4, #0]
 8007d9c:	f8c0 9000 	str.w	r9, [r0]
 8007da0:	4604      	mov	r4, r0
 8007da2:	e7e4      	b.n	8007d6e <__pow5mult+0x6a>
 8007da4:	4638      	mov	r0, r7
 8007da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007daa:	bf00      	nop
 8007dac:	0800a4e0 	.word	0x0800a4e0
 8007db0:	0800a316 	.word	0x0800a316
 8007db4:	0800a396 	.word	0x0800a396

08007db8 <__lshift>:
 8007db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	6849      	ldr	r1, [r1, #4]
 8007dc0:	6923      	ldr	r3, [r4, #16]
 8007dc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007dc6:	68a3      	ldr	r3, [r4, #8]
 8007dc8:	4607      	mov	r7, r0
 8007dca:	4691      	mov	r9, r2
 8007dcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007dd0:	f108 0601 	add.w	r6, r8, #1
 8007dd4:	42b3      	cmp	r3, r6
 8007dd6:	db0b      	blt.n	8007df0 <__lshift+0x38>
 8007dd8:	4638      	mov	r0, r7
 8007dda:	f7ff fd93 	bl	8007904 <_Balloc>
 8007dde:	4605      	mov	r5, r0
 8007de0:	b948      	cbnz	r0, 8007df6 <__lshift+0x3e>
 8007de2:	4602      	mov	r2, r0
 8007de4:	4b28      	ldr	r3, [pc, #160]	; (8007e88 <__lshift+0xd0>)
 8007de6:	4829      	ldr	r0, [pc, #164]	; (8007e8c <__lshift+0xd4>)
 8007de8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007dec:	f001 fcf0 	bl	80097d0 <__assert_func>
 8007df0:	3101      	adds	r1, #1
 8007df2:	005b      	lsls	r3, r3, #1
 8007df4:	e7ee      	b.n	8007dd4 <__lshift+0x1c>
 8007df6:	2300      	movs	r3, #0
 8007df8:	f100 0114 	add.w	r1, r0, #20
 8007dfc:	f100 0210 	add.w	r2, r0, #16
 8007e00:	4618      	mov	r0, r3
 8007e02:	4553      	cmp	r3, sl
 8007e04:	db33      	blt.n	8007e6e <__lshift+0xb6>
 8007e06:	6920      	ldr	r0, [r4, #16]
 8007e08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e0c:	f104 0314 	add.w	r3, r4, #20
 8007e10:	f019 091f 	ands.w	r9, r9, #31
 8007e14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e1c:	d02b      	beq.n	8007e76 <__lshift+0xbe>
 8007e1e:	f1c9 0e20 	rsb	lr, r9, #32
 8007e22:	468a      	mov	sl, r1
 8007e24:	2200      	movs	r2, #0
 8007e26:	6818      	ldr	r0, [r3, #0]
 8007e28:	fa00 f009 	lsl.w	r0, r0, r9
 8007e2c:	4310      	orrs	r0, r2
 8007e2e:	f84a 0b04 	str.w	r0, [sl], #4
 8007e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e36:	459c      	cmp	ip, r3
 8007e38:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e3c:	d8f3      	bhi.n	8007e26 <__lshift+0x6e>
 8007e3e:	ebac 0304 	sub.w	r3, ip, r4
 8007e42:	3b15      	subs	r3, #21
 8007e44:	f023 0303 	bic.w	r3, r3, #3
 8007e48:	3304      	adds	r3, #4
 8007e4a:	f104 0015 	add.w	r0, r4, #21
 8007e4e:	4584      	cmp	ip, r0
 8007e50:	bf38      	it	cc
 8007e52:	2304      	movcc	r3, #4
 8007e54:	50ca      	str	r2, [r1, r3]
 8007e56:	b10a      	cbz	r2, 8007e5c <__lshift+0xa4>
 8007e58:	f108 0602 	add.w	r6, r8, #2
 8007e5c:	3e01      	subs	r6, #1
 8007e5e:	4638      	mov	r0, r7
 8007e60:	612e      	str	r6, [r5, #16]
 8007e62:	4621      	mov	r1, r4
 8007e64:	f7ff fd8e 	bl	8007984 <_Bfree>
 8007e68:	4628      	mov	r0, r5
 8007e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e72:	3301      	adds	r3, #1
 8007e74:	e7c5      	b.n	8007e02 <__lshift+0x4a>
 8007e76:	3904      	subs	r1, #4
 8007e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e80:	459c      	cmp	ip, r3
 8007e82:	d8f9      	bhi.n	8007e78 <__lshift+0xc0>
 8007e84:	e7ea      	b.n	8007e5c <__lshift+0xa4>
 8007e86:	bf00      	nop
 8007e88:	0800a385 	.word	0x0800a385
 8007e8c:	0800a396 	.word	0x0800a396

08007e90 <__mcmp>:
 8007e90:	b530      	push	{r4, r5, lr}
 8007e92:	6902      	ldr	r2, [r0, #16]
 8007e94:	690c      	ldr	r4, [r1, #16]
 8007e96:	1b12      	subs	r2, r2, r4
 8007e98:	d10e      	bne.n	8007eb8 <__mcmp+0x28>
 8007e9a:	f100 0314 	add.w	r3, r0, #20
 8007e9e:	3114      	adds	r1, #20
 8007ea0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ea4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ea8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007eac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007eb0:	42a5      	cmp	r5, r4
 8007eb2:	d003      	beq.n	8007ebc <__mcmp+0x2c>
 8007eb4:	d305      	bcc.n	8007ec2 <__mcmp+0x32>
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	4610      	mov	r0, r2
 8007eba:	bd30      	pop	{r4, r5, pc}
 8007ebc:	4283      	cmp	r3, r0
 8007ebe:	d3f3      	bcc.n	8007ea8 <__mcmp+0x18>
 8007ec0:	e7fa      	b.n	8007eb8 <__mcmp+0x28>
 8007ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec6:	e7f7      	b.n	8007eb8 <__mcmp+0x28>

08007ec8 <__mdiff>:
 8007ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ecc:	460c      	mov	r4, r1
 8007ece:	4606      	mov	r6, r0
 8007ed0:	4611      	mov	r1, r2
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	4690      	mov	r8, r2
 8007ed6:	f7ff ffdb 	bl	8007e90 <__mcmp>
 8007eda:	1e05      	subs	r5, r0, #0
 8007edc:	d110      	bne.n	8007f00 <__mdiff+0x38>
 8007ede:	4629      	mov	r1, r5
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f7ff fd0f 	bl	8007904 <_Balloc>
 8007ee6:	b930      	cbnz	r0, 8007ef6 <__mdiff+0x2e>
 8007ee8:	4b3a      	ldr	r3, [pc, #232]	; (8007fd4 <__mdiff+0x10c>)
 8007eea:	4602      	mov	r2, r0
 8007eec:	f240 2137 	movw	r1, #567	; 0x237
 8007ef0:	4839      	ldr	r0, [pc, #228]	; (8007fd8 <__mdiff+0x110>)
 8007ef2:	f001 fc6d 	bl	80097d0 <__assert_func>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007efc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f00:	bfa4      	itt	ge
 8007f02:	4643      	movge	r3, r8
 8007f04:	46a0      	movge	r8, r4
 8007f06:	4630      	mov	r0, r6
 8007f08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007f0c:	bfa6      	itte	ge
 8007f0e:	461c      	movge	r4, r3
 8007f10:	2500      	movge	r5, #0
 8007f12:	2501      	movlt	r5, #1
 8007f14:	f7ff fcf6 	bl	8007904 <_Balloc>
 8007f18:	b920      	cbnz	r0, 8007f24 <__mdiff+0x5c>
 8007f1a:	4b2e      	ldr	r3, [pc, #184]	; (8007fd4 <__mdiff+0x10c>)
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	f240 2145 	movw	r1, #581	; 0x245
 8007f22:	e7e5      	b.n	8007ef0 <__mdiff+0x28>
 8007f24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007f28:	6926      	ldr	r6, [r4, #16]
 8007f2a:	60c5      	str	r5, [r0, #12]
 8007f2c:	f104 0914 	add.w	r9, r4, #20
 8007f30:	f108 0514 	add.w	r5, r8, #20
 8007f34:	f100 0e14 	add.w	lr, r0, #20
 8007f38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007f3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f40:	f108 0210 	add.w	r2, r8, #16
 8007f44:	46f2      	mov	sl, lr
 8007f46:	2100      	movs	r1, #0
 8007f48:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f50:	fa11 f88b 	uxtah	r8, r1, fp
 8007f54:	b299      	uxth	r1, r3
 8007f56:	0c1b      	lsrs	r3, r3, #16
 8007f58:	eba8 0801 	sub.w	r8, r8, r1
 8007f5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f60:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f64:	fa1f f888 	uxth.w	r8, r8
 8007f68:	1419      	asrs	r1, r3, #16
 8007f6a:	454e      	cmp	r6, r9
 8007f6c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f70:	f84a 3b04 	str.w	r3, [sl], #4
 8007f74:	d8e8      	bhi.n	8007f48 <__mdiff+0x80>
 8007f76:	1b33      	subs	r3, r6, r4
 8007f78:	3b15      	subs	r3, #21
 8007f7a:	f023 0303 	bic.w	r3, r3, #3
 8007f7e:	3304      	adds	r3, #4
 8007f80:	3415      	adds	r4, #21
 8007f82:	42a6      	cmp	r6, r4
 8007f84:	bf38      	it	cc
 8007f86:	2304      	movcc	r3, #4
 8007f88:	441d      	add	r5, r3
 8007f8a:	4473      	add	r3, lr
 8007f8c:	469e      	mov	lr, r3
 8007f8e:	462e      	mov	r6, r5
 8007f90:	4566      	cmp	r6, ip
 8007f92:	d30e      	bcc.n	8007fb2 <__mdiff+0xea>
 8007f94:	f10c 0203 	add.w	r2, ip, #3
 8007f98:	1b52      	subs	r2, r2, r5
 8007f9a:	f022 0203 	bic.w	r2, r2, #3
 8007f9e:	3d03      	subs	r5, #3
 8007fa0:	45ac      	cmp	ip, r5
 8007fa2:	bf38      	it	cc
 8007fa4:	2200      	movcc	r2, #0
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007fac:	b17a      	cbz	r2, 8007fce <__mdiff+0x106>
 8007fae:	6107      	str	r7, [r0, #16]
 8007fb0:	e7a4      	b.n	8007efc <__mdiff+0x34>
 8007fb2:	f856 8b04 	ldr.w	r8, [r6], #4
 8007fb6:	fa11 f288 	uxtah	r2, r1, r8
 8007fba:	1414      	asrs	r4, r2, #16
 8007fbc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007fc0:	b292      	uxth	r2, r2
 8007fc2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007fc6:	f84e 2b04 	str.w	r2, [lr], #4
 8007fca:	1421      	asrs	r1, r4, #16
 8007fcc:	e7e0      	b.n	8007f90 <__mdiff+0xc8>
 8007fce:	3f01      	subs	r7, #1
 8007fd0:	e7ea      	b.n	8007fa8 <__mdiff+0xe0>
 8007fd2:	bf00      	nop
 8007fd4:	0800a385 	.word	0x0800a385
 8007fd8:	0800a396 	.word	0x0800a396

08007fdc <__ulp>:
 8007fdc:	b082      	sub	sp, #8
 8007fde:	ed8d 0b00 	vstr	d0, [sp]
 8007fe2:	9a01      	ldr	r2, [sp, #4]
 8007fe4:	4b0f      	ldr	r3, [pc, #60]	; (8008024 <__ulp+0x48>)
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	dc08      	bgt.n	8008002 <__ulp+0x26>
 8007ff0:	425b      	negs	r3, r3
 8007ff2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007ff6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007ffa:	da04      	bge.n	8008006 <__ulp+0x2a>
 8007ffc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008000:	4113      	asrs	r3, r2
 8008002:	2200      	movs	r2, #0
 8008004:	e008      	b.n	8008018 <__ulp+0x3c>
 8008006:	f1a2 0314 	sub.w	r3, r2, #20
 800800a:	2b1e      	cmp	r3, #30
 800800c:	bfda      	itte	le
 800800e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008012:	40da      	lsrle	r2, r3
 8008014:	2201      	movgt	r2, #1
 8008016:	2300      	movs	r3, #0
 8008018:	4619      	mov	r1, r3
 800801a:	4610      	mov	r0, r2
 800801c:	ec41 0b10 	vmov	d0, r0, r1
 8008020:	b002      	add	sp, #8
 8008022:	4770      	bx	lr
 8008024:	7ff00000 	.word	0x7ff00000

08008028 <__b2d>:
 8008028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800802c:	6906      	ldr	r6, [r0, #16]
 800802e:	f100 0814 	add.w	r8, r0, #20
 8008032:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008036:	1f37      	subs	r7, r6, #4
 8008038:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800803c:	4610      	mov	r0, r2
 800803e:	f7ff fd53 	bl	8007ae8 <__hi0bits>
 8008042:	f1c0 0320 	rsb	r3, r0, #32
 8008046:	280a      	cmp	r0, #10
 8008048:	600b      	str	r3, [r1, #0]
 800804a:	491b      	ldr	r1, [pc, #108]	; (80080b8 <__b2d+0x90>)
 800804c:	dc15      	bgt.n	800807a <__b2d+0x52>
 800804e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008052:	fa22 f30c 	lsr.w	r3, r2, ip
 8008056:	45b8      	cmp	r8, r7
 8008058:	ea43 0501 	orr.w	r5, r3, r1
 800805c:	bf34      	ite	cc
 800805e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008062:	2300      	movcs	r3, #0
 8008064:	3015      	adds	r0, #21
 8008066:	fa02 f000 	lsl.w	r0, r2, r0
 800806a:	fa23 f30c 	lsr.w	r3, r3, ip
 800806e:	4303      	orrs	r3, r0
 8008070:	461c      	mov	r4, r3
 8008072:	ec45 4b10 	vmov	d0, r4, r5
 8008076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800807a:	45b8      	cmp	r8, r7
 800807c:	bf3a      	itte	cc
 800807e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008082:	f1a6 0708 	subcc.w	r7, r6, #8
 8008086:	2300      	movcs	r3, #0
 8008088:	380b      	subs	r0, #11
 800808a:	d012      	beq.n	80080b2 <__b2d+0x8a>
 800808c:	f1c0 0120 	rsb	r1, r0, #32
 8008090:	fa23 f401 	lsr.w	r4, r3, r1
 8008094:	4082      	lsls	r2, r0
 8008096:	4322      	orrs	r2, r4
 8008098:	4547      	cmp	r7, r8
 800809a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800809e:	bf8c      	ite	hi
 80080a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80080a4:	2200      	movls	r2, #0
 80080a6:	4083      	lsls	r3, r0
 80080a8:	40ca      	lsrs	r2, r1
 80080aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80080ae:	4313      	orrs	r3, r2
 80080b0:	e7de      	b.n	8008070 <__b2d+0x48>
 80080b2:	ea42 0501 	orr.w	r5, r2, r1
 80080b6:	e7db      	b.n	8008070 <__b2d+0x48>
 80080b8:	3ff00000 	.word	0x3ff00000

080080bc <__d2b>:
 80080bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080c0:	460f      	mov	r7, r1
 80080c2:	2101      	movs	r1, #1
 80080c4:	ec59 8b10 	vmov	r8, r9, d0
 80080c8:	4616      	mov	r6, r2
 80080ca:	f7ff fc1b 	bl	8007904 <_Balloc>
 80080ce:	4604      	mov	r4, r0
 80080d0:	b930      	cbnz	r0, 80080e0 <__d2b+0x24>
 80080d2:	4602      	mov	r2, r0
 80080d4:	4b24      	ldr	r3, [pc, #144]	; (8008168 <__d2b+0xac>)
 80080d6:	4825      	ldr	r0, [pc, #148]	; (800816c <__d2b+0xb0>)
 80080d8:	f240 310f 	movw	r1, #783	; 0x30f
 80080dc:	f001 fb78 	bl	80097d0 <__assert_func>
 80080e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80080e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080e8:	bb2d      	cbnz	r5, 8008136 <__d2b+0x7a>
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	f1b8 0300 	subs.w	r3, r8, #0
 80080f0:	d026      	beq.n	8008140 <__d2b+0x84>
 80080f2:	4668      	mov	r0, sp
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	f7ff fd17 	bl	8007b28 <__lo0bits>
 80080fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80080fe:	b1e8      	cbz	r0, 800813c <__d2b+0x80>
 8008100:	f1c0 0320 	rsb	r3, r0, #32
 8008104:	fa02 f303 	lsl.w	r3, r2, r3
 8008108:	430b      	orrs	r3, r1
 800810a:	40c2      	lsrs	r2, r0
 800810c:	6163      	str	r3, [r4, #20]
 800810e:	9201      	str	r2, [sp, #4]
 8008110:	9b01      	ldr	r3, [sp, #4]
 8008112:	61a3      	str	r3, [r4, #24]
 8008114:	2b00      	cmp	r3, #0
 8008116:	bf14      	ite	ne
 8008118:	2202      	movne	r2, #2
 800811a:	2201      	moveq	r2, #1
 800811c:	6122      	str	r2, [r4, #16]
 800811e:	b1bd      	cbz	r5, 8008150 <__d2b+0x94>
 8008120:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008124:	4405      	add	r5, r0
 8008126:	603d      	str	r5, [r7, #0]
 8008128:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800812c:	6030      	str	r0, [r6, #0]
 800812e:	4620      	mov	r0, r4
 8008130:	b003      	add	sp, #12
 8008132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800813a:	e7d6      	b.n	80080ea <__d2b+0x2e>
 800813c:	6161      	str	r1, [r4, #20]
 800813e:	e7e7      	b.n	8008110 <__d2b+0x54>
 8008140:	a801      	add	r0, sp, #4
 8008142:	f7ff fcf1 	bl	8007b28 <__lo0bits>
 8008146:	9b01      	ldr	r3, [sp, #4]
 8008148:	6163      	str	r3, [r4, #20]
 800814a:	3020      	adds	r0, #32
 800814c:	2201      	movs	r2, #1
 800814e:	e7e5      	b.n	800811c <__d2b+0x60>
 8008150:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008154:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008158:	6038      	str	r0, [r7, #0]
 800815a:	6918      	ldr	r0, [r3, #16]
 800815c:	f7ff fcc4 	bl	8007ae8 <__hi0bits>
 8008160:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008164:	e7e2      	b.n	800812c <__d2b+0x70>
 8008166:	bf00      	nop
 8008168:	0800a385 	.word	0x0800a385
 800816c:	0800a396 	.word	0x0800a396

08008170 <__ratio>:
 8008170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	4688      	mov	r8, r1
 8008176:	4669      	mov	r1, sp
 8008178:	4681      	mov	r9, r0
 800817a:	f7ff ff55 	bl	8008028 <__b2d>
 800817e:	a901      	add	r1, sp, #4
 8008180:	4640      	mov	r0, r8
 8008182:	ec55 4b10 	vmov	r4, r5, d0
 8008186:	f7ff ff4f 	bl	8008028 <__b2d>
 800818a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800818e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008192:	eba3 0c02 	sub.w	ip, r3, r2
 8008196:	e9dd 3200 	ldrd	r3, r2, [sp]
 800819a:	1a9b      	subs	r3, r3, r2
 800819c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80081a0:	ec51 0b10 	vmov	r0, r1, d0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	bfd6      	itet	le
 80081a8:	460a      	movle	r2, r1
 80081aa:	462a      	movgt	r2, r5
 80081ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80081b0:	468b      	mov	fp, r1
 80081b2:	462f      	mov	r7, r5
 80081b4:	bfd4      	ite	le
 80081b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80081ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80081be:	4620      	mov	r0, r4
 80081c0:	ee10 2a10 	vmov	r2, s0
 80081c4:	465b      	mov	r3, fp
 80081c6:	4639      	mov	r1, r7
 80081c8:	f7f8 fb48 	bl	800085c <__aeabi_ddiv>
 80081cc:	ec41 0b10 	vmov	d0, r0, r1
 80081d0:	b003      	add	sp, #12
 80081d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080081d6 <__copybits>:
 80081d6:	3901      	subs	r1, #1
 80081d8:	b570      	push	{r4, r5, r6, lr}
 80081da:	1149      	asrs	r1, r1, #5
 80081dc:	6914      	ldr	r4, [r2, #16]
 80081de:	3101      	adds	r1, #1
 80081e0:	f102 0314 	add.w	r3, r2, #20
 80081e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80081e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80081ec:	1f05      	subs	r5, r0, #4
 80081ee:	42a3      	cmp	r3, r4
 80081f0:	d30c      	bcc.n	800820c <__copybits+0x36>
 80081f2:	1aa3      	subs	r3, r4, r2
 80081f4:	3b11      	subs	r3, #17
 80081f6:	f023 0303 	bic.w	r3, r3, #3
 80081fa:	3211      	adds	r2, #17
 80081fc:	42a2      	cmp	r2, r4
 80081fe:	bf88      	it	hi
 8008200:	2300      	movhi	r3, #0
 8008202:	4418      	add	r0, r3
 8008204:	2300      	movs	r3, #0
 8008206:	4288      	cmp	r0, r1
 8008208:	d305      	bcc.n	8008216 <__copybits+0x40>
 800820a:	bd70      	pop	{r4, r5, r6, pc}
 800820c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008210:	f845 6f04 	str.w	r6, [r5, #4]!
 8008214:	e7eb      	b.n	80081ee <__copybits+0x18>
 8008216:	f840 3b04 	str.w	r3, [r0], #4
 800821a:	e7f4      	b.n	8008206 <__copybits+0x30>

0800821c <__any_on>:
 800821c:	f100 0214 	add.w	r2, r0, #20
 8008220:	6900      	ldr	r0, [r0, #16]
 8008222:	114b      	asrs	r3, r1, #5
 8008224:	4298      	cmp	r0, r3
 8008226:	b510      	push	{r4, lr}
 8008228:	db11      	blt.n	800824e <__any_on+0x32>
 800822a:	dd0a      	ble.n	8008242 <__any_on+0x26>
 800822c:	f011 011f 	ands.w	r1, r1, #31
 8008230:	d007      	beq.n	8008242 <__any_on+0x26>
 8008232:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008236:	fa24 f001 	lsr.w	r0, r4, r1
 800823a:	fa00 f101 	lsl.w	r1, r0, r1
 800823e:	428c      	cmp	r4, r1
 8008240:	d10b      	bne.n	800825a <__any_on+0x3e>
 8008242:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008246:	4293      	cmp	r3, r2
 8008248:	d803      	bhi.n	8008252 <__any_on+0x36>
 800824a:	2000      	movs	r0, #0
 800824c:	bd10      	pop	{r4, pc}
 800824e:	4603      	mov	r3, r0
 8008250:	e7f7      	b.n	8008242 <__any_on+0x26>
 8008252:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008256:	2900      	cmp	r1, #0
 8008258:	d0f5      	beq.n	8008246 <__any_on+0x2a>
 800825a:	2001      	movs	r0, #1
 800825c:	e7f6      	b.n	800824c <__any_on+0x30>

0800825e <sulp>:
 800825e:	b570      	push	{r4, r5, r6, lr}
 8008260:	4604      	mov	r4, r0
 8008262:	460d      	mov	r5, r1
 8008264:	ec45 4b10 	vmov	d0, r4, r5
 8008268:	4616      	mov	r6, r2
 800826a:	f7ff feb7 	bl	8007fdc <__ulp>
 800826e:	ec51 0b10 	vmov	r0, r1, d0
 8008272:	b17e      	cbz	r6, 8008294 <sulp+0x36>
 8008274:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008278:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800827c:	2b00      	cmp	r3, #0
 800827e:	dd09      	ble.n	8008294 <sulp+0x36>
 8008280:	051b      	lsls	r3, r3, #20
 8008282:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008286:	2400      	movs	r4, #0
 8008288:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800828c:	4622      	mov	r2, r4
 800828e:	462b      	mov	r3, r5
 8008290:	f7f8 f9ba 	bl	8000608 <__aeabi_dmul>
 8008294:	bd70      	pop	{r4, r5, r6, pc}
	...

08008298 <_strtod_l>:
 8008298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800829c:	ed2d 8b02 	vpush	{d8}
 80082a0:	b09b      	sub	sp, #108	; 0x6c
 80082a2:	4604      	mov	r4, r0
 80082a4:	9213      	str	r2, [sp, #76]	; 0x4c
 80082a6:	2200      	movs	r2, #0
 80082a8:	9216      	str	r2, [sp, #88]	; 0x58
 80082aa:	460d      	mov	r5, r1
 80082ac:	f04f 0800 	mov.w	r8, #0
 80082b0:	f04f 0900 	mov.w	r9, #0
 80082b4:	460a      	mov	r2, r1
 80082b6:	9215      	str	r2, [sp, #84]	; 0x54
 80082b8:	7811      	ldrb	r1, [r2, #0]
 80082ba:	292b      	cmp	r1, #43	; 0x2b
 80082bc:	d04c      	beq.n	8008358 <_strtod_l+0xc0>
 80082be:	d83a      	bhi.n	8008336 <_strtod_l+0x9e>
 80082c0:	290d      	cmp	r1, #13
 80082c2:	d834      	bhi.n	800832e <_strtod_l+0x96>
 80082c4:	2908      	cmp	r1, #8
 80082c6:	d834      	bhi.n	8008332 <_strtod_l+0x9a>
 80082c8:	2900      	cmp	r1, #0
 80082ca:	d03d      	beq.n	8008348 <_strtod_l+0xb0>
 80082cc:	2200      	movs	r2, #0
 80082ce:	920a      	str	r2, [sp, #40]	; 0x28
 80082d0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80082d2:	7832      	ldrb	r2, [r6, #0]
 80082d4:	2a30      	cmp	r2, #48	; 0x30
 80082d6:	f040 80b4 	bne.w	8008442 <_strtod_l+0x1aa>
 80082da:	7872      	ldrb	r2, [r6, #1]
 80082dc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80082e0:	2a58      	cmp	r2, #88	; 0x58
 80082e2:	d170      	bne.n	80083c6 <_strtod_l+0x12e>
 80082e4:	9302      	str	r3, [sp, #8]
 80082e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	ab16      	add	r3, sp, #88	; 0x58
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	4a8e      	ldr	r2, [pc, #568]	; (8008528 <_strtod_l+0x290>)
 80082f0:	ab17      	add	r3, sp, #92	; 0x5c
 80082f2:	a915      	add	r1, sp, #84	; 0x54
 80082f4:	4620      	mov	r0, r4
 80082f6:	f001 fb07 	bl	8009908 <__gethex>
 80082fa:	f010 070f 	ands.w	r7, r0, #15
 80082fe:	4605      	mov	r5, r0
 8008300:	d005      	beq.n	800830e <_strtod_l+0x76>
 8008302:	2f06      	cmp	r7, #6
 8008304:	d12a      	bne.n	800835c <_strtod_l+0xc4>
 8008306:	3601      	adds	r6, #1
 8008308:	2300      	movs	r3, #0
 800830a:	9615      	str	r6, [sp, #84]	; 0x54
 800830c:	930a      	str	r3, [sp, #40]	; 0x28
 800830e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008310:	2b00      	cmp	r3, #0
 8008312:	f040 857f 	bne.w	8008e14 <_strtod_l+0xb7c>
 8008316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008318:	b1db      	cbz	r3, 8008352 <_strtod_l+0xba>
 800831a:	4642      	mov	r2, r8
 800831c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008320:	ec43 2b10 	vmov	d0, r2, r3
 8008324:	b01b      	add	sp, #108	; 0x6c
 8008326:	ecbd 8b02 	vpop	{d8}
 800832a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832e:	2920      	cmp	r1, #32
 8008330:	d1cc      	bne.n	80082cc <_strtod_l+0x34>
 8008332:	3201      	adds	r2, #1
 8008334:	e7bf      	b.n	80082b6 <_strtod_l+0x1e>
 8008336:	292d      	cmp	r1, #45	; 0x2d
 8008338:	d1c8      	bne.n	80082cc <_strtod_l+0x34>
 800833a:	2101      	movs	r1, #1
 800833c:	910a      	str	r1, [sp, #40]	; 0x28
 800833e:	1c51      	adds	r1, r2, #1
 8008340:	9115      	str	r1, [sp, #84]	; 0x54
 8008342:	7852      	ldrb	r2, [r2, #1]
 8008344:	2a00      	cmp	r2, #0
 8008346:	d1c3      	bne.n	80082d0 <_strtod_l+0x38>
 8008348:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800834a:	9515      	str	r5, [sp, #84]	; 0x54
 800834c:	2b00      	cmp	r3, #0
 800834e:	f040 855f 	bne.w	8008e10 <_strtod_l+0xb78>
 8008352:	4642      	mov	r2, r8
 8008354:	464b      	mov	r3, r9
 8008356:	e7e3      	b.n	8008320 <_strtod_l+0x88>
 8008358:	2100      	movs	r1, #0
 800835a:	e7ef      	b.n	800833c <_strtod_l+0xa4>
 800835c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800835e:	b13a      	cbz	r2, 8008370 <_strtod_l+0xd8>
 8008360:	2135      	movs	r1, #53	; 0x35
 8008362:	a818      	add	r0, sp, #96	; 0x60
 8008364:	f7ff ff37 	bl	80081d6 <__copybits>
 8008368:	9916      	ldr	r1, [sp, #88]	; 0x58
 800836a:	4620      	mov	r0, r4
 800836c:	f7ff fb0a 	bl	8007984 <_Bfree>
 8008370:	3f01      	subs	r7, #1
 8008372:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008374:	2f04      	cmp	r7, #4
 8008376:	d806      	bhi.n	8008386 <_strtod_l+0xee>
 8008378:	e8df f007 	tbb	[pc, r7]
 800837c:	201d0314 	.word	0x201d0314
 8008380:	14          	.byte	0x14
 8008381:	00          	.byte	0x00
 8008382:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008386:	05e9      	lsls	r1, r5, #23
 8008388:	bf48      	it	mi
 800838a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800838e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008392:	0d1b      	lsrs	r3, r3, #20
 8008394:	051b      	lsls	r3, r3, #20
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1b9      	bne.n	800830e <_strtod_l+0x76>
 800839a:	f7fe fb05 	bl	80069a8 <__errno>
 800839e:	2322      	movs	r3, #34	; 0x22
 80083a0:	6003      	str	r3, [r0, #0]
 80083a2:	e7b4      	b.n	800830e <_strtod_l+0x76>
 80083a4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80083a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80083ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80083b0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80083b4:	e7e7      	b.n	8008386 <_strtod_l+0xee>
 80083b6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008530 <_strtod_l+0x298>
 80083ba:	e7e4      	b.n	8008386 <_strtod_l+0xee>
 80083bc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80083c0:	f04f 38ff 	mov.w	r8, #4294967295
 80083c4:	e7df      	b.n	8008386 <_strtod_l+0xee>
 80083c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083c8:	1c5a      	adds	r2, r3, #1
 80083ca:	9215      	str	r2, [sp, #84]	; 0x54
 80083cc:	785b      	ldrb	r3, [r3, #1]
 80083ce:	2b30      	cmp	r3, #48	; 0x30
 80083d0:	d0f9      	beq.n	80083c6 <_strtod_l+0x12e>
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d09b      	beq.n	800830e <_strtod_l+0x76>
 80083d6:	2301      	movs	r3, #1
 80083d8:	f04f 0a00 	mov.w	sl, #0
 80083dc:	9304      	str	r3, [sp, #16]
 80083de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80083e2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80083e6:	46d3      	mov	fp, sl
 80083e8:	220a      	movs	r2, #10
 80083ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 80083ec:	7806      	ldrb	r6, [r0, #0]
 80083ee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80083f2:	b2d9      	uxtb	r1, r3
 80083f4:	2909      	cmp	r1, #9
 80083f6:	d926      	bls.n	8008446 <_strtod_l+0x1ae>
 80083f8:	494c      	ldr	r1, [pc, #304]	; (800852c <_strtod_l+0x294>)
 80083fa:	2201      	movs	r2, #1
 80083fc:	f001 f98c 	bl	8009718 <strncmp>
 8008400:	2800      	cmp	r0, #0
 8008402:	d030      	beq.n	8008466 <_strtod_l+0x1ce>
 8008404:	2000      	movs	r0, #0
 8008406:	4632      	mov	r2, r6
 8008408:	9005      	str	r0, [sp, #20]
 800840a:	465e      	mov	r6, fp
 800840c:	4603      	mov	r3, r0
 800840e:	2a65      	cmp	r2, #101	; 0x65
 8008410:	d001      	beq.n	8008416 <_strtod_l+0x17e>
 8008412:	2a45      	cmp	r2, #69	; 0x45
 8008414:	d113      	bne.n	800843e <_strtod_l+0x1a6>
 8008416:	b91e      	cbnz	r6, 8008420 <_strtod_l+0x188>
 8008418:	9a04      	ldr	r2, [sp, #16]
 800841a:	4302      	orrs	r2, r0
 800841c:	d094      	beq.n	8008348 <_strtod_l+0xb0>
 800841e:	2600      	movs	r6, #0
 8008420:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008422:	1c6a      	adds	r2, r5, #1
 8008424:	9215      	str	r2, [sp, #84]	; 0x54
 8008426:	786a      	ldrb	r2, [r5, #1]
 8008428:	2a2b      	cmp	r2, #43	; 0x2b
 800842a:	d074      	beq.n	8008516 <_strtod_l+0x27e>
 800842c:	2a2d      	cmp	r2, #45	; 0x2d
 800842e:	d078      	beq.n	8008522 <_strtod_l+0x28a>
 8008430:	f04f 0c00 	mov.w	ip, #0
 8008434:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008438:	2909      	cmp	r1, #9
 800843a:	d97f      	bls.n	800853c <_strtod_l+0x2a4>
 800843c:	9515      	str	r5, [sp, #84]	; 0x54
 800843e:	2700      	movs	r7, #0
 8008440:	e09e      	b.n	8008580 <_strtod_l+0x2e8>
 8008442:	2300      	movs	r3, #0
 8008444:	e7c8      	b.n	80083d8 <_strtod_l+0x140>
 8008446:	f1bb 0f08 	cmp.w	fp, #8
 800844a:	bfd8      	it	le
 800844c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800844e:	f100 0001 	add.w	r0, r0, #1
 8008452:	bfda      	itte	le
 8008454:	fb02 3301 	mlale	r3, r2, r1, r3
 8008458:	9309      	strle	r3, [sp, #36]	; 0x24
 800845a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800845e:	f10b 0b01 	add.w	fp, fp, #1
 8008462:	9015      	str	r0, [sp, #84]	; 0x54
 8008464:	e7c1      	b.n	80083ea <_strtod_l+0x152>
 8008466:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008468:	1c5a      	adds	r2, r3, #1
 800846a:	9215      	str	r2, [sp, #84]	; 0x54
 800846c:	785a      	ldrb	r2, [r3, #1]
 800846e:	f1bb 0f00 	cmp.w	fp, #0
 8008472:	d037      	beq.n	80084e4 <_strtod_l+0x24c>
 8008474:	9005      	str	r0, [sp, #20]
 8008476:	465e      	mov	r6, fp
 8008478:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800847c:	2b09      	cmp	r3, #9
 800847e:	d912      	bls.n	80084a6 <_strtod_l+0x20e>
 8008480:	2301      	movs	r3, #1
 8008482:	e7c4      	b.n	800840e <_strtod_l+0x176>
 8008484:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	9215      	str	r2, [sp, #84]	; 0x54
 800848a:	785a      	ldrb	r2, [r3, #1]
 800848c:	3001      	adds	r0, #1
 800848e:	2a30      	cmp	r2, #48	; 0x30
 8008490:	d0f8      	beq.n	8008484 <_strtod_l+0x1ec>
 8008492:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008496:	2b08      	cmp	r3, #8
 8008498:	f200 84c1 	bhi.w	8008e1e <_strtod_l+0xb86>
 800849c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800849e:	9005      	str	r0, [sp, #20]
 80084a0:	2000      	movs	r0, #0
 80084a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80084a4:	4606      	mov	r6, r0
 80084a6:	3a30      	subs	r2, #48	; 0x30
 80084a8:	f100 0301 	add.w	r3, r0, #1
 80084ac:	d014      	beq.n	80084d8 <_strtod_l+0x240>
 80084ae:	9905      	ldr	r1, [sp, #20]
 80084b0:	4419      	add	r1, r3
 80084b2:	9105      	str	r1, [sp, #20]
 80084b4:	4633      	mov	r3, r6
 80084b6:	eb00 0c06 	add.w	ip, r0, r6
 80084ba:	210a      	movs	r1, #10
 80084bc:	4563      	cmp	r3, ip
 80084be:	d113      	bne.n	80084e8 <_strtod_l+0x250>
 80084c0:	1833      	adds	r3, r6, r0
 80084c2:	2b08      	cmp	r3, #8
 80084c4:	f106 0601 	add.w	r6, r6, #1
 80084c8:	4406      	add	r6, r0
 80084ca:	dc1a      	bgt.n	8008502 <_strtod_l+0x26a>
 80084cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084ce:	230a      	movs	r3, #10
 80084d0:	fb03 2301 	mla	r3, r3, r1, r2
 80084d4:	9309      	str	r3, [sp, #36]	; 0x24
 80084d6:	2300      	movs	r3, #0
 80084d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80084da:	1c51      	adds	r1, r2, #1
 80084dc:	9115      	str	r1, [sp, #84]	; 0x54
 80084de:	7852      	ldrb	r2, [r2, #1]
 80084e0:	4618      	mov	r0, r3
 80084e2:	e7c9      	b.n	8008478 <_strtod_l+0x1e0>
 80084e4:	4658      	mov	r0, fp
 80084e6:	e7d2      	b.n	800848e <_strtod_l+0x1f6>
 80084e8:	2b08      	cmp	r3, #8
 80084ea:	f103 0301 	add.w	r3, r3, #1
 80084ee:	dc03      	bgt.n	80084f8 <_strtod_l+0x260>
 80084f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80084f2:	434f      	muls	r7, r1
 80084f4:	9709      	str	r7, [sp, #36]	; 0x24
 80084f6:	e7e1      	b.n	80084bc <_strtod_l+0x224>
 80084f8:	2b10      	cmp	r3, #16
 80084fa:	bfd8      	it	le
 80084fc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008500:	e7dc      	b.n	80084bc <_strtod_l+0x224>
 8008502:	2e10      	cmp	r6, #16
 8008504:	bfdc      	itt	le
 8008506:	230a      	movle	r3, #10
 8008508:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800850c:	e7e3      	b.n	80084d6 <_strtod_l+0x23e>
 800850e:	2300      	movs	r3, #0
 8008510:	9305      	str	r3, [sp, #20]
 8008512:	2301      	movs	r3, #1
 8008514:	e780      	b.n	8008418 <_strtod_l+0x180>
 8008516:	f04f 0c00 	mov.w	ip, #0
 800851a:	1caa      	adds	r2, r5, #2
 800851c:	9215      	str	r2, [sp, #84]	; 0x54
 800851e:	78aa      	ldrb	r2, [r5, #2]
 8008520:	e788      	b.n	8008434 <_strtod_l+0x19c>
 8008522:	f04f 0c01 	mov.w	ip, #1
 8008526:	e7f8      	b.n	800851a <_strtod_l+0x282>
 8008528:	0800a4f0 	.word	0x0800a4f0
 800852c:	0800a4ec 	.word	0x0800a4ec
 8008530:	7ff00000 	.word	0x7ff00000
 8008534:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008536:	1c51      	adds	r1, r2, #1
 8008538:	9115      	str	r1, [sp, #84]	; 0x54
 800853a:	7852      	ldrb	r2, [r2, #1]
 800853c:	2a30      	cmp	r2, #48	; 0x30
 800853e:	d0f9      	beq.n	8008534 <_strtod_l+0x29c>
 8008540:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008544:	2908      	cmp	r1, #8
 8008546:	f63f af7a 	bhi.w	800843e <_strtod_l+0x1a6>
 800854a:	3a30      	subs	r2, #48	; 0x30
 800854c:	9208      	str	r2, [sp, #32]
 800854e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008550:	920c      	str	r2, [sp, #48]	; 0x30
 8008552:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008554:	1c57      	adds	r7, r2, #1
 8008556:	9715      	str	r7, [sp, #84]	; 0x54
 8008558:	7852      	ldrb	r2, [r2, #1]
 800855a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800855e:	f1be 0f09 	cmp.w	lr, #9
 8008562:	d938      	bls.n	80085d6 <_strtod_l+0x33e>
 8008564:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008566:	1a7f      	subs	r7, r7, r1
 8008568:	2f08      	cmp	r7, #8
 800856a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800856e:	dc03      	bgt.n	8008578 <_strtod_l+0x2e0>
 8008570:	9908      	ldr	r1, [sp, #32]
 8008572:	428f      	cmp	r7, r1
 8008574:	bfa8      	it	ge
 8008576:	460f      	movge	r7, r1
 8008578:	f1bc 0f00 	cmp.w	ip, #0
 800857c:	d000      	beq.n	8008580 <_strtod_l+0x2e8>
 800857e:	427f      	negs	r7, r7
 8008580:	2e00      	cmp	r6, #0
 8008582:	d14f      	bne.n	8008624 <_strtod_l+0x38c>
 8008584:	9904      	ldr	r1, [sp, #16]
 8008586:	4301      	orrs	r1, r0
 8008588:	f47f aec1 	bne.w	800830e <_strtod_l+0x76>
 800858c:	2b00      	cmp	r3, #0
 800858e:	f47f aedb 	bne.w	8008348 <_strtod_l+0xb0>
 8008592:	2a69      	cmp	r2, #105	; 0x69
 8008594:	d029      	beq.n	80085ea <_strtod_l+0x352>
 8008596:	dc26      	bgt.n	80085e6 <_strtod_l+0x34e>
 8008598:	2a49      	cmp	r2, #73	; 0x49
 800859a:	d026      	beq.n	80085ea <_strtod_l+0x352>
 800859c:	2a4e      	cmp	r2, #78	; 0x4e
 800859e:	f47f aed3 	bne.w	8008348 <_strtod_l+0xb0>
 80085a2:	499b      	ldr	r1, [pc, #620]	; (8008810 <_strtod_l+0x578>)
 80085a4:	a815      	add	r0, sp, #84	; 0x54
 80085a6:	f001 fbef 	bl	8009d88 <__match>
 80085aa:	2800      	cmp	r0, #0
 80085ac:	f43f aecc 	beq.w	8008348 <_strtod_l+0xb0>
 80085b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	2b28      	cmp	r3, #40	; 0x28
 80085b6:	d12f      	bne.n	8008618 <_strtod_l+0x380>
 80085b8:	4996      	ldr	r1, [pc, #600]	; (8008814 <_strtod_l+0x57c>)
 80085ba:	aa18      	add	r2, sp, #96	; 0x60
 80085bc:	a815      	add	r0, sp, #84	; 0x54
 80085be:	f001 fbf7 	bl	8009db0 <__hexnan>
 80085c2:	2805      	cmp	r0, #5
 80085c4:	d128      	bne.n	8008618 <_strtod_l+0x380>
 80085c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80085cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80085d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80085d4:	e69b      	b.n	800830e <_strtod_l+0x76>
 80085d6:	9f08      	ldr	r7, [sp, #32]
 80085d8:	210a      	movs	r1, #10
 80085da:	fb01 2107 	mla	r1, r1, r7, r2
 80085de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80085e2:	9208      	str	r2, [sp, #32]
 80085e4:	e7b5      	b.n	8008552 <_strtod_l+0x2ba>
 80085e6:	2a6e      	cmp	r2, #110	; 0x6e
 80085e8:	e7d9      	b.n	800859e <_strtod_l+0x306>
 80085ea:	498b      	ldr	r1, [pc, #556]	; (8008818 <_strtod_l+0x580>)
 80085ec:	a815      	add	r0, sp, #84	; 0x54
 80085ee:	f001 fbcb 	bl	8009d88 <__match>
 80085f2:	2800      	cmp	r0, #0
 80085f4:	f43f aea8 	beq.w	8008348 <_strtod_l+0xb0>
 80085f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085fa:	4988      	ldr	r1, [pc, #544]	; (800881c <_strtod_l+0x584>)
 80085fc:	3b01      	subs	r3, #1
 80085fe:	a815      	add	r0, sp, #84	; 0x54
 8008600:	9315      	str	r3, [sp, #84]	; 0x54
 8008602:	f001 fbc1 	bl	8009d88 <__match>
 8008606:	b910      	cbnz	r0, 800860e <_strtod_l+0x376>
 8008608:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800860a:	3301      	adds	r3, #1
 800860c:	9315      	str	r3, [sp, #84]	; 0x54
 800860e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800882c <_strtod_l+0x594>
 8008612:	f04f 0800 	mov.w	r8, #0
 8008616:	e67a      	b.n	800830e <_strtod_l+0x76>
 8008618:	4881      	ldr	r0, [pc, #516]	; (8008820 <_strtod_l+0x588>)
 800861a:	f001 f8d1 	bl	80097c0 <nan>
 800861e:	ec59 8b10 	vmov	r8, r9, d0
 8008622:	e674      	b.n	800830e <_strtod_l+0x76>
 8008624:	9b05      	ldr	r3, [sp, #20]
 8008626:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008628:	1afb      	subs	r3, r7, r3
 800862a:	f1bb 0f00 	cmp.w	fp, #0
 800862e:	bf08      	it	eq
 8008630:	46b3      	moveq	fp, r6
 8008632:	2e10      	cmp	r6, #16
 8008634:	9308      	str	r3, [sp, #32]
 8008636:	4635      	mov	r5, r6
 8008638:	bfa8      	it	ge
 800863a:	2510      	movge	r5, #16
 800863c:	f7f7 ff6a 	bl	8000514 <__aeabi_ui2d>
 8008640:	2e09      	cmp	r6, #9
 8008642:	4680      	mov	r8, r0
 8008644:	4689      	mov	r9, r1
 8008646:	dd13      	ble.n	8008670 <_strtod_l+0x3d8>
 8008648:	4b76      	ldr	r3, [pc, #472]	; (8008824 <_strtod_l+0x58c>)
 800864a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800864e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008652:	f7f7 ffd9 	bl	8000608 <__aeabi_dmul>
 8008656:	4680      	mov	r8, r0
 8008658:	4650      	mov	r0, sl
 800865a:	4689      	mov	r9, r1
 800865c:	f7f7 ff5a 	bl	8000514 <__aeabi_ui2d>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	4640      	mov	r0, r8
 8008666:	4649      	mov	r1, r9
 8008668:	f7f7 fe18 	bl	800029c <__adddf3>
 800866c:	4680      	mov	r8, r0
 800866e:	4689      	mov	r9, r1
 8008670:	2e0f      	cmp	r6, #15
 8008672:	dc38      	bgt.n	80086e6 <_strtod_l+0x44e>
 8008674:	9b08      	ldr	r3, [sp, #32]
 8008676:	2b00      	cmp	r3, #0
 8008678:	f43f ae49 	beq.w	800830e <_strtod_l+0x76>
 800867c:	dd24      	ble.n	80086c8 <_strtod_l+0x430>
 800867e:	2b16      	cmp	r3, #22
 8008680:	dc0b      	bgt.n	800869a <_strtod_l+0x402>
 8008682:	4968      	ldr	r1, [pc, #416]	; (8008824 <_strtod_l+0x58c>)
 8008684:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800868c:	4642      	mov	r2, r8
 800868e:	464b      	mov	r3, r9
 8008690:	f7f7 ffba 	bl	8000608 <__aeabi_dmul>
 8008694:	4680      	mov	r8, r0
 8008696:	4689      	mov	r9, r1
 8008698:	e639      	b.n	800830e <_strtod_l+0x76>
 800869a:	9a08      	ldr	r2, [sp, #32]
 800869c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80086a0:	4293      	cmp	r3, r2
 80086a2:	db20      	blt.n	80086e6 <_strtod_l+0x44e>
 80086a4:	4c5f      	ldr	r4, [pc, #380]	; (8008824 <_strtod_l+0x58c>)
 80086a6:	f1c6 060f 	rsb	r6, r6, #15
 80086aa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80086ae:	4642      	mov	r2, r8
 80086b0:	464b      	mov	r3, r9
 80086b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086b6:	f7f7 ffa7 	bl	8000608 <__aeabi_dmul>
 80086ba:	9b08      	ldr	r3, [sp, #32]
 80086bc:	1b9e      	subs	r6, r3, r6
 80086be:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80086c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80086c6:	e7e3      	b.n	8008690 <_strtod_l+0x3f8>
 80086c8:	9b08      	ldr	r3, [sp, #32]
 80086ca:	3316      	adds	r3, #22
 80086cc:	db0b      	blt.n	80086e6 <_strtod_l+0x44e>
 80086ce:	9b05      	ldr	r3, [sp, #20]
 80086d0:	1bdf      	subs	r7, r3, r7
 80086d2:	4b54      	ldr	r3, [pc, #336]	; (8008824 <_strtod_l+0x58c>)
 80086d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80086d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086dc:	4640      	mov	r0, r8
 80086de:	4649      	mov	r1, r9
 80086e0:	f7f8 f8bc 	bl	800085c <__aeabi_ddiv>
 80086e4:	e7d6      	b.n	8008694 <_strtod_l+0x3fc>
 80086e6:	9b08      	ldr	r3, [sp, #32]
 80086e8:	1b75      	subs	r5, r6, r5
 80086ea:	441d      	add	r5, r3
 80086ec:	2d00      	cmp	r5, #0
 80086ee:	dd70      	ble.n	80087d2 <_strtod_l+0x53a>
 80086f0:	f015 030f 	ands.w	r3, r5, #15
 80086f4:	d00a      	beq.n	800870c <_strtod_l+0x474>
 80086f6:	494b      	ldr	r1, [pc, #300]	; (8008824 <_strtod_l+0x58c>)
 80086f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086fc:	4642      	mov	r2, r8
 80086fe:	464b      	mov	r3, r9
 8008700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008704:	f7f7 ff80 	bl	8000608 <__aeabi_dmul>
 8008708:	4680      	mov	r8, r0
 800870a:	4689      	mov	r9, r1
 800870c:	f035 050f 	bics.w	r5, r5, #15
 8008710:	d04d      	beq.n	80087ae <_strtod_l+0x516>
 8008712:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008716:	dd22      	ble.n	800875e <_strtod_l+0x4c6>
 8008718:	2500      	movs	r5, #0
 800871a:	46ab      	mov	fp, r5
 800871c:	9509      	str	r5, [sp, #36]	; 0x24
 800871e:	9505      	str	r5, [sp, #20]
 8008720:	2322      	movs	r3, #34	; 0x22
 8008722:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800882c <_strtod_l+0x594>
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	f04f 0800 	mov.w	r8, #0
 800872c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800872e:	2b00      	cmp	r3, #0
 8008730:	f43f aded 	beq.w	800830e <_strtod_l+0x76>
 8008734:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008736:	4620      	mov	r0, r4
 8008738:	f7ff f924 	bl	8007984 <_Bfree>
 800873c:	9905      	ldr	r1, [sp, #20]
 800873e:	4620      	mov	r0, r4
 8008740:	f7ff f920 	bl	8007984 <_Bfree>
 8008744:	4659      	mov	r1, fp
 8008746:	4620      	mov	r0, r4
 8008748:	f7ff f91c 	bl	8007984 <_Bfree>
 800874c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800874e:	4620      	mov	r0, r4
 8008750:	f7ff f918 	bl	8007984 <_Bfree>
 8008754:	4629      	mov	r1, r5
 8008756:	4620      	mov	r0, r4
 8008758:	f7ff f914 	bl	8007984 <_Bfree>
 800875c:	e5d7      	b.n	800830e <_strtod_l+0x76>
 800875e:	4b32      	ldr	r3, [pc, #200]	; (8008828 <_strtod_l+0x590>)
 8008760:	9304      	str	r3, [sp, #16]
 8008762:	2300      	movs	r3, #0
 8008764:	112d      	asrs	r5, r5, #4
 8008766:	4640      	mov	r0, r8
 8008768:	4649      	mov	r1, r9
 800876a:	469a      	mov	sl, r3
 800876c:	2d01      	cmp	r5, #1
 800876e:	dc21      	bgt.n	80087b4 <_strtod_l+0x51c>
 8008770:	b10b      	cbz	r3, 8008776 <_strtod_l+0x4de>
 8008772:	4680      	mov	r8, r0
 8008774:	4689      	mov	r9, r1
 8008776:	492c      	ldr	r1, [pc, #176]	; (8008828 <_strtod_l+0x590>)
 8008778:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800877c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008780:	4642      	mov	r2, r8
 8008782:	464b      	mov	r3, r9
 8008784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008788:	f7f7 ff3e 	bl	8000608 <__aeabi_dmul>
 800878c:	4b27      	ldr	r3, [pc, #156]	; (800882c <_strtod_l+0x594>)
 800878e:	460a      	mov	r2, r1
 8008790:	400b      	ands	r3, r1
 8008792:	4927      	ldr	r1, [pc, #156]	; (8008830 <_strtod_l+0x598>)
 8008794:	428b      	cmp	r3, r1
 8008796:	4680      	mov	r8, r0
 8008798:	d8be      	bhi.n	8008718 <_strtod_l+0x480>
 800879a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800879e:	428b      	cmp	r3, r1
 80087a0:	bf86      	itte	hi
 80087a2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008834 <_strtod_l+0x59c>
 80087a6:	f04f 38ff 	movhi.w	r8, #4294967295
 80087aa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80087ae:	2300      	movs	r3, #0
 80087b0:	9304      	str	r3, [sp, #16]
 80087b2:	e07b      	b.n	80088ac <_strtod_l+0x614>
 80087b4:	07ea      	lsls	r2, r5, #31
 80087b6:	d505      	bpl.n	80087c4 <_strtod_l+0x52c>
 80087b8:	9b04      	ldr	r3, [sp, #16]
 80087ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087be:	f7f7 ff23 	bl	8000608 <__aeabi_dmul>
 80087c2:	2301      	movs	r3, #1
 80087c4:	9a04      	ldr	r2, [sp, #16]
 80087c6:	3208      	adds	r2, #8
 80087c8:	f10a 0a01 	add.w	sl, sl, #1
 80087cc:	106d      	asrs	r5, r5, #1
 80087ce:	9204      	str	r2, [sp, #16]
 80087d0:	e7cc      	b.n	800876c <_strtod_l+0x4d4>
 80087d2:	d0ec      	beq.n	80087ae <_strtod_l+0x516>
 80087d4:	426d      	negs	r5, r5
 80087d6:	f015 020f 	ands.w	r2, r5, #15
 80087da:	d00a      	beq.n	80087f2 <_strtod_l+0x55a>
 80087dc:	4b11      	ldr	r3, [pc, #68]	; (8008824 <_strtod_l+0x58c>)
 80087de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087e2:	4640      	mov	r0, r8
 80087e4:	4649      	mov	r1, r9
 80087e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ea:	f7f8 f837 	bl	800085c <__aeabi_ddiv>
 80087ee:	4680      	mov	r8, r0
 80087f0:	4689      	mov	r9, r1
 80087f2:	112d      	asrs	r5, r5, #4
 80087f4:	d0db      	beq.n	80087ae <_strtod_l+0x516>
 80087f6:	2d1f      	cmp	r5, #31
 80087f8:	dd1e      	ble.n	8008838 <_strtod_l+0x5a0>
 80087fa:	2500      	movs	r5, #0
 80087fc:	46ab      	mov	fp, r5
 80087fe:	9509      	str	r5, [sp, #36]	; 0x24
 8008800:	9505      	str	r5, [sp, #20]
 8008802:	2322      	movs	r3, #34	; 0x22
 8008804:	f04f 0800 	mov.w	r8, #0
 8008808:	f04f 0900 	mov.w	r9, #0
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	e78d      	b.n	800872c <_strtod_l+0x494>
 8008810:	0800a2dd 	.word	0x0800a2dd
 8008814:	0800a504 	.word	0x0800a504
 8008818:	0800a2d5 	.word	0x0800a2d5
 800881c:	0800a30c 	.word	0x0800a30c
 8008820:	0800a695 	.word	0x0800a695
 8008824:	0800a418 	.word	0x0800a418
 8008828:	0800a3f0 	.word	0x0800a3f0
 800882c:	7ff00000 	.word	0x7ff00000
 8008830:	7ca00000 	.word	0x7ca00000
 8008834:	7fefffff 	.word	0x7fefffff
 8008838:	f015 0310 	ands.w	r3, r5, #16
 800883c:	bf18      	it	ne
 800883e:	236a      	movne	r3, #106	; 0x6a
 8008840:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008be4 <_strtod_l+0x94c>
 8008844:	9304      	str	r3, [sp, #16]
 8008846:	4640      	mov	r0, r8
 8008848:	4649      	mov	r1, r9
 800884a:	2300      	movs	r3, #0
 800884c:	07ea      	lsls	r2, r5, #31
 800884e:	d504      	bpl.n	800885a <_strtod_l+0x5c2>
 8008850:	e9da 2300 	ldrd	r2, r3, [sl]
 8008854:	f7f7 fed8 	bl	8000608 <__aeabi_dmul>
 8008858:	2301      	movs	r3, #1
 800885a:	106d      	asrs	r5, r5, #1
 800885c:	f10a 0a08 	add.w	sl, sl, #8
 8008860:	d1f4      	bne.n	800884c <_strtod_l+0x5b4>
 8008862:	b10b      	cbz	r3, 8008868 <_strtod_l+0x5d0>
 8008864:	4680      	mov	r8, r0
 8008866:	4689      	mov	r9, r1
 8008868:	9b04      	ldr	r3, [sp, #16]
 800886a:	b1bb      	cbz	r3, 800889c <_strtod_l+0x604>
 800886c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008870:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008874:	2b00      	cmp	r3, #0
 8008876:	4649      	mov	r1, r9
 8008878:	dd10      	ble.n	800889c <_strtod_l+0x604>
 800887a:	2b1f      	cmp	r3, #31
 800887c:	f340 811e 	ble.w	8008abc <_strtod_l+0x824>
 8008880:	2b34      	cmp	r3, #52	; 0x34
 8008882:	bfde      	ittt	le
 8008884:	f04f 33ff 	movle.w	r3, #4294967295
 8008888:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800888c:	4093      	lslle	r3, r2
 800888e:	f04f 0800 	mov.w	r8, #0
 8008892:	bfcc      	ite	gt
 8008894:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008898:	ea03 0901 	andle.w	r9, r3, r1
 800889c:	2200      	movs	r2, #0
 800889e:	2300      	movs	r3, #0
 80088a0:	4640      	mov	r0, r8
 80088a2:	4649      	mov	r1, r9
 80088a4:	f7f8 f918 	bl	8000ad8 <__aeabi_dcmpeq>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d1a6      	bne.n	80087fa <_strtod_l+0x562>
 80088ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088b2:	4633      	mov	r3, r6
 80088b4:	465a      	mov	r2, fp
 80088b6:	4620      	mov	r0, r4
 80088b8:	f7ff f8cc 	bl	8007a54 <__s2b>
 80088bc:	9009      	str	r0, [sp, #36]	; 0x24
 80088be:	2800      	cmp	r0, #0
 80088c0:	f43f af2a 	beq.w	8008718 <_strtod_l+0x480>
 80088c4:	9a08      	ldr	r2, [sp, #32]
 80088c6:	9b05      	ldr	r3, [sp, #20]
 80088c8:	2a00      	cmp	r2, #0
 80088ca:	eba3 0307 	sub.w	r3, r3, r7
 80088ce:	bfa8      	it	ge
 80088d0:	2300      	movge	r3, #0
 80088d2:	930c      	str	r3, [sp, #48]	; 0x30
 80088d4:	2500      	movs	r5, #0
 80088d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80088da:	9312      	str	r3, [sp, #72]	; 0x48
 80088dc:	46ab      	mov	fp, r5
 80088de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e0:	4620      	mov	r0, r4
 80088e2:	6859      	ldr	r1, [r3, #4]
 80088e4:	f7ff f80e 	bl	8007904 <_Balloc>
 80088e8:	9005      	str	r0, [sp, #20]
 80088ea:	2800      	cmp	r0, #0
 80088ec:	f43f af18 	beq.w	8008720 <_strtod_l+0x488>
 80088f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f2:	691a      	ldr	r2, [r3, #16]
 80088f4:	3202      	adds	r2, #2
 80088f6:	f103 010c 	add.w	r1, r3, #12
 80088fa:	0092      	lsls	r2, r2, #2
 80088fc:	300c      	adds	r0, #12
 80088fe:	f000 ff4f 	bl	80097a0 <memcpy>
 8008902:	ec49 8b10 	vmov	d0, r8, r9
 8008906:	aa18      	add	r2, sp, #96	; 0x60
 8008908:	a917      	add	r1, sp, #92	; 0x5c
 800890a:	4620      	mov	r0, r4
 800890c:	f7ff fbd6 	bl	80080bc <__d2b>
 8008910:	ec49 8b18 	vmov	d8, r8, r9
 8008914:	9016      	str	r0, [sp, #88]	; 0x58
 8008916:	2800      	cmp	r0, #0
 8008918:	f43f af02 	beq.w	8008720 <_strtod_l+0x488>
 800891c:	2101      	movs	r1, #1
 800891e:	4620      	mov	r0, r4
 8008920:	f7ff f930 	bl	8007b84 <__i2b>
 8008924:	4683      	mov	fp, r0
 8008926:	2800      	cmp	r0, #0
 8008928:	f43f aefa 	beq.w	8008720 <_strtod_l+0x488>
 800892c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800892e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008930:	2e00      	cmp	r6, #0
 8008932:	bfab      	itete	ge
 8008934:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008936:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008938:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800893a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800893e:	bfac      	ite	ge
 8008940:	eb06 0a03 	addge.w	sl, r6, r3
 8008944:	1b9f      	sublt	r7, r3, r6
 8008946:	9b04      	ldr	r3, [sp, #16]
 8008948:	1af6      	subs	r6, r6, r3
 800894a:	4416      	add	r6, r2
 800894c:	4ba0      	ldr	r3, [pc, #640]	; (8008bd0 <_strtod_l+0x938>)
 800894e:	3e01      	subs	r6, #1
 8008950:	429e      	cmp	r6, r3
 8008952:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008956:	f280 80c4 	bge.w	8008ae2 <_strtod_l+0x84a>
 800895a:	1b9b      	subs	r3, r3, r6
 800895c:	2b1f      	cmp	r3, #31
 800895e:	eba2 0203 	sub.w	r2, r2, r3
 8008962:	f04f 0101 	mov.w	r1, #1
 8008966:	f300 80b0 	bgt.w	8008aca <_strtod_l+0x832>
 800896a:	fa01 f303 	lsl.w	r3, r1, r3
 800896e:	930e      	str	r3, [sp, #56]	; 0x38
 8008970:	2300      	movs	r3, #0
 8008972:	930d      	str	r3, [sp, #52]	; 0x34
 8008974:	eb0a 0602 	add.w	r6, sl, r2
 8008978:	9b04      	ldr	r3, [sp, #16]
 800897a:	45b2      	cmp	sl, r6
 800897c:	4417      	add	r7, r2
 800897e:	441f      	add	r7, r3
 8008980:	4653      	mov	r3, sl
 8008982:	bfa8      	it	ge
 8008984:	4633      	movge	r3, r6
 8008986:	42bb      	cmp	r3, r7
 8008988:	bfa8      	it	ge
 800898a:	463b      	movge	r3, r7
 800898c:	2b00      	cmp	r3, #0
 800898e:	bfc2      	ittt	gt
 8008990:	1af6      	subgt	r6, r6, r3
 8008992:	1aff      	subgt	r7, r7, r3
 8008994:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800899a:	2b00      	cmp	r3, #0
 800899c:	dd17      	ble.n	80089ce <_strtod_l+0x736>
 800899e:	4659      	mov	r1, fp
 80089a0:	461a      	mov	r2, r3
 80089a2:	4620      	mov	r0, r4
 80089a4:	f7ff f9ae 	bl	8007d04 <__pow5mult>
 80089a8:	4683      	mov	fp, r0
 80089aa:	2800      	cmp	r0, #0
 80089ac:	f43f aeb8 	beq.w	8008720 <_strtod_l+0x488>
 80089b0:	4601      	mov	r1, r0
 80089b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80089b4:	4620      	mov	r0, r4
 80089b6:	f7ff f8fb 	bl	8007bb0 <__multiply>
 80089ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80089bc:	2800      	cmp	r0, #0
 80089be:	f43f aeaf 	beq.w	8008720 <_strtod_l+0x488>
 80089c2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80089c4:	4620      	mov	r0, r4
 80089c6:	f7fe ffdd 	bl	8007984 <_Bfree>
 80089ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089cc:	9316      	str	r3, [sp, #88]	; 0x58
 80089ce:	2e00      	cmp	r6, #0
 80089d0:	f300 808c 	bgt.w	8008aec <_strtod_l+0x854>
 80089d4:	9b08      	ldr	r3, [sp, #32]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	dd08      	ble.n	80089ec <_strtod_l+0x754>
 80089da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089dc:	9905      	ldr	r1, [sp, #20]
 80089de:	4620      	mov	r0, r4
 80089e0:	f7ff f990 	bl	8007d04 <__pow5mult>
 80089e4:	9005      	str	r0, [sp, #20]
 80089e6:	2800      	cmp	r0, #0
 80089e8:	f43f ae9a 	beq.w	8008720 <_strtod_l+0x488>
 80089ec:	2f00      	cmp	r7, #0
 80089ee:	dd08      	ble.n	8008a02 <_strtod_l+0x76a>
 80089f0:	9905      	ldr	r1, [sp, #20]
 80089f2:	463a      	mov	r2, r7
 80089f4:	4620      	mov	r0, r4
 80089f6:	f7ff f9df 	bl	8007db8 <__lshift>
 80089fa:	9005      	str	r0, [sp, #20]
 80089fc:	2800      	cmp	r0, #0
 80089fe:	f43f ae8f 	beq.w	8008720 <_strtod_l+0x488>
 8008a02:	f1ba 0f00 	cmp.w	sl, #0
 8008a06:	dd08      	ble.n	8008a1a <_strtod_l+0x782>
 8008a08:	4659      	mov	r1, fp
 8008a0a:	4652      	mov	r2, sl
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f7ff f9d3 	bl	8007db8 <__lshift>
 8008a12:	4683      	mov	fp, r0
 8008a14:	2800      	cmp	r0, #0
 8008a16:	f43f ae83 	beq.w	8008720 <_strtod_l+0x488>
 8008a1a:	9a05      	ldr	r2, [sp, #20]
 8008a1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f7ff fa52 	bl	8007ec8 <__mdiff>
 8008a24:	4605      	mov	r5, r0
 8008a26:	2800      	cmp	r0, #0
 8008a28:	f43f ae7a 	beq.w	8008720 <_strtod_l+0x488>
 8008a2c:	68c3      	ldr	r3, [r0, #12]
 8008a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a30:	2300      	movs	r3, #0
 8008a32:	60c3      	str	r3, [r0, #12]
 8008a34:	4659      	mov	r1, fp
 8008a36:	f7ff fa2b 	bl	8007e90 <__mcmp>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	da60      	bge.n	8008b00 <_strtod_l+0x868>
 8008a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a40:	ea53 0308 	orrs.w	r3, r3, r8
 8008a44:	f040 8084 	bne.w	8008b50 <_strtod_l+0x8b8>
 8008a48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d17f      	bne.n	8008b50 <_strtod_l+0x8b8>
 8008a50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a54:	0d1b      	lsrs	r3, r3, #20
 8008a56:	051b      	lsls	r3, r3, #20
 8008a58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008a5c:	d978      	bls.n	8008b50 <_strtod_l+0x8b8>
 8008a5e:	696b      	ldr	r3, [r5, #20]
 8008a60:	b913      	cbnz	r3, 8008a68 <_strtod_l+0x7d0>
 8008a62:	692b      	ldr	r3, [r5, #16]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	dd73      	ble.n	8008b50 <_strtod_l+0x8b8>
 8008a68:	4629      	mov	r1, r5
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f7ff f9a3 	bl	8007db8 <__lshift>
 8008a72:	4659      	mov	r1, fp
 8008a74:	4605      	mov	r5, r0
 8008a76:	f7ff fa0b 	bl	8007e90 <__mcmp>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	dd68      	ble.n	8008b50 <_strtod_l+0x8b8>
 8008a7e:	9904      	ldr	r1, [sp, #16]
 8008a80:	4a54      	ldr	r2, [pc, #336]	; (8008bd4 <_strtod_l+0x93c>)
 8008a82:	464b      	mov	r3, r9
 8008a84:	2900      	cmp	r1, #0
 8008a86:	f000 8084 	beq.w	8008b92 <_strtod_l+0x8fa>
 8008a8a:	ea02 0109 	and.w	r1, r2, r9
 8008a8e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008a92:	dc7e      	bgt.n	8008b92 <_strtod_l+0x8fa>
 8008a94:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008a98:	f77f aeb3 	ble.w	8008802 <_strtod_l+0x56a>
 8008a9c:	4b4e      	ldr	r3, [pc, #312]	; (8008bd8 <_strtod_l+0x940>)
 8008a9e:	4640      	mov	r0, r8
 8008aa0:	4649      	mov	r1, r9
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f7f7 fdb0 	bl	8000608 <__aeabi_dmul>
 8008aa8:	4b4a      	ldr	r3, [pc, #296]	; (8008bd4 <_strtod_l+0x93c>)
 8008aaa:	400b      	ands	r3, r1
 8008aac:	4680      	mov	r8, r0
 8008aae:	4689      	mov	r9, r1
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f47f ae3f 	bne.w	8008734 <_strtod_l+0x49c>
 8008ab6:	2322      	movs	r3, #34	; 0x22
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	e63b      	b.n	8008734 <_strtod_l+0x49c>
 8008abc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac4:	ea03 0808 	and.w	r8, r3, r8
 8008ac8:	e6e8      	b.n	800889c <_strtod_l+0x604>
 8008aca:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008ace:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008ad2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008ad6:	36e2      	adds	r6, #226	; 0xe2
 8008ad8:	fa01 f306 	lsl.w	r3, r1, r6
 8008adc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008ae0:	e748      	b.n	8008974 <_strtod_l+0x6dc>
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008aea:	e743      	b.n	8008974 <_strtod_l+0x6dc>
 8008aec:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008aee:	4632      	mov	r2, r6
 8008af0:	4620      	mov	r0, r4
 8008af2:	f7ff f961 	bl	8007db8 <__lshift>
 8008af6:	9016      	str	r0, [sp, #88]	; 0x58
 8008af8:	2800      	cmp	r0, #0
 8008afa:	f47f af6b 	bne.w	80089d4 <_strtod_l+0x73c>
 8008afe:	e60f      	b.n	8008720 <_strtod_l+0x488>
 8008b00:	46ca      	mov	sl, r9
 8008b02:	d171      	bne.n	8008be8 <_strtod_l+0x950>
 8008b04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b06:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b0a:	b352      	cbz	r2, 8008b62 <_strtod_l+0x8ca>
 8008b0c:	4a33      	ldr	r2, [pc, #204]	; (8008bdc <_strtod_l+0x944>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d12a      	bne.n	8008b68 <_strtod_l+0x8d0>
 8008b12:	9b04      	ldr	r3, [sp, #16]
 8008b14:	4641      	mov	r1, r8
 8008b16:	b1fb      	cbz	r3, 8008b58 <_strtod_l+0x8c0>
 8008b18:	4b2e      	ldr	r3, [pc, #184]	; (8008bd4 <_strtod_l+0x93c>)
 8008b1a:	ea09 0303 	and.w	r3, r9, r3
 8008b1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008b22:	f04f 32ff 	mov.w	r2, #4294967295
 8008b26:	d81a      	bhi.n	8008b5e <_strtod_l+0x8c6>
 8008b28:	0d1b      	lsrs	r3, r3, #20
 8008b2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b32:	4299      	cmp	r1, r3
 8008b34:	d118      	bne.n	8008b68 <_strtod_l+0x8d0>
 8008b36:	4b2a      	ldr	r3, [pc, #168]	; (8008be0 <_strtod_l+0x948>)
 8008b38:	459a      	cmp	sl, r3
 8008b3a:	d102      	bne.n	8008b42 <_strtod_l+0x8aa>
 8008b3c:	3101      	adds	r1, #1
 8008b3e:	f43f adef 	beq.w	8008720 <_strtod_l+0x488>
 8008b42:	4b24      	ldr	r3, [pc, #144]	; (8008bd4 <_strtod_l+0x93c>)
 8008b44:	ea0a 0303 	and.w	r3, sl, r3
 8008b48:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008b4c:	f04f 0800 	mov.w	r8, #0
 8008b50:	9b04      	ldr	r3, [sp, #16]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1a2      	bne.n	8008a9c <_strtod_l+0x804>
 8008b56:	e5ed      	b.n	8008734 <_strtod_l+0x49c>
 8008b58:	f04f 33ff 	mov.w	r3, #4294967295
 8008b5c:	e7e9      	b.n	8008b32 <_strtod_l+0x89a>
 8008b5e:	4613      	mov	r3, r2
 8008b60:	e7e7      	b.n	8008b32 <_strtod_l+0x89a>
 8008b62:	ea53 0308 	orrs.w	r3, r3, r8
 8008b66:	d08a      	beq.n	8008a7e <_strtod_l+0x7e6>
 8008b68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b6a:	b1e3      	cbz	r3, 8008ba6 <_strtod_l+0x90e>
 8008b6c:	ea13 0f0a 	tst.w	r3, sl
 8008b70:	d0ee      	beq.n	8008b50 <_strtod_l+0x8b8>
 8008b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b74:	9a04      	ldr	r2, [sp, #16]
 8008b76:	4640      	mov	r0, r8
 8008b78:	4649      	mov	r1, r9
 8008b7a:	b1c3      	cbz	r3, 8008bae <_strtod_l+0x916>
 8008b7c:	f7ff fb6f 	bl	800825e <sulp>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	ec51 0b18 	vmov	r0, r1, d8
 8008b88:	f7f7 fb88 	bl	800029c <__adddf3>
 8008b8c:	4680      	mov	r8, r0
 8008b8e:	4689      	mov	r9, r1
 8008b90:	e7de      	b.n	8008b50 <_strtod_l+0x8b8>
 8008b92:	4013      	ands	r3, r2
 8008b94:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008b98:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008b9c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008ba0:	f04f 38ff 	mov.w	r8, #4294967295
 8008ba4:	e7d4      	b.n	8008b50 <_strtod_l+0x8b8>
 8008ba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ba8:	ea13 0f08 	tst.w	r3, r8
 8008bac:	e7e0      	b.n	8008b70 <_strtod_l+0x8d8>
 8008bae:	f7ff fb56 	bl	800825e <sulp>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	ec51 0b18 	vmov	r0, r1, d8
 8008bba:	f7f7 fb6d 	bl	8000298 <__aeabi_dsub>
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	4680      	mov	r8, r0
 8008bc4:	4689      	mov	r9, r1
 8008bc6:	f7f7 ff87 	bl	8000ad8 <__aeabi_dcmpeq>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d0c0      	beq.n	8008b50 <_strtod_l+0x8b8>
 8008bce:	e618      	b.n	8008802 <_strtod_l+0x56a>
 8008bd0:	fffffc02 	.word	0xfffffc02
 8008bd4:	7ff00000 	.word	0x7ff00000
 8008bd8:	39500000 	.word	0x39500000
 8008bdc:	000fffff 	.word	0x000fffff
 8008be0:	7fefffff 	.word	0x7fefffff
 8008be4:	0800a518 	.word	0x0800a518
 8008be8:	4659      	mov	r1, fp
 8008bea:	4628      	mov	r0, r5
 8008bec:	f7ff fac0 	bl	8008170 <__ratio>
 8008bf0:	ec57 6b10 	vmov	r6, r7, d0
 8008bf4:	ee10 0a10 	vmov	r0, s0
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008bfe:	4639      	mov	r1, r7
 8008c00:	f7f7 ff7e 	bl	8000b00 <__aeabi_dcmple>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d071      	beq.n	8008cec <_strtod_l+0xa54>
 8008c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d17c      	bne.n	8008d08 <_strtod_l+0xa70>
 8008c0e:	f1b8 0f00 	cmp.w	r8, #0
 8008c12:	d15a      	bne.n	8008cca <_strtod_l+0xa32>
 8008c14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d15d      	bne.n	8008cd8 <_strtod_l+0xa40>
 8008c1c:	4b90      	ldr	r3, [pc, #576]	; (8008e60 <_strtod_l+0xbc8>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	4630      	mov	r0, r6
 8008c22:	4639      	mov	r1, r7
 8008c24:	f7f7 ff62 	bl	8000aec <__aeabi_dcmplt>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d15c      	bne.n	8008ce6 <_strtod_l+0xa4e>
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	4639      	mov	r1, r7
 8008c30:	4b8c      	ldr	r3, [pc, #560]	; (8008e64 <_strtod_l+0xbcc>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	f7f7 fce8 	bl	8000608 <__aeabi_dmul>
 8008c38:	4606      	mov	r6, r0
 8008c3a:	460f      	mov	r7, r1
 8008c3c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008c40:	9606      	str	r6, [sp, #24]
 8008c42:	9307      	str	r3, [sp, #28]
 8008c44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c48:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008c4c:	4b86      	ldr	r3, [pc, #536]	; (8008e68 <_strtod_l+0xbd0>)
 8008c4e:	ea0a 0303 	and.w	r3, sl, r3
 8008c52:	930d      	str	r3, [sp, #52]	; 0x34
 8008c54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c56:	4b85      	ldr	r3, [pc, #532]	; (8008e6c <_strtod_l+0xbd4>)
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	f040 8090 	bne.w	8008d7e <_strtod_l+0xae6>
 8008c5e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008c62:	ec49 8b10 	vmov	d0, r8, r9
 8008c66:	f7ff f9b9 	bl	8007fdc <__ulp>
 8008c6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c6e:	ec51 0b10 	vmov	r0, r1, d0
 8008c72:	f7f7 fcc9 	bl	8000608 <__aeabi_dmul>
 8008c76:	4642      	mov	r2, r8
 8008c78:	464b      	mov	r3, r9
 8008c7a:	f7f7 fb0f 	bl	800029c <__adddf3>
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4979      	ldr	r1, [pc, #484]	; (8008e68 <_strtod_l+0xbd0>)
 8008c82:	4a7b      	ldr	r2, [pc, #492]	; (8008e70 <_strtod_l+0xbd8>)
 8008c84:	4019      	ands	r1, r3
 8008c86:	4291      	cmp	r1, r2
 8008c88:	4680      	mov	r8, r0
 8008c8a:	d944      	bls.n	8008d16 <_strtod_l+0xa7e>
 8008c8c:	ee18 2a90 	vmov	r2, s17
 8008c90:	4b78      	ldr	r3, [pc, #480]	; (8008e74 <_strtod_l+0xbdc>)
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d104      	bne.n	8008ca0 <_strtod_l+0xa08>
 8008c96:	ee18 3a10 	vmov	r3, s16
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	f43f ad40 	beq.w	8008720 <_strtod_l+0x488>
 8008ca0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008e74 <_strtod_l+0xbdc>
 8008ca4:	f04f 38ff 	mov.w	r8, #4294967295
 8008ca8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008caa:	4620      	mov	r0, r4
 8008cac:	f7fe fe6a 	bl	8007984 <_Bfree>
 8008cb0:	9905      	ldr	r1, [sp, #20]
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f7fe fe66 	bl	8007984 <_Bfree>
 8008cb8:	4659      	mov	r1, fp
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f7fe fe62 	bl	8007984 <_Bfree>
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f7fe fe5e 	bl	8007984 <_Bfree>
 8008cc8:	e609      	b.n	80088de <_strtod_l+0x646>
 8008cca:	f1b8 0f01 	cmp.w	r8, #1
 8008cce:	d103      	bne.n	8008cd8 <_strtod_l+0xa40>
 8008cd0:	f1b9 0f00 	cmp.w	r9, #0
 8008cd4:	f43f ad95 	beq.w	8008802 <_strtod_l+0x56a>
 8008cd8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008e30 <_strtod_l+0xb98>
 8008cdc:	4f60      	ldr	r7, [pc, #384]	; (8008e60 <_strtod_l+0xbc8>)
 8008cde:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ce2:	2600      	movs	r6, #0
 8008ce4:	e7ae      	b.n	8008c44 <_strtod_l+0x9ac>
 8008ce6:	4f5f      	ldr	r7, [pc, #380]	; (8008e64 <_strtod_l+0xbcc>)
 8008ce8:	2600      	movs	r6, #0
 8008cea:	e7a7      	b.n	8008c3c <_strtod_l+0x9a4>
 8008cec:	4b5d      	ldr	r3, [pc, #372]	; (8008e64 <_strtod_l+0xbcc>)
 8008cee:	4630      	mov	r0, r6
 8008cf0:	4639      	mov	r1, r7
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f7f7 fc88 	bl	8000608 <__aeabi_dmul>
 8008cf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	460f      	mov	r7, r1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d09c      	beq.n	8008c3c <_strtod_l+0x9a4>
 8008d02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008d06:	e79d      	b.n	8008c44 <_strtod_l+0x9ac>
 8008d08:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008e38 <_strtod_l+0xba0>
 8008d0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d10:	ec57 6b17 	vmov	r6, r7, d7
 8008d14:	e796      	b.n	8008c44 <_strtod_l+0x9ac>
 8008d16:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008d1a:	9b04      	ldr	r3, [sp, #16]
 8008d1c:	46ca      	mov	sl, r9
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1c2      	bne.n	8008ca8 <_strtod_l+0xa10>
 8008d22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d28:	0d1b      	lsrs	r3, r3, #20
 8008d2a:	051b      	lsls	r3, r3, #20
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d1bb      	bne.n	8008ca8 <_strtod_l+0xa10>
 8008d30:	4630      	mov	r0, r6
 8008d32:	4639      	mov	r1, r7
 8008d34:	f7f7 ffb0 	bl	8000c98 <__aeabi_d2lz>
 8008d38:	f7f7 fc38 	bl	80005ac <__aeabi_l2d>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	4630      	mov	r0, r6
 8008d42:	4639      	mov	r1, r7
 8008d44:	f7f7 faa8 	bl	8000298 <__aeabi_dsub>
 8008d48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d4e:	ea43 0308 	orr.w	r3, r3, r8
 8008d52:	4313      	orrs	r3, r2
 8008d54:	4606      	mov	r6, r0
 8008d56:	460f      	mov	r7, r1
 8008d58:	d054      	beq.n	8008e04 <_strtod_l+0xb6c>
 8008d5a:	a339      	add	r3, pc, #228	; (adr r3, 8008e40 <_strtod_l+0xba8>)
 8008d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d60:	f7f7 fec4 	bl	8000aec <__aeabi_dcmplt>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	f47f ace5 	bne.w	8008734 <_strtod_l+0x49c>
 8008d6a:	a337      	add	r3, pc, #220	; (adr r3, 8008e48 <_strtod_l+0xbb0>)
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	4630      	mov	r0, r6
 8008d72:	4639      	mov	r1, r7
 8008d74:	f7f7 fed8 	bl	8000b28 <__aeabi_dcmpgt>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d095      	beq.n	8008ca8 <_strtod_l+0xa10>
 8008d7c:	e4da      	b.n	8008734 <_strtod_l+0x49c>
 8008d7e:	9b04      	ldr	r3, [sp, #16]
 8008d80:	b333      	cbz	r3, 8008dd0 <_strtod_l+0xb38>
 8008d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d84:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d88:	d822      	bhi.n	8008dd0 <_strtod_l+0xb38>
 8008d8a:	a331      	add	r3, pc, #196	; (adr r3, 8008e50 <_strtod_l+0xbb8>)
 8008d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d90:	4630      	mov	r0, r6
 8008d92:	4639      	mov	r1, r7
 8008d94:	f7f7 feb4 	bl	8000b00 <__aeabi_dcmple>
 8008d98:	b1a0      	cbz	r0, 8008dc4 <_strtod_l+0xb2c>
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	f7f7 ff0b 	bl	8000bb8 <__aeabi_d2uiz>
 8008da2:	2801      	cmp	r0, #1
 8008da4:	bf38      	it	cc
 8008da6:	2001      	movcc	r0, #1
 8008da8:	f7f7 fbb4 	bl	8000514 <__aeabi_ui2d>
 8008dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dae:	4606      	mov	r6, r0
 8008db0:	460f      	mov	r7, r1
 8008db2:	bb23      	cbnz	r3, 8008dfe <_strtod_l+0xb66>
 8008db4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008db8:	9010      	str	r0, [sp, #64]	; 0x40
 8008dba:	9311      	str	r3, [sp, #68]	; 0x44
 8008dbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008dc0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008dc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008dc8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008dcc:	1a9b      	subs	r3, r3, r2
 8008dce:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dd0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008dd4:	eeb0 0a48 	vmov.f32	s0, s16
 8008dd8:	eef0 0a68 	vmov.f32	s1, s17
 8008ddc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008de0:	f7ff f8fc 	bl	8007fdc <__ulp>
 8008de4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008de8:	ec53 2b10 	vmov	r2, r3, d0
 8008dec:	f7f7 fc0c 	bl	8000608 <__aeabi_dmul>
 8008df0:	ec53 2b18 	vmov	r2, r3, d8
 8008df4:	f7f7 fa52 	bl	800029c <__adddf3>
 8008df8:	4680      	mov	r8, r0
 8008dfa:	4689      	mov	r9, r1
 8008dfc:	e78d      	b.n	8008d1a <_strtod_l+0xa82>
 8008dfe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008e02:	e7db      	b.n	8008dbc <_strtod_l+0xb24>
 8008e04:	a314      	add	r3, pc, #80	; (adr r3, 8008e58 <_strtod_l+0xbc0>)
 8008e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0a:	f7f7 fe6f 	bl	8000aec <__aeabi_dcmplt>
 8008e0e:	e7b3      	b.n	8008d78 <_strtod_l+0xae0>
 8008e10:	2300      	movs	r3, #0
 8008e12:	930a      	str	r3, [sp, #40]	; 0x28
 8008e14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e18:	6013      	str	r3, [r2, #0]
 8008e1a:	f7ff ba7c 	b.w	8008316 <_strtod_l+0x7e>
 8008e1e:	2a65      	cmp	r2, #101	; 0x65
 8008e20:	f43f ab75 	beq.w	800850e <_strtod_l+0x276>
 8008e24:	2a45      	cmp	r2, #69	; 0x45
 8008e26:	f43f ab72 	beq.w	800850e <_strtod_l+0x276>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	f7ff bbaa 	b.w	8008584 <_strtod_l+0x2ec>
 8008e30:	00000000 	.word	0x00000000
 8008e34:	bff00000 	.word	0xbff00000
 8008e38:	00000000 	.word	0x00000000
 8008e3c:	3ff00000 	.word	0x3ff00000
 8008e40:	94a03595 	.word	0x94a03595
 8008e44:	3fdfffff 	.word	0x3fdfffff
 8008e48:	35afe535 	.word	0x35afe535
 8008e4c:	3fe00000 	.word	0x3fe00000
 8008e50:	ffc00000 	.word	0xffc00000
 8008e54:	41dfffff 	.word	0x41dfffff
 8008e58:	94a03595 	.word	0x94a03595
 8008e5c:	3fcfffff 	.word	0x3fcfffff
 8008e60:	3ff00000 	.word	0x3ff00000
 8008e64:	3fe00000 	.word	0x3fe00000
 8008e68:	7ff00000 	.word	0x7ff00000
 8008e6c:	7fe00000 	.word	0x7fe00000
 8008e70:	7c9fffff 	.word	0x7c9fffff
 8008e74:	7fefffff 	.word	0x7fefffff

08008e78 <_strtod_r>:
 8008e78:	4b01      	ldr	r3, [pc, #4]	; (8008e80 <_strtod_r+0x8>)
 8008e7a:	f7ff ba0d 	b.w	8008298 <_strtod_l>
 8008e7e:	bf00      	nop
 8008e80:	20000078 	.word	0x20000078

08008e84 <_strtol_l.constprop.0>:
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e8a:	d001      	beq.n	8008e90 <_strtol_l.constprop.0+0xc>
 8008e8c:	2b24      	cmp	r3, #36	; 0x24
 8008e8e:	d906      	bls.n	8008e9e <_strtol_l.constprop.0+0x1a>
 8008e90:	f7fd fd8a 	bl	80069a8 <__errno>
 8008e94:	2316      	movs	r3, #22
 8008e96:	6003      	str	r3, [r0, #0]
 8008e98:	2000      	movs	r0, #0
 8008e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e9e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008f84 <_strtol_l.constprop.0+0x100>
 8008ea2:	460d      	mov	r5, r1
 8008ea4:	462e      	mov	r6, r5
 8008ea6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008eaa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008eae:	f017 0708 	ands.w	r7, r7, #8
 8008eb2:	d1f7      	bne.n	8008ea4 <_strtol_l.constprop.0+0x20>
 8008eb4:	2c2d      	cmp	r4, #45	; 0x2d
 8008eb6:	d132      	bne.n	8008f1e <_strtol_l.constprop.0+0x9a>
 8008eb8:	782c      	ldrb	r4, [r5, #0]
 8008eba:	2701      	movs	r7, #1
 8008ebc:	1cb5      	adds	r5, r6, #2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d05b      	beq.n	8008f7a <_strtol_l.constprop.0+0xf6>
 8008ec2:	2b10      	cmp	r3, #16
 8008ec4:	d109      	bne.n	8008eda <_strtol_l.constprop.0+0x56>
 8008ec6:	2c30      	cmp	r4, #48	; 0x30
 8008ec8:	d107      	bne.n	8008eda <_strtol_l.constprop.0+0x56>
 8008eca:	782c      	ldrb	r4, [r5, #0]
 8008ecc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008ed0:	2c58      	cmp	r4, #88	; 0x58
 8008ed2:	d14d      	bne.n	8008f70 <_strtol_l.constprop.0+0xec>
 8008ed4:	786c      	ldrb	r4, [r5, #1]
 8008ed6:	2310      	movs	r3, #16
 8008ed8:	3502      	adds	r5, #2
 8008eda:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008ede:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ee2:	f04f 0e00 	mov.w	lr, #0
 8008ee6:	fbb8 f9f3 	udiv	r9, r8, r3
 8008eea:	4676      	mov	r6, lr
 8008eec:	fb03 8a19 	mls	sl, r3, r9, r8
 8008ef0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008ef4:	f1bc 0f09 	cmp.w	ip, #9
 8008ef8:	d816      	bhi.n	8008f28 <_strtol_l.constprop.0+0xa4>
 8008efa:	4664      	mov	r4, ip
 8008efc:	42a3      	cmp	r3, r4
 8008efe:	dd24      	ble.n	8008f4a <_strtol_l.constprop.0+0xc6>
 8008f00:	f1be 3fff 	cmp.w	lr, #4294967295
 8008f04:	d008      	beq.n	8008f18 <_strtol_l.constprop.0+0x94>
 8008f06:	45b1      	cmp	r9, r6
 8008f08:	d31c      	bcc.n	8008f44 <_strtol_l.constprop.0+0xc0>
 8008f0a:	d101      	bne.n	8008f10 <_strtol_l.constprop.0+0x8c>
 8008f0c:	45a2      	cmp	sl, r4
 8008f0e:	db19      	blt.n	8008f44 <_strtol_l.constprop.0+0xc0>
 8008f10:	fb06 4603 	mla	r6, r6, r3, r4
 8008f14:	f04f 0e01 	mov.w	lr, #1
 8008f18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f1c:	e7e8      	b.n	8008ef0 <_strtol_l.constprop.0+0x6c>
 8008f1e:	2c2b      	cmp	r4, #43	; 0x2b
 8008f20:	bf04      	itt	eq
 8008f22:	782c      	ldrbeq	r4, [r5, #0]
 8008f24:	1cb5      	addeq	r5, r6, #2
 8008f26:	e7ca      	b.n	8008ebe <_strtol_l.constprop.0+0x3a>
 8008f28:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008f2c:	f1bc 0f19 	cmp.w	ip, #25
 8008f30:	d801      	bhi.n	8008f36 <_strtol_l.constprop.0+0xb2>
 8008f32:	3c37      	subs	r4, #55	; 0x37
 8008f34:	e7e2      	b.n	8008efc <_strtol_l.constprop.0+0x78>
 8008f36:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008f3a:	f1bc 0f19 	cmp.w	ip, #25
 8008f3e:	d804      	bhi.n	8008f4a <_strtol_l.constprop.0+0xc6>
 8008f40:	3c57      	subs	r4, #87	; 0x57
 8008f42:	e7db      	b.n	8008efc <_strtol_l.constprop.0+0x78>
 8008f44:	f04f 3eff 	mov.w	lr, #4294967295
 8008f48:	e7e6      	b.n	8008f18 <_strtol_l.constprop.0+0x94>
 8008f4a:	f1be 3fff 	cmp.w	lr, #4294967295
 8008f4e:	d105      	bne.n	8008f5c <_strtol_l.constprop.0+0xd8>
 8008f50:	2322      	movs	r3, #34	; 0x22
 8008f52:	6003      	str	r3, [r0, #0]
 8008f54:	4646      	mov	r6, r8
 8008f56:	b942      	cbnz	r2, 8008f6a <_strtol_l.constprop.0+0xe6>
 8008f58:	4630      	mov	r0, r6
 8008f5a:	e79e      	b.n	8008e9a <_strtol_l.constprop.0+0x16>
 8008f5c:	b107      	cbz	r7, 8008f60 <_strtol_l.constprop.0+0xdc>
 8008f5e:	4276      	negs	r6, r6
 8008f60:	2a00      	cmp	r2, #0
 8008f62:	d0f9      	beq.n	8008f58 <_strtol_l.constprop.0+0xd4>
 8008f64:	f1be 0f00 	cmp.w	lr, #0
 8008f68:	d000      	beq.n	8008f6c <_strtol_l.constprop.0+0xe8>
 8008f6a:	1e69      	subs	r1, r5, #1
 8008f6c:	6011      	str	r1, [r2, #0]
 8008f6e:	e7f3      	b.n	8008f58 <_strtol_l.constprop.0+0xd4>
 8008f70:	2430      	movs	r4, #48	; 0x30
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1b1      	bne.n	8008eda <_strtol_l.constprop.0+0x56>
 8008f76:	2308      	movs	r3, #8
 8008f78:	e7af      	b.n	8008eda <_strtol_l.constprop.0+0x56>
 8008f7a:	2c30      	cmp	r4, #48	; 0x30
 8008f7c:	d0a5      	beq.n	8008eca <_strtol_l.constprop.0+0x46>
 8008f7e:	230a      	movs	r3, #10
 8008f80:	e7ab      	b.n	8008eda <_strtol_l.constprop.0+0x56>
 8008f82:	bf00      	nop
 8008f84:	0800a541 	.word	0x0800a541

08008f88 <_strtol_r>:
 8008f88:	f7ff bf7c 	b.w	8008e84 <_strtol_l.constprop.0>

08008f8c <__ssputs_r>:
 8008f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f90:	688e      	ldr	r6, [r1, #8]
 8008f92:	461f      	mov	r7, r3
 8008f94:	42be      	cmp	r6, r7
 8008f96:	680b      	ldr	r3, [r1, #0]
 8008f98:	4682      	mov	sl, r0
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	4690      	mov	r8, r2
 8008f9e:	d82c      	bhi.n	8008ffa <__ssputs_r+0x6e>
 8008fa0:	898a      	ldrh	r2, [r1, #12]
 8008fa2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fa6:	d026      	beq.n	8008ff6 <__ssputs_r+0x6a>
 8008fa8:	6965      	ldr	r5, [r4, #20]
 8008faa:	6909      	ldr	r1, [r1, #16]
 8008fac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fb0:	eba3 0901 	sub.w	r9, r3, r1
 8008fb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fb8:	1c7b      	adds	r3, r7, #1
 8008fba:	444b      	add	r3, r9
 8008fbc:	106d      	asrs	r5, r5, #1
 8008fbe:	429d      	cmp	r5, r3
 8008fc0:	bf38      	it	cc
 8008fc2:	461d      	movcc	r5, r3
 8008fc4:	0553      	lsls	r3, r2, #21
 8008fc6:	d527      	bpl.n	8009018 <__ssputs_r+0x8c>
 8008fc8:	4629      	mov	r1, r5
 8008fca:	f7fe fc0f 	bl	80077ec <_malloc_r>
 8008fce:	4606      	mov	r6, r0
 8008fd0:	b360      	cbz	r0, 800902c <__ssputs_r+0xa0>
 8008fd2:	6921      	ldr	r1, [r4, #16]
 8008fd4:	464a      	mov	r2, r9
 8008fd6:	f000 fbe3 	bl	80097a0 <memcpy>
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fe4:	81a3      	strh	r3, [r4, #12]
 8008fe6:	6126      	str	r6, [r4, #16]
 8008fe8:	6165      	str	r5, [r4, #20]
 8008fea:	444e      	add	r6, r9
 8008fec:	eba5 0509 	sub.w	r5, r5, r9
 8008ff0:	6026      	str	r6, [r4, #0]
 8008ff2:	60a5      	str	r5, [r4, #8]
 8008ff4:	463e      	mov	r6, r7
 8008ff6:	42be      	cmp	r6, r7
 8008ff8:	d900      	bls.n	8008ffc <__ssputs_r+0x70>
 8008ffa:	463e      	mov	r6, r7
 8008ffc:	6820      	ldr	r0, [r4, #0]
 8008ffe:	4632      	mov	r2, r6
 8009000:	4641      	mov	r1, r8
 8009002:	f000 fb6f 	bl	80096e4 <memmove>
 8009006:	68a3      	ldr	r3, [r4, #8]
 8009008:	1b9b      	subs	r3, r3, r6
 800900a:	60a3      	str	r3, [r4, #8]
 800900c:	6823      	ldr	r3, [r4, #0]
 800900e:	4433      	add	r3, r6
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	2000      	movs	r0, #0
 8009014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009018:	462a      	mov	r2, r5
 800901a:	f000 ff76 	bl	8009f0a <_realloc_r>
 800901e:	4606      	mov	r6, r0
 8009020:	2800      	cmp	r0, #0
 8009022:	d1e0      	bne.n	8008fe6 <__ssputs_r+0x5a>
 8009024:	6921      	ldr	r1, [r4, #16]
 8009026:	4650      	mov	r0, sl
 8009028:	f7fe fb6c 	bl	8007704 <_free_r>
 800902c:	230c      	movs	r3, #12
 800902e:	f8ca 3000 	str.w	r3, [sl]
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009038:	81a3      	strh	r3, [r4, #12]
 800903a:	f04f 30ff 	mov.w	r0, #4294967295
 800903e:	e7e9      	b.n	8009014 <__ssputs_r+0x88>

08009040 <_svfiprintf_r>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	4698      	mov	r8, r3
 8009046:	898b      	ldrh	r3, [r1, #12]
 8009048:	061b      	lsls	r3, r3, #24
 800904a:	b09d      	sub	sp, #116	; 0x74
 800904c:	4607      	mov	r7, r0
 800904e:	460d      	mov	r5, r1
 8009050:	4614      	mov	r4, r2
 8009052:	d50e      	bpl.n	8009072 <_svfiprintf_r+0x32>
 8009054:	690b      	ldr	r3, [r1, #16]
 8009056:	b963      	cbnz	r3, 8009072 <_svfiprintf_r+0x32>
 8009058:	2140      	movs	r1, #64	; 0x40
 800905a:	f7fe fbc7 	bl	80077ec <_malloc_r>
 800905e:	6028      	str	r0, [r5, #0]
 8009060:	6128      	str	r0, [r5, #16]
 8009062:	b920      	cbnz	r0, 800906e <_svfiprintf_r+0x2e>
 8009064:	230c      	movs	r3, #12
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	f04f 30ff 	mov.w	r0, #4294967295
 800906c:	e0d0      	b.n	8009210 <_svfiprintf_r+0x1d0>
 800906e:	2340      	movs	r3, #64	; 0x40
 8009070:	616b      	str	r3, [r5, #20]
 8009072:	2300      	movs	r3, #0
 8009074:	9309      	str	r3, [sp, #36]	; 0x24
 8009076:	2320      	movs	r3, #32
 8009078:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800907c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009080:	2330      	movs	r3, #48	; 0x30
 8009082:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009228 <_svfiprintf_r+0x1e8>
 8009086:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800908a:	f04f 0901 	mov.w	r9, #1
 800908e:	4623      	mov	r3, r4
 8009090:	469a      	mov	sl, r3
 8009092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009096:	b10a      	cbz	r2, 800909c <_svfiprintf_r+0x5c>
 8009098:	2a25      	cmp	r2, #37	; 0x25
 800909a:	d1f9      	bne.n	8009090 <_svfiprintf_r+0x50>
 800909c:	ebba 0b04 	subs.w	fp, sl, r4
 80090a0:	d00b      	beq.n	80090ba <_svfiprintf_r+0x7a>
 80090a2:	465b      	mov	r3, fp
 80090a4:	4622      	mov	r2, r4
 80090a6:	4629      	mov	r1, r5
 80090a8:	4638      	mov	r0, r7
 80090aa:	f7ff ff6f 	bl	8008f8c <__ssputs_r>
 80090ae:	3001      	adds	r0, #1
 80090b0:	f000 80a9 	beq.w	8009206 <_svfiprintf_r+0x1c6>
 80090b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090b6:	445a      	add	r2, fp
 80090b8:	9209      	str	r2, [sp, #36]	; 0x24
 80090ba:	f89a 3000 	ldrb.w	r3, [sl]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f000 80a1 	beq.w	8009206 <_svfiprintf_r+0x1c6>
 80090c4:	2300      	movs	r3, #0
 80090c6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ce:	f10a 0a01 	add.w	sl, sl, #1
 80090d2:	9304      	str	r3, [sp, #16]
 80090d4:	9307      	str	r3, [sp, #28]
 80090d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090da:	931a      	str	r3, [sp, #104]	; 0x68
 80090dc:	4654      	mov	r4, sl
 80090de:	2205      	movs	r2, #5
 80090e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e4:	4850      	ldr	r0, [pc, #320]	; (8009228 <_svfiprintf_r+0x1e8>)
 80090e6:	f7f7 f87b 	bl	80001e0 <memchr>
 80090ea:	9a04      	ldr	r2, [sp, #16]
 80090ec:	b9d8      	cbnz	r0, 8009126 <_svfiprintf_r+0xe6>
 80090ee:	06d0      	lsls	r0, r2, #27
 80090f0:	bf44      	itt	mi
 80090f2:	2320      	movmi	r3, #32
 80090f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090f8:	0711      	lsls	r1, r2, #28
 80090fa:	bf44      	itt	mi
 80090fc:	232b      	movmi	r3, #43	; 0x2b
 80090fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009102:	f89a 3000 	ldrb.w	r3, [sl]
 8009106:	2b2a      	cmp	r3, #42	; 0x2a
 8009108:	d015      	beq.n	8009136 <_svfiprintf_r+0xf6>
 800910a:	9a07      	ldr	r2, [sp, #28]
 800910c:	4654      	mov	r4, sl
 800910e:	2000      	movs	r0, #0
 8009110:	f04f 0c0a 	mov.w	ip, #10
 8009114:	4621      	mov	r1, r4
 8009116:	f811 3b01 	ldrb.w	r3, [r1], #1
 800911a:	3b30      	subs	r3, #48	; 0x30
 800911c:	2b09      	cmp	r3, #9
 800911e:	d94d      	bls.n	80091bc <_svfiprintf_r+0x17c>
 8009120:	b1b0      	cbz	r0, 8009150 <_svfiprintf_r+0x110>
 8009122:	9207      	str	r2, [sp, #28]
 8009124:	e014      	b.n	8009150 <_svfiprintf_r+0x110>
 8009126:	eba0 0308 	sub.w	r3, r0, r8
 800912a:	fa09 f303 	lsl.w	r3, r9, r3
 800912e:	4313      	orrs	r3, r2
 8009130:	9304      	str	r3, [sp, #16]
 8009132:	46a2      	mov	sl, r4
 8009134:	e7d2      	b.n	80090dc <_svfiprintf_r+0x9c>
 8009136:	9b03      	ldr	r3, [sp, #12]
 8009138:	1d19      	adds	r1, r3, #4
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	9103      	str	r1, [sp, #12]
 800913e:	2b00      	cmp	r3, #0
 8009140:	bfbb      	ittet	lt
 8009142:	425b      	neglt	r3, r3
 8009144:	f042 0202 	orrlt.w	r2, r2, #2
 8009148:	9307      	strge	r3, [sp, #28]
 800914a:	9307      	strlt	r3, [sp, #28]
 800914c:	bfb8      	it	lt
 800914e:	9204      	strlt	r2, [sp, #16]
 8009150:	7823      	ldrb	r3, [r4, #0]
 8009152:	2b2e      	cmp	r3, #46	; 0x2e
 8009154:	d10c      	bne.n	8009170 <_svfiprintf_r+0x130>
 8009156:	7863      	ldrb	r3, [r4, #1]
 8009158:	2b2a      	cmp	r3, #42	; 0x2a
 800915a:	d134      	bne.n	80091c6 <_svfiprintf_r+0x186>
 800915c:	9b03      	ldr	r3, [sp, #12]
 800915e:	1d1a      	adds	r2, r3, #4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	9203      	str	r2, [sp, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	bfb8      	it	lt
 8009168:	f04f 33ff 	movlt.w	r3, #4294967295
 800916c:	3402      	adds	r4, #2
 800916e:	9305      	str	r3, [sp, #20]
 8009170:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009238 <_svfiprintf_r+0x1f8>
 8009174:	7821      	ldrb	r1, [r4, #0]
 8009176:	2203      	movs	r2, #3
 8009178:	4650      	mov	r0, sl
 800917a:	f7f7 f831 	bl	80001e0 <memchr>
 800917e:	b138      	cbz	r0, 8009190 <_svfiprintf_r+0x150>
 8009180:	9b04      	ldr	r3, [sp, #16]
 8009182:	eba0 000a 	sub.w	r0, r0, sl
 8009186:	2240      	movs	r2, #64	; 0x40
 8009188:	4082      	lsls	r2, r0
 800918a:	4313      	orrs	r3, r2
 800918c:	3401      	adds	r4, #1
 800918e:	9304      	str	r3, [sp, #16]
 8009190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009194:	4825      	ldr	r0, [pc, #148]	; (800922c <_svfiprintf_r+0x1ec>)
 8009196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800919a:	2206      	movs	r2, #6
 800919c:	f7f7 f820 	bl	80001e0 <memchr>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d038      	beq.n	8009216 <_svfiprintf_r+0x1d6>
 80091a4:	4b22      	ldr	r3, [pc, #136]	; (8009230 <_svfiprintf_r+0x1f0>)
 80091a6:	bb1b      	cbnz	r3, 80091f0 <_svfiprintf_r+0x1b0>
 80091a8:	9b03      	ldr	r3, [sp, #12]
 80091aa:	3307      	adds	r3, #7
 80091ac:	f023 0307 	bic.w	r3, r3, #7
 80091b0:	3308      	adds	r3, #8
 80091b2:	9303      	str	r3, [sp, #12]
 80091b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b6:	4433      	add	r3, r6
 80091b8:	9309      	str	r3, [sp, #36]	; 0x24
 80091ba:	e768      	b.n	800908e <_svfiprintf_r+0x4e>
 80091bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80091c0:	460c      	mov	r4, r1
 80091c2:	2001      	movs	r0, #1
 80091c4:	e7a6      	b.n	8009114 <_svfiprintf_r+0xd4>
 80091c6:	2300      	movs	r3, #0
 80091c8:	3401      	adds	r4, #1
 80091ca:	9305      	str	r3, [sp, #20]
 80091cc:	4619      	mov	r1, r3
 80091ce:	f04f 0c0a 	mov.w	ip, #10
 80091d2:	4620      	mov	r0, r4
 80091d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091d8:	3a30      	subs	r2, #48	; 0x30
 80091da:	2a09      	cmp	r2, #9
 80091dc:	d903      	bls.n	80091e6 <_svfiprintf_r+0x1a6>
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0c6      	beq.n	8009170 <_svfiprintf_r+0x130>
 80091e2:	9105      	str	r1, [sp, #20]
 80091e4:	e7c4      	b.n	8009170 <_svfiprintf_r+0x130>
 80091e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80091ea:	4604      	mov	r4, r0
 80091ec:	2301      	movs	r3, #1
 80091ee:	e7f0      	b.n	80091d2 <_svfiprintf_r+0x192>
 80091f0:	ab03      	add	r3, sp, #12
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	462a      	mov	r2, r5
 80091f6:	4b0f      	ldr	r3, [pc, #60]	; (8009234 <_svfiprintf_r+0x1f4>)
 80091f8:	a904      	add	r1, sp, #16
 80091fa:	4638      	mov	r0, r7
 80091fc:	f7fc fb50 	bl	80058a0 <_printf_float>
 8009200:	1c42      	adds	r2, r0, #1
 8009202:	4606      	mov	r6, r0
 8009204:	d1d6      	bne.n	80091b4 <_svfiprintf_r+0x174>
 8009206:	89ab      	ldrh	r3, [r5, #12]
 8009208:	065b      	lsls	r3, r3, #25
 800920a:	f53f af2d 	bmi.w	8009068 <_svfiprintf_r+0x28>
 800920e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009210:	b01d      	add	sp, #116	; 0x74
 8009212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009216:	ab03      	add	r3, sp, #12
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	462a      	mov	r2, r5
 800921c:	4b05      	ldr	r3, [pc, #20]	; (8009234 <_svfiprintf_r+0x1f4>)
 800921e:	a904      	add	r1, sp, #16
 8009220:	4638      	mov	r0, r7
 8009222:	f7fc fde1 	bl	8005de8 <_printf_i>
 8009226:	e7eb      	b.n	8009200 <_svfiprintf_r+0x1c0>
 8009228:	0800a641 	.word	0x0800a641
 800922c:	0800a64b 	.word	0x0800a64b
 8009230:	080058a1 	.word	0x080058a1
 8009234:	08008f8d 	.word	0x08008f8d
 8009238:	0800a647 	.word	0x0800a647

0800923c <__sfputc_r>:
 800923c:	6893      	ldr	r3, [r2, #8]
 800923e:	3b01      	subs	r3, #1
 8009240:	2b00      	cmp	r3, #0
 8009242:	b410      	push	{r4}
 8009244:	6093      	str	r3, [r2, #8]
 8009246:	da08      	bge.n	800925a <__sfputc_r+0x1e>
 8009248:	6994      	ldr	r4, [r2, #24]
 800924a:	42a3      	cmp	r3, r4
 800924c:	db01      	blt.n	8009252 <__sfputc_r+0x16>
 800924e:	290a      	cmp	r1, #10
 8009250:	d103      	bne.n	800925a <__sfputc_r+0x1e>
 8009252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009256:	f7fd bac0 	b.w	80067da <__swbuf_r>
 800925a:	6813      	ldr	r3, [r2, #0]
 800925c:	1c58      	adds	r0, r3, #1
 800925e:	6010      	str	r0, [r2, #0]
 8009260:	7019      	strb	r1, [r3, #0]
 8009262:	4608      	mov	r0, r1
 8009264:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009268:	4770      	bx	lr

0800926a <__sfputs_r>:
 800926a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926c:	4606      	mov	r6, r0
 800926e:	460f      	mov	r7, r1
 8009270:	4614      	mov	r4, r2
 8009272:	18d5      	adds	r5, r2, r3
 8009274:	42ac      	cmp	r4, r5
 8009276:	d101      	bne.n	800927c <__sfputs_r+0x12>
 8009278:	2000      	movs	r0, #0
 800927a:	e007      	b.n	800928c <__sfputs_r+0x22>
 800927c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009280:	463a      	mov	r2, r7
 8009282:	4630      	mov	r0, r6
 8009284:	f7ff ffda 	bl	800923c <__sfputc_r>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d1f3      	bne.n	8009274 <__sfputs_r+0xa>
 800928c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009290 <_vfiprintf_r>:
 8009290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009294:	460d      	mov	r5, r1
 8009296:	b09d      	sub	sp, #116	; 0x74
 8009298:	4614      	mov	r4, r2
 800929a:	4698      	mov	r8, r3
 800929c:	4606      	mov	r6, r0
 800929e:	b118      	cbz	r0, 80092a8 <_vfiprintf_r+0x18>
 80092a0:	6a03      	ldr	r3, [r0, #32]
 80092a2:	b90b      	cbnz	r3, 80092a8 <_vfiprintf_r+0x18>
 80092a4:	f7fd f95e 	bl	8006564 <__sinit>
 80092a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092aa:	07d9      	lsls	r1, r3, #31
 80092ac:	d405      	bmi.n	80092ba <_vfiprintf_r+0x2a>
 80092ae:	89ab      	ldrh	r3, [r5, #12]
 80092b0:	059a      	lsls	r2, r3, #22
 80092b2:	d402      	bmi.n	80092ba <_vfiprintf_r+0x2a>
 80092b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092b6:	f7fd fba2 	bl	80069fe <__retarget_lock_acquire_recursive>
 80092ba:	89ab      	ldrh	r3, [r5, #12]
 80092bc:	071b      	lsls	r3, r3, #28
 80092be:	d501      	bpl.n	80092c4 <_vfiprintf_r+0x34>
 80092c0:	692b      	ldr	r3, [r5, #16]
 80092c2:	b99b      	cbnz	r3, 80092ec <_vfiprintf_r+0x5c>
 80092c4:	4629      	mov	r1, r5
 80092c6:	4630      	mov	r0, r6
 80092c8:	f7fd fac4 	bl	8006854 <__swsetup_r>
 80092cc:	b170      	cbz	r0, 80092ec <_vfiprintf_r+0x5c>
 80092ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092d0:	07dc      	lsls	r4, r3, #31
 80092d2:	d504      	bpl.n	80092de <_vfiprintf_r+0x4e>
 80092d4:	f04f 30ff 	mov.w	r0, #4294967295
 80092d8:	b01d      	add	sp, #116	; 0x74
 80092da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092de:	89ab      	ldrh	r3, [r5, #12]
 80092e0:	0598      	lsls	r0, r3, #22
 80092e2:	d4f7      	bmi.n	80092d4 <_vfiprintf_r+0x44>
 80092e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092e6:	f7fd fb8b 	bl	8006a00 <__retarget_lock_release_recursive>
 80092ea:	e7f3      	b.n	80092d4 <_vfiprintf_r+0x44>
 80092ec:	2300      	movs	r3, #0
 80092ee:	9309      	str	r3, [sp, #36]	; 0x24
 80092f0:	2320      	movs	r3, #32
 80092f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80092fa:	2330      	movs	r3, #48	; 0x30
 80092fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80094b0 <_vfiprintf_r+0x220>
 8009300:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009304:	f04f 0901 	mov.w	r9, #1
 8009308:	4623      	mov	r3, r4
 800930a:	469a      	mov	sl, r3
 800930c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009310:	b10a      	cbz	r2, 8009316 <_vfiprintf_r+0x86>
 8009312:	2a25      	cmp	r2, #37	; 0x25
 8009314:	d1f9      	bne.n	800930a <_vfiprintf_r+0x7a>
 8009316:	ebba 0b04 	subs.w	fp, sl, r4
 800931a:	d00b      	beq.n	8009334 <_vfiprintf_r+0xa4>
 800931c:	465b      	mov	r3, fp
 800931e:	4622      	mov	r2, r4
 8009320:	4629      	mov	r1, r5
 8009322:	4630      	mov	r0, r6
 8009324:	f7ff ffa1 	bl	800926a <__sfputs_r>
 8009328:	3001      	adds	r0, #1
 800932a:	f000 80a9 	beq.w	8009480 <_vfiprintf_r+0x1f0>
 800932e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009330:	445a      	add	r2, fp
 8009332:	9209      	str	r2, [sp, #36]	; 0x24
 8009334:	f89a 3000 	ldrb.w	r3, [sl]
 8009338:	2b00      	cmp	r3, #0
 800933a:	f000 80a1 	beq.w	8009480 <_vfiprintf_r+0x1f0>
 800933e:	2300      	movs	r3, #0
 8009340:	f04f 32ff 	mov.w	r2, #4294967295
 8009344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009348:	f10a 0a01 	add.w	sl, sl, #1
 800934c:	9304      	str	r3, [sp, #16]
 800934e:	9307      	str	r3, [sp, #28]
 8009350:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009354:	931a      	str	r3, [sp, #104]	; 0x68
 8009356:	4654      	mov	r4, sl
 8009358:	2205      	movs	r2, #5
 800935a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800935e:	4854      	ldr	r0, [pc, #336]	; (80094b0 <_vfiprintf_r+0x220>)
 8009360:	f7f6 ff3e 	bl	80001e0 <memchr>
 8009364:	9a04      	ldr	r2, [sp, #16]
 8009366:	b9d8      	cbnz	r0, 80093a0 <_vfiprintf_r+0x110>
 8009368:	06d1      	lsls	r1, r2, #27
 800936a:	bf44      	itt	mi
 800936c:	2320      	movmi	r3, #32
 800936e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009372:	0713      	lsls	r3, r2, #28
 8009374:	bf44      	itt	mi
 8009376:	232b      	movmi	r3, #43	; 0x2b
 8009378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800937c:	f89a 3000 	ldrb.w	r3, [sl]
 8009380:	2b2a      	cmp	r3, #42	; 0x2a
 8009382:	d015      	beq.n	80093b0 <_vfiprintf_r+0x120>
 8009384:	9a07      	ldr	r2, [sp, #28]
 8009386:	4654      	mov	r4, sl
 8009388:	2000      	movs	r0, #0
 800938a:	f04f 0c0a 	mov.w	ip, #10
 800938e:	4621      	mov	r1, r4
 8009390:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009394:	3b30      	subs	r3, #48	; 0x30
 8009396:	2b09      	cmp	r3, #9
 8009398:	d94d      	bls.n	8009436 <_vfiprintf_r+0x1a6>
 800939a:	b1b0      	cbz	r0, 80093ca <_vfiprintf_r+0x13a>
 800939c:	9207      	str	r2, [sp, #28]
 800939e:	e014      	b.n	80093ca <_vfiprintf_r+0x13a>
 80093a0:	eba0 0308 	sub.w	r3, r0, r8
 80093a4:	fa09 f303 	lsl.w	r3, r9, r3
 80093a8:	4313      	orrs	r3, r2
 80093aa:	9304      	str	r3, [sp, #16]
 80093ac:	46a2      	mov	sl, r4
 80093ae:	e7d2      	b.n	8009356 <_vfiprintf_r+0xc6>
 80093b0:	9b03      	ldr	r3, [sp, #12]
 80093b2:	1d19      	adds	r1, r3, #4
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	9103      	str	r1, [sp, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	bfbb      	ittet	lt
 80093bc:	425b      	neglt	r3, r3
 80093be:	f042 0202 	orrlt.w	r2, r2, #2
 80093c2:	9307      	strge	r3, [sp, #28]
 80093c4:	9307      	strlt	r3, [sp, #28]
 80093c6:	bfb8      	it	lt
 80093c8:	9204      	strlt	r2, [sp, #16]
 80093ca:	7823      	ldrb	r3, [r4, #0]
 80093cc:	2b2e      	cmp	r3, #46	; 0x2e
 80093ce:	d10c      	bne.n	80093ea <_vfiprintf_r+0x15a>
 80093d0:	7863      	ldrb	r3, [r4, #1]
 80093d2:	2b2a      	cmp	r3, #42	; 0x2a
 80093d4:	d134      	bne.n	8009440 <_vfiprintf_r+0x1b0>
 80093d6:	9b03      	ldr	r3, [sp, #12]
 80093d8:	1d1a      	adds	r2, r3, #4
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	9203      	str	r2, [sp, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	bfb8      	it	lt
 80093e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80093e6:	3402      	adds	r4, #2
 80093e8:	9305      	str	r3, [sp, #20]
 80093ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80094c0 <_vfiprintf_r+0x230>
 80093ee:	7821      	ldrb	r1, [r4, #0]
 80093f0:	2203      	movs	r2, #3
 80093f2:	4650      	mov	r0, sl
 80093f4:	f7f6 fef4 	bl	80001e0 <memchr>
 80093f8:	b138      	cbz	r0, 800940a <_vfiprintf_r+0x17a>
 80093fa:	9b04      	ldr	r3, [sp, #16]
 80093fc:	eba0 000a 	sub.w	r0, r0, sl
 8009400:	2240      	movs	r2, #64	; 0x40
 8009402:	4082      	lsls	r2, r0
 8009404:	4313      	orrs	r3, r2
 8009406:	3401      	adds	r4, #1
 8009408:	9304      	str	r3, [sp, #16]
 800940a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800940e:	4829      	ldr	r0, [pc, #164]	; (80094b4 <_vfiprintf_r+0x224>)
 8009410:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009414:	2206      	movs	r2, #6
 8009416:	f7f6 fee3 	bl	80001e0 <memchr>
 800941a:	2800      	cmp	r0, #0
 800941c:	d03f      	beq.n	800949e <_vfiprintf_r+0x20e>
 800941e:	4b26      	ldr	r3, [pc, #152]	; (80094b8 <_vfiprintf_r+0x228>)
 8009420:	bb1b      	cbnz	r3, 800946a <_vfiprintf_r+0x1da>
 8009422:	9b03      	ldr	r3, [sp, #12]
 8009424:	3307      	adds	r3, #7
 8009426:	f023 0307 	bic.w	r3, r3, #7
 800942a:	3308      	adds	r3, #8
 800942c:	9303      	str	r3, [sp, #12]
 800942e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009430:	443b      	add	r3, r7
 8009432:	9309      	str	r3, [sp, #36]	; 0x24
 8009434:	e768      	b.n	8009308 <_vfiprintf_r+0x78>
 8009436:	fb0c 3202 	mla	r2, ip, r2, r3
 800943a:	460c      	mov	r4, r1
 800943c:	2001      	movs	r0, #1
 800943e:	e7a6      	b.n	800938e <_vfiprintf_r+0xfe>
 8009440:	2300      	movs	r3, #0
 8009442:	3401      	adds	r4, #1
 8009444:	9305      	str	r3, [sp, #20]
 8009446:	4619      	mov	r1, r3
 8009448:	f04f 0c0a 	mov.w	ip, #10
 800944c:	4620      	mov	r0, r4
 800944e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009452:	3a30      	subs	r2, #48	; 0x30
 8009454:	2a09      	cmp	r2, #9
 8009456:	d903      	bls.n	8009460 <_vfiprintf_r+0x1d0>
 8009458:	2b00      	cmp	r3, #0
 800945a:	d0c6      	beq.n	80093ea <_vfiprintf_r+0x15a>
 800945c:	9105      	str	r1, [sp, #20]
 800945e:	e7c4      	b.n	80093ea <_vfiprintf_r+0x15a>
 8009460:	fb0c 2101 	mla	r1, ip, r1, r2
 8009464:	4604      	mov	r4, r0
 8009466:	2301      	movs	r3, #1
 8009468:	e7f0      	b.n	800944c <_vfiprintf_r+0x1bc>
 800946a:	ab03      	add	r3, sp, #12
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	462a      	mov	r2, r5
 8009470:	4b12      	ldr	r3, [pc, #72]	; (80094bc <_vfiprintf_r+0x22c>)
 8009472:	a904      	add	r1, sp, #16
 8009474:	4630      	mov	r0, r6
 8009476:	f7fc fa13 	bl	80058a0 <_printf_float>
 800947a:	4607      	mov	r7, r0
 800947c:	1c78      	adds	r0, r7, #1
 800947e:	d1d6      	bne.n	800942e <_vfiprintf_r+0x19e>
 8009480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009482:	07d9      	lsls	r1, r3, #31
 8009484:	d405      	bmi.n	8009492 <_vfiprintf_r+0x202>
 8009486:	89ab      	ldrh	r3, [r5, #12]
 8009488:	059a      	lsls	r2, r3, #22
 800948a:	d402      	bmi.n	8009492 <_vfiprintf_r+0x202>
 800948c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800948e:	f7fd fab7 	bl	8006a00 <__retarget_lock_release_recursive>
 8009492:	89ab      	ldrh	r3, [r5, #12]
 8009494:	065b      	lsls	r3, r3, #25
 8009496:	f53f af1d 	bmi.w	80092d4 <_vfiprintf_r+0x44>
 800949a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800949c:	e71c      	b.n	80092d8 <_vfiprintf_r+0x48>
 800949e:	ab03      	add	r3, sp, #12
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	462a      	mov	r2, r5
 80094a4:	4b05      	ldr	r3, [pc, #20]	; (80094bc <_vfiprintf_r+0x22c>)
 80094a6:	a904      	add	r1, sp, #16
 80094a8:	4630      	mov	r0, r6
 80094aa:	f7fc fc9d 	bl	8005de8 <_printf_i>
 80094ae:	e7e4      	b.n	800947a <_vfiprintf_r+0x1ea>
 80094b0:	0800a641 	.word	0x0800a641
 80094b4:	0800a64b 	.word	0x0800a64b
 80094b8:	080058a1 	.word	0x080058a1
 80094bc:	0800926b 	.word	0x0800926b
 80094c0:	0800a647 	.word	0x0800a647

080094c4 <__sflush_r>:
 80094c4:	898a      	ldrh	r2, [r1, #12]
 80094c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ca:	4605      	mov	r5, r0
 80094cc:	0710      	lsls	r0, r2, #28
 80094ce:	460c      	mov	r4, r1
 80094d0:	d458      	bmi.n	8009584 <__sflush_r+0xc0>
 80094d2:	684b      	ldr	r3, [r1, #4]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	dc05      	bgt.n	80094e4 <__sflush_r+0x20>
 80094d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094da:	2b00      	cmp	r3, #0
 80094dc:	dc02      	bgt.n	80094e4 <__sflush_r+0x20>
 80094de:	2000      	movs	r0, #0
 80094e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094e6:	2e00      	cmp	r6, #0
 80094e8:	d0f9      	beq.n	80094de <__sflush_r+0x1a>
 80094ea:	2300      	movs	r3, #0
 80094ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094f0:	682f      	ldr	r7, [r5, #0]
 80094f2:	6a21      	ldr	r1, [r4, #32]
 80094f4:	602b      	str	r3, [r5, #0]
 80094f6:	d032      	beq.n	800955e <__sflush_r+0x9a>
 80094f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094fa:	89a3      	ldrh	r3, [r4, #12]
 80094fc:	075a      	lsls	r2, r3, #29
 80094fe:	d505      	bpl.n	800950c <__sflush_r+0x48>
 8009500:	6863      	ldr	r3, [r4, #4]
 8009502:	1ac0      	subs	r0, r0, r3
 8009504:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009506:	b10b      	cbz	r3, 800950c <__sflush_r+0x48>
 8009508:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800950a:	1ac0      	subs	r0, r0, r3
 800950c:	2300      	movs	r3, #0
 800950e:	4602      	mov	r2, r0
 8009510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009512:	6a21      	ldr	r1, [r4, #32]
 8009514:	4628      	mov	r0, r5
 8009516:	47b0      	blx	r6
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	89a3      	ldrh	r3, [r4, #12]
 800951c:	d106      	bne.n	800952c <__sflush_r+0x68>
 800951e:	6829      	ldr	r1, [r5, #0]
 8009520:	291d      	cmp	r1, #29
 8009522:	d82b      	bhi.n	800957c <__sflush_r+0xb8>
 8009524:	4a29      	ldr	r2, [pc, #164]	; (80095cc <__sflush_r+0x108>)
 8009526:	410a      	asrs	r2, r1
 8009528:	07d6      	lsls	r6, r2, #31
 800952a:	d427      	bmi.n	800957c <__sflush_r+0xb8>
 800952c:	2200      	movs	r2, #0
 800952e:	6062      	str	r2, [r4, #4]
 8009530:	04d9      	lsls	r1, r3, #19
 8009532:	6922      	ldr	r2, [r4, #16]
 8009534:	6022      	str	r2, [r4, #0]
 8009536:	d504      	bpl.n	8009542 <__sflush_r+0x7e>
 8009538:	1c42      	adds	r2, r0, #1
 800953a:	d101      	bne.n	8009540 <__sflush_r+0x7c>
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	b903      	cbnz	r3, 8009542 <__sflush_r+0x7e>
 8009540:	6560      	str	r0, [r4, #84]	; 0x54
 8009542:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009544:	602f      	str	r7, [r5, #0]
 8009546:	2900      	cmp	r1, #0
 8009548:	d0c9      	beq.n	80094de <__sflush_r+0x1a>
 800954a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800954e:	4299      	cmp	r1, r3
 8009550:	d002      	beq.n	8009558 <__sflush_r+0x94>
 8009552:	4628      	mov	r0, r5
 8009554:	f7fe f8d6 	bl	8007704 <_free_r>
 8009558:	2000      	movs	r0, #0
 800955a:	6360      	str	r0, [r4, #52]	; 0x34
 800955c:	e7c0      	b.n	80094e0 <__sflush_r+0x1c>
 800955e:	2301      	movs	r3, #1
 8009560:	4628      	mov	r0, r5
 8009562:	47b0      	blx	r6
 8009564:	1c41      	adds	r1, r0, #1
 8009566:	d1c8      	bne.n	80094fa <__sflush_r+0x36>
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0c5      	beq.n	80094fa <__sflush_r+0x36>
 800956e:	2b1d      	cmp	r3, #29
 8009570:	d001      	beq.n	8009576 <__sflush_r+0xb2>
 8009572:	2b16      	cmp	r3, #22
 8009574:	d101      	bne.n	800957a <__sflush_r+0xb6>
 8009576:	602f      	str	r7, [r5, #0]
 8009578:	e7b1      	b.n	80094de <__sflush_r+0x1a>
 800957a:	89a3      	ldrh	r3, [r4, #12]
 800957c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009580:	81a3      	strh	r3, [r4, #12]
 8009582:	e7ad      	b.n	80094e0 <__sflush_r+0x1c>
 8009584:	690f      	ldr	r7, [r1, #16]
 8009586:	2f00      	cmp	r7, #0
 8009588:	d0a9      	beq.n	80094de <__sflush_r+0x1a>
 800958a:	0793      	lsls	r3, r2, #30
 800958c:	680e      	ldr	r6, [r1, #0]
 800958e:	bf08      	it	eq
 8009590:	694b      	ldreq	r3, [r1, #20]
 8009592:	600f      	str	r7, [r1, #0]
 8009594:	bf18      	it	ne
 8009596:	2300      	movne	r3, #0
 8009598:	eba6 0807 	sub.w	r8, r6, r7
 800959c:	608b      	str	r3, [r1, #8]
 800959e:	f1b8 0f00 	cmp.w	r8, #0
 80095a2:	dd9c      	ble.n	80094de <__sflush_r+0x1a>
 80095a4:	6a21      	ldr	r1, [r4, #32]
 80095a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095a8:	4643      	mov	r3, r8
 80095aa:	463a      	mov	r2, r7
 80095ac:	4628      	mov	r0, r5
 80095ae:	47b0      	blx	r6
 80095b0:	2800      	cmp	r0, #0
 80095b2:	dc06      	bgt.n	80095c2 <__sflush_r+0xfe>
 80095b4:	89a3      	ldrh	r3, [r4, #12]
 80095b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095ba:	81a3      	strh	r3, [r4, #12]
 80095bc:	f04f 30ff 	mov.w	r0, #4294967295
 80095c0:	e78e      	b.n	80094e0 <__sflush_r+0x1c>
 80095c2:	4407      	add	r7, r0
 80095c4:	eba8 0800 	sub.w	r8, r8, r0
 80095c8:	e7e9      	b.n	800959e <__sflush_r+0xda>
 80095ca:	bf00      	nop
 80095cc:	dfbffffe 	.word	0xdfbffffe

080095d0 <_fflush_r>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	690b      	ldr	r3, [r1, #16]
 80095d4:	4605      	mov	r5, r0
 80095d6:	460c      	mov	r4, r1
 80095d8:	b913      	cbnz	r3, 80095e0 <_fflush_r+0x10>
 80095da:	2500      	movs	r5, #0
 80095dc:	4628      	mov	r0, r5
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	b118      	cbz	r0, 80095ea <_fflush_r+0x1a>
 80095e2:	6a03      	ldr	r3, [r0, #32]
 80095e4:	b90b      	cbnz	r3, 80095ea <_fflush_r+0x1a>
 80095e6:	f7fc ffbd 	bl	8006564 <__sinit>
 80095ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0f3      	beq.n	80095da <_fflush_r+0xa>
 80095f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095f4:	07d0      	lsls	r0, r2, #31
 80095f6:	d404      	bmi.n	8009602 <_fflush_r+0x32>
 80095f8:	0599      	lsls	r1, r3, #22
 80095fa:	d402      	bmi.n	8009602 <_fflush_r+0x32>
 80095fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095fe:	f7fd f9fe 	bl	80069fe <__retarget_lock_acquire_recursive>
 8009602:	4628      	mov	r0, r5
 8009604:	4621      	mov	r1, r4
 8009606:	f7ff ff5d 	bl	80094c4 <__sflush_r>
 800960a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800960c:	07da      	lsls	r2, r3, #31
 800960e:	4605      	mov	r5, r0
 8009610:	d4e4      	bmi.n	80095dc <_fflush_r+0xc>
 8009612:	89a3      	ldrh	r3, [r4, #12]
 8009614:	059b      	lsls	r3, r3, #22
 8009616:	d4e1      	bmi.n	80095dc <_fflush_r+0xc>
 8009618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800961a:	f7fd f9f1 	bl	8006a00 <__retarget_lock_release_recursive>
 800961e:	e7dd      	b.n	80095dc <_fflush_r+0xc>

08009620 <__swhatbuf_r>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	460c      	mov	r4, r1
 8009624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009628:	2900      	cmp	r1, #0
 800962a:	b096      	sub	sp, #88	; 0x58
 800962c:	4615      	mov	r5, r2
 800962e:	461e      	mov	r6, r3
 8009630:	da0d      	bge.n	800964e <__swhatbuf_r+0x2e>
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009638:	f04f 0100 	mov.w	r1, #0
 800963c:	bf0c      	ite	eq
 800963e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009642:	2340      	movne	r3, #64	; 0x40
 8009644:	2000      	movs	r0, #0
 8009646:	6031      	str	r1, [r6, #0]
 8009648:	602b      	str	r3, [r5, #0]
 800964a:	b016      	add	sp, #88	; 0x58
 800964c:	bd70      	pop	{r4, r5, r6, pc}
 800964e:	466a      	mov	r2, sp
 8009650:	f000 f874 	bl	800973c <_fstat_r>
 8009654:	2800      	cmp	r0, #0
 8009656:	dbec      	blt.n	8009632 <__swhatbuf_r+0x12>
 8009658:	9901      	ldr	r1, [sp, #4]
 800965a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800965e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009662:	4259      	negs	r1, r3
 8009664:	4159      	adcs	r1, r3
 8009666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800966a:	e7eb      	b.n	8009644 <__swhatbuf_r+0x24>

0800966c <__smakebuf_r>:
 800966c:	898b      	ldrh	r3, [r1, #12]
 800966e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009670:	079d      	lsls	r5, r3, #30
 8009672:	4606      	mov	r6, r0
 8009674:	460c      	mov	r4, r1
 8009676:	d507      	bpl.n	8009688 <__smakebuf_r+0x1c>
 8009678:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	6123      	str	r3, [r4, #16]
 8009680:	2301      	movs	r3, #1
 8009682:	6163      	str	r3, [r4, #20]
 8009684:	b002      	add	sp, #8
 8009686:	bd70      	pop	{r4, r5, r6, pc}
 8009688:	ab01      	add	r3, sp, #4
 800968a:	466a      	mov	r2, sp
 800968c:	f7ff ffc8 	bl	8009620 <__swhatbuf_r>
 8009690:	9900      	ldr	r1, [sp, #0]
 8009692:	4605      	mov	r5, r0
 8009694:	4630      	mov	r0, r6
 8009696:	f7fe f8a9 	bl	80077ec <_malloc_r>
 800969a:	b948      	cbnz	r0, 80096b0 <__smakebuf_r+0x44>
 800969c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096a0:	059a      	lsls	r2, r3, #22
 80096a2:	d4ef      	bmi.n	8009684 <__smakebuf_r+0x18>
 80096a4:	f023 0303 	bic.w	r3, r3, #3
 80096a8:	f043 0302 	orr.w	r3, r3, #2
 80096ac:	81a3      	strh	r3, [r4, #12]
 80096ae:	e7e3      	b.n	8009678 <__smakebuf_r+0xc>
 80096b0:	89a3      	ldrh	r3, [r4, #12]
 80096b2:	6020      	str	r0, [r4, #0]
 80096b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096b8:	81a3      	strh	r3, [r4, #12]
 80096ba:	9b00      	ldr	r3, [sp, #0]
 80096bc:	6163      	str	r3, [r4, #20]
 80096be:	9b01      	ldr	r3, [sp, #4]
 80096c0:	6120      	str	r0, [r4, #16]
 80096c2:	b15b      	cbz	r3, 80096dc <__smakebuf_r+0x70>
 80096c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096c8:	4630      	mov	r0, r6
 80096ca:	f000 f849 	bl	8009760 <_isatty_r>
 80096ce:	b128      	cbz	r0, 80096dc <__smakebuf_r+0x70>
 80096d0:	89a3      	ldrh	r3, [r4, #12]
 80096d2:	f023 0303 	bic.w	r3, r3, #3
 80096d6:	f043 0301 	orr.w	r3, r3, #1
 80096da:	81a3      	strh	r3, [r4, #12]
 80096dc:	89a3      	ldrh	r3, [r4, #12]
 80096de:	431d      	orrs	r5, r3
 80096e0:	81a5      	strh	r5, [r4, #12]
 80096e2:	e7cf      	b.n	8009684 <__smakebuf_r+0x18>

080096e4 <memmove>:
 80096e4:	4288      	cmp	r0, r1
 80096e6:	b510      	push	{r4, lr}
 80096e8:	eb01 0402 	add.w	r4, r1, r2
 80096ec:	d902      	bls.n	80096f4 <memmove+0x10>
 80096ee:	4284      	cmp	r4, r0
 80096f0:	4623      	mov	r3, r4
 80096f2:	d807      	bhi.n	8009704 <memmove+0x20>
 80096f4:	1e43      	subs	r3, r0, #1
 80096f6:	42a1      	cmp	r1, r4
 80096f8:	d008      	beq.n	800970c <memmove+0x28>
 80096fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009702:	e7f8      	b.n	80096f6 <memmove+0x12>
 8009704:	4402      	add	r2, r0
 8009706:	4601      	mov	r1, r0
 8009708:	428a      	cmp	r2, r1
 800970a:	d100      	bne.n	800970e <memmove+0x2a>
 800970c:	bd10      	pop	{r4, pc}
 800970e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009712:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009716:	e7f7      	b.n	8009708 <memmove+0x24>

08009718 <strncmp>:
 8009718:	b510      	push	{r4, lr}
 800971a:	b16a      	cbz	r2, 8009738 <strncmp+0x20>
 800971c:	3901      	subs	r1, #1
 800971e:	1884      	adds	r4, r0, r2
 8009720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009724:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009728:	429a      	cmp	r2, r3
 800972a:	d103      	bne.n	8009734 <strncmp+0x1c>
 800972c:	42a0      	cmp	r0, r4
 800972e:	d001      	beq.n	8009734 <strncmp+0x1c>
 8009730:	2a00      	cmp	r2, #0
 8009732:	d1f5      	bne.n	8009720 <strncmp+0x8>
 8009734:	1ad0      	subs	r0, r2, r3
 8009736:	bd10      	pop	{r4, pc}
 8009738:	4610      	mov	r0, r2
 800973a:	e7fc      	b.n	8009736 <strncmp+0x1e>

0800973c <_fstat_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4d07      	ldr	r5, [pc, #28]	; (800975c <_fstat_r+0x20>)
 8009740:	2300      	movs	r3, #0
 8009742:	4604      	mov	r4, r0
 8009744:	4608      	mov	r0, r1
 8009746:	4611      	mov	r1, r2
 8009748:	602b      	str	r3, [r5, #0]
 800974a:	f7f8 fa1a 	bl	8001b82 <_fstat>
 800974e:	1c43      	adds	r3, r0, #1
 8009750:	d102      	bne.n	8009758 <_fstat_r+0x1c>
 8009752:	682b      	ldr	r3, [r5, #0]
 8009754:	b103      	cbz	r3, 8009758 <_fstat_r+0x1c>
 8009756:	6023      	str	r3, [r4, #0]
 8009758:	bd38      	pop	{r3, r4, r5, pc}
 800975a:	bf00      	nop
 800975c:	20000508 	.word	0x20000508

08009760 <_isatty_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4d06      	ldr	r5, [pc, #24]	; (800977c <_isatty_r+0x1c>)
 8009764:	2300      	movs	r3, #0
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	f7f8 fa19 	bl	8001ba2 <_isatty>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d102      	bne.n	800977a <_isatty_r+0x1a>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	b103      	cbz	r3, 800977a <_isatty_r+0x1a>
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	20000508 	.word	0x20000508

08009780 <_sbrk_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	4d06      	ldr	r5, [pc, #24]	; (800979c <_sbrk_r+0x1c>)
 8009784:	2300      	movs	r3, #0
 8009786:	4604      	mov	r4, r0
 8009788:	4608      	mov	r0, r1
 800978a:	602b      	str	r3, [r5, #0]
 800978c:	f7f8 fa22 	bl	8001bd4 <_sbrk>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d102      	bne.n	800979a <_sbrk_r+0x1a>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	b103      	cbz	r3, 800979a <_sbrk_r+0x1a>
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	bd38      	pop	{r3, r4, r5, pc}
 800979c:	20000508 	.word	0x20000508

080097a0 <memcpy>:
 80097a0:	440a      	add	r2, r1
 80097a2:	4291      	cmp	r1, r2
 80097a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80097a8:	d100      	bne.n	80097ac <memcpy+0xc>
 80097aa:	4770      	bx	lr
 80097ac:	b510      	push	{r4, lr}
 80097ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097b6:	4291      	cmp	r1, r2
 80097b8:	d1f9      	bne.n	80097ae <memcpy+0xe>
 80097ba:	bd10      	pop	{r4, pc}
 80097bc:	0000      	movs	r0, r0
	...

080097c0 <nan>:
 80097c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80097c8 <nan+0x8>
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	00000000 	.word	0x00000000
 80097cc:	7ff80000 	.word	0x7ff80000

080097d0 <__assert_func>:
 80097d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097d2:	4614      	mov	r4, r2
 80097d4:	461a      	mov	r2, r3
 80097d6:	4b09      	ldr	r3, [pc, #36]	; (80097fc <__assert_func+0x2c>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4605      	mov	r5, r0
 80097dc:	68d8      	ldr	r0, [r3, #12]
 80097de:	b14c      	cbz	r4, 80097f4 <__assert_func+0x24>
 80097e0:	4b07      	ldr	r3, [pc, #28]	; (8009800 <__assert_func+0x30>)
 80097e2:	9100      	str	r1, [sp, #0]
 80097e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097e8:	4906      	ldr	r1, [pc, #24]	; (8009804 <__assert_func+0x34>)
 80097ea:	462b      	mov	r3, r5
 80097ec:	f000 fbca 	bl	8009f84 <fiprintf>
 80097f0:	f000 fbda 	bl	8009fa8 <abort>
 80097f4:	4b04      	ldr	r3, [pc, #16]	; (8009808 <__assert_func+0x38>)
 80097f6:	461c      	mov	r4, r3
 80097f8:	e7f3      	b.n	80097e2 <__assert_func+0x12>
 80097fa:	bf00      	nop
 80097fc:	20000074 	.word	0x20000074
 8009800:	0800a65a 	.word	0x0800a65a
 8009804:	0800a667 	.word	0x0800a667
 8009808:	0800a695 	.word	0x0800a695

0800980c <_calloc_r>:
 800980c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800980e:	fba1 2402 	umull	r2, r4, r1, r2
 8009812:	b94c      	cbnz	r4, 8009828 <_calloc_r+0x1c>
 8009814:	4611      	mov	r1, r2
 8009816:	9201      	str	r2, [sp, #4]
 8009818:	f7fd ffe8 	bl	80077ec <_malloc_r>
 800981c:	9a01      	ldr	r2, [sp, #4]
 800981e:	4605      	mov	r5, r0
 8009820:	b930      	cbnz	r0, 8009830 <_calloc_r+0x24>
 8009822:	4628      	mov	r0, r5
 8009824:	b003      	add	sp, #12
 8009826:	bd30      	pop	{r4, r5, pc}
 8009828:	220c      	movs	r2, #12
 800982a:	6002      	str	r2, [r0, #0]
 800982c:	2500      	movs	r5, #0
 800982e:	e7f8      	b.n	8009822 <_calloc_r+0x16>
 8009830:	4621      	mov	r1, r4
 8009832:	f7fd f867 	bl	8006904 <memset>
 8009836:	e7f4      	b.n	8009822 <_calloc_r+0x16>

08009838 <rshift>:
 8009838:	6903      	ldr	r3, [r0, #16]
 800983a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800983e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009842:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009846:	f100 0414 	add.w	r4, r0, #20
 800984a:	dd45      	ble.n	80098d8 <rshift+0xa0>
 800984c:	f011 011f 	ands.w	r1, r1, #31
 8009850:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009854:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009858:	d10c      	bne.n	8009874 <rshift+0x3c>
 800985a:	f100 0710 	add.w	r7, r0, #16
 800985e:	4629      	mov	r1, r5
 8009860:	42b1      	cmp	r1, r6
 8009862:	d334      	bcc.n	80098ce <rshift+0x96>
 8009864:	1a9b      	subs	r3, r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	1eea      	subs	r2, r5, #3
 800986a:	4296      	cmp	r6, r2
 800986c:	bf38      	it	cc
 800986e:	2300      	movcc	r3, #0
 8009870:	4423      	add	r3, r4
 8009872:	e015      	b.n	80098a0 <rshift+0x68>
 8009874:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009878:	f1c1 0820 	rsb	r8, r1, #32
 800987c:	40cf      	lsrs	r7, r1
 800987e:	f105 0e04 	add.w	lr, r5, #4
 8009882:	46a1      	mov	r9, r4
 8009884:	4576      	cmp	r6, lr
 8009886:	46f4      	mov	ip, lr
 8009888:	d815      	bhi.n	80098b6 <rshift+0x7e>
 800988a:	1a9a      	subs	r2, r3, r2
 800988c:	0092      	lsls	r2, r2, #2
 800988e:	3a04      	subs	r2, #4
 8009890:	3501      	adds	r5, #1
 8009892:	42ae      	cmp	r6, r5
 8009894:	bf38      	it	cc
 8009896:	2200      	movcc	r2, #0
 8009898:	18a3      	adds	r3, r4, r2
 800989a:	50a7      	str	r7, [r4, r2]
 800989c:	b107      	cbz	r7, 80098a0 <rshift+0x68>
 800989e:	3304      	adds	r3, #4
 80098a0:	1b1a      	subs	r2, r3, r4
 80098a2:	42a3      	cmp	r3, r4
 80098a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80098a8:	bf08      	it	eq
 80098aa:	2300      	moveq	r3, #0
 80098ac:	6102      	str	r2, [r0, #16]
 80098ae:	bf08      	it	eq
 80098b0:	6143      	streq	r3, [r0, #20]
 80098b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098b6:	f8dc c000 	ldr.w	ip, [ip]
 80098ba:	fa0c fc08 	lsl.w	ip, ip, r8
 80098be:	ea4c 0707 	orr.w	r7, ip, r7
 80098c2:	f849 7b04 	str.w	r7, [r9], #4
 80098c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80098ca:	40cf      	lsrs	r7, r1
 80098cc:	e7da      	b.n	8009884 <rshift+0x4c>
 80098ce:	f851 cb04 	ldr.w	ip, [r1], #4
 80098d2:	f847 cf04 	str.w	ip, [r7, #4]!
 80098d6:	e7c3      	b.n	8009860 <rshift+0x28>
 80098d8:	4623      	mov	r3, r4
 80098da:	e7e1      	b.n	80098a0 <rshift+0x68>

080098dc <__hexdig_fun>:
 80098dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80098e0:	2b09      	cmp	r3, #9
 80098e2:	d802      	bhi.n	80098ea <__hexdig_fun+0xe>
 80098e4:	3820      	subs	r0, #32
 80098e6:	b2c0      	uxtb	r0, r0
 80098e8:	4770      	bx	lr
 80098ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80098ee:	2b05      	cmp	r3, #5
 80098f0:	d801      	bhi.n	80098f6 <__hexdig_fun+0x1a>
 80098f2:	3847      	subs	r0, #71	; 0x47
 80098f4:	e7f7      	b.n	80098e6 <__hexdig_fun+0xa>
 80098f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80098fa:	2b05      	cmp	r3, #5
 80098fc:	d801      	bhi.n	8009902 <__hexdig_fun+0x26>
 80098fe:	3827      	subs	r0, #39	; 0x27
 8009900:	e7f1      	b.n	80098e6 <__hexdig_fun+0xa>
 8009902:	2000      	movs	r0, #0
 8009904:	4770      	bx	lr
	...

08009908 <__gethex>:
 8009908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990c:	4617      	mov	r7, r2
 800990e:	680a      	ldr	r2, [r1, #0]
 8009910:	b085      	sub	sp, #20
 8009912:	f102 0b02 	add.w	fp, r2, #2
 8009916:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800991a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800991e:	4681      	mov	r9, r0
 8009920:	468a      	mov	sl, r1
 8009922:	9302      	str	r3, [sp, #8]
 8009924:	32fe      	adds	r2, #254	; 0xfe
 8009926:	eb02 030b 	add.w	r3, r2, fp
 800992a:	46d8      	mov	r8, fp
 800992c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009930:	9301      	str	r3, [sp, #4]
 8009932:	2830      	cmp	r0, #48	; 0x30
 8009934:	d0f7      	beq.n	8009926 <__gethex+0x1e>
 8009936:	f7ff ffd1 	bl	80098dc <__hexdig_fun>
 800993a:	4604      	mov	r4, r0
 800993c:	2800      	cmp	r0, #0
 800993e:	d138      	bne.n	80099b2 <__gethex+0xaa>
 8009940:	49a7      	ldr	r1, [pc, #668]	; (8009be0 <__gethex+0x2d8>)
 8009942:	2201      	movs	r2, #1
 8009944:	4640      	mov	r0, r8
 8009946:	f7ff fee7 	bl	8009718 <strncmp>
 800994a:	4606      	mov	r6, r0
 800994c:	2800      	cmp	r0, #0
 800994e:	d169      	bne.n	8009a24 <__gethex+0x11c>
 8009950:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009954:	465d      	mov	r5, fp
 8009956:	f7ff ffc1 	bl	80098dc <__hexdig_fun>
 800995a:	2800      	cmp	r0, #0
 800995c:	d064      	beq.n	8009a28 <__gethex+0x120>
 800995e:	465a      	mov	r2, fp
 8009960:	7810      	ldrb	r0, [r2, #0]
 8009962:	2830      	cmp	r0, #48	; 0x30
 8009964:	4690      	mov	r8, r2
 8009966:	f102 0201 	add.w	r2, r2, #1
 800996a:	d0f9      	beq.n	8009960 <__gethex+0x58>
 800996c:	f7ff ffb6 	bl	80098dc <__hexdig_fun>
 8009970:	2301      	movs	r3, #1
 8009972:	fab0 f480 	clz	r4, r0
 8009976:	0964      	lsrs	r4, r4, #5
 8009978:	465e      	mov	r6, fp
 800997a:	9301      	str	r3, [sp, #4]
 800997c:	4642      	mov	r2, r8
 800997e:	4615      	mov	r5, r2
 8009980:	3201      	adds	r2, #1
 8009982:	7828      	ldrb	r0, [r5, #0]
 8009984:	f7ff ffaa 	bl	80098dc <__hexdig_fun>
 8009988:	2800      	cmp	r0, #0
 800998a:	d1f8      	bne.n	800997e <__gethex+0x76>
 800998c:	4994      	ldr	r1, [pc, #592]	; (8009be0 <__gethex+0x2d8>)
 800998e:	2201      	movs	r2, #1
 8009990:	4628      	mov	r0, r5
 8009992:	f7ff fec1 	bl	8009718 <strncmp>
 8009996:	b978      	cbnz	r0, 80099b8 <__gethex+0xb0>
 8009998:	b946      	cbnz	r6, 80099ac <__gethex+0xa4>
 800999a:	1c6e      	adds	r6, r5, #1
 800999c:	4632      	mov	r2, r6
 800999e:	4615      	mov	r5, r2
 80099a0:	3201      	adds	r2, #1
 80099a2:	7828      	ldrb	r0, [r5, #0]
 80099a4:	f7ff ff9a 	bl	80098dc <__hexdig_fun>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d1f8      	bne.n	800999e <__gethex+0x96>
 80099ac:	1b73      	subs	r3, r6, r5
 80099ae:	009e      	lsls	r6, r3, #2
 80099b0:	e004      	b.n	80099bc <__gethex+0xb4>
 80099b2:	2400      	movs	r4, #0
 80099b4:	4626      	mov	r6, r4
 80099b6:	e7e1      	b.n	800997c <__gethex+0x74>
 80099b8:	2e00      	cmp	r6, #0
 80099ba:	d1f7      	bne.n	80099ac <__gethex+0xa4>
 80099bc:	782b      	ldrb	r3, [r5, #0]
 80099be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80099c2:	2b50      	cmp	r3, #80	; 0x50
 80099c4:	d13d      	bne.n	8009a42 <__gethex+0x13a>
 80099c6:	786b      	ldrb	r3, [r5, #1]
 80099c8:	2b2b      	cmp	r3, #43	; 0x2b
 80099ca:	d02f      	beq.n	8009a2c <__gethex+0x124>
 80099cc:	2b2d      	cmp	r3, #45	; 0x2d
 80099ce:	d031      	beq.n	8009a34 <__gethex+0x12c>
 80099d0:	1c69      	adds	r1, r5, #1
 80099d2:	f04f 0b00 	mov.w	fp, #0
 80099d6:	7808      	ldrb	r0, [r1, #0]
 80099d8:	f7ff ff80 	bl	80098dc <__hexdig_fun>
 80099dc:	1e42      	subs	r2, r0, #1
 80099de:	b2d2      	uxtb	r2, r2
 80099e0:	2a18      	cmp	r2, #24
 80099e2:	d82e      	bhi.n	8009a42 <__gethex+0x13a>
 80099e4:	f1a0 0210 	sub.w	r2, r0, #16
 80099e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80099ec:	f7ff ff76 	bl	80098dc <__hexdig_fun>
 80099f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80099f4:	fa5f fc8c 	uxtb.w	ip, ip
 80099f8:	f1bc 0f18 	cmp.w	ip, #24
 80099fc:	d91d      	bls.n	8009a3a <__gethex+0x132>
 80099fe:	f1bb 0f00 	cmp.w	fp, #0
 8009a02:	d000      	beq.n	8009a06 <__gethex+0xfe>
 8009a04:	4252      	negs	r2, r2
 8009a06:	4416      	add	r6, r2
 8009a08:	f8ca 1000 	str.w	r1, [sl]
 8009a0c:	b1dc      	cbz	r4, 8009a46 <__gethex+0x13e>
 8009a0e:	9b01      	ldr	r3, [sp, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	bf14      	ite	ne
 8009a14:	f04f 0800 	movne.w	r8, #0
 8009a18:	f04f 0806 	moveq.w	r8, #6
 8009a1c:	4640      	mov	r0, r8
 8009a1e:	b005      	add	sp, #20
 8009a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a24:	4645      	mov	r5, r8
 8009a26:	4626      	mov	r6, r4
 8009a28:	2401      	movs	r4, #1
 8009a2a:	e7c7      	b.n	80099bc <__gethex+0xb4>
 8009a2c:	f04f 0b00 	mov.w	fp, #0
 8009a30:	1ca9      	adds	r1, r5, #2
 8009a32:	e7d0      	b.n	80099d6 <__gethex+0xce>
 8009a34:	f04f 0b01 	mov.w	fp, #1
 8009a38:	e7fa      	b.n	8009a30 <__gethex+0x128>
 8009a3a:	230a      	movs	r3, #10
 8009a3c:	fb03 0002 	mla	r0, r3, r2, r0
 8009a40:	e7d0      	b.n	80099e4 <__gethex+0xdc>
 8009a42:	4629      	mov	r1, r5
 8009a44:	e7e0      	b.n	8009a08 <__gethex+0x100>
 8009a46:	eba5 0308 	sub.w	r3, r5, r8
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	2b07      	cmp	r3, #7
 8009a50:	dc0a      	bgt.n	8009a68 <__gethex+0x160>
 8009a52:	4648      	mov	r0, r9
 8009a54:	f7fd ff56 	bl	8007904 <_Balloc>
 8009a58:	4604      	mov	r4, r0
 8009a5a:	b940      	cbnz	r0, 8009a6e <__gethex+0x166>
 8009a5c:	4b61      	ldr	r3, [pc, #388]	; (8009be4 <__gethex+0x2dc>)
 8009a5e:	4602      	mov	r2, r0
 8009a60:	21e4      	movs	r1, #228	; 0xe4
 8009a62:	4861      	ldr	r0, [pc, #388]	; (8009be8 <__gethex+0x2e0>)
 8009a64:	f7ff feb4 	bl	80097d0 <__assert_func>
 8009a68:	3101      	adds	r1, #1
 8009a6a:	105b      	asrs	r3, r3, #1
 8009a6c:	e7ef      	b.n	8009a4e <__gethex+0x146>
 8009a6e:	f100 0a14 	add.w	sl, r0, #20
 8009a72:	2300      	movs	r3, #0
 8009a74:	495a      	ldr	r1, [pc, #360]	; (8009be0 <__gethex+0x2d8>)
 8009a76:	f8cd a004 	str.w	sl, [sp, #4]
 8009a7a:	469b      	mov	fp, r3
 8009a7c:	45a8      	cmp	r8, r5
 8009a7e:	d342      	bcc.n	8009b06 <__gethex+0x1fe>
 8009a80:	9801      	ldr	r0, [sp, #4]
 8009a82:	f840 bb04 	str.w	fp, [r0], #4
 8009a86:	eba0 000a 	sub.w	r0, r0, sl
 8009a8a:	1080      	asrs	r0, r0, #2
 8009a8c:	6120      	str	r0, [r4, #16]
 8009a8e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009a92:	4658      	mov	r0, fp
 8009a94:	f7fe f828 	bl	8007ae8 <__hi0bits>
 8009a98:	683d      	ldr	r5, [r7, #0]
 8009a9a:	eba8 0000 	sub.w	r0, r8, r0
 8009a9e:	42a8      	cmp	r0, r5
 8009aa0:	dd59      	ble.n	8009b56 <__gethex+0x24e>
 8009aa2:	eba0 0805 	sub.w	r8, r0, r5
 8009aa6:	4641      	mov	r1, r8
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f7fe fbb7 	bl	800821c <__any_on>
 8009aae:	4683      	mov	fp, r0
 8009ab0:	b1b8      	cbz	r0, 8009ae2 <__gethex+0x1da>
 8009ab2:	f108 33ff 	add.w	r3, r8, #4294967295
 8009ab6:	1159      	asrs	r1, r3, #5
 8009ab8:	f003 021f 	and.w	r2, r3, #31
 8009abc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009ac0:	f04f 0b01 	mov.w	fp, #1
 8009ac4:	fa0b f202 	lsl.w	r2, fp, r2
 8009ac8:	420a      	tst	r2, r1
 8009aca:	d00a      	beq.n	8009ae2 <__gethex+0x1da>
 8009acc:	455b      	cmp	r3, fp
 8009ace:	dd06      	ble.n	8009ade <__gethex+0x1d6>
 8009ad0:	f1a8 0102 	sub.w	r1, r8, #2
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f7fe fba1 	bl	800821c <__any_on>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	d138      	bne.n	8009b50 <__gethex+0x248>
 8009ade:	f04f 0b02 	mov.w	fp, #2
 8009ae2:	4641      	mov	r1, r8
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f7ff fea7 	bl	8009838 <rshift>
 8009aea:	4446      	add	r6, r8
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	42b3      	cmp	r3, r6
 8009af0:	da41      	bge.n	8009b76 <__gethex+0x26e>
 8009af2:	4621      	mov	r1, r4
 8009af4:	4648      	mov	r0, r9
 8009af6:	f7fd ff45 	bl	8007984 <_Bfree>
 8009afa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009afc:	2300      	movs	r3, #0
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009b04:	e78a      	b.n	8009a1c <__gethex+0x114>
 8009b06:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009b0a:	2a2e      	cmp	r2, #46	; 0x2e
 8009b0c:	d014      	beq.n	8009b38 <__gethex+0x230>
 8009b0e:	2b20      	cmp	r3, #32
 8009b10:	d106      	bne.n	8009b20 <__gethex+0x218>
 8009b12:	9b01      	ldr	r3, [sp, #4]
 8009b14:	f843 bb04 	str.w	fp, [r3], #4
 8009b18:	f04f 0b00 	mov.w	fp, #0
 8009b1c:	9301      	str	r3, [sp, #4]
 8009b1e:	465b      	mov	r3, fp
 8009b20:	7828      	ldrb	r0, [r5, #0]
 8009b22:	9303      	str	r3, [sp, #12]
 8009b24:	f7ff feda 	bl	80098dc <__hexdig_fun>
 8009b28:	9b03      	ldr	r3, [sp, #12]
 8009b2a:	f000 000f 	and.w	r0, r0, #15
 8009b2e:	4098      	lsls	r0, r3
 8009b30:	ea4b 0b00 	orr.w	fp, fp, r0
 8009b34:	3304      	adds	r3, #4
 8009b36:	e7a1      	b.n	8009a7c <__gethex+0x174>
 8009b38:	45a8      	cmp	r8, r5
 8009b3a:	d8e8      	bhi.n	8009b0e <__gethex+0x206>
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	4628      	mov	r0, r5
 8009b40:	9303      	str	r3, [sp, #12]
 8009b42:	f7ff fde9 	bl	8009718 <strncmp>
 8009b46:	4926      	ldr	r1, [pc, #152]	; (8009be0 <__gethex+0x2d8>)
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d1df      	bne.n	8009b0e <__gethex+0x206>
 8009b4e:	e795      	b.n	8009a7c <__gethex+0x174>
 8009b50:	f04f 0b03 	mov.w	fp, #3
 8009b54:	e7c5      	b.n	8009ae2 <__gethex+0x1da>
 8009b56:	da0b      	bge.n	8009b70 <__gethex+0x268>
 8009b58:	eba5 0800 	sub.w	r8, r5, r0
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	4642      	mov	r2, r8
 8009b60:	4648      	mov	r0, r9
 8009b62:	f7fe f929 	bl	8007db8 <__lshift>
 8009b66:	eba6 0608 	sub.w	r6, r6, r8
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	f100 0a14 	add.w	sl, r0, #20
 8009b70:	f04f 0b00 	mov.w	fp, #0
 8009b74:	e7ba      	b.n	8009aec <__gethex+0x1e4>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	42b3      	cmp	r3, r6
 8009b7a:	dd73      	ble.n	8009c64 <__gethex+0x35c>
 8009b7c:	1b9e      	subs	r6, r3, r6
 8009b7e:	42b5      	cmp	r5, r6
 8009b80:	dc34      	bgt.n	8009bec <__gethex+0x2e4>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d023      	beq.n	8009bd0 <__gethex+0x2c8>
 8009b88:	2b03      	cmp	r3, #3
 8009b8a:	d025      	beq.n	8009bd8 <__gethex+0x2d0>
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d115      	bne.n	8009bbc <__gethex+0x2b4>
 8009b90:	42b5      	cmp	r5, r6
 8009b92:	d113      	bne.n	8009bbc <__gethex+0x2b4>
 8009b94:	2d01      	cmp	r5, #1
 8009b96:	d10b      	bne.n	8009bb0 <__gethex+0x2a8>
 8009b98:	9a02      	ldr	r2, [sp, #8]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	6123      	str	r3, [r4, #16]
 8009ba2:	f8ca 3000 	str.w	r3, [sl]
 8009ba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ba8:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009bac:	601c      	str	r4, [r3, #0]
 8009bae:	e735      	b.n	8009a1c <__gethex+0x114>
 8009bb0:	1e69      	subs	r1, r5, #1
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f7fe fb32 	bl	800821c <__any_on>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d1ed      	bne.n	8009b98 <__gethex+0x290>
 8009bbc:	4621      	mov	r1, r4
 8009bbe:	4648      	mov	r0, r9
 8009bc0:	f7fd fee0 	bl	8007984 <_Bfree>
 8009bc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	6013      	str	r3, [r2, #0]
 8009bca:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009bce:	e725      	b.n	8009a1c <__gethex+0x114>
 8009bd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1f2      	bne.n	8009bbc <__gethex+0x2b4>
 8009bd6:	e7df      	b.n	8009b98 <__gethex+0x290>
 8009bd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1dc      	bne.n	8009b98 <__gethex+0x290>
 8009bde:	e7ed      	b.n	8009bbc <__gethex+0x2b4>
 8009be0:	0800a4ec 	.word	0x0800a4ec
 8009be4:	0800a385 	.word	0x0800a385
 8009be8:	0800a696 	.word	0x0800a696
 8009bec:	f106 38ff 	add.w	r8, r6, #4294967295
 8009bf0:	f1bb 0f00 	cmp.w	fp, #0
 8009bf4:	d133      	bne.n	8009c5e <__gethex+0x356>
 8009bf6:	f1b8 0f00 	cmp.w	r8, #0
 8009bfa:	d004      	beq.n	8009c06 <__gethex+0x2fe>
 8009bfc:	4641      	mov	r1, r8
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f7fe fb0c 	bl	800821c <__any_on>
 8009c04:	4683      	mov	fp, r0
 8009c06:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009c10:	f008 081f 	and.w	r8, r8, #31
 8009c14:	fa03 f308 	lsl.w	r3, r3, r8
 8009c18:	4213      	tst	r3, r2
 8009c1a:	4631      	mov	r1, r6
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	bf18      	it	ne
 8009c20:	f04b 0b02 	orrne.w	fp, fp, #2
 8009c24:	1bad      	subs	r5, r5, r6
 8009c26:	f7ff fe07 	bl	8009838 <rshift>
 8009c2a:	687e      	ldr	r6, [r7, #4]
 8009c2c:	f04f 0802 	mov.w	r8, #2
 8009c30:	f1bb 0f00 	cmp.w	fp, #0
 8009c34:	d04a      	beq.n	8009ccc <__gethex+0x3c4>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d016      	beq.n	8009c6a <__gethex+0x362>
 8009c3c:	2b03      	cmp	r3, #3
 8009c3e:	d018      	beq.n	8009c72 <__gethex+0x36a>
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d109      	bne.n	8009c58 <__gethex+0x350>
 8009c44:	f01b 0f02 	tst.w	fp, #2
 8009c48:	d006      	beq.n	8009c58 <__gethex+0x350>
 8009c4a:	f8da 3000 	ldr.w	r3, [sl]
 8009c4e:	ea4b 0b03 	orr.w	fp, fp, r3
 8009c52:	f01b 0f01 	tst.w	fp, #1
 8009c56:	d10f      	bne.n	8009c78 <__gethex+0x370>
 8009c58:	f048 0810 	orr.w	r8, r8, #16
 8009c5c:	e036      	b.n	8009ccc <__gethex+0x3c4>
 8009c5e:	f04f 0b01 	mov.w	fp, #1
 8009c62:	e7d0      	b.n	8009c06 <__gethex+0x2fe>
 8009c64:	f04f 0801 	mov.w	r8, #1
 8009c68:	e7e2      	b.n	8009c30 <__gethex+0x328>
 8009c6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c6c:	f1c3 0301 	rsb	r3, r3, #1
 8009c70:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d0ef      	beq.n	8009c58 <__gethex+0x350>
 8009c78:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c7c:	f104 0214 	add.w	r2, r4, #20
 8009c80:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009c84:	9301      	str	r3, [sp, #4]
 8009c86:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	4694      	mov	ip, r2
 8009c8e:	f852 1b04 	ldr.w	r1, [r2], #4
 8009c92:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009c96:	d01e      	beq.n	8009cd6 <__gethex+0x3ce>
 8009c98:	3101      	adds	r1, #1
 8009c9a:	f8cc 1000 	str.w	r1, [ip]
 8009c9e:	f1b8 0f02 	cmp.w	r8, #2
 8009ca2:	f104 0214 	add.w	r2, r4, #20
 8009ca6:	d13d      	bne.n	8009d24 <__gethex+0x41c>
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	42ab      	cmp	r3, r5
 8009cae:	d10b      	bne.n	8009cc8 <__gethex+0x3c0>
 8009cb0:	1169      	asrs	r1, r5, #5
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	f005 051f 	and.w	r5, r5, #31
 8009cb8:	fa03 f505 	lsl.w	r5, r3, r5
 8009cbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cc0:	421d      	tst	r5, r3
 8009cc2:	bf18      	it	ne
 8009cc4:	f04f 0801 	movne.w	r8, #1
 8009cc8:	f048 0820 	orr.w	r8, r8, #32
 8009ccc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cce:	601c      	str	r4, [r3, #0]
 8009cd0:	9b02      	ldr	r3, [sp, #8]
 8009cd2:	601e      	str	r6, [r3, #0]
 8009cd4:	e6a2      	b.n	8009a1c <__gethex+0x114>
 8009cd6:	4290      	cmp	r0, r2
 8009cd8:	f842 3c04 	str.w	r3, [r2, #-4]
 8009cdc:	d8d6      	bhi.n	8009c8c <__gethex+0x384>
 8009cde:	68a2      	ldr	r2, [r4, #8]
 8009ce0:	4593      	cmp	fp, r2
 8009ce2:	db17      	blt.n	8009d14 <__gethex+0x40c>
 8009ce4:	6861      	ldr	r1, [r4, #4]
 8009ce6:	4648      	mov	r0, r9
 8009ce8:	3101      	adds	r1, #1
 8009cea:	f7fd fe0b 	bl	8007904 <_Balloc>
 8009cee:	4682      	mov	sl, r0
 8009cf0:	b918      	cbnz	r0, 8009cfa <__gethex+0x3f2>
 8009cf2:	4b1b      	ldr	r3, [pc, #108]	; (8009d60 <__gethex+0x458>)
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	2184      	movs	r1, #132	; 0x84
 8009cf8:	e6b3      	b.n	8009a62 <__gethex+0x15a>
 8009cfa:	6922      	ldr	r2, [r4, #16]
 8009cfc:	3202      	adds	r2, #2
 8009cfe:	f104 010c 	add.w	r1, r4, #12
 8009d02:	0092      	lsls	r2, r2, #2
 8009d04:	300c      	adds	r0, #12
 8009d06:	f7ff fd4b 	bl	80097a0 <memcpy>
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	4648      	mov	r0, r9
 8009d0e:	f7fd fe39 	bl	8007984 <_Bfree>
 8009d12:	4654      	mov	r4, sl
 8009d14:	6922      	ldr	r2, [r4, #16]
 8009d16:	1c51      	adds	r1, r2, #1
 8009d18:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009d1c:	6121      	str	r1, [r4, #16]
 8009d1e:	2101      	movs	r1, #1
 8009d20:	6151      	str	r1, [r2, #20]
 8009d22:	e7bc      	b.n	8009c9e <__gethex+0x396>
 8009d24:	6921      	ldr	r1, [r4, #16]
 8009d26:	4559      	cmp	r1, fp
 8009d28:	dd0b      	ble.n	8009d42 <__gethex+0x43a>
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f7ff fd83 	bl	8009838 <rshift>
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	3601      	adds	r6, #1
 8009d36:	42b3      	cmp	r3, r6
 8009d38:	f6ff aedb 	blt.w	8009af2 <__gethex+0x1ea>
 8009d3c:	f04f 0801 	mov.w	r8, #1
 8009d40:	e7c2      	b.n	8009cc8 <__gethex+0x3c0>
 8009d42:	f015 051f 	ands.w	r5, r5, #31
 8009d46:	d0f9      	beq.n	8009d3c <__gethex+0x434>
 8009d48:	9b01      	ldr	r3, [sp, #4]
 8009d4a:	441a      	add	r2, r3
 8009d4c:	f1c5 0520 	rsb	r5, r5, #32
 8009d50:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009d54:	f7fd fec8 	bl	8007ae8 <__hi0bits>
 8009d58:	42a8      	cmp	r0, r5
 8009d5a:	dbe6      	blt.n	8009d2a <__gethex+0x422>
 8009d5c:	e7ee      	b.n	8009d3c <__gethex+0x434>
 8009d5e:	bf00      	nop
 8009d60:	0800a385 	.word	0x0800a385

08009d64 <L_shift>:
 8009d64:	f1c2 0208 	rsb	r2, r2, #8
 8009d68:	0092      	lsls	r2, r2, #2
 8009d6a:	b570      	push	{r4, r5, r6, lr}
 8009d6c:	f1c2 0620 	rsb	r6, r2, #32
 8009d70:	6843      	ldr	r3, [r0, #4]
 8009d72:	6804      	ldr	r4, [r0, #0]
 8009d74:	fa03 f506 	lsl.w	r5, r3, r6
 8009d78:	432c      	orrs	r4, r5
 8009d7a:	40d3      	lsrs	r3, r2
 8009d7c:	6004      	str	r4, [r0, #0]
 8009d7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d82:	4288      	cmp	r0, r1
 8009d84:	d3f4      	bcc.n	8009d70 <L_shift+0xc>
 8009d86:	bd70      	pop	{r4, r5, r6, pc}

08009d88 <__match>:
 8009d88:	b530      	push	{r4, r5, lr}
 8009d8a:	6803      	ldr	r3, [r0, #0]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d92:	b914      	cbnz	r4, 8009d9a <__match+0x12>
 8009d94:	6003      	str	r3, [r0, #0]
 8009d96:	2001      	movs	r0, #1
 8009d98:	bd30      	pop	{r4, r5, pc}
 8009d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009da2:	2d19      	cmp	r5, #25
 8009da4:	bf98      	it	ls
 8009da6:	3220      	addls	r2, #32
 8009da8:	42a2      	cmp	r2, r4
 8009daa:	d0f0      	beq.n	8009d8e <__match+0x6>
 8009dac:	2000      	movs	r0, #0
 8009dae:	e7f3      	b.n	8009d98 <__match+0x10>

08009db0 <__hexnan>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	680b      	ldr	r3, [r1, #0]
 8009db6:	6801      	ldr	r1, [r0, #0]
 8009db8:	115e      	asrs	r6, r3, #5
 8009dba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009dbe:	f013 031f 	ands.w	r3, r3, #31
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	bf18      	it	ne
 8009dc6:	3604      	addne	r6, #4
 8009dc8:	2500      	movs	r5, #0
 8009dca:	1f37      	subs	r7, r6, #4
 8009dcc:	4682      	mov	sl, r0
 8009dce:	4690      	mov	r8, r2
 8009dd0:	9301      	str	r3, [sp, #4]
 8009dd2:	f846 5c04 	str.w	r5, [r6, #-4]
 8009dd6:	46b9      	mov	r9, r7
 8009dd8:	463c      	mov	r4, r7
 8009dda:	9502      	str	r5, [sp, #8]
 8009ddc:	46ab      	mov	fp, r5
 8009dde:	784a      	ldrb	r2, [r1, #1]
 8009de0:	1c4b      	adds	r3, r1, #1
 8009de2:	9303      	str	r3, [sp, #12]
 8009de4:	b342      	cbz	r2, 8009e38 <__hexnan+0x88>
 8009de6:	4610      	mov	r0, r2
 8009de8:	9105      	str	r1, [sp, #20]
 8009dea:	9204      	str	r2, [sp, #16]
 8009dec:	f7ff fd76 	bl	80098dc <__hexdig_fun>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d14f      	bne.n	8009e94 <__hexnan+0xe4>
 8009df4:	9a04      	ldr	r2, [sp, #16]
 8009df6:	9905      	ldr	r1, [sp, #20]
 8009df8:	2a20      	cmp	r2, #32
 8009dfa:	d818      	bhi.n	8009e2e <__hexnan+0x7e>
 8009dfc:	9b02      	ldr	r3, [sp, #8]
 8009dfe:	459b      	cmp	fp, r3
 8009e00:	dd13      	ble.n	8009e2a <__hexnan+0x7a>
 8009e02:	454c      	cmp	r4, r9
 8009e04:	d206      	bcs.n	8009e14 <__hexnan+0x64>
 8009e06:	2d07      	cmp	r5, #7
 8009e08:	dc04      	bgt.n	8009e14 <__hexnan+0x64>
 8009e0a:	462a      	mov	r2, r5
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f7ff ffa8 	bl	8009d64 <L_shift>
 8009e14:	4544      	cmp	r4, r8
 8009e16:	d950      	bls.n	8009eba <__hexnan+0x10a>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f1a4 0904 	sub.w	r9, r4, #4
 8009e1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e22:	f8cd b008 	str.w	fp, [sp, #8]
 8009e26:	464c      	mov	r4, r9
 8009e28:	461d      	mov	r5, r3
 8009e2a:	9903      	ldr	r1, [sp, #12]
 8009e2c:	e7d7      	b.n	8009dde <__hexnan+0x2e>
 8009e2e:	2a29      	cmp	r2, #41	; 0x29
 8009e30:	d155      	bne.n	8009ede <__hexnan+0x12e>
 8009e32:	3102      	adds	r1, #2
 8009e34:	f8ca 1000 	str.w	r1, [sl]
 8009e38:	f1bb 0f00 	cmp.w	fp, #0
 8009e3c:	d04f      	beq.n	8009ede <__hexnan+0x12e>
 8009e3e:	454c      	cmp	r4, r9
 8009e40:	d206      	bcs.n	8009e50 <__hexnan+0xa0>
 8009e42:	2d07      	cmp	r5, #7
 8009e44:	dc04      	bgt.n	8009e50 <__hexnan+0xa0>
 8009e46:	462a      	mov	r2, r5
 8009e48:	4649      	mov	r1, r9
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f7ff ff8a 	bl	8009d64 <L_shift>
 8009e50:	4544      	cmp	r4, r8
 8009e52:	d934      	bls.n	8009ebe <__hexnan+0x10e>
 8009e54:	f1a8 0204 	sub.w	r2, r8, #4
 8009e58:	4623      	mov	r3, r4
 8009e5a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009e5e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009e62:	429f      	cmp	r7, r3
 8009e64:	d2f9      	bcs.n	8009e5a <__hexnan+0xaa>
 8009e66:	1b3b      	subs	r3, r7, r4
 8009e68:	f023 0303 	bic.w	r3, r3, #3
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	3e03      	subs	r6, #3
 8009e70:	3401      	adds	r4, #1
 8009e72:	42a6      	cmp	r6, r4
 8009e74:	bf38      	it	cc
 8009e76:	2304      	movcc	r3, #4
 8009e78:	4443      	add	r3, r8
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f843 2b04 	str.w	r2, [r3], #4
 8009e80:	429f      	cmp	r7, r3
 8009e82:	d2fb      	bcs.n	8009e7c <__hexnan+0xcc>
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	b91b      	cbnz	r3, 8009e90 <__hexnan+0xe0>
 8009e88:	4547      	cmp	r7, r8
 8009e8a:	d126      	bne.n	8009eda <__hexnan+0x12a>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	603b      	str	r3, [r7, #0]
 8009e90:	2005      	movs	r0, #5
 8009e92:	e025      	b.n	8009ee0 <__hexnan+0x130>
 8009e94:	3501      	adds	r5, #1
 8009e96:	2d08      	cmp	r5, #8
 8009e98:	f10b 0b01 	add.w	fp, fp, #1
 8009e9c:	dd06      	ble.n	8009eac <__hexnan+0xfc>
 8009e9e:	4544      	cmp	r4, r8
 8009ea0:	d9c3      	bls.n	8009e2a <__hexnan+0x7a>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ea8:	2501      	movs	r5, #1
 8009eaa:	3c04      	subs	r4, #4
 8009eac:	6822      	ldr	r2, [r4, #0]
 8009eae:	f000 000f 	and.w	r0, r0, #15
 8009eb2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009eb6:	6020      	str	r0, [r4, #0]
 8009eb8:	e7b7      	b.n	8009e2a <__hexnan+0x7a>
 8009eba:	2508      	movs	r5, #8
 8009ebc:	e7b5      	b.n	8009e2a <__hexnan+0x7a>
 8009ebe:	9b01      	ldr	r3, [sp, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d0df      	beq.n	8009e84 <__hexnan+0xd4>
 8009ec4:	f1c3 0320 	rsb	r3, r3, #32
 8009ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8009ecc:	40da      	lsrs	r2, r3
 8009ece:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	f846 3c04 	str.w	r3, [r6, #-4]
 8009ed8:	e7d4      	b.n	8009e84 <__hexnan+0xd4>
 8009eda:	3f04      	subs	r7, #4
 8009edc:	e7d2      	b.n	8009e84 <__hexnan+0xd4>
 8009ede:	2004      	movs	r0, #4
 8009ee0:	b007      	add	sp, #28
 8009ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ee6 <__ascii_mbtowc>:
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	b901      	cbnz	r1, 8009eec <__ascii_mbtowc+0x6>
 8009eea:	a901      	add	r1, sp, #4
 8009eec:	b142      	cbz	r2, 8009f00 <__ascii_mbtowc+0x1a>
 8009eee:	b14b      	cbz	r3, 8009f04 <__ascii_mbtowc+0x1e>
 8009ef0:	7813      	ldrb	r3, [r2, #0]
 8009ef2:	600b      	str	r3, [r1, #0]
 8009ef4:	7812      	ldrb	r2, [r2, #0]
 8009ef6:	1e10      	subs	r0, r2, #0
 8009ef8:	bf18      	it	ne
 8009efa:	2001      	movne	r0, #1
 8009efc:	b002      	add	sp, #8
 8009efe:	4770      	bx	lr
 8009f00:	4610      	mov	r0, r2
 8009f02:	e7fb      	b.n	8009efc <__ascii_mbtowc+0x16>
 8009f04:	f06f 0001 	mvn.w	r0, #1
 8009f08:	e7f8      	b.n	8009efc <__ascii_mbtowc+0x16>

08009f0a <_realloc_r>:
 8009f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f0e:	4680      	mov	r8, r0
 8009f10:	4614      	mov	r4, r2
 8009f12:	460e      	mov	r6, r1
 8009f14:	b921      	cbnz	r1, 8009f20 <_realloc_r+0x16>
 8009f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1a:	4611      	mov	r1, r2
 8009f1c:	f7fd bc66 	b.w	80077ec <_malloc_r>
 8009f20:	b92a      	cbnz	r2, 8009f2e <_realloc_r+0x24>
 8009f22:	f7fd fbef 	bl	8007704 <_free_r>
 8009f26:	4625      	mov	r5, r4
 8009f28:	4628      	mov	r0, r5
 8009f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f2e:	f000 f842 	bl	8009fb6 <_malloc_usable_size_r>
 8009f32:	4284      	cmp	r4, r0
 8009f34:	4607      	mov	r7, r0
 8009f36:	d802      	bhi.n	8009f3e <_realloc_r+0x34>
 8009f38:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f3c:	d812      	bhi.n	8009f64 <_realloc_r+0x5a>
 8009f3e:	4621      	mov	r1, r4
 8009f40:	4640      	mov	r0, r8
 8009f42:	f7fd fc53 	bl	80077ec <_malloc_r>
 8009f46:	4605      	mov	r5, r0
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	d0ed      	beq.n	8009f28 <_realloc_r+0x1e>
 8009f4c:	42bc      	cmp	r4, r7
 8009f4e:	4622      	mov	r2, r4
 8009f50:	4631      	mov	r1, r6
 8009f52:	bf28      	it	cs
 8009f54:	463a      	movcs	r2, r7
 8009f56:	f7ff fc23 	bl	80097a0 <memcpy>
 8009f5a:	4631      	mov	r1, r6
 8009f5c:	4640      	mov	r0, r8
 8009f5e:	f7fd fbd1 	bl	8007704 <_free_r>
 8009f62:	e7e1      	b.n	8009f28 <_realloc_r+0x1e>
 8009f64:	4635      	mov	r5, r6
 8009f66:	e7df      	b.n	8009f28 <_realloc_r+0x1e>

08009f68 <__ascii_wctomb>:
 8009f68:	b149      	cbz	r1, 8009f7e <__ascii_wctomb+0x16>
 8009f6a:	2aff      	cmp	r2, #255	; 0xff
 8009f6c:	bf85      	ittet	hi
 8009f6e:	238a      	movhi	r3, #138	; 0x8a
 8009f70:	6003      	strhi	r3, [r0, #0]
 8009f72:	700a      	strbls	r2, [r1, #0]
 8009f74:	f04f 30ff 	movhi.w	r0, #4294967295
 8009f78:	bf98      	it	ls
 8009f7a:	2001      	movls	r0, #1
 8009f7c:	4770      	bx	lr
 8009f7e:	4608      	mov	r0, r1
 8009f80:	4770      	bx	lr
	...

08009f84 <fiprintf>:
 8009f84:	b40e      	push	{r1, r2, r3}
 8009f86:	b503      	push	{r0, r1, lr}
 8009f88:	4601      	mov	r1, r0
 8009f8a:	ab03      	add	r3, sp, #12
 8009f8c:	4805      	ldr	r0, [pc, #20]	; (8009fa4 <fiprintf+0x20>)
 8009f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f92:	6800      	ldr	r0, [r0, #0]
 8009f94:	9301      	str	r3, [sp, #4]
 8009f96:	f7ff f97b 	bl	8009290 <_vfiprintf_r>
 8009f9a:	b002      	add	sp, #8
 8009f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fa0:	b003      	add	sp, #12
 8009fa2:	4770      	bx	lr
 8009fa4:	20000074 	.word	0x20000074

08009fa8 <abort>:
 8009fa8:	b508      	push	{r3, lr}
 8009faa:	2006      	movs	r0, #6
 8009fac:	f000 f834 	bl	800a018 <raise>
 8009fb0:	2001      	movs	r0, #1
 8009fb2:	f7f7 fd97 	bl	8001ae4 <_exit>

08009fb6 <_malloc_usable_size_r>:
 8009fb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fba:	1f18      	subs	r0, r3, #4
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	bfbc      	itt	lt
 8009fc0:	580b      	ldrlt	r3, [r1, r0]
 8009fc2:	18c0      	addlt	r0, r0, r3
 8009fc4:	4770      	bx	lr

08009fc6 <_raise_r>:
 8009fc6:	291f      	cmp	r1, #31
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4604      	mov	r4, r0
 8009fcc:	460d      	mov	r5, r1
 8009fce:	d904      	bls.n	8009fda <_raise_r+0x14>
 8009fd0:	2316      	movs	r3, #22
 8009fd2:	6003      	str	r3, [r0, #0]
 8009fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd8:	bd38      	pop	{r3, r4, r5, pc}
 8009fda:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009fdc:	b112      	cbz	r2, 8009fe4 <_raise_r+0x1e>
 8009fde:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fe2:	b94b      	cbnz	r3, 8009ff8 <_raise_r+0x32>
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f000 f831 	bl	800a04c <_getpid_r>
 8009fea:	462a      	mov	r2, r5
 8009fec:	4601      	mov	r1, r0
 8009fee:	4620      	mov	r0, r4
 8009ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ff4:	f000 b818 	b.w	800a028 <_kill_r>
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d00a      	beq.n	800a012 <_raise_r+0x4c>
 8009ffc:	1c59      	adds	r1, r3, #1
 8009ffe:	d103      	bne.n	800a008 <_raise_r+0x42>
 800a000:	2316      	movs	r3, #22
 800a002:	6003      	str	r3, [r0, #0]
 800a004:	2001      	movs	r0, #1
 800a006:	e7e7      	b.n	8009fd8 <_raise_r+0x12>
 800a008:	2400      	movs	r4, #0
 800a00a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a00e:	4628      	mov	r0, r5
 800a010:	4798      	blx	r3
 800a012:	2000      	movs	r0, #0
 800a014:	e7e0      	b.n	8009fd8 <_raise_r+0x12>
	...

0800a018 <raise>:
 800a018:	4b02      	ldr	r3, [pc, #8]	; (800a024 <raise+0xc>)
 800a01a:	4601      	mov	r1, r0
 800a01c:	6818      	ldr	r0, [r3, #0]
 800a01e:	f7ff bfd2 	b.w	8009fc6 <_raise_r>
 800a022:	bf00      	nop
 800a024:	20000074 	.word	0x20000074

0800a028 <_kill_r>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	4d07      	ldr	r5, [pc, #28]	; (800a048 <_kill_r+0x20>)
 800a02c:	2300      	movs	r3, #0
 800a02e:	4604      	mov	r4, r0
 800a030:	4608      	mov	r0, r1
 800a032:	4611      	mov	r1, r2
 800a034:	602b      	str	r3, [r5, #0]
 800a036:	f7f7 fd45 	bl	8001ac4 <_kill>
 800a03a:	1c43      	adds	r3, r0, #1
 800a03c:	d102      	bne.n	800a044 <_kill_r+0x1c>
 800a03e:	682b      	ldr	r3, [r5, #0]
 800a040:	b103      	cbz	r3, 800a044 <_kill_r+0x1c>
 800a042:	6023      	str	r3, [r4, #0]
 800a044:	bd38      	pop	{r3, r4, r5, pc}
 800a046:	bf00      	nop
 800a048:	20000508 	.word	0x20000508

0800a04c <_getpid_r>:
 800a04c:	f7f7 bd32 	b.w	8001ab4 <_getpid>

0800a050 <_init>:
 800a050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a052:	bf00      	nop
 800a054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a056:	bc08      	pop	{r3}
 800a058:	469e      	mov	lr, r3
 800a05a:	4770      	bx	lr

0800a05c <_fini>:
 800a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05e:	bf00      	nop
 800a060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a062:	bc08      	pop	{r3}
 800a064:	469e      	mov	lr, r3
 800a066:	4770      	bx	lr
