
BNO055_stm32_f303re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003764  08003764  00013764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800379c  0800379c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800379c  0800379c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800379c  0800379c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037a0  080037a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001dc  200001dc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001041b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000025e0  00000000  00000000  0003049a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e88  00000000  00000000  00032a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b5c  00000000  00000000  00033908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021034  00000000  00000000  00034464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000158bf  00000000  00000000  00055498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb754  00000000  00000000  0006ad57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003c1c  00000000  00000000  001364ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0013a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800374c 	.word	0x0800374c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800374c 	.word	0x0800374c

080001d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001da:	4b10      	ldr	r3, [pc, #64]	; (800021c <MX_DMA_Init+0x48>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	4a0f      	ldr	r2, [pc, #60]	; (800021c <MX_DMA_Init+0x48>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6153      	str	r3, [r2, #20]
 80001e6:	4b0d      	ldr	r3, [pc, #52]	; (800021c <MX_DMA_Init+0x48>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2100      	movs	r1, #0
 80001f6:	2010      	movs	r0, #16
 80001f8:	f000 fc81 	bl	8000afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80001fc:	2010      	movs	r0, #16
 80001fe:	f000 fc9a 	bl	8000b36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000202:	2200      	movs	r2, #0
 8000204:	2100      	movs	r1, #0
 8000206:	2011      	movs	r0, #17
 8000208:	f000 fc79 	bl	8000afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800020c:	2011      	movs	r0, #17
 800020e:	f000 fc92 	bl	8000b36 <HAL_NVIC_EnableIRQ>

}
 8000212:	bf00      	nop
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40021000 	.word	0x40021000

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b08a      	sub	sp, #40	; 0x28
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	f107 0314 	add.w	r3, r7, #20
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000236:	4b2b      	ldr	r3, [pc, #172]	; (80002e4 <MX_GPIO_Init+0xc4>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	4a2a      	ldr	r2, [pc, #168]	; (80002e4 <MX_GPIO_Init+0xc4>)
 800023c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000240:	6153      	str	r3, [r2, #20]
 8000242:	4b28      	ldr	r3, [pc, #160]	; (80002e4 <MX_GPIO_Init+0xc4>)
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800024a:	613b      	str	r3, [r7, #16]
 800024c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800024e:	4b25      	ldr	r3, [pc, #148]	; (80002e4 <MX_GPIO_Init+0xc4>)
 8000250:	695b      	ldr	r3, [r3, #20]
 8000252:	4a24      	ldr	r2, [pc, #144]	; (80002e4 <MX_GPIO_Init+0xc4>)
 8000254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000258:	6153      	str	r3, [r2, #20]
 800025a:	4b22      	ldr	r3, [pc, #136]	; (80002e4 <MX_GPIO_Init+0xc4>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000262:	60fb      	str	r3, [r7, #12]
 8000264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000266:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <MX_GPIO_Init+0xc4>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	4a1e      	ldr	r2, [pc, #120]	; (80002e4 <MX_GPIO_Init+0xc4>)
 800026c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000270:	6153      	str	r3, [r2, #20]
 8000272:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <MX_GPIO_Init+0xc4>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800027a:	60bb      	str	r3, [r7, #8]
 800027c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800027e:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <MX_GPIO_Init+0xc4>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	4a18      	ldr	r2, [pc, #96]	; (80002e4 <MX_GPIO_Init+0xc4>)
 8000284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000288:	6153      	str	r3, [r2, #20]
 800028a:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <MX_GPIO_Init+0xc4>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	2120      	movs	r1, #32
 800029a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029e:	f000 ff15 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80002ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002b2:	f107 0314 	add.w	r3, r7, #20
 80002b6:	4619      	mov	r1, r3
 80002b8:	480b      	ldr	r0, [pc, #44]	; (80002e8 <MX_GPIO_Init+0xc8>)
 80002ba:	f000 fd7d 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002be:	2320      	movs	r3, #32
 80002c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c2:	2301      	movs	r3, #1
 80002c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c6:	2300      	movs	r3, #0
 80002c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ca:	2300      	movs	r3, #0
 80002cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002ce:	f107 0314 	add.w	r3, r7, #20
 80002d2:	4619      	mov	r1, r3
 80002d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d8:	f000 fd6e 	bl	8000db8 <HAL_GPIO_Init>

}
 80002dc:	bf00      	nop
 80002de:	3728      	adds	r7, #40	; 0x28
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40021000 	.word	0x40021000
 80002e8:	48000800 	.word	0x48000800

080002ec <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <MX_I2C1_Init+0x74>)
 80002f2:	4a1c      	ldr	r2, [pc, #112]	; (8000364 <MX_I2C1_Init+0x78>)
 80002f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002f6:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <MX_I2C1_Init+0x74>)
 80002f8:	4a1b      	ldr	r2, [pc, #108]	; (8000368 <MX_I2C1_Init+0x7c>)
 80002fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <MX_I2C1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000302:	4b17      	ldr	r3, [pc, #92]	; (8000360 <MX_I2C1_Init+0x74>)
 8000304:	2201      	movs	r2, #1
 8000306:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <MX_I2C1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <MX_I2C1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <MX_I2C1_Init+0x74>)
 8000316:	2200      	movs	r2, #0
 8000318:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800031a:	4b11      	ldr	r3, [pc, #68]	; (8000360 <MX_I2C1_Init+0x74>)
 800031c:	2200      	movs	r2, #0
 800031e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <MX_I2C1_Init+0x74>)
 8000322:	2200      	movs	r2, #0
 8000324:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000326:	480e      	ldr	r0, [pc, #56]	; (8000360 <MX_I2C1_Init+0x74>)
 8000328:	f000 fee8 	bl	80010fc <HAL_I2C_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000332:	f000 f947 	bl	80005c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000336:	2100      	movs	r1, #0
 8000338:	4809      	ldr	r0, [pc, #36]	; (8000360 <MX_I2C1_Init+0x74>)
 800033a:	f000 ff6e 	bl	800121a <HAL_I2CEx_ConfigAnalogFilter>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000344:	f000 f93e 	bl	80005c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000348:	2100      	movs	r1, #0
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <MX_I2C1_Init+0x74>)
 800034c:	f000 ffb0 	bl	80012b0 <HAL_I2CEx_ConfigDigitalFilter>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000356:	f000 f935 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000028 	.word	0x20000028
 8000364:	40005400 	.word	0x40005400
 8000368:	2000090e 	.word	0x2000090e

0800036c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b08a      	sub	sp, #40	; 0x28
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000374:	f107 0314 	add.w	r3, r7, #20
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	60da      	str	r2, [r3, #12]
 8000382:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a4c      	ldr	r2, [pc, #304]	; (80004bc <HAL_I2C_MspInit+0x150>)
 800038a:	4293      	cmp	r3, r2
 800038c:	f040 8092 	bne.w	80004b4 <HAL_I2C_MspInit+0x148>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	4b4b      	ldr	r3, [pc, #300]	; (80004c0 <HAL_I2C_MspInit+0x154>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a4a      	ldr	r2, [pc, #296]	; (80004c0 <HAL_I2C_MspInit+0x154>)
 8000396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800039a:	6153      	str	r3, [r2, #20]
 800039c:	4b48      	ldr	r3, [pc, #288]	; (80004c0 <HAL_I2C_MspInit+0x154>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003a4:	613b      	str	r3, [r7, #16]
 80003a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a8:	4b45      	ldr	r3, [pc, #276]	; (80004c0 <HAL_I2C_MspInit+0x154>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a44      	ldr	r2, [pc, #272]	; (80004c0 <HAL_I2C_MspInit+0x154>)
 80003ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003b2:	6153      	str	r3, [r2, #20]
 80003b4:	4b42      	ldr	r3, [pc, #264]	; (80004c0 <HAL_I2C_MspInit+0x154>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003bc:	60fb      	str	r3, [r7, #12]
 80003be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80003c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003c6:	2312      	movs	r3, #18
 80003c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003ca:	2301      	movs	r3, #1
 80003cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ce:	2303      	movs	r3, #3
 80003d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003d2:	2304      	movs	r3, #4
 80003d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d6:	f107 0314 	add.w	r3, r7, #20
 80003da:	4619      	mov	r1, r3
 80003dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e0:	f000 fcea 	bl	8000db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80003e4:	2380      	movs	r3, #128	; 0x80
 80003e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003e8:	2312      	movs	r3, #18
 80003ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003ec:	2301      	movs	r3, #1
 80003ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003f0:	2303      	movs	r3, #3
 80003f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003f4:	2304      	movs	r3, #4
 80003f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f8:	f107 0314 	add.w	r3, r7, #20
 80003fc:	4619      	mov	r1, r3
 80003fe:	4831      	ldr	r0, [pc, #196]	; (80004c4 <HAL_I2C_MspInit+0x158>)
 8000400:	f000 fcda 	bl	8000db8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000404:	4b2e      	ldr	r3, [pc, #184]	; (80004c0 <HAL_I2C_MspInit+0x154>)
 8000406:	69db      	ldr	r3, [r3, #28]
 8000408:	4a2d      	ldr	r2, [pc, #180]	; (80004c0 <HAL_I2C_MspInit+0x154>)
 800040a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800040e:	61d3      	str	r3, [r2, #28]
 8000410:	4b2b      	ldr	r3, [pc, #172]	; (80004c0 <HAL_I2C_MspInit+0x154>)
 8000412:	69db      	ldr	r3, [r3, #28]
 8000414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800041c:	4b2a      	ldr	r3, [pc, #168]	; (80004c8 <HAL_I2C_MspInit+0x15c>)
 800041e:	4a2b      	ldr	r2, [pc, #172]	; (80004cc <HAL_I2C_MspInit+0x160>)
 8000420:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000422:	4b29      	ldr	r3, [pc, #164]	; (80004c8 <HAL_I2C_MspInit+0x15c>)
 8000424:	2200      	movs	r2, #0
 8000426:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000428:	4b27      	ldr	r3, [pc, #156]	; (80004c8 <HAL_I2C_MspInit+0x15c>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800042e:	4b26      	ldr	r3, [pc, #152]	; (80004c8 <HAL_I2C_MspInit+0x15c>)
 8000430:	2280      	movs	r2, #128	; 0x80
 8000432:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000434:	4b24      	ldr	r3, [pc, #144]	; (80004c8 <HAL_I2C_MspInit+0x15c>)
 8000436:	2200      	movs	r2, #0
 8000438:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800043a:	4b23      	ldr	r3, [pc, #140]	; (80004c8 <HAL_I2C_MspInit+0x15c>)
 800043c:	2200      	movs	r2, #0
 800043e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000440:	4b21      	ldr	r3, [pc, #132]	; (80004c8 <HAL_I2C_MspInit+0x15c>)
 8000442:	2200      	movs	r2, #0
 8000444:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000446:	4b20      	ldr	r3, [pc, #128]	; (80004c8 <HAL_I2C_MspInit+0x15c>)
 8000448:	2200      	movs	r2, #0
 800044a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800044c:	481e      	ldr	r0, [pc, #120]	; (80004c8 <HAL_I2C_MspInit+0x15c>)
 800044e:	f000 fb8c 	bl	8000b6a <HAL_DMA_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 8000458:	f000 f8b4 	bl	80005c4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a1a      	ldr	r2, [pc, #104]	; (80004c8 <HAL_I2C_MspInit+0x15c>)
 8000460:	63da      	str	r2, [r3, #60]	; 0x3c
 8000462:	4a19      	ldr	r2, [pc, #100]	; (80004c8 <HAL_I2C_MspInit+0x15c>)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <HAL_I2C_MspInit+0x164>)
 800046a:	4a1a      	ldr	r2, [pc, #104]	; (80004d4 <HAL_I2C_MspInit+0x168>)
 800046c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <HAL_I2C_MspInit+0x164>)
 8000470:	2210      	movs	r2, #16
 8000472:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000474:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <HAL_I2C_MspInit+0x164>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <HAL_I2C_MspInit+0x164>)
 800047c:	2280      	movs	r2, #128	; 0x80
 800047e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <HAL_I2C_MspInit+0x164>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <HAL_I2C_MspInit+0x164>)
 8000488:	2200      	movs	r2, #0
 800048a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800048c:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <HAL_I2C_MspInit+0x164>)
 800048e:	2200      	movs	r2, #0
 8000490:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <HAL_I2C_MspInit+0x164>)
 8000494:	2200      	movs	r2, #0
 8000496:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000498:	480d      	ldr	r0, [pc, #52]	; (80004d0 <HAL_I2C_MspInit+0x164>)
 800049a:	f000 fb66 	bl	8000b6a <HAL_DMA_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <HAL_I2C_MspInit+0x13c>
    {
      Error_Handler();
 80004a4:	f000 f88e 	bl	80005c4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a09      	ldr	r2, [pc, #36]	; (80004d0 <HAL_I2C_MspInit+0x164>)
 80004ac:	639a      	str	r2, [r3, #56]	; 0x38
 80004ae:	4a08      	ldr	r2, [pc, #32]	; (80004d0 <HAL_I2C_MspInit+0x164>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004b4:	bf00      	nop
 80004b6:	3728      	adds	r7, #40	; 0x28
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40005400 	.word	0x40005400
 80004c0:	40021000 	.word	0x40021000
 80004c4:	48000400 	.word	0x48000400
 80004c8:	2000007c 	.word	0x2000007c
 80004cc:	40020080 	.word	0x40020080
 80004d0:	200000c0 	.word	0x200000c0
 80004d4:	4002006c 	.word	0x4002006c

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 f9ce 	bl	800087c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f80c 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f7ff fe9c 	bl	8000220 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e8:	f7ff fe74 	bl	80001d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f92a 	bl	8000744 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004f0:	f7ff fefc 	bl	80002ec <MX_I2C1_Init>
  MX_TIM17_Init();
 80004f4:	f000 f8e0 	bl	80006b8 <MX_TIM17_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <main+0x20>
	...

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b0a6      	sub	sp, #152	; 0x98
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000506:	2228      	movs	r2, #40	; 0x28
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f003 f8f1 	bl	80036f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2258      	movs	r2, #88	; 0x58
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f003 f8e3 	bl	80036f2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052c:	2302      	movs	r3, #2
 800052e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000530:	2301      	movs	r3, #1
 8000532:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000534:	2310      	movs	r3, #16
 8000536:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	2302      	movs	r3, #2
 800053c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000544:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000548:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800054c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fef4 	bl	8001348 <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000566:	f000 f82d 	bl	80005c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	230f      	movs	r3, #15
 800056c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	2302      	movs	r3, #2
 8000570:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000580:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000584:	2102      	movs	r1, #2
 8000586:	4618      	mov	r0, r3
 8000588:	f001 ff32 	bl	80023f0 <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000592:	f000 f817 	bl	80005c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <SystemClock_Config+0xc4>)
 8000598:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800059e:	2300      	movs	r3, #0
 80005a0:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 f957 	bl	800285c <HAL_RCCEx_PeriphCLKConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80005b4:	f000 f806 	bl	80005c4 <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3798      	adds	r7, #152	; 0x98
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	01000022 	.word	0x01000022

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>
	...

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_MspInit+0x44>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <HAL_MspInit+0x44>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_MspInit+0x44>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <HAL_MspInit+0x44>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a08      	ldr	r2, [pc, #32]	; (8000614 <HAL_MspInit+0x44>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_MspInit+0x44>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000606:	2007      	movs	r0, #7
 8000608:	f000 fa6e 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800061c:	e7fe      	b.n	800061c <NMI_Handler+0x4>

0800061e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <MemManage_Handler+0x4>

0800062a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <BusFault_Handler+0x4>

08000630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <UsageFault_Handler+0x4>

08000636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000664:	f000 f950 	bl	8000908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <DMA1_Channel6_IRQHandler+0x10>)
 8000672:	f000 fac1 	bl	8000bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200000c0 	.word	0x200000c0

08000680 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000684:	4802      	ldr	r0, [pc, #8]	; (8000690 <DMA1_Channel7_IRQHandler+0x10>)
 8000686:	f000 fab7 	bl	8000bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	2000007c 	.word	0x2000007c

08000694 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <SystemInit+0x20>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <SystemInit+0x20>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_TIM17_Init+0x44>)
 80006be:	4a10      	ldr	r2, [pc, #64]	; (8000700 <MX_TIM17_Init+0x48>)
 80006c0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_TIM17_Init+0x44>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_TIM17_Init+0x44>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_TIM17_Init+0x44>)
 80006d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006d4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_TIM17_Init+0x44>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_TIM17_Init+0x44>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_TIM17_Init+0x44>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_TIM17_Init+0x44>)
 80006ea:	f002 fad5 	bl	8002c98 <HAL_TIM_Base_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80006f4:	f7ff ff66 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000104 	.word	0x20000104
 8000700:	40014800 	.word	0x40014800

08000704 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a0a      	ldr	r2, [pc, #40]	; (800073c <HAL_TIM_Base_MspInit+0x38>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d10b      	bne.n	800072e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <HAL_TIM_Base_MspInit+0x3c>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	4a09      	ldr	r2, [pc, #36]	; (8000740 <HAL_TIM_Base_MspInit+0x3c>)
 800071c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000720:	6193      	str	r3, [r2, #24]
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <HAL_TIM_Base_MspInit+0x3c>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40014800 	.word	0x40014800
 8000740:	40021000 	.word	0x40021000

08000744 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USART2_UART_Init+0x58>)
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <MX_USART2_UART_Init+0x5c>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000750:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART2_UART_Init+0x58>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000788:	f002 fb7c 	bl	8002e84 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f7ff ff17 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000150 	.word	0x20000150
 80007a0:	40004400 	.word	0x40004400

080007a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a17      	ldr	r2, [pc, #92]	; (8000820 <HAL_UART_MspInit+0x7c>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d128      	bne.n	8000818 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <HAL_UART_MspInit+0x80>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a16      	ldr	r2, [pc, #88]	; (8000824 <HAL_UART_MspInit+0x80>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_UART_MspInit+0x80>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <HAL_UART_MspInit+0x80>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a10      	ldr	r2, [pc, #64]	; (8000824 <HAL_UART_MspInit+0x80>)
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e8:	6153      	str	r3, [r2, #20]
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <HAL_UART_MspInit+0x80>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007f6:	230c      	movs	r3, #12
 80007f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000806:	2307      	movs	r3, #7
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f000 fad0 	bl	8000db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000818:	bf00      	nop
 800081a:	3728      	adds	r7, #40	; 0x28
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40004400 	.word	0x40004400
 8000824:	40021000 	.word	0x40021000

08000828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000860 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800082c:	f7ff ff32 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <LoopForever+0x6>)
  ldr r1, =_edata
 8000832:	490d      	ldr	r1, [pc, #52]	; (8000868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <LoopForever+0xe>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000848:	4c0a      	ldr	r4, [pc, #40]	; (8000874 <LoopForever+0x16>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000856:	f002 ff55 	bl	8003704 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800085a:	f7ff fe3d 	bl	80004d8 <main>

0800085e <LoopForever>:

LoopForever:
    b LoopForever
 800085e:	e7fe      	b.n	800085e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000860:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800086c:	080037a4 	.word	0x080037a4
  ldr r2, =_sbss
 8000870:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000874:	200001dc 	.word	0x200001dc

08000878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_2_IRQHandler>
	...

0800087c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_Init+0x28>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <HAL_Init+0x28>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088c:	2003      	movs	r0, #3
 800088e:	f000 f92b 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000892:	2000      	movs	r0, #0
 8000894:	f000 f808 	bl	80008a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000898:	f7ff fe9a 	bl	80005d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40022000 	.word	0x40022000

080008a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x54>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x58>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f943 	bl	8000b52 <HAL_SYSTICK_Config>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00e      	b.n	80008f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d80a      	bhi.n	80008f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f000 f90b 	bl	8000afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e8:	4a06      	ldr	r2, [pc, #24]	; (8000904 <HAL_InitTick+0x5c>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e000      	b.n	80008f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000008 	.word	0x20000008
 8000904:	20000004 	.word	0x20000004

08000908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x20>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x24>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_IncTick+0x24>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	20000008 	.word	0x20000008
 800092c:	200001d8 	.word	0x200001d8

08000930 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return uwTick;  
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <HAL_GetTick+0x14>)
 8000936:	681b      	ldr	r3, [r3, #0]
}
 8000938:	4618      	mov	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	200001d8 	.word	0x200001d8

08000948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000964:	4013      	ands	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	; (800098c <__NVIC_SetPriorityGrouping+0x44>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0a1b      	lsrs	r3, r3, #8
 800099a:	f003 0307 	and.w	r3, r3, #7
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db0b      	blt.n	80009d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f003 021f 	and.w	r2, r3, #31
 80009c4:	4907      	ldr	r1, [pc, #28]	; (80009e4 <__NVIC_EnableIRQ+0x38>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	095b      	lsrs	r3, r3, #5
 80009cc:	2001      	movs	r0, #1
 80009ce:	fa00 f202 	lsl.w	r2, r0, r2
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	; (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab4:	d301      	bcc.n	8000aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00f      	b.n	8000ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <SysTick_Config+0x40>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f7ff ff8e 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SysTick_Config+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SysTick_Config+0x40>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff29 	bl	8000948 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b10:	f7ff ff3e 	bl	8000990 <__NVIC_GetPriorityGrouping>
 8000b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	6978      	ldr	r0, [r7, #20]
 8000b1c:	f7ff ff8e 	bl	8000a3c <NVIC_EncodePriority>
 8000b20:	4602      	mov	r2, r0
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff5d 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff31 	bl	80009ac <__NVIC_EnableIRQ>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffa2 	bl	8000aa4 <SysTick_Config>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d101      	bne.n	8000b80 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e037      	b.n	8000bf0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2202      	movs	r2, #2
 8000b84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b96:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f000 f8b4 	bl	8000d40 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2201      	movs	r2, #1
 8000be2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000bee:	2300      	movs	r3, #0
}  
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	2204      	movs	r2, #4
 8000c16:	409a      	lsls	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d024      	beq.n	8000c6a <HAL_DMA_IRQHandler+0x72>
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d01f      	beq.n	8000c6a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0320 	and.w	r3, r3, #32
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d107      	bne.n	8000c48 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 0204 	bic.w	r2, r2, #4
 8000c46:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c50:	2104      	movs	r1, #4
 8000c52:	fa01 f202 	lsl.w	r2, r1, r2
 8000c56:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d06a      	beq.n	8000d36 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c68:	e065      	b.n	8000d36 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	2202      	movs	r2, #2
 8000c70:	409a      	lsls	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4013      	ands	r3, r2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d02c      	beq.n	8000cd4 <HAL_DMA_IRQHandler+0xdc>
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d027      	beq.n	8000cd4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0320 	and.w	r3, r3, #32
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10b      	bne.n	8000caa <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f022 020a 	bic.w	r2, r2, #10
 8000ca0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d035      	beq.n	8000d36 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000cd2:	e030      	b.n	8000d36 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	2208      	movs	r2, #8
 8000cda:	409a      	lsls	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d028      	beq.n	8000d36 <HAL_DMA_IRQHandler+0x13e>
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d023      	beq.n	8000d36 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 020e 	bic.w	r2, r2, #14
 8000cfc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d06:	2101      	movs	r1, #1
 8000d08:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d004      	beq.n	8000d36 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	4798      	blx	r3
    }
  }
}  
 8000d34:	e7ff      	b.n	8000d36 <HAL_DMA_IRQHandler+0x13e>
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <DMA_CalcBaseAndBitshift+0x60>)
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d80f      	bhi.n	8000d74 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <DMA_CalcBaseAndBitshift+0x64>)
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <DMA_CalcBaseAndBitshift+0x68>)
 8000d60:	fba2 2303 	umull	r2, r3, r2, r3
 8000d64:	091b      	lsrs	r3, r3, #4
 8000d66:	009a      	lsls	r2, r3, #2
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <DMA_CalcBaseAndBitshift+0x6c>)
 8000d70:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000d72:	e00e      	b.n	8000d92 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <DMA_CalcBaseAndBitshift+0x70>)
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <DMA_CalcBaseAndBitshift+0x68>)
 8000d80:	fba2 2303 	umull	r2, r3, r2, r3
 8000d84:	091b      	lsrs	r3, r3, #4
 8000d86:	009a      	lsls	r2, r3, #2
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <DMA_CalcBaseAndBitshift+0x74>)
 8000d90:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40020407 	.word	0x40020407
 8000da4:	bffdfff8 	.word	0xbffdfff8
 8000da8:	cccccccd 	.word	0xcccccccd
 8000dac:	40020000 	.word	0x40020000
 8000db0:	bffdfbf8 	.word	0xbffdfbf8
 8000db4:	40020400 	.word	0x40020400

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc6:	e160      	b.n	800108a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 8152 	beq.w	8001084 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d005      	beq.n	8000df8 <HAL_GPIO_Init+0x40>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d130      	bne.n	8000e5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e2e:	2201      	movs	r2, #1
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	091b      	lsrs	r3, r3, #4
 8000e44:	f003 0201 	and.w	r2, r3, #1
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d017      	beq.n	8000e96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d123      	bne.n	8000eea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	08da      	lsrs	r2, r3, #3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3208      	adds	r2, #8
 8000eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	691a      	ldr	r2, [r3, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	6939      	ldr	r1, [r7, #16]
 8000ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0203 	and.w	r2, r3, #3
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 80ac 	beq.w	8001084 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2c:	4b5e      	ldr	r3, [pc, #376]	; (80010a8 <HAL_GPIO_Init+0x2f0>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a5d      	ldr	r2, [pc, #372]	; (80010a8 <HAL_GPIO_Init+0x2f0>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b5b      	ldr	r3, [pc, #364]	; (80010a8 <HAL_GPIO_Init+0x2f0>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f44:	4a59      	ldr	r2, [pc, #356]	; (80010ac <HAL_GPIO_Init+0x2f4>)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f6e:	d025      	beq.n	8000fbc <HAL_GPIO_Init+0x204>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a4f      	ldr	r2, [pc, #316]	; (80010b0 <HAL_GPIO_Init+0x2f8>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d01f      	beq.n	8000fb8 <HAL_GPIO_Init+0x200>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a4e      	ldr	r2, [pc, #312]	; (80010b4 <HAL_GPIO_Init+0x2fc>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d019      	beq.n	8000fb4 <HAL_GPIO_Init+0x1fc>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a4d      	ldr	r2, [pc, #308]	; (80010b8 <HAL_GPIO_Init+0x300>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d013      	beq.n	8000fb0 <HAL_GPIO_Init+0x1f8>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a4c      	ldr	r2, [pc, #304]	; (80010bc <HAL_GPIO_Init+0x304>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d00d      	beq.n	8000fac <HAL_GPIO_Init+0x1f4>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a4b      	ldr	r2, [pc, #300]	; (80010c0 <HAL_GPIO_Init+0x308>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d007      	beq.n	8000fa8 <HAL_GPIO_Init+0x1f0>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a4a      	ldr	r2, [pc, #296]	; (80010c4 <HAL_GPIO_Init+0x30c>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d101      	bne.n	8000fa4 <HAL_GPIO_Init+0x1ec>
 8000fa0:	2306      	movs	r3, #6
 8000fa2:	e00c      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	e00a      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fa8:	2305      	movs	r3, #5
 8000faa:	e008      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fac:	2304      	movs	r3, #4
 8000fae:	e006      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e004      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e002      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e000      	b.n	8000fbe <HAL_GPIO_Init+0x206>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	f002 0203 	and.w	r2, r2, #3
 8000fc4:	0092      	lsls	r2, r2, #2
 8000fc6:	4093      	lsls	r3, r2
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fce:	4937      	ldr	r1, [pc, #220]	; (80010ac <HAL_GPIO_Init+0x2f4>)
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <HAL_GPIO_Init+0x310>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001000:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <HAL_GPIO_Init+0x310>)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001006:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <HAL_GPIO_Init+0x310>)
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800102a:	4a27      	ldr	r2, [pc, #156]	; (80010c8 <HAL_GPIO_Init+0x310>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001030:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <HAL_GPIO_Init+0x310>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001054:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <HAL_GPIO_Init+0x310>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <HAL_GPIO_Init+0x310>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <HAL_GPIO_Init+0x310>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3301      	adds	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa22 f303 	lsr.w	r3, r2, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	f47f ae97 	bne.w	8000dc8 <HAL_GPIO_Init+0x10>
  }
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010000 	.word	0x40010000
 80010b0:	48000400 	.word	0x48000400
 80010b4:	48000800 	.word	0x48000800
 80010b8:	48000c00 	.word	0x48000c00
 80010bc:	48001000 	.word	0x48001000
 80010c0:	48001400 	.word	0x48001400
 80010c4:	48001800 	.word	0x48001800
 80010c8:	40010400 	.word	0x40010400

080010cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010e8:	e002      	b.n	80010f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e081      	b.n	8001212 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d106      	bne.n	8001128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff f922 	bl	800036c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2224      	movs	r2, #36	; 0x24
 800112c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0201 	bic.w	r2, r2, #1
 800113e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800114c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800115c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d107      	bne.n	8001176 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	e006      	b.n	8001184 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001182:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d104      	bne.n	8001196 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001194:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691a      	ldr	r2, [r3, #16]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69d9      	ldr	r1, [r3, #28]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a1a      	ldr	r2, [r3, #32]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0201 	orr.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2220      	movs	r2, #32
 80011fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b20      	cmp	r3, #32
 800122e:	d138      	bne.n	80012a2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001236:	2b01      	cmp	r3, #1
 8001238:	d101      	bne.n	800123e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800123a:	2302      	movs	r3, #2
 800123c:	e032      	b.n	80012a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2224      	movs	r2, #36	; 0x24
 800124a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0201 	bic.w	r2, r2, #1
 800125c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800126c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6819      	ldr	r1, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f042 0201 	orr.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2220      	movs	r2, #32
 8001292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e000      	b.n	80012a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012a2:	2302      	movs	r3, #2
  }
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b20      	cmp	r3, #32
 80012c4:	d139      	bne.n	800133a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e033      	b.n	800133c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2224      	movs	r2, #36	; 0x24
 80012e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0201 	bic.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001302:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f042 0201 	orr.w	r2, r2, #1
 8001324:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2220      	movs	r2, #32
 800132a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800133a:	2302      	movs	r3, #2
  }
}
 800133c:	4618      	mov	r0, r3
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800134e:	af00      	add	r7, sp, #0
 8001350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001354:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001358:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800135a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800135e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	f001 b83a 	b.w	80023e2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001372:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 816f 	beq.w	8001662 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001384:	4bb5      	ldr	r3, [pc, #724]	; (800165c <HAL_RCC_OscConfig+0x314>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b04      	cmp	r3, #4
 800138e:	d00c      	beq.n	80013aa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001390:	4bb2      	ldr	r3, [pc, #712]	; (800165c <HAL_RCC_OscConfig+0x314>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	2b08      	cmp	r3, #8
 800139a:	d15c      	bne.n	8001456 <HAL_RCC_OscConfig+0x10e>
 800139c:	4baf      	ldr	r3, [pc, #700]	; (800165c <HAL_RCC_OscConfig+0x314>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a8:	d155      	bne.n	8001456 <HAL_RCC_OscConfig+0x10e>
 80013aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80013b6:	fa93 f3a3 	rbit	r3, r3
 80013ba:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013be:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c2:	fab3 f383 	clz	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	095b      	lsrs	r3, r3, #5
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d102      	bne.n	80013dc <HAL_RCC_OscConfig+0x94>
 80013d6:	4ba1      	ldr	r3, [pc, #644]	; (800165c <HAL_RCC_OscConfig+0x314>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	e015      	b.n	8001408 <HAL_RCC_OscConfig+0xc0>
 80013dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013e0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80013e8:	fa93 f3a3 	rbit	r3, r3
 80013ec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80013f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013f4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013f8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80013fc:	fa93 f3a3 	rbit	r3, r3
 8001400:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001404:	4b95      	ldr	r3, [pc, #596]	; (800165c <HAL_RCC_OscConfig+0x314>)
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800140c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001410:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001414:	fa92 f2a2 	rbit	r2, r2
 8001418:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800141c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001420:	fab2 f282 	clz	r2, r2
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	f042 0220 	orr.w	r2, r2, #32
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	f002 021f 	and.w	r2, r2, #31
 8001430:	2101      	movs	r1, #1
 8001432:	fa01 f202 	lsl.w	r2, r1, r2
 8001436:	4013      	ands	r3, r2
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 8111 	beq.w	8001660 <HAL_RCC_OscConfig+0x318>
 800143e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001442:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	f040 8108 	bne.w	8001660 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	f000 bfc6 	b.w	80023e2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001456:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800145a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x12e>
 8001468:	4b7c      	ldr	r3, [pc, #496]	; (800165c <HAL_RCC_OscConfig+0x314>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a7b      	ldr	r2, [pc, #492]	; (800165c <HAL_RCC_OscConfig+0x314>)
 800146e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e036      	b.n	80014e4 <HAL_RCC_OscConfig+0x19c>
 8001476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800147a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x158>
 8001486:	4b75      	ldr	r3, [pc, #468]	; (800165c <HAL_RCC_OscConfig+0x314>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a74      	ldr	r2, [pc, #464]	; (800165c <HAL_RCC_OscConfig+0x314>)
 800148c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b72      	ldr	r3, [pc, #456]	; (800165c <HAL_RCC_OscConfig+0x314>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a71      	ldr	r2, [pc, #452]	; (800165c <HAL_RCC_OscConfig+0x314>)
 8001498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e021      	b.n	80014e4 <HAL_RCC_OscConfig+0x19c>
 80014a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0x184>
 80014b2:	4b6a      	ldr	r3, [pc, #424]	; (800165c <HAL_RCC_OscConfig+0x314>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a69      	ldr	r2, [pc, #420]	; (800165c <HAL_RCC_OscConfig+0x314>)
 80014b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b67      	ldr	r3, [pc, #412]	; (800165c <HAL_RCC_OscConfig+0x314>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a66      	ldr	r2, [pc, #408]	; (800165c <HAL_RCC_OscConfig+0x314>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e00b      	b.n	80014e4 <HAL_RCC_OscConfig+0x19c>
 80014cc:	4b63      	ldr	r3, [pc, #396]	; (800165c <HAL_RCC_OscConfig+0x314>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a62      	ldr	r2, [pc, #392]	; (800165c <HAL_RCC_OscConfig+0x314>)
 80014d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b60      	ldr	r3, [pc, #384]	; (800165c <HAL_RCC_OscConfig+0x314>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a5f      	ldr	r2, [pc, #380]	; (800165c <HAL_RCC_OscConfig+0x314>)
 80014de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d059      	beq.n	80015a8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fa1c 	bl	8000930 <HAL_GetTick>
 80014f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014fe:	f7ff fa17 	bl	8000930 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d902      	bls.n	8001514 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	f000 bf67 	b.w	80023e2 <HAL_RCC_OscConfig+0x109a>
 8001514:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001518:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001520:	fa93 f3a3 	rbit	r3, r3
 8001524:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001528:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b01      	cmp	r3, #1
 800153e:	d102      	bne.n	8001546 <HAL_RCC_OscConfig+0x1fe>
 8001540:	4b46      	ldr	r3, [pc, #280]	; (800165c <HAL_RCC_OscConfig+0x314>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	e015      	b.n	8001572 <HAL_RCC_OscConfig+0x22a>
 8001546:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800154a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001552:	fa93 f3a3 	rbit	r3, r3
 8001556:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800155a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800155e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001562:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001566:	fa93 f3a3 	rbit	r3, r3
 800156a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800156e:	4b3b      	ldr	r3, [pc, #236]	; (800165c <HAL_RCC_OscConfig+0x314>)
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001576:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800157a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800157e:	fa92 f2a2 	rbit	r2, r2
 8001582:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001586:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800158a:	fab2 f282 	clz	r2, r2
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	f042 0220 	orr.w	r2, r2, #32
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	f002 021f 	and.w	r2, r2, #31
 800159a:	2101      	movs	r1, #1
 800159c:	fa01 f202 	lsl.w	r2, r1, r2
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0ab      	beq.n	80014fe <HAL_RCC_OscConfig+0x1b6>
 80015a6:	e05c      	b.n	8001662 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff f9c2 	bl	8000930 <HAL_GetTick>
 80015ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b2:	f7ff f9bd 	bl	8000930 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d902      	bls.n	80015c8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	f000 bf0d 	b.w	80023e2 <HAL_RCC_OscConfig+0x109a>
 80015c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015cc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80015d4:	fa93 f3a3 	rbit	r3, r3
 80015d8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80015dc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d102      	bne.n	80015fa <HAL_RCC_OscConfig+0x2b2>
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_RCC_OscConfig+0x314>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	e015      	b.n	8001626 <HAL_RCC_OscConfig+0x2de>
 80015fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001602:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001606:	fa93 f3a3 	rbit	r3, r3
 800160a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800160e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001612:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001616:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800161a:	fa93 f3a3 	rbit	r3, r3
 800161e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_RCC_OscConfig+0x314>)
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800162a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800162e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001632:	fa92 f2a2 	rbit	r2, r2
 8001636:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800163a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800163e:	fab2 f282 	clz	r2, r2
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	f042 0220 	orr.w	r2, r2, #32
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	f002 021f 	and.w	r2, r2, #31
 800164e:	2101      	movs	r1, #1
 8001650:	fa01 f202 	lsl.w	r2, r1, r2
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1ab      	bne.n	80015b2 <HAL_RCC_OscConfig+0x26a>
 800165a:	e002      	b.n	8001662 <HAL_RCC_OscConfig+0x31a>
 800165c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001666:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 817f 	beq.w	8001976 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001678:	4ba7      	ldr	r3, [pc, #668]	; (8001918 <HAL_RCC_OscConfig+0x5d0>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00c      	beq.n	800169e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001684:	4ba4      	ldr	r3, [pc, #656]	; (8001918 <HAL_RCC_OscConfig+0x5d0>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b08      	cmp	r3, #8
 800168e:	d173      	bne.n	8001778 <HAL_RCC_OscConfig+0x430>
 8001690:	4ba1      	ldr	r3, [pc, #644]	; (8001918 <HAL_RCC_OscConfig+0x5d0>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800169c:	d16c      	bne.n	8001778 <HAL_RCC_OscConfig+0x430>
 800169e:	2302      	movs	r3, #2
 80016a0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80016a8:	fa93 f3a3 	rbit	r3, r3
 80016ac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80016b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b4:	fab3 f383 	clz	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	095b      	lsrs	r3, r3, #5
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d102      	bne.n	80016ce <HAL_RCC_OscConfig+0x386>
 80016c8:	4b93      	ldr	r3, [pc, #588]	; (8001918 <HAL_RCC_OscConfig+0x5d0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	e013      	b.n	80016f6 <HAL_RCC_OscConfig+0x3ae>
 80016ce:	2302      	movs	r3, #2
 80016d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80016e0:	2302      	movs	r3, #2
 80016e2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016e6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016f2:	4b89      	ldr	r3, [pc, #548]	; (8001918 <HAL_RCC_OscConfig+0x5d0>)
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	2202      	movs	r2, #2
 80016f8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80016fc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001700:	fa92 f2a2 	rbit	r2, r2
 8001704:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001708:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800170c:	fab2 f282 	clz	r2, r2
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	f042 0220 	orr.w	r2, r2, #32
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	f002 021f 	and.w	r2, r2, #31
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f202 	lsl.w	r2, r1, r2
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00a      	beq.n	800173e <HAL_RCC_OscConfig+0x3f6>
 8001728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800172c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d002      	beq.n	800173e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	f000 be52 	b.w	80023e2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173e:	4b76      	ldr	r3, [pc, #472]	; (8001918 <HAL_RCC_OscConfig+0x5d0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001746:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800174a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	21f8      	movs	r1, #248	; 0xf8
 8001754:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001758:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800175c:	fa91 f1a1 	rbit	r1, r1
 8001760:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001764:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001768:	fab1 f181 	clz	r1, r1
 800176c:	b2c9      	uxtb	r1, r1
 800176e:	408b      	lsls	r3, r1
 8001770:	4969      	ldr	r1, [pc, #420]	; (8001918 <HAL_RCC_OscConfig+0x5d0>)
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001776:	e0fe      	b.n	8001976 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001778:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800177c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 8088 	beq.w	800189a <HAL_RCC_OscConfig+0x552>
 800178a:	2301      	movs	r3, #1
 800178c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800179c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a0:	fab3 f383 	clz	r3, r3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	461a      	mov	r2, r3
 80017b2:	2301      	movs	r3, #1
 80017b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7ff f8bb 	bl	8000930 <HAL_GetTick>
 80017ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017be:	e00a      	b.n	80017d6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c0:	f7ff f8b6 	bl	8000930 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d902      	bls.n	80017d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	f000 be06 	b.w	80023e2 <HAL_RCC_OscConfig+0x109a>
 80017d6:	2302      	movs	r3, #2
 80017d8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80017e8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ec:	fab3 f383 	clz	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d102      	bne.n	8001806 <HAL_RCC_OscConfig+0x4be>
 8001800:	4b45      	ldr	r3, [pc, #276]	; (8001918 <HAL_RCC_OscConfig+0x5d0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	e013      	b.n	800182e <HAL_RCC_OscConfig+0x4e6>
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001810:	fa93 f3a3 	rbit	r3, r3
 8001814:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001818:	2302      	movs	r3, #2
 800181a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800181e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001822:	fa93 f3a3 	rbit	r3, r3
 8001826:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_RCC_OscConfig+0x5d0>)
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	2202      	movs	r2, #2
 8001830:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001834:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001838:	fa92 f2a2 	rbit	r2, r2
 800183c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001840:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001844:	fab2 f282 	clz	r2, r2
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	f042 0220 	orr.w	r2, r2, #32
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	f002 021f 	and.w	r2, r2, #31
 8001854:	2101      	movs	r1, #1
 8001856:	fa01 f202 	lsl.w	r2, r1, r2
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0af      	beq.n	80017c0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <HAL_RCC_OscConfig+0x5d0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800186c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	21f8      	movs	r1, #248	; 0xf8
 8001876:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800187e:	fa91 f1a1 	rbit	r1, r1
 8001882:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001886:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800188a:	fab1 f181 	clz	r1, r1
 800188e:	b2c9      	uxtb	r1, r1
 8001890:	408b      	lsls	r3, r1
 8001892:	4921      	ldr	r1, [pc, #132]	; (8001918 <HAL_RCC_OscConfig+0x5d0>)
 8001894:	4313      	orrs	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
 8001898:	e06d      	b.n	8001976 <HAL_RCC_OscConfig+0x62e>
 800189a:	2301      	movs	r3, #1
 800189c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80018a4:	fa93 f3a3 	rbit	r3, r3
 80018a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80018ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b0:	fab3 f383 	clz	r3, r3
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	461a      	mov	r2, r3
 80018c2:	2300      	movs	r3, #0
 80018c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c6:	f7ff f833 	bl	8000930 <HAL_GetTick>
 80018ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d0:	f7ff f82e 	bl	8000930 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d902      	bls.n	80018e6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	f000 bd7e 	b.w	80023e2 <HAL_RCC_OscConfig+0x109a>
 80018e6:	2302      	movs	r3, #2
 80018e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80018f0:	fa93 f3a3 	rbit	r3, r3
 80018f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80018f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fc:	fab3 f383 	clz	r3, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	b2db      	uxtb	r3, r3
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_RCC_OscConfig+0x5d4>
 8001910:	4b01      	ldr	r3, [pc, #4]	; (8001918 <HAL_RCC_OscConfig+0x5d0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	e016      	b.n	8001944 <HAL_RCC_OscConfig+0x5fc>
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	2302      	movs	r3, #2
 800191e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800192e:	2302      	movs	r3, #2
 8001930:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001934:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001938:	fa93 f3a3 	rbit	r3, r3
 800193c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001940:	4bbf      	ldr	r3, [pc, #764]	; (8001c40 <HAL_RCC_OscConfig+0x8f8>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	2202      	movs	r2, #2
 8001946:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800194a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800194e:	fa92 f2a2 	rbit	r2, r2
 8001952:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001956:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800195a:	fab2 f282 	clz	r2, r2
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	f042 0220 	orr.w	r2, r2, #32
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	f002 021f 	and.w	r2, r2, #31
 800196a:	2101      	movs	r1, #1
 800196c:	fa01 f202 	lsl.w	r2, r1, r2
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ac      	bne.n	80018d0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001976:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 8113 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001990:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d07c      	beq.n	8001a96 <HAL_RCC_OscConfig+0x74e>
 800199c:	2301      	movs	r3, #1
 800199e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80019ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	4ba2      	ldr	r3, [pc, #648]	; (8001c44 <HAL_RCC_OscConfig+0x8fc>)
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	461a      	mov	r2, r3
 80019c2:	2301      	movs	r3, #1
 80019c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c6:	f7fe ffb3 	bl	8000930 <HAL_GetTick>
 80019ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ce:	e00a      	b.n	80019e6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d0:	f7fe ffae 	bl	8000930 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d902      	bls.n	80019e6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	f000 bcfe 	b.w	80023e2 <HAL_RCC_OscConfig+0x109a>
 80019e6:	2302      	movs	r3, #2
 80019e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019f0:	fa93 f2a3 	rbit	r2, r3
 80019f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a06:	2202      	movs	r2, #2
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fa93 f2a3 	rbit	r2, r3
 8001a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a44:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a46:	4b7e      	ldr	r3, [pc, #504]	; (8001c40 <HAL_RCC_OscConfig+0x8f8>)
 8001a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a52:	2102      	movs	r1, #2
 8001a54:	6019      	str	r1, [r3, #0]
 8001a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	fa93 f1a3 	rbit	r1, r3
 8001a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a6c:	6019      	str	r1, [r3, #0]
  return result;
 8001a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a72:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	2101      	movs	r1, #1
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d09d      	beq.n	80019d0 <HAL_RCC_OscConfig+0x688>
 8001a94:	e08d      	b.n	8001bb2 <HAL_RCC_OscConfig+0x86a>
 8001a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a9a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ab8:	601a      	str	r2, [r3, #0]
  return result;
 8001aba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ac2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b5d      	ldr	r3, [pc, #372]	; (8001c44 <HAL_RCC_OscConfig+0x8fc>)
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad8:	f7fe ff2a 	bl	8000930 <HAL_GetTick>
 8001adc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae0:	e00a      	b.n	8001af8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae2:	f7fe ff25 	bl	8000930 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d902      	bls.n	8001af8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	f000 bc75 	b.w	80023e2 <HAL_RCC_OscConfig+0x109a>
 8001af8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b00:	2202      	movs	r2, #2
 8001b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b08:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	fa93 f2a3 	rbit	r2, r3
 8001b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b24:	2202      	movs	r2, #2
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	fa93 f2a3 	rbit	r2, r3
 8001b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b48:	2202      	movs	r2, #2
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b50:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	fa93 f2a3 	rbit	r2, r3
 8001b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b62:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b64:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <HAL_RCC_OscConfig+0x8f8>)
 8001b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b70:	2102      	movs	r1, #2
 8001b72:	6019      	str	r1, [r3, #0]
 8001b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b78:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	fa93 f1a3 	rbit	r1, r3
 8001b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b86:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b8a:	6019      	str	r1, [r3, #0]
  return result;
 8001b8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b90:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	fab3 f383 	clz	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d197      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 81a5 	beq.w	8001f12 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <HAL_RCC_OscConfig+0x8f8>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d116      	bne.n	8001c08 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_RCC_OscConfig+0x8f8>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	4a18      	ldr	r2, [pc, #96]	; (8001c40 <HAL_RCC_OscConfig+0x8f8>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	61d3      	str	r3, [r2, #28]
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <HAL_RCC_OscConfig+0x8f8>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001bee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c00:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c02:	2301      	movs	r3, #1
 8001c04:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_RCC_OscConfig+0x900>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d121      	bne.n	8001c58 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <HAL_RCC_OscConfig+0x900>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <HAL_RCC_OscConfig+0x900>)
 8001c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c20:	f7fe fe86 	bl	8000930 <HAL_GetTick>
 8001c24:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c28:	e010      	b.n	8001c4c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2a:	f7fe fe81 	bl	8000930 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d908      	bls.n	8001c4c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e3d1      	b.n	80023e2 <HAL_RCC_OscConfig+0x109a>
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	10908120 	.word	0x10908120
 8001c48:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4c:	4b8d      	ldr	r3, [pc, #564]	; (8001e84 <HAL_RCC_OscConfig+0xb3c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0e8      	beq.n	8001c2a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x92e>
 8001c68:	4b87      	ldr	r3, [pc, #540]	; (8001e88 <HAL_RCC_OscConfig+0xb40>)
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4a86      	ldr	r2, [pc, #536]	; (8001e88 <HAL_RCC_OscConfig+0xb40>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6213      	str	r3, [r2, #32]
 8001c74:	e035      	b.n	8001ce2 <HAL_RCC_OscConfig+0x99a>
 8001c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x958>
 8001c86:	4b80      	ldr	r3, [pc, #512]	; (8001e88 <HAL_RCC_OscConfig+0xb40>)
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	4a7f      	ldr	r2, [pc, #508]	; (8001e88 <HAL_RCC_OscConfig+0xb40>)
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	6213      	str	r3, [r2, #32]
 8001c92:	4b7d      	ldr	r3, [pc, #500]	; (8001e88 <HAL_RCC_OscConfig+0xb40>)
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	4a7c      	ldr	r2, [pc, #496]	; (8001e88 <HAL_RCC_OscConfig+0xb40>)
 8001c98:	f023 0304 	bic.w	r3, r3, #4
 8001c9c:	6213      	str	r3, [r2, #32]
 8001c9e:	e020      	b.n	8001ce2 <HAL_RCC_OscConfig+0x99a>
 8001ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b05      	cmp	r3, #5
 8001cae:	d10c      	bne.n	8001cca <HAL_RCC_OscConfig+0x982>
 8001cb0:	4b75      	ldr	r3, [pc, #468]	; (8001e88 <HAL_RCC_OscConfig+0xb40>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a74      	ldr	r2, [pc, #464]	; (8001e88 <HAL_RCC_OscConfig+0xb40>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	4b72      	ldr	r3, [pc, #456]	; (8001e88 <HAL_RCC_OscConfig+0xb40>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	4a71      	ldr	r2, [pc, #452]	; (8001e88 <HAL_RCC_OscConfig+0xb40>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6213      	str	r3, [r2, #32]
 8001cc8:	e00b      	b.n	8001ce2 <HAL_RCC_OscConfig+0x99a>
 8001cca:	4b6f      	ldr	r3, [pc, #444]	; (8001e88 <HAL_RCC_OscConfig+0xb40>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a6e      	ldr	r2, [pc, #440]	; (8001e88 <HAL_RCC_OscConfig+0xb40>)
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	6213      	str	r3, [r2, #32]
 8001cd6:	4b6c      	ldr	r3, [pc, #432]	; (8001e88 <HAL_RCC_OscConfig+0xb40>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4a6b      	ldr	r2, [pc, #428]	; (8001e88 <HAL_RCC_OscConfig+0xb40>)
 8001cdc:	f023 0304 	bic.w	r3, r3, #4
 8001ce0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8081 	beq.w	8001df6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf4:	f7fe fe1c 	bl	8000930 <HAL_GetTick>
 8001cf8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfc:	e00b      	b.n	8001d16 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7fe fe17 	bl	8000930 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e365      	b.n	80023e2 <HAL_RCC_OscConfig+0x109a>
 8001d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d1e:	2202      	movs	r2, #2
 8001d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d26:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	fa93 f2a3 	rbit	r2, r3
 8001d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d42:	2202      	movs	r2, #2
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	fa93 f2a3 	rbit	r2, r3
 8001d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d58:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d5c:	601a      	str	r2, [r3, #0]
  return result;
 8001d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d62:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d102      	bne.n	8001d82 <HAL_RCC_OscConfig+0xa3a>
 8001d7c:	4b42      	ldr	r3, [pc, #264]	; (8001e88 <HAL_RCC_OscConfig+0xb40>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	e013      	b.n	8001daa <HAL_RCC_OscConfig+0xa62>
 8001d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d86:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d92:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	fa93 f2a3 	rbit	r2, r3
 8001d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <HAL_RCC_OscConfig+0xb40>)
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001db2:	2102      	movs	r1, #2
 8001db4:	6011      	str	r1, [r2, #0]
 8001db6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	fa92 f1a2 	rbit	r1, r2
 8001dc4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dc8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001dcc:	6011      	str	r1, [r2, #0]
  return result;
 8001dce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dd2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	fab2 f282 	clz	r2, r2
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	f002 021f 	and.w	r2, r2, #31
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f202 	lsl.w	r2, r1, r2
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d084      	beq.n	8001cfe <HAL_RCC_OscConfig+0x9b6>
 8001df4:	e083      	b.n	8001efe <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df6:	f7fe fd9b 	bl	8000930 <HAL_GetTick>
 8001dfa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7fe fd96 	bl	8000930 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e2e4      	b.n	80023e2 <HAL_RCC_OscConfig+0x109a>
 8001e18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e20:	2202      	movs	r2, #2
 8001e22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e28:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	fa93 f2a3 	rbit	r2, r3
 8001e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e36:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e40:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e44:	2202      	movs	r2, #2
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f2a3 	rbit	r2, r3
 8001e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e5e:	601a      	str	r2, [r3, #0]
  return result;
 8001e60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e64:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e68:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	095b      	lsrs	r3, r3, #5
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d106      	bne.n	8001e8c <HAL_RCC_OscConfig+0xb44>
 8001e7e:	4b02      	ldr	r3, [pc, #8]	; (8001e88 <HAL_RCC_OscConfig+0xb40>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	e017      	b.n	8001eb4 <HAL_RCC_OscConfig+0xb6c>
 8001e84:	40007000 	.word	0x40007000
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e90:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001e94:	2202      	movs	r2, #2
 8001e96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	fa93 f2a3 	rbit	r2, r3
 8001ea6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eaa:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	4bb3      	ldr	r3, [pc, #716]	; (8002180 <HAL_RCC_OscConfig+0xe38>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eb8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	6011      	str	r1, [r2, #0]
 8001ec0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ec4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	fa92 f1a2 	rbit	r1, r2
 8001ece:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ed2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001ed6:	6011      	str	r1, [r2, #0]
  return result;
 8001ed8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001edc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	fab2 f282 	clz	r2, r2
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	f002 021f 	and.w	r2, r2, #31
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d180      	bne.n	8001e00 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001efe:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d105      	bne.n	8001f12 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f06:	4b9e      	ldr	r3, [pc, #632]	; (8002180 <HAL_RCC_OscConfig+0xe38>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	4a9d      	ldr	r2, [pc, #628]	; (8002180 <HAL_RCC_OscConfig+0xe38>)
 8001f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f10:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 825e 	beq.w	80023e0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f24:	4b96      	ldr	r3, [pc, #600]	; (8002180 <HAL_RCC_OscConfig+0xe38>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	f000 821f 	beq.w	8002370 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	f040 8170 	bne.w	8002224 <HAL_RCC_OscConfig+0xedc>
 8001f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f48:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f56:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	fa93 f2a3 	rbit	r2, r3
 8001f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f64:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001f68:	601a      	str	r2, [r3, #0]
  return result;
 8001f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001f72:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	461a      	mov	r2, r3
 8001f86:	2300      	movs	r3, #0
 8001f88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7fe fcd1 	bl	8000930 <HAL_GetTick>
 8001f8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f92:	e009      	b.n	8001fa8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f94:	f7fe fccc 	bl	8000930 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e21c      	b.n	80023e2 <HAL_RCC_OscConfig+0x109a>
 8001fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	fa93 f2a3 	rbit	r2, r3
 8001fc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001fcc:	601a      	str	r2, [r3, #0]
  return result;
 8001fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001fd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d102      	bne.n	8001ff2 <HAL_RCC_OscConfig+0xcaa>
 8001fec:	4b64      	ldr	r3, [pc, #400]	; (8002180 <HAL_RCC_OscConfig+0xe38>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	e027      	b.n	8002042 <HAL_RCC_OscConfig+0xcfa>
 8001ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ffa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ffe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002004:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	fa93 f2a3 	rbit	r2, r3
 800200e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002012:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800201c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	fa93 f2a3 	rbit	r2, r3
 8002034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002038:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	4b50      	ldr	r3, [pc, #320]	; (8002180 <HAL_RCC_OscConfig+0xe38>)
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002046:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800204a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800204e:	6011      	str	r1, [r2, #0]
 8002050:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002054:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	fa92 f1a2 	rbit	r1, r2
 800205e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002062:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002066:	6011      	str	r1, [r2, #0]
  return result;
 8002068:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800206c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	fab2 f282 	clz	r2, r2
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	f042 0220 	orr.w	r2, r2, #32
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	f002 021f 	and.w	r2, r2, #31
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f202 	lsl.w	r2, r1, r2
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d182      	bne.n	8001f94 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800208e:	4b3c      	ldr	r3, [pc, #240]	; (8002180 <HAL_RCC_OscConfig+0xe38>)
 8002090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002092:	f023 020f 	bic.w	r2, r3, #15
 8002096:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	4937      	ldr	r1, [pc, #220]	; (8002180 <HAL_RCC_OscConfig+0xe38>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80020a8:	4b35      	ldr	r3, [pc, #212]	; (8002180 <HAL_RCC_OscConfig+0xe38>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80020b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6a19      	ldr	r1, [r3, #32]
 80020bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	492d      	ldr	r1, [pc, #180]	; (8002180 <HAL_RCC_OscConfig+0xe38>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
 80020d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	fa93 f2a3 	rbit	r2, r3
 80020ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80020f4:	601a      	str	r2, [r3, #0]
  return result;
 80020f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80020fe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800210a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	461a      	mov	r2, r3
 8002112:	2301      	movs	r3, #1
 8002114:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002116:	f7fe fc0b 	bl	8000930 <HAL_GetTick>
 800211a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800211e:	e009      	b.n	8002134 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002120:	f7fe fc06 	bl	8000930 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e156      	b.n	80023e2 <HAL_RCC_OscConfig+0x109a>
 8002134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002138:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800213c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002146:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002154:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002158:	601a      	str	r2, [r3, #0]
  return result;
 800215a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800215e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002162:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <HAL_RCC_OscConfig+0xe3c>
 8002178:	4b01      	ldr	r3, [pc, #4]	; (8002180 <HAL_RCC_OscConfig+0xe38>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	e02a      	b.n	80021d4 <HAL_RCC_OscConfig+0xe8c>
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000
 8002184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002188:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800218c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002196:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	fa93 f2a3 	rbit	r2, r3
 80021a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80021b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021bc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	fa93 f2a3 	rbit	r2, r3
 80021c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ca:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	4b86      	ldr	r3, [pc, #536]	; (80023ec <HAL_RCC_OscConfig+0x10a4>)
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021d8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021e0:	6011      	str	r1, [r2, #0]
 80021e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021e6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	fa92 f1a2 	rbit	r1, r2
 80021f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021f4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80021f8:	6011      	str	r1, [r2, #0]
  return result;
 80021fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021fe:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	fab2 f282 	clz	r2, r2
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	f042 0220 	orr.w	r2, r2, #32
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f002 021f 	and.w	r2, r2, #31
 8002214:	2101      	movs	r1, #1
 8002216:	fa01 f202 	lsl.w	r2, r1, r2
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	f43f af7f 	beq.w	8002120 <HAL_RCC_OscConfig+0xdd8>
 8002222:	e0dd      	b.n	80023e0 <HAL_RCC_OscConfig+0x1098>
 8002224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002228:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800222c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002230:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002232:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002236:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	fa93 f2a3 	rbit	r2, r3
 8002240:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002244:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002248:	601a      	str	r2, [r3, #0]
  return result;
 800224a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800224e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002252:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800225e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	461a      	mov	r2, r3
 8002266:	2300      	movs	r3, #0
 8002268:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7fe fb61 	bl	8000930 <HAL_GetTick>
 800226e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002272:	e009      	b.n	8002288 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002274:	f7fe fb5c 	bl	8000930 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e0ac      	b.n	80023e2 <HAL_RCC_OscConfig+0x109a>
 8002288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002290:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002294:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	fa93 f2a3 	rbit	r2, r3
 80022a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022ac:	601a      	str	r2, [r3, #0]
  return result;
 80022ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d102      	bne.n	80022d2 <HAL_RCC_OscConfig+0xf8a>
 80022cc:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_RCC_OscConfig+0x10a4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	e027      	b.n	8002322 <HAL_RCC_OscConfig+0xfda>
 80022d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80022da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	fa93 f2a3 	rbit	r2, r3
 80022ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022fc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002300:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	fa93 f2a3 	rbit	r2, r3
 8002314:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002318:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	4b33      	ldr	r3, [pc, #204]	; (80023ec <HAL_RCC_OscConfig+0x10a4>)
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002326:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800232a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800232e:	6011      	str	r1, [r2, #0]
 8002330:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002334:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	fa92 f1a2 	rbit	r1, r2
 800233e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002342:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002346:	6011      	str	r1, [r2, #0]
  return result;
 8002348:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800234c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	fab2 f282 	clz	r2, r2
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	f042 0220 	orr.w	r2, r2, #32
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	f002 021f 	and.w	r2, r2, #31
 8002362:	2101      	movs	r1, #1
 8002364:	fa01 f202 	lsl.w	r2, r1, r2
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d182      	bne.n	8002274 <HAL_RCC_OscConfig+0xf2c>
 800236e:	e037      	b.n	80023e0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002374:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e02e      	b.n	80023e2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_RCC_OscConfig+0x10a4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800238c:	4b17      	ldr	r3, [pc, #92]	; (80023ec <HAL_RCC_OscConfig+0x10a4>)
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002394:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002398:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800239c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d117      	bne.n	80023dc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80023b0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d10b      	bne.n	80023dc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80023c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023c8:	f003 020f 	and.w	r2, r3, #15
 80023cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000

080023f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b09e      	sub	sp, #120	; 0x78
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e162      	b.n	80026ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002408:	4b90      	ldr	r3, [pc, #576]	; (800264c <HAL_RCC_ClockConfig+0x25c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d910      	bls.n	8002438 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002416:	4b8d      	ldr	r3, [pc, #564]	; (800264c <HAL_RCC_ClockConfig+0x25c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 0207 	bic.w	r2, r3, #7
 800241e:	498b      	ldr	r1, [pc, #556]	; (800264c <HAL_RCC_ClockConfig+0x25c>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b89      	ldr	r3, [pc, #548]	; (800264c <HAL_RCC_ClockConfig+0x25c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e14a      	b.n	80026ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002444:	4b82      	ldr	r3, [pc, #520]	; (8002650 <HAL_RCC_ClockConfig+0x260>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	497f      	ldr	r1, [pc, #508]	; (8002650 <HAL_RCC_ClockConfig+0x260>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80dc 	beq.w	800261c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d13c      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xf6>
 800246c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002470:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800247a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247c:	fab3 f383 	clz	r3, r3
 8002480:	b2db      	uxtb	r3, r3
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b01      	cmp	r3, #1
 800248e:	d102      	bne.n	8002496 <HAL_RCC_ClockConfig+0xa6>
 8002490:	4b6f      	ldr	r3, [pc, #444]	; (8002650 <HAL_RCC_ClockConfig+0x260>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	e00f      	b.n	80024b6 <HAL_RCC_ClockConfig+0xc6>
 8002496:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800249a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	667b      	str	r3, [r7, #100]	; 0x64
 80024a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a8:	663b      	str	r3, [r7, #96]	; 0x60
 80024aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024b2:	4b67      	ldr	r3, [pc, #412]	; (8002650 <HAL_RCC_ClockConfig+0x260>)
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80024bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024be:	fa92 f2a2 	rbit	r2, r2
 80024c2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80024c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024c6:	fab2 f282 	clz	r2, r2
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	f042 0220 	orr.w	r2, r2, #32
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	f002 021f 	and.w	r2, r2, #31
 80024d6:	2101      	movs	r1, #1
 80024d8:	fa01 f202 	lsl.w	r2, r1, r2
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d17b      	bne.n	80025da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0f3      	b.n	80026ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d13c      	bne.n	8002568 <HAL_RCC_ClockConfig+0x178>
 80024ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d102      	bne.n	8002518 <HAL_RCC_ClockConfig+0x128>
 8002512:	4b4f      	ldr	r3, [pc, #316]	; (8002650 <HAL_RCC_ClockConfig+0x260>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	e00f      	b.n	8002538 <HAL_RCC_ClockConfig+0x148>
 8002518:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800251c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	647b      	str	r3, [r7, #68]	; 0x44
 8002526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800252a:	643b      	str	r3, [r7, #64]	; 0x40
 800252c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800252e:	fa93 f3a3 	rbit	r3, r3
 8002532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002534:	4b46      	ldr	r3, [pc, #280]	; (8002650 <HAL_RCC_ClockConfig+0x260>)
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800253c:	63ba      	str	r2, [r7, #56]	; 0x38
 800253e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002540:	fa92 f2a2 	rbit	r2, r2
 8002544:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002548:	fab2 f282 	clz	r2, r2
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	f042 0220 	orr.w	r2, r2, #32
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	f002 021f 	and.w	r2, r2, #31
 8002558:	2101      	movs	r1, #1
 800255a:	fa01 f202 	lsl.w	r2, r1, r2
 800255e:	4013      	ands	r3, r2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d13a      	bne.n	80025da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0b2      	b.n	80026ce <HAL_RCC_ClockConfig+0x2de>
 8002568:	2302      	movs	r3, #2
 800256a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d102      	bne.n	8002590 <HAL_RCC_ClockConfig+0x1a0>
 800258a:	4b31      	ldr	r3, [pc, #196]	; (8002650 <HAL_RCC_ClockConfig+0x260>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	e00d      	b.n	80025ac <HAL_RCC_ClockConfig+0x1bc>
 8002590:	2302      	movs	r3, #2
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
 800259c:	2302      	movs	r3, #2
 800259e:	623b      	str	r3, [r7, #32]
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	4b29      	ldr	r3, [pc, #164]	; (8002650 <HAL_RCC_ClockConfig+0x260>)
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	2202      	movs	r2, #2
 80025ae:	61ba      	str	r2, [r7, #24]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	fa92 f2a2 	rbit	r2, r2
 80025b6:	617a      	str	r2, [r7, #20]
  return result;
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	fab2 f282 	clz	r2, r2
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	f042 0220 	orr.w	r2, r2, #32
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	f002 021f 	and.w	r2, r2, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f202 	lsl.w	r2, r1, r2
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e079      	b.n	80026ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025da:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <HAL_RCC_ClockConfig+0x260>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f023 0203 	bic.w	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	491a      	ldr	r1, [pc, #104]	; (8002650 <HAL_RCC_ClockConfig+0x260>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ec:	f7fe f9a0 	bl	8000930 <HAL_GetTick>
 80025f0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	e00a      	b.n	800260a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f4:	f7fe f99c 	bl	8000930 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e061      	b.n	80026ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <HAL_RCC_ClockConfig+0x260>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 020c 	and.w	r2, r3, #12
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	429a      	cmp	r2, r3
 800261a:	d1eb      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_ClockConfig+0x25c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d214      	bcs.n	8002654 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <HAL_RCC_ClockConfig+0x25c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 0207 	bic.w	r2, r3, #7
 8002632:	4906      	ldr	r1, [pc, #24]	; (800264c <HAL_RCC_ClockConfig+0x25c>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <HAL_RCC_ClockConfig+0x25c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e040      	b.n	80026ce <HAL_RCC_ClockConfig+0x2de>
 800264c:	40022000 	.word	0x40022000
 8002650:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002660:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <HAL_RCC_ClockConfig+0x2e8>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	491a      	ldr	r1, [pc, #104]	; (80026d8 <HAL_RCC_ClockConfig+0x2e8>)
 800266e:	4313      	orrs	r3, r2
 8002670:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267e:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <HAL_RCC_ClockConfig+0x2e8>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4912      	ldr	r1, [pc, #72]	; (80026d8 <HAL_RCC_ClockConfig+0x2e8>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002692:	f000 f829 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 8002696:	4601      	mov	r1, r0
 8002698:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <HAL_RCC_ClockConfig+0x2e8>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026a0:	22f0      	movs	r2, #240	; 0xf0
 80026a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	fa92 f2a2 	rbit	r2, r2
 80026aa:	60fa      	str	r2, [r7, #12]
  return result;
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	fab2 f282 	clz	r2, r2
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	40d3      	lsrs	r3, r2
 80026b6:	4a09      	ldr	r2, [pc, #36]	; (80026dc <HAL_RCC_ClockConfig+0x2ec>)
 80026b8:	5cd3      	ldrb	r3, [r2, r3]
 80026ba:	fa21 f303 	lsr.w	r3, r1, r3
 80026be:	4a08      	ldr	r2, [pc, #32]	; (80026e0 <HAL_RCC_ClockConfig+0x2f0>)
 80026c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <HAL_RCC_ClockConfig+0x2f4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe f8ee 	bl	80008a8 <HAL_InitTick>
  
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3778      	adds	r7, #120	; 0x78
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000
 80026dc:	08003764 	.word	0x08003764
 80026e0:	20000000 	.word	0x20000000
 80026e4:	20000004 	.word	0x20000004

080026e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b08b      	sub	sp, #44	; 0x2c
 80026ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
 80026f6:	2300      	movs	r3, #0
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002702:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b04      	cmp	r3, #4
 8002710:	d002      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x30>
 8002712:	2b08      	cmp	r3, #8
 8002714:	d003      	beq.n	800271e <HAL_RCC_GetSysClockFreq+0x36>
 8002716:	e03f      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002718:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800271a:	623b      	str	r3, [r7, #32]
      break;
 800271c:	e03f      	b.n	800279e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002724:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002728:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	fa92 f2a2 	rbit	r2, r2
 8002730:	607a      	str	r2, [r7, #4]
  return result;
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	fab2 f282 	clz	r2, r2
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	40d3      	lsrs	r3, r2
 800273c:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800273e:	5cd3      	ldrb	r3, [r2, r3]
 8002740:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002742:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	220f      	movs	r2, #15
 800274c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	fa92 f2a2 	rbit	r2, r2
 8002754:	60fa      	str	r2, [r7, #12]
  return result;
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	fab2 f282 	clz	r2, r2
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	40d3      	lsrs	r3, r2
 8002760:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002762:	5cd3      	ldrb	r3, [r2, r3]
 8002764:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002770:	4a0f      	ldr	r2, [pc, #60]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	fbb2 f2f3 	udiv	r2, r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
 8002780:	e007      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002782:	4a0b      	ldr	r2, [pc, #44]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	fbb2 f2f3 	udiv	r2, r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	fb02 f303 	mul.w	r3, r2, r3
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	623b      	str	r3, [r7, #32]
      break;
 8002796:	e002      	b.n	800279e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800279a:	623b      	str	r3, [r7, #32]
      break;
 800279c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279e:	6a3b      	ldr	r3, [r7, #32]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	372c      	adds	r7, #44	; 0x2c
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	40021000 	.word	0x40021000
 80027b0:	007a1200 	.word	0x007a1200
 80027b4:	0800377c 	.word	0x0800377c
 80027b8:	0800378c 	.word	0x0800378c

080027bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000000 	.word	0x20000000

080027d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80027da:	f7ff ffef 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 80027de:	4601      	mov	r1, r0
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027e8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80027ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	fa92 f2a2 	rbit	r2, r2
 80027f4:	603a      	str	r2, [r7, #0]
  return result;
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	fab2 f282 	clz	r2, r2
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	40d3      	lsrs	r3, r2
 8002800:	4a04      	ldr	r2, [pc, #16]	; (8002814 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002802:	5cd3      	ldrb	r3, [r2, r3]
 8002804:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40021000 	.word	0x40021000
 8002814:	08003774 	.word	0x08003774

08002818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800281e:	f7ff ffcd 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 8002822:	4601      	mov	r1, r0
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800282c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002830:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	fa92 f2a2 	rbit	r2, r2
 8002838:	603a      	str	r2, [r7, #0]
  return result;
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	fab2 f282 	clz	r2, r2
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	40d3      	lsrs	r3, r2
 8002844:	4a04      	ldr	r2, [pc, #16]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	08003774 	.word	0x08003774

0800285c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b092      	sub	sp, #72	; 0x48
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800286c:	2300      	movs	r3, #0
 800286e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 80d4 	beq.w	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002880:	4b4e      	ldr	r3, [pc, #312]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10e      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288c:	4b4b      	ldr	r3, [pc, #300]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	4a4a      	ldr	r2, [pc, #296]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002896:	61d3      	str	r3, [r2, #28]
 8002898:	4b48      	ldr	r3, [pc, #288]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a4:	2301      	movs	r3, #1
 80028a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028aa:	4b45      	ldr	r3, [pc, #276]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d118      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b6:	4b42      	ldr	r3, [pc, #264]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a41      	ldr	r2, [pc, #260]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c2:	f7fe f835 	bl	8000930 <HAL_GetTick>
 80028c6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c8:	e008      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ca:	f7fe f831 	bl	8000930 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b64      	cmp	r3, #100	; 0x64
 80028d6:	d901      	bls.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e1d6      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028dc:	4b38      	ldr	r3, [pc, #224]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028e8:	4b34      	ldr	r3, [pc, #208]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 8084 	beq.w	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002902:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002904:	429a      	cmp	r2, r3
 8002906:	d07c      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002908:	4b2c      	ldr	r3, [pc, #176]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002916:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	461a      	mov	r2, r3
 8002932:	2301      	movs	r3, #1
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800293a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	b2db      	uxtb	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	461a      	mov	r2, r3
 8002956:	2300      	movs	r3, #0
 8002958:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800295a:	4a18      	ldr	r2, [pc, #96]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800295e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d04b      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7fd ffe1 	bl	8000930 <HAL_GetTick>
 800296e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	e00a      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7fd ffdd 	bl	8000930 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e180      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002988:	2302      	movs	r3, #2
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298e:	fa93 f3a3 	rbit	r3, r3
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
 8002994:	2302      	movs	r3, #2
 8002996:	623b      	str	r3, [r7, #32]
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	61fb      	str	r3, [r7, #28]
  return result;
 80029a0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a2:	fab3 f383 	clz	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f043 0302 	orr.w	r3, r3, #2
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d108      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80029b6:	4b01      	ldr	r3, [pc, #4]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	e00d      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40007000 	.word	0x40007000
 80029c4:	10908100 	.word	0x10908100
 80029c8:	2302      	movs	r3, #2
 80029ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	fa93 f3a3 	rbit	r3, r3
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	4b9a      	ldr	r3, [pc, #616]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2202      	movs	r2, #2
 80029da:	613a      	str	r2, [r7, #16]
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	fa92 f2a2 	rbit	r2, r2
 80029e2:	60fa      	str	r2, [r7, #12]
  return result;
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	fab2 f282 	clz	r2, r2
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	f002 021f 	and.w	r2, r2, #31
 80029f6:	2101      	movs	r1, #1
 80029f8:	fa01 f202 	lsl.w	r2, r1, r2
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0b7      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a02:	4b8f      	ldr	r3, [pc, #572]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	498c      	ldr	r1, [pc, #560]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d105      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1c:	4b88      	ldr	r3, [pc, #544]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	4a87      	ldr	r2, [pc, #540]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a34:	4b82      	ldr	r3, [pc, #520]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	f023 0203 	bic.w	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	497f      	ldr	r1, [pc, #508]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a52:	4b7b      	ldr	r3, [pc, #492]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	4978      	ldr	r1, [pc, #480]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a70:	4b73      	ldr	r3, [pc, #460]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	4970      	ldr	r1, [pc, #448]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d008      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a8e:	4b6c      	ldr	r3, [pc, #432]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f023 0210 	bic.w	r2, r3, #16
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	4969      	ldr	r1, [pc, #420]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002aac:	4b64      	ldr	r3, [pc, #400]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab8:	4961      	ldr	r1, [pc, #388]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d008      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aca:	4b5d      	ldr	r3, [pc, #372]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	f023 0220 	bic.w	r2, r3, #32
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	495a      	ldr	r1, [pc, #360]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ae8:	4b55      	ldr	r3, [pc, #340]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	4952      	ldr	r1, [pc, #328]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b06:	4b4e      	ldr	r3, [pc, #312]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	494b      	ldr	r1, [pc, #300]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b24:	4b46      	ldr	r3, [pc, #280]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	4943      	ldr	r1, [pc, #268]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b42:	4b3f      	ldr	r3, [pc, #252]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	493c      	ldr	r1, [pc, #240]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b60:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	4934      	ldr	r1, [pc, #208]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002b7e:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8a:	492d      	ldr	r1, [pc, #180]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b9c:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba8:	4925      	ldr	r1, [pc, #148]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d008      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002bba:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	491e      	ldr	r1, [pc, #120]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002bd8:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	4916      	ldr	r1, [pc, #88]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d008      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002bf6:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c02:	490f      	ldr	r1, [pc, #60]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c14:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c20:	4907      	ldr	r1, [pc, #28]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00c      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002c32:	4b03      	ldr	r3, [pc, #12]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	e002      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000
 8002c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c46:	4913      	ldr	r1, [pc, #76]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002c58:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c64:	490b      	ldr	r1, [pc, #44]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002c76:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c82:	4904      	ldr	r1, [pc, #16]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3748      	adds	r7, #72	; 0x48
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000

08002c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e049      	b.n	8002d3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fd fd20 	bl	8000704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	f000 f836 	bl	8002d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a42      	ldr	r2, [pc, #264]	; (8002e64 <TIM_Base_SetConfig+0x11c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d013      	beq.n	8002d88 <TIM_Base_SetConfig+0x40>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d66:	d00f      	beq.n	8002d88 <TIM_Base_SetConfig+0x40>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a3f      	ldr	r2, [pc, #252]	; (8002e68 <TIM_Base_SetConfig+0x120>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00b      	beq.n	8002d88 <TIM_Base_SetConfig+0x40>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a3e      	ldr	r2, [pc, #248]	; (8002e6c <TIM_Base_SetConfig+0x124>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d007      	beq.n	8002d88 <TIM_Base_SetConfig+0x40>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a3d      	ldr	r2, [pc, #244]	; (8002e70 <TIM_Base_SetConfig+0x128>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d003      	beq.n	8002d88 <TIM_Base_SetConfig+0x40>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a3c      	ldr	r2, [pc, #240]	; (8002e74 <TIM_Base_SetConfig+0x12c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d108      	bne.n	8002d9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a31      	ldr	r2, [pc, #196]	; (8002e64 <TIM_Base_SetConfig+0x11c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01f      	beq.n	8002de2 <TIM_Base_SetConfig+0x9a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da8:	d01b      	beq.n	8002de2 <TIM_Base_SetConfig+0x9a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a2e      	ldr	r2, [pc, #184]	; (8002e68 <TIM_Base_SetConfig+0x120>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d017      	beq.n	8002de2 <TIM_Base_SetConfig+0x9a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a2d      	ldr	r2, [pc, #180]	; (8002e6c <TIM_Base_SetConfig+0x124>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <TIM_Base_SetConfig+0x9a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a2c      	ldr	r2, [pc, #176]	; (8002e70 <TIM_Base_SetConfig+0x128>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00f      	beq.n	8002de2 <TIM_Base_SetConfig+0x9a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a2c      	ldr	r2, [pc, #176]	; (8002e78 <TIM_Base_SetConfig+0x130>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00b      	beq.n	8002de2 <TIM_Base_SetConfig+0x9a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a2b      	ldr	r2, [pc, #172]	; (8002e7c <TIM_Base_SetConfig+0x134>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d007      	beq.n	8002de2 <TIM_Base_SetConfig+0x9a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a2a      	ldr	r2, [pc, #168]	; (8002e80 <TIM_Base_SetConfig+0x138>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d003      	beq.n	8002de2 <TIM_Base_SetConfig+0x9a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a25      	ldr	r2, [pc, #148]	; (8002e74 <TIM_Base_SetConfig+0x12c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d108      	bne.n	8002df4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <TIM_Base_SetConfig+0x11c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d013      	beq.n	8002e48 <TIM_Base_SetConfig+0x100>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a13      	ldr	r2, [pc, #76]	; (8002e70 <TIM_Base_SetConfig+0x128>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00f      	beq.n	8002e48 <TIM_Base_SetConfig+0x100>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a13      	ldr	r2, [pc, #76]	; (8002e78 <TIM_Base_SetConfig+0x130>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00b      	beq.n	8002e48 <TIM_Base_SetConfig+0x100>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <TIM_Base_SetConfig+0x134>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <TIM_Base_SetConfig+0x100>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a11      	ldr	r2, [pc, #68]	; (8002e80 <TIM_Base_SetConfig+0x138>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d003      	beq.n	8002e48 <TIM_Base_SetConfig+0x100>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a0c      	ldr	r2, [pc, #48]	; (8002e74 <TIM_Base_SetConfig+0x12c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d103      	bne.n	8002e50 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	615a      	str	r2, [r3, #20]
}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40012c00 	.word	0x40012c00
 8002e68:	40000400 	.word	0x40000400
 8002e6c:	40000800 	.word	0x40000800
 8002e70:	40013400 	.word	0x40013400
 8002e74:	40015000 	.word	0x40015000
 8002e78:	40014000 	.word	0x40014000
 8002e7c:	40014400 	.word	0x40014400
 8002e80:	40014800 	.word	0x40014800

08002e84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e040      	b.n	8002f18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7fd fc7c 	bl	80007a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2224      	movs	r2, #36	; 0x24
 8002eb0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0201 	bic.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f82c 	bl	8002f20 <UART_SetConfig>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e022      	b.n	8002f18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f9f4 	bl	80032c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002efe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fa7b 	bl	800340c <UART_CheckIdleState>
 8002f16:	4603      	mov	r3, r0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	4b92      	ldr	r3, [pc, #584]	; (8003194 <UART_SetConfig+0x274>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	6979      	ldr	r1, [r7, #20]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a80      	ldr	r2, [pc, #512]	; (8003198 <UART_SetConfig+0x278>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d120      	bne.n	8002fde <UART_SetConfig+0xbe>
 8002f9c:	4b7f      	ldr	r3, [pc, #508]	; (800319c <UART_SetConfig+0x27c>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d817      	bhi.n	8002fd8 <UART_SetConfig+0xb8>
 8002fa8:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <UART_SetConfig+0x90>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	08002fc1 	.word	0x08002fc1
 8002fb4:	08002fcd 	.word	0x08002fcd
 8002fb8:	08002fd3 	.word	0x08002fd3
 8002fbc:	08002fc7 	.word	0x08002fc7
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e0b5      	b.n	8003132 <UART_SetConfig+0x212>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	77fb      	strb	r3, [r7, #31]
 8002fca:	e0b2      	b.n	8003132 <UART_SetConfig+0x212>
 8002fcc:	2304      	movs	r3, #4
 8002fce:	77fb      	strb	r3, [r7, #31]
 8002fd0:	e0af      	b.n	8003132 <UART_SetConfig+0x212>
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	77fb      	strb	r3, [r7, #31]
 8002fd6:	e0ac      	b.n	8003132 <UART_SetConfig+0x212>
 8002fd8:	2310      	movs	r3, #16
 8002fda:	77fb      	strb	r3, [r7, #31]
 8002fdc:	e0a9      	b.n	8003132 <UART_SetConfig+0x212>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a6f      	ldr	r2, [pc, #444]	; (80031a0 <UART_SetConfig+0x280>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d124      	bne.n	8003032 <UART_SetConfig+0x112>
 8002fe8:	4b6c      	ldr	r3, [pc, #432]	; (800319c <UART_SetConfig+0x27c>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ff0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ff4:	d011      	beq.n	800301a <UART_SetConfig+0xfa>
 8002ff6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ffa:	d817      	bhi.n	800302c <UART_SetConfig+0x10c>
 8002ffc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003000:	d011      	beq.n	8003026 <UART_SetConfig+0x106>
 8003002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003006:	d811      	bhi.n	800302c <UART_SetConfig+0x10c>
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <UART_SetConfig+0xf4>
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003010:	d006      	beq.n	8003020 <UART_SetConfig+0x100>
 8003012:	e00b      	b.n	800302c <UART_SetConfig+0x10c>
 8003014:	2300      	movs	r3, #0
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	e08b      	b.n	8003132 <UART_SetConfig+0x212>
 800301a:	2302      	movs	r3, #2
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e088      	b.n	8003132 <UART_SetConfig+0x212>
 8003020:	2304      	movs	r3, #4
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e085      	b.n	8003132 <UART_SetConfig+0x212>
 8003026:	2308      	movs	r3, #8
 8003028:	77fb      	strb	r3, [r7, #31]
 800302a:	e082      	b.n	8003132 <UART_SetConfig+0x212>
 800302c:	2310      	movs	r3, #16
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e07f      	b.n	8003132 <UART_SetConfig+0x212>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a5b      	ldr	r2, [pc, #364]	; (80031a4 <UART_SetConfig+0x284>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d124      	bne.n	8003086 <UART_SetConfig+0x166>
 800303c:	4b57      	ldr	r3, [pc, #348]	; (800319c <UART_SetConfig+0x27c>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003044:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003048:	d011      	beq.n	800306e <UART_SetConfig+0x14e>
 800304a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800304e:	d817      	bhi.n	8003080 <UART_SetConfig+0x160>
 8003050:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003054:	d011      	beq.n	800307a <UART_SetConfig+0x15a>
 8003056:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800305a:	d811      	bhi.n	8003080 <UART_SetConfig+0x160>
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <UART_SetConfig+0x148>
 8003060:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003064:	d006      	beq.n	8003074 <UART_SetConfig+0x154>
 8003066:	e00b      	b.n	8003080 <UART_SetConfig+0x160>
 8003068:	2300      	movs	r3, #0
 800306a:	77fb      	strb	r3, [r7, #31]
 800306c:	e061      	b.n	8003132 <UART_SetConfig+0x212>
 800306e:	2302      	movs	r3, #2
 8003070:	77fb      	strb	r3, [r7, #31]
 8003072:	e05e      	b.n	8003132 <UART_SetConfig+0x212>
 8003074:	2304      	movs	r3, #4
 8003076:	77fb      	strb	r3, [r7, #31]
 8003078:	e05b      	b.n	8003132 <UART_SetConfig+0x212>
 800307a:	2308      	movs	r3, #8
 800307c:	77fb      	strb	r3, [r7, #31]
 800307e:	e058      	b.n	8003132 <UART_SetConfig+0x212>
 8003080:	2310      	movs	r3, #16
 8003082:	77fb      	strb	r3, [r7, #31]
 8003084:	e055      	b.n	8003132 <UART_SetConfig+0x212>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a47      	ldr	r2, [pc, #284]	; (80031a8 <UART_SetConfig+0x288>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d124      	bne.n	80030da <UART_SetConfig+0x1ba>
 8003090:	4b42      	ldr	r3, [pc, #264]	; (800319c <UART_SetConfig+0x27c>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003098:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800309c:	d011      	beq.n	80030c2 <UART_SetConfig+0x1a2>
 800309e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030a2:	d817      	bhi.n	80030d4 <UART_SetConfig+0x1b4>
 80030a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030a8:	d011      	beq.n	80030ce <UART_SetConfig+0x1ae>
 80030aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030ae:	d811      	bhi.n	80030d4 <UART_SetConfig+0x1b4>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <UART_SetConfig+0x19c>
 80030b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b8:	d006      	beq.n	80030c8 <UART_SetConfig+0x1a8>
 80030ba:	e00b      	b.n	80030d4 <UART_SetConfig+0x1b4>
 80030bc:	2300      	movs	r3, #0
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e037      	b.n	8003132 <UART_SetConfig+0x212>
 80030c2:	2302      	movs	r3, #2
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e034      	b.n	8003132 <UART_SetConfig+0x212>
 80030c8:	2304      	movs	r3, #4
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e031      	b.n	8003132 <UART_SetConfig+0x212>
 80030ce:	2308      	movs	r3, #8
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e02e      	b.n	8003132 <UART_SetConfig+0x212>
 80030d4:	2310      	movs	r3, #16
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e02b      	b.n	8003132 <UART_SetConfig+0x212>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a33      	ldr	r2, [pc, #204]	; (80031ac <UART_SetConfig+0x28c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d124      	bne.n	800312e <UART_SetConfig+0x20e>
 80030e4:	4b2d      	ldr	r3, [pc, #180]	; (800319c <UART_SetConfig+0x27c>)
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80030ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030f0:	d011      	beq.n	8003116 <UART_SetConfig+0x1f6>
 80030f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030f6:	d817      	bhi.n	8003128 <UART_SetConfig+0x208>
 80030f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030fc:	d011      	beq.n	8003122 <UART_SetConfig+0x202>
 80030fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003102:	d811      	bhi.n	8003128 <UART_SetConfig+0x208>
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <UART_SetConfig+0x1f0>
 8003108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800310c:	d006      	beq.n	800311c <UART_SetConfig+0x1fc>
 800310e:	e00b      	b.n	8003128 <UART_SetConfig+0x208>
 8003110:	2300      	movs	r3, #0
 8003112:	77fb      	strb	r3, [r7, #31]
 8003114:	e00d      	b.n	8003132 <UART_SetConfig+0x212>
 8003116:	2302      	movs	r3, #2
 8003118:	77fb      	strb	r3, [r7, #31]
 800311a:	e00a      	b.n	8003132 <UART_SetConfig+0x212>
 800311c:	2304      	movs	r3, #4
 800311e:	77fb      	strb	r3, [r7, #31]
 8003120:	e007      	b.n	8003132 <UART_SetConfig+0x212>
 8003122:	2308      	movs	r3, #8
 8003124:	77fb      	strb	r3, [r7, #31]
 8003126:	e004      	b.n	8003132 <UART_SetConfig+0x212>
 8003128:	2310      	movs	r3, #16
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	e001      	b.n	8003132 <UART_SetConfig+0x212>
 800312e:	2310      	movs	r3, #16
 8003130:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800313a:	d16b      	bne.n	8003214 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800313c:	7ffb      	ldrb	r3, [r7, #31]
 800313e:	2b08      	cmp	r3, #8
 8003140:	d838      	bhi.n	80031b4 <UART_SetConfig+0x294>
 8003142:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <UART_SetConfig+0x228>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	0800316d 	.word	0x0800316d
 800314c:	08003175 	.word	0x08003175
 8003150:	0800317d 	.word	0x0800317d
 8003154:	080031b5 	.word	0x080031b5
 8003158:	08003183 	.word	0x08003183
 800315c:	080031b5 	.word	0x080031b5
 8003160:	080031b5 	.word	0x080031b5
 8003164:	080031b5 	.word	0x080031b5
 8003168:	0800318b 	.word	0x0800318b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800316c:	f7ff fb32 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 8003170:	61b8      	str	r0, [r7, #24]
        break;
 8003172:	e024      	b.n	80031be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003174:	f7ff fb50 	bl	8002818 <HAL_RCC_GetPCLK2Freq>
 8003178:	61b8      	str	r0, [r7, #24]
        break;
 800317a:	e020      	b.n	80031be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <UART_SetConfig+0x290>)
 800317e:	61bb      	str	r3, [r7, #24]
        break;
 8003180:	e01d      	b.n	80031be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003182:	f7ff fab1 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 8003186:	61b8      	str	r0, [r7, #24]
        break;
 8003188:	e019      	b.n	80031be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800318a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800318e:	61bb      	str	r3, [r7, #24]
        break;
 8003190:	e015      	b.n	80031be <UART_SetConfig+0x29e>
 8003192:	bf00      	nop
 8003194:	efff69f3 	.word	0xefff69f3
 8003198:	40013800 	.word	0x40013800
 800319c:	40021000 	.word	0x40021000
 80031a0:	40004400 	.word	0x40004400
 80031a4:	40004800 	.word	0x40004800
 80031a8:	40004c00 	.word	0x40004c00
 80031ac:	40005000 	.word	0x40005000
 80031b0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	77bb      	strb	r3, [r7, #30]
        break;
 80031bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d073      	beq.n	80032ac <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	005a      	lsls	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	441a      	add	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b0f      	cmp	r3, #15
 80031de:	d916      	bls.n	800320e <UART_SetConfig+0x2ee>
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e6:	d212      	bcs.n	800320e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	f023 030f 	bic.w	r3, r3, #15
 80031f0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	89fb      	ldrh	r3, [r7, #14]
 8003200:	4313      	orrs	r3, r2
 8003202:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	89fa      	ldrh	r2, [r7, #14]
 800320a:	60da      	str	r2, [r3, #12]
 800320c:	e04e      	b.n	80032ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	77bb      	strb	r3, [r7, #30]
 8003212:	e04b      	b.n	80032ac <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003214:	7ffb      	ldrb	r3, [r7, #31]
 8003216:	2b08      	cmp	r3, #8
 8003218:	d827      	bhi.n	800326a <UART_SetConfig+0x34a>
 800321a:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <UART_SetConfig+0x300>)
 800321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003220:	08003245 	.word	0x08003245
 8003224:	0800324d 	.word	0x0800324d
 8003228:	08003255 	.word	0x08003255
 800322c:	0800326b 	.word	0x0800326b
 8003230:	0800325b 	.word	0x0800325b
 8003234:	0800326b 	.word	0x0800326b
 8003238:	0800326b 	.word	0x0800326b
 800323c:	0800326b 	.word	0x0800326b
 8003240:	08003263 	.word	0x08003263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003244:	f7ff fac6 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 8003248:	61b8      	str	r0, [r7, #24]
        break;
 800324a:	e013      	b.n	8003274 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800324c:	f7ff fae4 	bl	8002818 <HAL_RCC_GetPCLK2Freq>
 8003250:	61b8      	str	r0, [r7, #24]
        break;
 8003252:	e00f      	b.n	8003274 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003254:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <UART_SetConfig+0x3a4>)
 8003256:	61bb      	str	r3, [r7, #24]
        break;
 8003258:	e00c      	b.n	8003274 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800325a:	f7ff fa45 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 800325e:	61b8      	str	r0, [r7, #24]
        break;
 8003260:	e008      	b.n	8003274 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003266:	61bb      	str	r3, [r7, #24]
        break;
 8003268:	e004      	b.n	8003274 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	77bb      	strb	r3, [r7, #30]
        break;
 8003272:	bf00      	nop
    }

    if (pclk != 0U)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d018      	beq.n	80032ac <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	085a      	lsrs	r2, r3, #1
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	441a      	add	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2b0f      	cmp	r3, #15
 8003292:	d909      	bls.n	80032a8 <UART_SetConfig+0x388>
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329a:	d205      	bcs.n	80032a8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	b29a      	uxth	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	e001      	b.n	80032ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80032b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3720      	adds	r7, #32
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	007a1200 	.word	0x007a1200

080032c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01a      	beq.n	80033de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033c6:	d10a      	bne.n	80033de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	605a      	str	r2, [r3, #4]
  }
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b098      	sub	sp, #96	; 0x60
 8003410:	af02      	add	r7, sp, #8
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800341c:	f7fd fa88 	bl	8000930 <HAL_GetTick>
 8003420:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b08      	cmp	r3, #8
 800342e:	d12e      	bne.n	800348e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003430:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003438:	2200      	movs	r2, #0
 800343a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f88c 	bl	800355c <UART_WaitOnFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d021      	beq.n	800348e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003452:	e853 3f00 	ldrex	r3, [r3]
 8003456:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800345e:	653b      	str	r3, [r7, #80]	; 0x50
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003468:	647b      	str	r3, [r7, #68]	; 0x44
 800346a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800346e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003470:	e841 2300 	strex	r3, r2, [r1]
 8003474:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e6      	bne.n	800344a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e062      	b.n	8003554 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b04      	cmp	r3, #4
 800349a:	d149      	bne.n	8003530 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800349c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a4:	2200      	movs	r2, #0
 80034a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f856 	bl	800355c <UART_WaitOnFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d03c      	beq.n	8003530 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	e853 3f00 	ldrex	r3, [r3]
 80034c2:	623b      	str	r3, [r7, #32]
   return(result);
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	461a      	mov	r2, r3
 80034d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d4:	633b      	str	r3, [r7, #48]	; 0x30
 80034d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034dc:	e841 2300 	strex	r3, r2, [r1]
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1e6      	bne.n	80034b6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3308      	adds	r3, #8
 80034ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3308      	adds	r3, #8
 8003506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003508:	61fa      	str	r2, [r7, #28]
 800350a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	69b9      	ldr	r1, [r7, #24]
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	617b      	str	r3, [r7, #20]
   return(result);
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e5      	bne.n	80034e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e011      	b.n	8003554 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3758      	adds	r7, #88	; 0x58
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356c:	e049      	b.n	8003602 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003574:	d045      	beq.n	8003602 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003576:	f7fd f9db 	bl	8000930 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	429a      	cmp	r2, r3
 8003584:	d302      	bcc.n	800358c <UART_WaitOnFlagUntilTimeout+0x30>
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e048      	b.n	8003622 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	d031      	beq.n	8003602 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d110      	bne.n	80035ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2208      	movs	r2, #8
 80035b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f838 	bl	800362a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2208      	movs	r2, #8
 80035be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e029      	b.n	8003622 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035dc:	d111      	bne.n	8003602 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f81e 	bl	800362a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e00f      	b.n	8003622 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69da      	ldr	r2, [r3, #28]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4013      	ands	r3, r2
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	429a      	cmp	r2, r3
 8003610:	bf0c      	ite	eq
 8003612:	2301      	moveq	r3, #1
 8003614:	2300      	movne	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	429a      	cmp	r2, r3
 800361e:	d0a6      	beq.n	800356e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800362a:	b480      	push	{r7}
 800362c:	b095      	sub	sp, #84	; 0x54
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003642:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003650:	643b      	str	r3, [r7, #64]	; 0x40
 8003652:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003656:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e6      	bne.n	8003632 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	e853 3f00 	ldrex	r3, [r3]
 8003672:	61fb      	str	r3, [r7, #28]
   return(result);
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	64bb      	str	r3, [r7, #72]	; 0x48
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003684:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800368a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e5      	bne.n	8003664 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369c:	2b01      	cmp	r3, #1
 800369e:	d118      	bne.n	80036d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f023 0310 	bic.w	r3, r3, #16
 80036b4:	647b      	str	r3, [r7, #68]	; 0x44
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c2:	6979      	ldr	r1, [r7, #20]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	613b      	str	r3, [r7, #16]
   return(result);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e6      	bne.n	80036a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80036e6:	bf00      	nop
 80036e8:	3754      	adds	r7, #84	; 0x54
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <memset>:
 80036f2:	4402      	add	r2, r0
 80036f4:	4603      	mov	r3, r0
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d100      	bne.n	80036fc <memset+0xa>
 80036fa:	4770      	bx	lr
 80036fc:	f803 1b01 	strb.w	r1, [r3], #1
 8003700:	e7f9      	b.n	80036f6 <memset+0x4>
	...

08003704 <__libc_init_array>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	4d0d      	ldr	r5, [pc, #52]	; (800373c <__libc_init_array+0x38>)
 8003708:	4c0d      	ldr	r4, [pc, #52]	; (8003740 <__libc_init_array+0x3c>)
 800370a:	1b64      	subs	r4, r4, r5
 800370c:	10a4      	asrs	r4, r4, #2
 800370e:	2600      	movs	r6, #0
 8003710:	42a6      	cmp	r6, r4
 8003712:	d109      	bne.n	8003728 <__libc_init_array+0x24>
 8003714:	4d0b      	ldr	r5, [pc, #44]	; (8003744 <__libc_init_array+0x40>)
 8003716:	4c0c      	ldr	r4, [pc, #48]	; (8003748 <__libc_init_array+0x44>)
 8003718:	f000 f818 	bl	800374c <_init>
 800371c:	1b64      	subs	r4, r4, r5
 800371e:	10a4      	asrs	r4, r4, #2
 8003720:	2600      	movs	r6, #0
 8003722:	42a6      	cmp	r6, r4
 8003724:	d105      	bne.n	8003732 <__libc_init_array+0x2e>
 8003726:	bd70      	pop	{r4, r5, r6, pc}
 8003728:	f855 3b04 	ldr.w	r3, [r5], #4
 800372c:	4798      	blx	r3
 800372e:	3601      	adds	r6, #1
 8003730:	e7ee      	b.n	8003710 <__libc_init_array+0xc>
 8003732:	f855 3b04 	ldr.w	r3, [r5], #4
 8003736:	4798      	blx	r3
 8003738:	3601      	adds	r6, #1
 800373a:	e7f2      	b.n	8003722 <__libc_init_array+0x1e>
 800373c:	0800379c 	.word	0x0800379c
 8003740:	0800379c 	.word	0x0800379c
 8003744:	0800379c 	.word	0x0800379c
 8003748:	080037a0 	.word	0x080037a0

0800374c <_init>:
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	bf00      	nop
 8003750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003752:	bc08      	pop	{r3}
 8003754:	469e      	mov	lr, r3
 8003756:	4770      	bx	lr

08003758 <_fini>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	bf00      	nop
 800375c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375e:	bc08      	pop	{r3}
 8003760:	469e      	mov	lr, r3
 8003762:	4770      	bx	lr
