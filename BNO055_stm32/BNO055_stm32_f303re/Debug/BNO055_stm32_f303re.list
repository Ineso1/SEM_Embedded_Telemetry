
BNO055_stm32_f303re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000580c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  080059ac  080059ac  000159ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c28  08005c28  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005c28  08005c28  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c28  08005c28  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c28  08005c28  00015c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c2c  08005c2c  00015c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000334  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ac  200003ac  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001292e  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b34  00000000  00000000  00032a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001078  00000000  00000000  00035550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cc9  00000000  00000000  000365c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000235af  00000000  00000000  00037291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001799c  00000000  00000000  0005a840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce600  00000000  00000000  000721dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ba8  00000000  00000000  001407dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00145384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005994 	.word	0x08005994

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005994 	.word	0x08005994

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <bno055_set_i2c_handler>:
    .mag_id = 0,
    .gyr_id = 0,
    .bl_rev_id = 0
};

void bno055_set_i2c_handler(I2C_HandleTypeDef* hi2c){
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    i2c_dev = hi2c;
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <bno055_set_i2c_handler+0x1c>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	6013      	str	r3, [r2, #0]
}
 800028e:	bf00      	nop
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000094 	.word	0x20000094

080002a0 <bno055_writeData>:

uint8_t bno055_writeData(uint8_t* txdata) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b088      	sub	sp, #32
 80002a4:	af02      	add	r7, sp, #8
 80002a6:	6078      	str	r0, [r7, #4]
    uint8_t status;
    status = HAL_I2C_Master_Transmit(i2c_dev, BNO055_I2C_ADDR_LO << 1, txdata, sizeof(txdata), 10);
 80002a8:	4b5a      	ldr	r3, [pc, #360]	; (8000414 <bno055_writeData+0x174>)
 80002aa:	6818      	ldr	r0, [r3, #0]
 80002ac:	230a      	movs	r3, #10
 80002ae:	9300      	str	r3, [sp, #0]
 80002b0:	2304      	movs	r3, #4
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	2150      	movs	r1, #80	; 0x50
 80002b6:	f001 fc4d 	bl	8001b54 <HAL_I2C_Master_Transmit>
 80002ba:	4603      	mov	r3, r0
 80002bc:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 80002be:	7dfb      	ldrb	r3, [r7, #23]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d101      	bne.n	80002c8 <bno055_writeData+0x28>
        return 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	e0a1      	b.n	800040c <bno055_writeData+0x16c>
    }

    if (status == HAL_ERROR) {
 80002c8:	7dfb      	ldrb	r3, [r7, #23]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d103      	bne.n	80002d6 <bno055_writeData+0x36>
        printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80002ce:	4852      	ldr	r0, [pc, #328]	; (8000418 <bno055_writeData+0x178>)
 80002d0:	f004 fcf6 	bl	8004cc0 <puts>
 80002d4:	e012      	b.n	80002fc <bno055_writeData+0x5c>
    } else if (status == HAL_TIMEOUT) {
 80002d6:	7dfb      	ldrb	r3, [r7, #23]
 80002d8:	2b03      	cmp	r3, #3
 80002da:	d103      	bne.n	80002e4 <bno055_writeData+0x44>
        printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80002dc:	484f      	ldr	r0, [pc, #316]	; (800041c <bno055_writeData+0x17c>)
 80002de:	f004 fcef 	bl	8004cc0 <puts>
 80002e2:	e00b      	b.n	80002fc <bno055_writeData+0x5c>
    } else if (status == HAL_BUSY) {
 80002e4:	7dfb      	ldrb	r3, [r7, #23]
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	d103      	bne.n	80002f2 <bno055_writeData+0x52>
        printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80002ea:	484d      	ldr	r0, [pc, #308]	; (8000420 <bno055_writeData+0x180>)
 80002ec:	f004 fce8 	bl	8004cc0 <puts>
 80002f0:	e004      	b.n	80002fc <bno055_writeData+0x5c>
    } else {
        printf("Unknown status data %d", status);
 80002f2:	7dfb      	ldrb	r3, [r7, #23]
 80002f4:	4619      	mov	r1, r3
 80002f6:	484b      	ldr	r0, [pc, #300]	; (8000424 <bno055_writeData+0x184>)
 80002f8:	f004 fc7c 	bl	8004bf4 <iprintf>
    }

    uint32_t error = HAL_I2C_GetError(i2c_dev);
 80002fc:	4b45      	ldr	r3, [pc, #276]	; (8000414 <bno055_writeData+0x174>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4618      	mov	r0, r3
 8000302:	f001 fe1f 	bl	8001f44 <HAL_I2C_GetError>
 8000306:	6138      	str	r0, [r7, #16]
    if (error == HAL_I2C_ERROR_NONE) {
 8000308:	693b      	ldr	r3, [r7, #16]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d101      	bne.n	8000312 <bno055_writeData+0x72>
        return 1;
 800030e:	2301      	movs	r3, #1
 8000310:	e07c      	b.n	800040c <bno055_writeData+0x16c>
    } else if (error == HAL_I2C_ERROR_BERR) {
 8000312:	693b      	ldr	r3, [r7, #16]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d103      	bne.n	8000320 <bno055_writeData+0x80>
        printf("HAL_I2C_ERROR_BERR\r\n");
 8000318:	4843      	ldr	r0, [pc, #268]	; (8000428 <bno055_writeData+0x188>)
 800031a:	f004 fcd1 	bl	8004cc0 <puts>
 800031e:	e021      	b.n	8000364 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_ARLO) {
 8000320:	693b      	ldr	r3, [r7, #16]
 8000322:	2b02      	cmp	r3, #2
 8000324:	d103      	bne.n	800032e <bno055_writeData+0x8e>
        printf("HAL_I2C_ERROR_ARLO\r\n");
 8000326:	4841      	ldr	r0, [pc, #260]	; (800042c <bno055_writeData+0x18c>)
 8000328:	f004 fcca 	bl	8004cc0 <puts>
 800032c:	e01a      	b.n	8000364 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_AF) {
 800032e:	693b      	ldr	r3, [r7, #16]
 8000330:	2b04      	cmp	r3, #4
 8000332:	d103      	bne.n	800033c <bno055_writeData+0x9c>
        printf("HAL_I2C_ERROR_AF\r\n");
 8000334:	483e      	ldr	r0, [pc, #248]	; (8000430 <bno055_writeData+0x190>)
 8000336:	f004 fcc3 	bl	8004cc0 <puts>
 800033a:	e013      	b.n	8000364 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_OVR) {
 800033c:	693b      	ldr	r3, [r7, #16]
 800033e:	2b08      	cmp	r3, #8
 8000340:	d103      	bne.n	800034a <bno055_writeData+0xaa>
        printf("HAL_I2C_ERROR_OVR\r\n");
 8000342:	483c      	ldr	r0, [pc, #240]	; (8000434 <bno055_writeData+0x194>)
 8000344:	f004 fcbc 	bl	8004cc0 <puts>
 8000348:	e00c      	b.n	8000364 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_DMA) {
 800034a:	693b      	ldr	r3, [r7, #16]
 800034c:	2b10      	cmp	r3, #16
 800034e:	d103      	bne.n	8000358 <bno055_writeData+0xb8>
        printf("HAL_I2C_ERROR_DMA\r\n");
 8000350:	4839      	ldr	r0, [pc, #228]	; (8000438 <bno055_writeData+0x198>)
 8000352:	f004 fcb5 	bl	8004cc0 <puts>
 8000356:	e005      	b.n	8000364 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000358:	693b      	ldr	r3, [r7, #16]
 800035a:	2b20      	cmp	r3, #32
 800035c:	d102      	bne.n	8000364 <bno055_writeData+0xc4>
        printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800035e:	4837      	ldr	r0, [pc, #220]	; (800043c <bno055_writeData+0x19c>)
 8000360:	f004 fcae 	bl	8004cc0 <puts>
    }

    HAL_I2C_StateTypeDef state = HAL_I2C_GetState(i2c_dev);
 8000364:	4b2b      	ldr	r3, [pc, #172]	; (8000414 <bno055_writeData+0x174>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4618      	mov	r0, r3
 800036a:	f001 fddd 	bl	8001f28 <HAL_I2C_GetState>
 800036e:	4603      	mov	r3, r0
 8000370:	73fb      	strb	r3, [r7, #15]
    if (state == HAL_I2C_STATE_RESET) {
 8000372:	7bfb      	ldrb	r3, [r7, #15]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d103      	bne.n	8000380 <bno055_writeData+0xe0>
        printf("HAL_I2C_STATE_RESET\r\n");
 8000378:	4831      	ldr	r0, [pc, #196]	; (8000440 <bno055_writeData+0x1a0>)
 800037a:	f004 fca1 	bl	8004cc0 <puts>
 800037e:	e044      	b.n	800040a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_READY) {
 8000380:	7bfb      	ldrb	r3, [r7, #15]
 8000382:	2b20      	cmp	r3, #32
 8000384:	d103      	bne.n	800038e <bno055_writeData+0xee>
        printf("HAL_I2C_STATE_RESET\r\n");
 8000386:	482e      	ldr	r0, [pc, #184]	; (8000440 <bno055_writeData+0x1a0>)
 8000388:	f004 fc9a 	bl	8004cc0 <puts>
 800038c:	e03d      	b.n	800040a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY) {
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	2b24      	cmp	r3, #36	; 0x24
 8000392:	d103      	bne.n	800039c <bno055_writeData+0xfc>
        printf("HAL_I2C_STATE_BUSY\r\n");
 8000394:	482b      	ldr	r0, [pc, #172]	; (8000444 <bno055_writeData+0x1a4>)
 8000396:	f004 fc93 	bl	8004cc0 <puts>
 800039a:	e036      	b.n	800040a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY_TX) {
 800039c:	7bfb      	ldrb	r3, [r7, #15]
 800039e:	2b21      	cmp	r3, #33	; 0x21
 80003a0:	d103      	bne.n	80003aa <bno055_writeData+0x10a>
        printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80003a2:	4829      	ldr	r0, [pc, #164]	; (8000448 <bno055_writeData+0x1a8>)
 80003a4:	f004 fc8c 	bl	8004cc0 <puts>
 80003a8:	e02f      	b.n	800040a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	2b22      	cmp	r3, #34	; 0x22
 80003ae:	d103      	bne.n	80003b8 <bno055_writeData+0x118>
        printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80003b0:	4826      	ldr	r0, [pc, #152]	; (800044c <bno055_writeData+0x1ac>)
 80003b2:	f004 fc85 	bl	8004cc0 <puts>
 80003b6:	e028      	b.n	800040a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_LISTEN) {
 80003b8:	7bfb      	ldrb	r3, [r7, #15]
 80003ba:	2b28      	cmp	r3, #40	; 0x28
 80003bc:	d103      	bne.n	80003c6 <bno055_writeData+0x126>
        printf("HAL_I2C_STATE_LISTEN\r\n");
 80003be:	4824      	ldr	r0, [pc, #144]	; (8000450 <bno055_writeData+0x1b0>)
 80003c0:	f004 fc7e 	bl	8004cc0 <puts>
 80003c4:	e021      	b.n	800040a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80003c6:	7bfb      	ldrb	r3, [r7, #15]
 80003c8:	2b29      	cmp	r3, #41	; 0x29
 80003ca:	d103      	bne.n	80003d4 <bno055_writeData+0x134>
        printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80003cc:	4821      	ldr	r0, [pc, #132]	; (8000454 <bno055_writeData+0x1b4>)
 80003ce:	f004 fc77 	bl	8004cc0 <puts>
 80003d2:	e01a      	b.n	800040a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80003d4:	7bfb      	ldrb	r3, [r7, #15]
 80003d6:	2b2a      	cmp	r3, #42	; 0x2a
 80003d8:	d103      	bne.n	80003e2 <bno055_writeData+0x142>
        printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80003da:	481f      	ldr	r0, [pc, #124]	; (8000458 <bno055_writeData+0x1b8>)
 80003dc:	f004 fc70 	bl	8004cc0 <puts>
 80003e0:	e013      	b.n	800040a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_ABORT) {
 80003e2:	7bfb      	ldrb	r3, [r7, #15]
 80003e4:	2b60      	cmp	r3, #96	; 0x60
 80003e6:	d103      	bne.n	80003f0 <bno055_writeData+0x150>
        printf("HAL_I2C_STATE_ABORT\r\n");
 80003e8:	481c      	ldr	r0, [pc, #112]	; (800045c <bno055_writeData+0x1bc>)
 80003ea:	f004 fc69 	bl	8004cc0 <puts>
 80003ee:	e00c      	b.n	800040a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	2ba0      	cmp	r3, #160	; 0xa0
 80003f4:	d103      	bne.n	80003fe <bno055_writeData+0x15e>
        printf("HAL_I2C_STATE_TIMEOUT\r\n");
 80003f6:	481a      	ldr	r0, [pc, #104]	; (8000460 <bno055_writeData+0x1c0>)
 80003f8:	f004 fc62 	bl	8004cc0 <puts>
 80003fc:	e005      	b.n	800040a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_ERROR) {
 80003fe:	7bfb      	ldrb	r3, [r7, #15]
 8000400:	2be0      	cmp	r3, #224	; 0xe0
 8000402:	d102      	bne.n	800040a <bno055_writeData+0x16a>
        printf("HAL_I2C_STATE_ERROR\r\n");
 8000404:	4817      	ldr	r0, [pc, #92]	; (8000464 <bno055_writeData+0x1c4>)
 8000406:	f004 fc5b 	bl	8004cc0 <puts>
    }
    return 1;
 800040a:	2301      	movs	r3, #1
}
 800040c:	4618      	mov	r0, r3
 800040e:	3718      	adds	r7, #24
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000094 	.word	0x20000094
 8000418:	080059ac 	.word	0x080059ac
 800041c:	080059d0 	.word	0x080059d0
 8000420:	080059f8 	.word	0x080059f8
 8000424:	08005a1c 	.word	0x08005a1c
 8000428:	08005a34 	.word	0x08005a34
 800042c:	08005a48 	.word	0x08005a48
 8000430:	08005a5c 	.word	0x08005a5c
 8000434:	08005a70 	.word	0x08005a70
 8000438:	08005a84 	.word	0x08005a84
 800043c:	08005a98 	.word	0x08005a98
 8000440:	08005ab0 	.word	0x08005ab0
 8000444:	08005ac8 	.word	0x08005ac8
 8000448:	08005adc 	.word	0x08005adc
 800044c:	08005af4 	.word	0x08005af4
 8000450:	08005b0c 	.word	0x08005b0c
 8000454:	08005b24 	.word	0x08005b24
 8000458:	08005b44 	.word	0x08005b44
 800045c:	08005b64 	.word	0x08005b64
 8000460:	08005b7c 	.word	0x08005b7c
 8000464:	08005b94 	.word	0x08005b94

08000468 <bno055_readData>:

uint8_t bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af02      	add	r7, sp, #8
 800046e:	4603      	mov	r3, r0
 8000470:	6039      	str	r1, [r7, #0]
 8000472:	71fb      	strb	r3, [r7, #7]
 8000474:	4613      	mov	r3, r2
 8000476:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
	status = HAL_I2C_Master_Transmit(i2c_dev, BNO055_I2C_ADDR_LO << 1, &reg, 1, 10);
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <bno055_readData+0x64>)
 800047a:	6818      	ldr	r0, [r3, #0]
 800047c:	1dfa      	adds	r2, r7, #7
 800047e:	230a      	movs	r3, #10
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	2150      	movs	r1, #80	; 0x50
 8000486:	f001 fb65 	bl	8001b54 <HAL_I2C_Master_Transmit>
 800048a:	4603      	mov	r3, r0
 800048c:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <bno055_readData+0x30>
		return 1;
 8000494:	2301      	movs	r3, #1
 8000496:	e014      	b.n	80004c2 <bno055_readData+0x5a>
	}
    bno055_delay(100);
 8000498:	2064      	movs	r0, #100	; 0x64
 800049a:	f000 f819 	bl	80004d0 <bno055_delay>
    status = HAL_I2C_Master_Receive(i2c_dev, BNO055_I2C_ADDR_LO << 1, data, len, 10);
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <bno055_readData+0x64>)
 80004a0:	6818      	ldr	r0, [r3, #0]
 80004a2:	79bb      	ldrb	r3, [r7, #6]
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	220a      	movs	r2, #10
 80004a8:	9200      	str	r2, [sp, #0]
 80004aa:	683a      	ldr	r2, [r7, #0]
 80004ac:	2150      	movs	r1, #80	; 0x50
 80004ae:	f001 fc45 	bl	8001d3c <HAL_I2C_Master_Receive>
 80004b2:	4603      	mov	r3, r0
 80004b4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 80004b6:	7bfb      	ldrb	r3, [r7, #15]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d101      	bne.n	80004c0 <bno055_readData+0x58>
		return 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	e000      	b.n	80004c2 <bno055_readData+0x5a>
	}
	else{
		return 1;
 80004c0:	2301      	movs	r3, #1
	}
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3710      	adds	r7, #16
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000094 	.word	0x20000094

080004d0 <bno055_delay>:

void bno055_delay(uint32_t ms){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f000 fe93 	bl	8001204 <HAL_Delay>
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <bno055_init>:

BNO055_FUNC_RETURN bno055_init(bno055_conf_t * bno055_conf, bno055_verification_t * bno055_verification){
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b090      	sub	sp, #64	; 0x40
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
 80004ee:	6039      	str	r1, [r7, #0]
    BNO055_FUNC_RETURN ret = ERROR_DEFAULT;
 80004f0:	2300      	movs	r3, #0
 80004f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t conf_page0 [2] = {BNO055_PAGE_ID, 0x00};
 80004f6:	2307      	movs	r3, #7
 80004f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uint8_t op_mode_conf [2] = {BNO055_OPR_MODE, OPERATION_MODE_CONFIG};
 80004fa:	233d      	movs	r3, #61	; 0x3d
 80004fc:	873b      	strh	r3, [r7, #56]	; 0x38

    ret += bno055_writeData(conf_page0);
 80004fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff fecc 	bl	80002a0 <bno055_writeData>
 8000508:	4603      	mov	r3, r0
 800050a:	461a      	mov	r2, r3
 800050c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000510:	4413      	add	r3, r2
 8000512:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 8000516:	200a      	movs	r0, #10
 8000518:	f7ff ffda 	bl	80004d0 <bno055_delay>

    ret +=bno055_writeData(op_mode_conf);
 800051c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff febd 	bl	80002a0 <bno055_writeData>
 8000526:	4603      	mov	r3, r0
 8000528:	461a      	mov	r2, r3
 800052a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800052e:	4413      	add	r3, r2
 8000530:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(550);
 8000534:	f240 2026 	movw	r0, #550	; 0x226
 8000538:	f7ff ffca 	bl	80004d0 <bno055_delay>

	uint8_t conf_page1 [2] = {BNO055_PAGE_ID, 0x01};
 800053c:	f240 1307 	movw	r3, #263	; 0x107
 8000540:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t acc_conf [2] = {BNO055_ACC_CONFIG, bno055_conf->acc_operation_mode << 5 | bno055_conf->acc_bandwidth << 2 | bno055_conf->acc_g_range };
 8000542:	2308      	movs	r3, #8
 8000544:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	799b      	ldrb	r3, [r3, #6]
 800054c:	015b      	lsls	r3, r3, #5
 800054e:	b25a      	sxtb	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	795b      	ldrb	r3, [r3, #5]
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	b25b      	sxtb	r3, r3
 8000558:	4313      	orrs	r3, r2
 800055a:	b25a      	sxtb	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	b25b      	sxtb	r3, r3
 8000562:	4313      	orrs	r3, r2
 8000564:	b25b      	sxtb	r3, r3
 8000566:	b2db      	uxtb	r3, r3
 8000568:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t gyr_conf0 [2] = {BNO055_GYRO_CONFIG_0, bno055_conf->gyr_bandwidth << 3 | bno055_conf->gyr_range };
 800056c:	230a      	movs	r3, #10
 800056e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	7a1b      	ldrb	r3, [r3, #8]
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	b25a      	sxtb	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	79db      	ldrb	r3, [r3, #7]
 800057e:	b25b      	sxtb	r3, r3
 8000580:	4313      	orrs	r3, r2
 8000582:	b25b      	sxtb	r3, r3
 8000584:	b2db      	uxtb	r3, r3
 8000586:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t gyr_conf1 [2] = {BNO055_GYRO_CONFIG_1, bno055_conf->gyr_op_mode };
 800058a:	230b      	movs	r3, #11
 800058c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	7a5b      	ldrb	r3, [r3, #9]
 8000594:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t mag_conf [2] = {BNO055_MAG_CONFIG, bno055_conf->mag_pwr_mode << 5 | bno055_conf->mag_op_mode << 3 | bno055_conf->mag_data_rate };
 8000598:	2309      	movs	r3, #9
 800059a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	7b1b      	ldrb	r3, [r3, #12]
 80005a2:	015b      	lsls	r3, r3, #5
 80005a4:	b25a      	sxtb	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	7adb      	ldrb	r3, [r3, #11]
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	b25b      	sxtb	r3, r3
 80005ae:	4313      	orrs	r3, r2
 80005b0:	b25a      	sxtb	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7a9b      	ldrb	r3, [r3, #10]
 80005b6:	b25b      	sxtb	r3, r3
 80005b8:	4313      	orrs	r3, r2
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	ret +=bno055_writeData(conf_page1);
 80005c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe6a 	bl	80002a0 <bno055_writeData>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80005d4:	4413      	add	r3, r2
 80005d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 80005da:	200a      	movs	r0, #10
 80005dc:	f7ff ff78 	bl	80004d0 <bno055_delay>


	ret +=bno055_writeData(acc_conf);
 80005e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fe5b 	bl	80002a0 <bno055_writeData>
 80005ea:	4603      	mov	r3, r0
 80005ec:	461a      	mov	r2, r3
 80005ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80005f2:	4413      	add	r3, r2
 80005f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 80005f8:	200a      	movs	r0, #10
 80005fa:	f7ff ff69 	bl	80004d0 <bno055_delay>

	ret +=bno055_writeData(gyr_conf0);
 80005fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fe4c 	bl	80002a0 <bno055_writeData>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000610:	4413      	add	r3, r2
 8000612:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 8000616:	200a      	movs	r0, #10
 8000618:	f7ff ff5a 	bl	80004d0 <bno055_delay>

	ret +=bno055_writeData(gyr_conf1);
 800061c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fe3d 	bl	80002a0 <bno055_writeData>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800062e:	4413      	add	r3, r2
 8000630:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 8000634:	200a      	movs	r0, #10
 8000636:	f7ff ff4b 	bl	80004d0 <bno055_delay>

	ret +=bno055_writeData(mag_conf);
 800063a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fe2e 	bl	80002a0 <bno055_writeData>
 8000644:	4603      	mov	r3, r0
 8000646:	461a      	mov	r2, r3
 8000648:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800064c:	4413      	add	r3, r2
 800064e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 8000652:	200a      	movs	r0, #10
 8000654:	f7ff ff3c 	bl	80004d0 <bno055_delay>


    uint8_t pwr_mode [2] = {BNO055_PWR_MODE, bno055_conf->pwr_mode};
 8000658:	233e      	movs	r3, #62	; 0x3e
 800065a:	f887 3020 	strb.w	r3, [r7, #32]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    uint8_t op_mode [2] = {BNO055_OPR_MODE, bno055_conf->op_mode};
 8000666:	233d      	movs	r3, #61	; 0x3d
 8000668:	773b      	strb	r3, [r7, #28]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	785b      	ldrb	r3, [r3, #1]
 800066e:	777b      	strb	r3, [r7, #29]
    uint8_t axis_remap_conf [2] = {BNO055_AXIS_MAP_CONFIG, bno055_conf->axis_remap_conf};
 8000670:	2341      	movs	r3, #65	; 0x41
 8000672:	763b      	strb	r3, [r7, #24]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	789b      	ldrb	r3, [r3, #2]
 8000678:	767b      	strb	r3, [r7, #25]
    uint8_t axis_remap_sign [2] = {BNO055_AXIS_MAP_SIGN, bno055_conf->axis_remap_sign};
 800067a:	2342      	movs	r3, #66	; 0x42
 800067c:	753b      	strb	r3, [r7, #20]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	78db      	ldrb	r3, [r3, #3]
 8000682:	757b      	strb	r3, [r7, #21]

    uint8_t unit_sel [2] = {BNO055_OPR_MODE, bno055_conf->unit_sel};
 8000684:	233d      	movs	r3, #61	; 0x3d
 8000686:	743b      	strb	r3, [r7, #16]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	7b5b      	ldrb	r3, [r3, #13]
 800068c:	747b      	strb	r3, [r7, #17]

    ret += bno055_writeData(conf_page0);
 800068e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff fe04 	bl	80002a0 <bno055_writeData>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006a0:	4413      	add	r3, r2
 80006a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 80006a6:	200a      	movs	r0, #10
 80006a8:	f7ff ff12 	bl	80004d0 <bno055_delay>

	ret += bno055_writeData(pwr_mode);
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fdf5 	bl	80002a0 <bno055_writeData>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006be:	4413      	add	r3, r2
 80006c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 80006c4:	200a      	movs	r0, #10
 80006c6:	f7ff ff03 	bl	80004d0 <bno055_delay>

    ret += bno055_writeData(axis_remap_conf);
 80006ca:	f107 0318 	add.w	r3, r7, #24
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fde6 	bl	80002a0 <bno055_writeData>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006dc:	4413      	add	r3, r2
 80006de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 80006e2:	200a      	movs	r0, #10
 80006e4:	f7ff fef4 	bl	80004d0 <bno055_delay>

    ret += bno055_writeData(axis_remap_sign);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fdd7 	bl	80002a0 <bno055_writeData>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006fa:	4413      	add	r3, r2
 80006fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 8000700:	200a      	movs	r0, #10
 8000702:	f7ff fee5 	bl	80004d0 <bno055_delay>

    ret += bno055_writeData(unit_sel);
 8000706:	f107 0310 	add.w	r3, r7, #16
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fdc8 	bl	80002a0 <bno055_writeData>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000718:	4413      	add	r3, r2
 800071a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f7ff fed6 	bl	80004d0 <bno055_delay>

    ret += bno055_writeData(op_mode);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fdb9 	bl	80002a0 <bno055_writeData>
 800072e:	4603      	mov	r3, r0
 8000730:	461a      	mov	r2, r3
 8000732:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000736:	4413      	add	r3, r2
 8000738:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 800073c:	200a      	movs	r0, #10
 800073e:	f7ff fec7 	bl	80004d0 <bno055_delay>

    uint8_t sw_id[2] = {0, 0};
 8000742:	2300      	movs	r3, #0
 8000744:	81bb      	strh	r3, [r7, #12]
    uint8_t data = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	72fb      	strb	r3, [r7, #11]

    ret += bno055_readData(BNO055_CHIP_ID, &data, 1);
 800074a:	f107 030b 	add.w	r3, r7, #11
 800074e:	2201      	movs	r2, #1
 8000750:	4619      	mov	r1, r3
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff fe88 	bl	8000468 <bno055_readData>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000760:	4413      	add	r3, r2
 8000762:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->chip_id = data;
 8000766:	7afa      	ldrb	r2, [r7, #11]
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	701a      	strb	r2, [r3, #0]
    bno055_delay(10);
 800076c:	200a      	movs	r0, #10
 800076e:	f7ff feaf 	bl	80004d0 <bno055_delay>

    ret += bno055_readData(BNO055_ACC_ID, &data, 1);
 8000772:	f107 030b 	add.w	r3, r7, #11
 8000776:	2201      	movs	r2, #1
 8000778:	4619      	mov	r1, r3
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff fe74 	bl	8000468 <bno055_readData>
 8000780:	4603      	mov	r3, r0
 8000782:	461a      	mov	r2, r3
 8000784:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000788:	4413      	add	r3, r2
 800078a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->acc_id = data;
 800078e:	7afa      	ldrb	r2, [r7, #11]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	715a      	strb	r2, [r3, #5]
    bno055_delay(10);
 8000794:	200a      	movs	r0, #10
 8000796:	f7ff fe9b 	bl	80004d0 <bno055_delay>

    ret += bno055_readData(BNO055_MAG_ID, &data, 1);
 800079a:	f107 030b 	add.w	r3, r7, #11
 800079e:	2201      	movs	r2, #1
 80007a0:	4619      	mov	r1, r3
 80007a2:	2002      	movs	r0, #2
 80007a4:	f7ff fe60 	bl	8000468 <bno055_readData>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007b0:	4413      	add	r3, r2
 80007b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->mag_id = data;
 80007b6:	7afa      	ldrb	r2, [r7, #11]
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	719a      	strb	r2, [r3, #6]
    bno055_delay(10);
 80007bc:	200a      	movs	r0, #10
 80007be:	f7ff fe87 	bl	80004d0 <bno055_delay>

    ret += bno055_readData(BNO055_GYR_ID, &data, 1);
 80007c2:	f107 030b 	add.w	r3, r7, #11
 80007c6:	2201      	movs	r2, #1
 80007c8:	4619      	mov	r1, r3
 80007ca:	2003      	movs	r0, #3
 80007cc:	f7ff fe4c 	bl	8000468 <bno055_readData>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007d8:	4413      	add	r3, r2
 80007da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->gyr_id = data;
 80007de:	7afa      	ldrb	r2, [r7, #11]
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	71da      	strb	r2, [r3, #7]
    bno055_delay(10);
 80007e4:	200a      	movs	r0, #10
 80007e6:	f7ff fe73 	bl	80004d0 <bno055_delay>

    ret += bno055_readData(BNO055_BL_REV_ID, &data, 1);
 80007ea:	f107 030b 	add.w	r3, r7, #11
 80007ee:	2201      	movs	r2, #1
 80007f0:	4619      	mov	r1, r3
 80007f2:	2006      	movs	r0, #6
 80007f4:	f7ff fe38 	bl	8000468 <bno055_readData>
 80007f8:	4603      	mov	r3, r0
 80007fa:	461a      	mov	r2, r3
 80007fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000800:	4413      	add	r3, r2
 8000802:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->bl_rev_id = data;
 8000806:	7afa      	ldrb	r2, [r7, #11]
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	721a      	strb	r2, [r3, #8]
    bno055_delay(10);
 800080c:	200a      	movs	r0, #10
 800080e:	f7ff fe5f 	bl	80004d0 <bno055_delay>

    ret += bno055_readData(BNO055_SW_REV_ID_LSB, sw_id, 2);
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2202      	movs	r2, #2
 8000818:	4619      	mov	r1, r3
 800081a:	2004      	movs	r0, #4
 800081c:	f7ff fe24 	bl	8000468 <bno055_readData>
 8000820:	4603      	mov	r3, r0
 8000822:	461a      	mov	r2, r3
 8000824:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000828:	4413      	add	r3, r2
 800082a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->sw_rev_id = (uint16_t)((sw_id[1] << 8)|(sw_id[0]));
 800082e:	7b7b      	ldrb	r3, [r7, #13]
 8000830:	021b      	lsls	r3, r3, #8
 8000832:	b21a      	sxth	r2, r3
 8000834:	7b3b      	ldrb	r3, [r7, #12]
 8000836:	b21b      	sxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b21b      	sxth	r3, r3
 800083c:	b29a      	uxth	r2, r3
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	805a      	strh	r2, [r3, #2]
    bno055_delay(10);
 8000842:	200a      	movs	r0, #10
 8000844:	f7ff fe44 	bl	80004d0 <bno055_delay>

    ret += bno055_readData(BNO055_PAGE_ID, &data, 1);
 8000848:	f107 030b 	add.w	r3, r7, #11
 800084c:	2201      	movs	r2, #1
 800084e:	4619      	mov	r1, r3
 8000850:	2007      	movs	r0, #7
 8000852:	f7ff fe09 	bl	8000468 <bno055_readData>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800085e:	4413      	add	r3, r2
 8000860:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->page_id = data;
 8000864:	7afa      	ldrb	r2, [r7, #11]
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	711a      	strb	r2, [r3, #4]
    bno055_delay(100);
 800086a:	2064      	movs	r0, #100	; 0x64
 800086c:	f7ff fe30 	bl	80004d0 <bno055_delay>

    return ret;
 8000870:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8000874:	4618      	mov	r0, r3
 8000876:	3740      	adds	r7, #64	; 0x40
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <bno055_read_gyr_x>:
    mag_xyz->y = (float)(uint16_t)((data[3] << 8)|(data[2]));
    mag_xyz->z = (float)(uint16_t)((data[5] << 8)|(data[4]));
    return ret;
}

BNO055_FUNC_RETURN bno055_read_gyr_x(uint16_t* gyr_x){
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    BNO055_FUNC_RETURN ret = ERROR_DEFAULT;
 8000884:	2300      	movs	r3, #0
 8000886:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2] = {0,0};
 8000888:	2300      	movs	r3, #0
 800088a:	81bb      	strh	r3, [r7, #12]
    ret += bno055_readData(BNO055_MAG_DATA_Z_LSB, data, 2);
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2202      	movs	r2, #2
 8000892:	4619      	mov	r1, r3
 8000894:	2012      	movs	r0, #18
 8000896:	f7ff fde7 	bl	8000468 <bno055_readData>
 800089a:	4603      	mov	r3, r0
 800089c:	461a      	mov	r2, r3
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	4413      	add	r3, r2
 80008a2:	73fb      	strb	r3, [r7, #15]
    *gyr_x += (uint16_t)((data[1] << 8)|(data[0]));
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	881a      	ldrh	r2, [r3, #0]
 80008a8:	7b7b      	ldrb	r3, [r7, #13]
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	b219      	sxth	r1, r3
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	b21b      	sxth	r3, r3
 80008b2:	430b      	orrs	r3, r1
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	801a      	strh	r2, [r3, #0]
    return ret;
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_DMA_Init+0x48>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <MX_DMA_Init+0x48>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6153      	str	r3, [r2, #20]
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <MX_DMA_Init+0x48>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	2010      	movs	r0, #16
 80008f0:	f000 fd87 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80008f4:	2010      	movs	r0, #16
 80008f6:	f000 fda0 	bl	800143a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	2011      	movs	r0, #17
 8000900:	f000 fd7f 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000904:	2011      	movs	r0, #17
 8000906:	f000 fd98 	bl	800143a <HAL_NVIC_EnableIRQ>

}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <MX_GPIO_Init+0xc4>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	4a2a      	ldr	r2, [pc, #168]	; (80009dc <MX_GPIO_Init+0xc4>)
 8000934:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000938:	6153      	str	r3, [r2, #20]
 800093a:	4b28      	ldr	r3, [pc, #160]	; (80009dc <MX_GPIO_Init+0xc4>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000946:	4b25      	ldr	r3, [pc, #148]	; (80009dc <MX_GPIO_Init+0xc4>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	4a24      	ldr	r2, [pc, #144]	; (80009dc <MX_GPIO_Init+0xc4>)
 800094c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000950:	6153      	str	r3, [r2, #20]
 8000952:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_GPIO_Init+0xc4>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_GPIO_Init+0xc4>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	4a1e      	ldr	r2, [pc, #120]	; (80009dc <MX_GPIO_Init+0xc4>)
 8000964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000968:	6153      	str	r3, [r2, #20]
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_GPIO_Init+0xc4>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_GPIO_Init+0xc4>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	4a18      	ldr	r2, [pc, #96]	; (80009dc <MX_GPIO_Init+0xc4>)
 800097c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000980:	6153      	str	r3, [r2, #20]
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_GPIO_Init+0xc4>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000996:	f001 f81b 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800099a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	480b      	ldr	r0, [pc, #44]	; (80009e0 <MX_GPIO_Init+0xc8>)
 80009b2:	f000 fe83 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009b6:	2320      	movs	r3, #32
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d0:	f000 fe74 	bl	80016bc <HAL_GPIO_Init>

}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	; 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021000 	.word	0x40021000
 80009e0:	48000800 	.word	0x48000800

080009e4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_I2C1_Init+0x74>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <MX_I2C1_Init+0x78>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_I2C1_Init+0x74>)
 80009f0:	4a1b      	ldr	r2, [pc, #108]	; (8000a60 <MX_I2C1_Init+0x7c>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_I2C1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_I2C1_Init+0x74>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_I2C1_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1e:	480e      	ldr	r0, [pc, #56]	; (8000a58 <MX_I2C1_Init+0x74>)
 8000a20:	f001 f808 	bl	8001a34 <HAL_I2C_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a2a:	f000 f985 	bl	8000d38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4809      	ldr	r0, [pc, #36]	; (8000a58 <MX_I2C1_Init+0x74>)
 8000a32:	f001 fd25 	bl	8002480 <HAL_I2CEx_ConfigAnalogFilter>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a3c:	f000 f97c 	bl	8000d38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_I2C1_Init+0x74>)
 8000a44:	f001 fd67 	bl	8002516 <HAL_I2CEx_ConfigDigitalFilter>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a4e:	f000 f973 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000a4 	.word	0x200000a4
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	2000090e 	.word	0x2000090e

08000a64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a4c      	ldr	r2, [pc, #304]	; (8000bb4 <HAL_I2C_MspInit+0x150>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	f040 8092 	bne.w	8000bac <HAL_I2C_MspInit+0x148>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b4b      	ldr	r3, [pc, #300]	; (8000bb8 <HAL_I2C_MspInit+0x154>)
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	4a4a      	ldr	r2, [pc, #296]	; (8000bb8 <HAL_I2C_MspInit+0x154>)
 8000a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a92:	6153      	str	r3, [r2, #20]
 8000a94:	4b48      	ldr	r3, [pc, #288]	; (8000bb8 <HAL_I2C_MspInit+0x154>)
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa0:	4b45      	ldr	r3, [pc, #276]	; (8000bb8 <HAL_I2C_MspInit+0x154>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	4a44      	ldr	r2, [pc, #272]	; (8000bb8 <HAL_I2C_MspInit+0x154>)
 8000aa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aaa:	6153      	str	r3, [r2, #20]
 8000aac:	4b42      	ldr	r3, [pc, #264]	; (8000bb8 <HAL_I2C_MspInit+0x154>)
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ab8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000abe:	2312      	movs	r3, #18
 8000ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aca:	2304      	movs	r3, #4
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad8:	f000 fdf0 	bl	80016bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae0:	2312      	movs	r3, #18
 8000ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aec:	2304      	movs	r3, #4
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4831      	ldr	r0, [pc, #196]	; (8000bbc <HAL_I2C_MspInit+0x158>)
 8000af8:	f000 fde0 	bl	80016bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000afc:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <HAL_I2C_MspInit+0x154>)
 8000afe:	69db      	ldr	r3, [r3, #28]
 8000b00:	4a2d      	ldr	r2, [pc, #180]	; (8000bb8 <HAL_I2C_MspInit+0x154>)
 8000b02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b06:	61d3      	str	r3, [r2, #28]
 8000b08:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <HAL_I2C_MspInit+0x154>)
 8000b0a:	69db      	ldr	r3, [r3, #28]
 8000b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000b14:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <HAL_I2C_MspInit+0x15c>)
 8000b16:	4a2b      	ldr	r2, [pc, #172]	; (8000bc4 <HAL_I2C_MspInit+0x160>)
 8000b18:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b1a:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <HAL_I2C_MspInit+0x15c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b20:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <HAL_I2C_MspInit+0x15c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b26:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <HAL_I2C_MspInit+0x15c>)
 8000b28:	2280      	movs	r2, #128	; 0x80
 8000b2a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b2c:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <HAL_I2C_MspInit+0x15c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b32:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <HAL_I2C_MspInit+0x15c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <HAL_I2C_MspInit+0x15c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <HAL_I2C_MspInit+0x15c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000b44:	481e      	ldr	r0, [pc, #120]	; (8000bc0 <HAL_I2C_MspInit+0x15c>)
 8000b46:	f000 fc92 	bl	800146e <HAL_DMA_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 8000b50:	f000 f8f2 	bl	8000d38 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a1a      	ldr	r2, [pc, #104]	; (8000bc0 <HAL_I2C_MspInit+0x15c>)
 8000b58:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b5a:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <HAL_I2C_MspInit+0x15c>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <HAL_I2C_MspInit+0x164>)
 8000b62:	4a1a      	ldr	r2, [pc, #104]	; (8000bcc <HAL_I2C_MspInit+0x168>)
 8000b64:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_I2C_MspInit+0x164>)
 8000b68:	2210      	movs	r2, #16
 8000b6a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_I2C_MspInit+0x164>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_I2C_MspInit+0x164>)
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_I2C_MspInit+0x164>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b7e:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_I2C_MspInit+0x164>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_I2C_MspInit+0x164>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_I2C_MspInit+0x164>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <HAL_I2C_MspInit+0x164>)
 8000b92:	f000 fc6c 	bl	800146e <HAL_DMA_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_I2C_MspInit+0x13c>
    {
      Error_Handler();
 8000b9c:	f000 f8cc 	bl	8000d38 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a09      	ldr	r2, [pc, #36]	; (8000bc8 <HAL_I2C_MspInit+0x164>)
 8000ba4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_I2C_MspInit+0x164>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	; 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40005400 	.word	0x40005400
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	200000f8 	.word	0x200000f8
 8000bc4:	40020080 	.word	0x40020080
 8000bc8:	2000013c 	.word	0x2000013c
 8000bcc:	4002006c 	.word	0x4002006c

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd4:	f000 fab0 	bl	8001138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd8:	f000 f838 	bl	8000c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bdc:	f7ff fe9c 	bl	8000918 <MX_GPIO_Init>
  MX_DMA_Init();
 8000be0:	f7ff fe74 	bl	80008cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000be4:	f000 fa0c 	bl	8001000 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000be8:	f7ff fefc 	bl	80009e4 <MX_I2C1_Init>
  MX_TIM17_Init();
 8000bec:	f000 f9c2 	bl	8000f74 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  bno055_set_i2c_handler(&hi2c1);
 8000bf0:	4810      	ldr	r0, [pc, #64]	; (8000c34 <main+0x64>)
 8000bf2:	f7ff fb45 	bl	8000280 <bno055_set_i2c_handler>
  /* USER CODE END 2 */
  // Initialize BNO055 configuration
  ret = bno055_init(&default_bno055_config, &default_bno055_verification);
 8000bf6:	4910      	ldr	r1, [pc, #64]	; (8000c38 <main+0x68>)
 8000bf8:	4810      	ldr	r0, [pc, #64]	; (8000c3c <main+0x6c>)
 8000bfa:	f7ff fc74 	bl	80004e6 <bno055_init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <main+0x70>)
 8000c04:	701a      	strb	r2, [r3, #0]
  gyr_data = 0;
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <main+0x74>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(300);
 8000c0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c10:	f000 faf8 	bl	8001204 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000c14:	2120      	movs	r1, #32
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1a:	f000 fef1 	bl	8001a00 <HAL_GPIO_TogglePin>
	  bno055_read_gyr_x(&gyr_data);
 8000c1e:	4809      	ldr	r0, [pc, #36]	; (8000c44 <main+0x74>)
 8000c20:	f7ff fe2c 	bl	800087c <bno055_read_gyr_x>
	  HAL_UART_Transmit(&huart2, (uint8_t *)&gyr_data, sizeof(gyr_data), HAL_MAX_DELAY);
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
 8000c28:	2202      	movs	r2, #2
 8000c2a:	4906      	ldr	r1, [pc, #24]	; (8000c44 <main+0x74>)
 8000c2c:	4806      	ldr	r0, [pc, #24]	; (8000c48 <main+0x78>)
 8000c2e:	f003 faab 	bl	8004188 <HAL_UART_Transmit>
	  HAL_Delay(300);
 8000c32:	e7eb      	b.n	8000c0c <main+0x3c>
 8000c34:	200000a4 	.word	0x200000a4
 8000c38:	20000098 	.word	0x20000098
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000182 	.word	0x20000182
 8000c44:	20000180 	.word	0x20000180
 8000c48:	200001d4 	.word	0x200001d4

08000c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0a6      	sub	sp, #152	; 0x98
 8000c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c56:	2228      	movs	r2, #40	; 0x28
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f004 f910 	bl	8004e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c60:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2258      	movs	r2, #88	; 0x58
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f004 f902 	bl	8004e80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c80:	2301      	movs	r3, #1
 8000c82:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c84:	2310      	movs	r3, #16
 8000c86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c98:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 fc80 	bl	80025b0 <HAL_RCC_OscConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cb6:	f000 f83f 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cba:	230f      	movs	r3, #15
 8000cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f002 fcbe 	bl	8003658 <HAL_RCC_ClockConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ce2:	f000 f829 	bl	8000d38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <SystemClock_Config+0xc4>)
 8000ce8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f002 fee3 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000d04:	f000 f818 	bl	8000d38 <Error_Handler>
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3798      	adds	r7, #152	; 0x98
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	01000022 	.word	0x01000022

08000d14 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d1c:	1d39      	adds	r1, r7, #4
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	2201      	movs	r2, #1
 8000d24:	4803      	ldr	r0, [pc, #12]	; (8000d34 <__io_putchar+0x20>)
 8000d26:	f003 fa2f 	bl	8004188 <HAL_UART_Transmit>
  return ch;
 8000d2a:	687b      	ldr	r3, [r7, #4]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200001d4 	.word	0x200001d4

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_MspInit+0x44>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_MspInit+0x44>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6193      	str	r3, [r2, #24]
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_MspInit+0x44>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_MspInit+0x44>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x44>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x44>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d7a:	2007      	movs	r0, #7
 8000d7c:	f000 fb36 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40021000 	.word	0x40021000

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd8:	f000 f9f4 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <DMA1_Channel6_IRQHandler+0x10>)
 8000de6:	f000 fb89 	bl	80014fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2000013c 	.word	0x2000013c

08000df4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <DMA1_Channel7_IRQHandler+0x10>)
 8000dfa:	f000 fb7f 	bl	80014fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200000f8 	.word	0x200000f8

08000e08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	e00a      	b.n	8000e30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e1a:	f3af 8000 	nop.w
 8000e1e:	4601      	mov	r1, r0
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	60ba      	str	r2, [r7, #8]
 8000e26:	b2ca      	uxtb	r2, r1
 8000e28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	dbf0      	blt.n	8000e1a <_read+0x12>
  }

  return len;
 8000e38:	687b      	ldr	r3, [r7, #4]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	e009      	b.n	8000e68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	60ba      	str	r2, [r7, #8]
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff59 	bl	8000d14 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3301      	adds	r3, #1
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697a      	ldr	r2, [r7, #20]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	dbf1      	blt.n	8000e54 <_write+0x12>
  }
  return len;
 8000e70:	687b      	ldr	r3, [r7, #4]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <_close>:

int _close(int file)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <_isatty>:

int _isatty(int file)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eec:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <_sbrk+0x5c>)
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <_sbrk+0x60>)
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <_sbrk+0x64>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <_sbrk+0x68>)
 8000f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d207      	bcs.n	8000f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f14:	f004 f802 	bl	8004f1c <__errno>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	e009      	b.n	8000f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <_sbrk+0x64>)
 8000f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20010000 	.word	0x20010000
 8000f44:	00000400 	.word	0x00000400
 8000f48:	20000184 	.word	0x20000184
 8000f4c:	200003b0 	.word	0x200003b0

08000f50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <SystemInit+0x20>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <SystemInit+0x20>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_TIM17_Init+0x44>)
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <MX_TIM17_Init+0x48>)
 8000f7c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_TIM17_Init+0x44>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_TIM17_Init+0x44>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <MX_TIM17_Init+0x44>)
 8000f8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f90:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_TIM17_Init+0x44>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <MX_TIM17_Init+0x44>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_TIM17_Init+0x44>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <MX_TIM17_Init+0x44>)
 8000fa6:	f002 ffab 	bl	8003f00 <HAL_TIM_Base_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000fb0:	f7ff fec2 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000188 	.word	0x20000188
 8000fbc:	40014800 	.word	0x40014800

08000fc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_TIM_Base_MspInit+0x38>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d10b      	bne.n	8000fea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_TIM_Base_MspInit+0x3c>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <HAL_TIM_Base_MspInit+0x3c>)
 8000fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fdc:	6193      	str	r3, [r2, #24]
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_TIM_Base_MspInit+0x3c>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40014800 	.word	0x40014800
 8000ffc:	40021000 	.word	0x40021000

08001000 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_USART2_UART_Init+0x58>)
 8001006:	4a15      	ldr	r2, [pc, #84]	; (800105c <MX_USART2_UART_Init+0x5c>)
 8001008:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <MX_USART2_UART_Init+0x58>)
 800100c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001010:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_USART2_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_USART2_UART_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_USART2_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_USART2_UART_Init+0x58>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <MX_USART2_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_USART2_UART_Init+0x58>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <MX_USART2_UART_Init+0x58>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_USART2_UART_Init+0x58>)
 800103e:	2200      	movs	r2, #0
 8001040:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_USART2_UART_Init+0x58>)
 8001044:	f003 f852 	bl	80040ec <HAL_UART_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800104e:	f7ff fe73 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200001d4 	.word	0x200001d4
 800105c:	40004400 	.word	0x40004400

08001060 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a17      	ldr	r2, [pc, #92]	; (80010dc <HAL_UART_MspInit+0x7c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d128      	bne.n	80010d4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_UART_MspInit+0x80>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <HAL_UART_MspInit+0x80>)
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	61d3      	str	r3, [r2, #28]
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_UART_MspInit+0x80>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_UART_MspInit+0x80>)
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <HAL_UART_MspInit+0x80>)
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a4:	6153      	str	r3, [r2, #20]
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_UART_MspInit+0x80>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010b2:	230c      	movs	r3, #12
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010c2:	2307      	movs	r3, #7
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d0:	f000 faf4 	bl	80016bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40004400 	.word	0x40004400
 80010e0:	40021000 	.word	0x40021000

080010e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800111c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e8:	f7ff ff32 	bl	8000f50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ee:	490d      	ldr	r1, [pc, #52]	; (8001124 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <LoopForever+0xe>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001104:	4c0a      	ldr	r4, [pc, #40]	; (8001130 <LoopForever+0x16>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001112:	f003 ff09 	bl	8004f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001116:	f7ff fd5b 	bl	8000bd0 <main>

0800111a <LoopForever>:

LoopForever:
    b LoopForever
 800111a:	e7fe      	b.n	800111a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800111c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001124:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001128:	08005c30 	.word	0x08005c30
  ldr r2, =_sbss
 800112c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001130:	200003ac 	.word	0x200003ac

08001134 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC1_2_IRQHandler>
	...

08001138 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_Init+0x28>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a07      	ldr	r2, [pc, #28]	; (8001160 <HAL_Init+0x28>)
 8001142:	f043 0310 	orr.w	r3, r3, #16
 8001146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001148:	2003      	movs	r0, #3
 800114a:	f000 f94f 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114e:	2000      	movs	r0, #0
 8001150:	f000 f808 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001154:	f7ff fdf6 	bl	8000d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40022000 	.word	0x40022000

08001164 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_InitTick+0x54>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x58>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	fbb3 f3f1 	udiv	r3, r3, r1
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f967 	bl	8001456 <HAL_SYSTICK_Config>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e00e      	b.n	80011b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d80a      	bhi.n	80011ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f92f 	bl	8001402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <HAL_InitTick+0x5c>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000010 	.word	0x20000010
 80011bc:	20000018 	.word	0x20000018
 80011c0:	20000014 	.word	0x20000014

080011c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000018 	.word	0x20000018
 80011e8:	2000025c 	.word	0x2000025c

080011ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	2000025c 	.word	0x2000025c

08001204 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff ffee 	bl	80011ec <HAL_GetTick>
 8001210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	d005      	beq.n	800122a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_Delay+0x44>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800122a:	bf00      	nop
 800122c:	f7ff ffde 	bl	80011ec <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d8f7      	bhi.n	800122c <HAL_Delay+0x28>
  {
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000018 	.word	0x20000018

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db0b      	blt.n	80012da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	f003 021f 	and.w	r2, r3, #31
 80012c8:	4907      	ldr	r1, [pc, #28]	; (80012e8 <__NVIC_EnableIRQ+0x38>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	2001      	movs	r0, #1
 80012d2:	fa00 f202 	lsl.w	r2, r0, r2
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000e100 	.word	0xe000e100

080012ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	db0a      	blt.n	8001316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	490c      	ldr	r1, [pc, #48]	; (8001338 <__NVIC_SetPriority+0x4c>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	440b      	add	r3, r1
 8001310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001314:	e00a      	b.n	800132c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4908      	ldr	r1, [pc, #32]	; (800133c <__NVIC_SetPriority+0x50>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	3b04      	subs	r3, #4
 8001324:	0112      	lsls	r2, r2, #4
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	440b      	add	r3, r1
 800132a:	761a      	strb	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f1c3 0307 	rsb	r3, r3, #7
 800135a:	2b04      	cmp	r3, #4
 800135c:	bf28      	it	cs
 800135e:	2304      	movcs	r3, #4
 8001360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3304      	adds	r3, #4
 8001366:	2b06      	cmp	r3, #6
 8001368:	d902      	bls.n	8001370 <NVIC_EncodePriority+0x30>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3b03      	subs	r3, #3
 800136e:	e000      	b.n	8001372 <NVIC_EncodePriority+0x32>
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	f04f 32ff 	mov.w	r2, #4294967295
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43da      	mvns	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001388:	f04f 31ff 	mov.w	r1, #4294967295
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43d9      	mvns	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	4313      	orrs	r3, r2
         );
}
 800139a:	4618      	mov	r0, r3
 800139c:	3724      	adds	r7, #36	; 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b8:	d301      	bcc.n	80013be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00f      	b.n	80013de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <SysTick_Config+0x40>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c6:	210f      	movs	r1, #15
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f7ff ff8e 	bl	80012ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <SysTick_Config+0x40>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <SysTick_Config+0x40>)
 80013d8:	2207      	movs	r2, #7
 80013da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff29 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001414:	f7ff ff3e 	bl	8001294 <__NVIC_GetPriorityGrouping>
 8001418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff ff8e 	bl	8001340 <NVIC_EncodePriority>
 8001424:	4602      	mov	r2, r0
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff5d 	bl	80012ec <__NVIC_SetPriority>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff31 	bl	80012b0 <__NVIC_EnableIRQ>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ffa2 	bl	80013a8 <SysTick_Config>
 8001464:	4603      	mov	r3, r0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800146e:	b580      	push	{r7, lr}
 8001470:	b084      	sub	sp, #16
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e037      	b.n	80014f4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2202      	movs	r2, #2
 8001488:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800149a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800149e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80014a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f8b4 	bl	8001644 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}  
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	2204      	movs	r2, #4
 800151a:	409a      	lsls	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4013      	ands	r3, r2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d024      	beq.n	800156e <HAL_DMA_IRQHandler+0x72>
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	2b00      	cmp	r3, #0
 800152c:	d01f      	beq.n	800156e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0320 	and.w	r3, r3, #32
 8001538:	2b00      	cmp	r3, #0
 800153a:	d107      	bne.n	800154c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0204 	bic.w	r2, r2, #4
 800154a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001554:	2104      	movs	r1, #4
 8001556:	fa01 f202 	lsl.w	r2, r1, r2
 800155a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001560:	2b00      	cmp	r3, #0
 8001562:	d06a      	beq.n	800163a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800156c:	e065      	b.n	800163a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	2202      	movs	r2, #2
 8001574:	409a      	lsls	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4013      	ands	r3, r2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d02c      	beq.n	80015d8 <HAL_DMA_IRQHandler+0xdc>
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d027      	beq.n	80015d8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0320 	and.w	r3, r3, #32
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10b      	bne.n	80015ae <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 020a 	bic.w	r2, r2, #10
 80015a4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b6:	2102      	movs	r1, #2
 80015b8:	fa01 f202 	lsl.w	r2, r1, r2
 80015bc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d035      	beq.n	800163a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80015d6:	e030      	b.n	800163a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	2208      	movs	r2, #8
 80015de:	409a      	lsls	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d028      	beq.n	800163a <HAL_DMA_IRQHandler+0x13e>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d023      	beq.n	800163a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 020e 	bic.w	r2, r2, #14
 8001600:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	2b00      	cmp	r3, #0
 800162e:	d004      	beq.n	800163a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	4798      	blx	r3
    }
  }
}  
 8001638:	e7ff      	b.n	800163a <HAL_DMA_IRQHandler+0x13e>
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <DMA_CalcBaseAndBitshift+0x60>)
 8001654:	429a      	cmp	r2, r3
 8001656:	d80f      	bhi.n	8001678 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <DMA_CalcBaseAndBitshift+0x64>)
 8001660:	4413      	add	r3, r2
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <DMA_CalcBaseAndBitshift+0x68>)
 8001664:	fba2 2303 	umull	r2, r3, r2, r3
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	009a      	lsls	r2, r3, #2
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a0f      	ldr	r2, [pc, #60]	; (80016b0 <DMA_CalcBaseAndBitshift+0x6c>)
 8001674:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001676:	e00e      	b.n	8001696 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <DMA_CalcBaseAndBitshift+0x70>)
 8001680:	4413      	add	r3, r2
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <DMA_CalcBaseAndBitshift+0x68>)
 8001684:	fba2 2303 	umull	r2, r3, r2, r3
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	009a      	lsls	r2, r3, #2
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <DMA_CalcBaseAndBitshift+0x74>)
 8001694:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40020407 	.word	0x40020407
 80016a8:	bffdfff8 	.word	0xbffdfff8
 80016ac:	cccccccd 	.word	0xcccccccd
 80016b0:	40020000 	.word	0x40020000
 80016b4:	bffdfbf8 	.word	0xbffdfbf8
 80016b8:	40020400 	.word	0x40020400

080016bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ca:	e160      	b.n	800198e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8152 	beq.w	8001988 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d005      	beq.n	80016fc <HAL_GPIO_Init+0x40>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d130      	bne.n	800175e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001732:	2201      	movs	r2, #1
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	f003 0201 	and.w	r2, r3, #1
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b03      	cmp	r3, #3
 8001768:	d017      	beq.n	800179a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d123      	bne.n	80017ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	08da      	lsrs	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3208      	adds	r2, #8
 80017ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	220f      	movs	r2, #15
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	691a      	ldr	r2, [r3, #16]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	08da      	lsrs	r2, r3, #3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3208      	adds	r2, #8
 80017e8:	6939      	ldr	r1, [r7, #16]
 80017ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	2203      	movs	r2, #3
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0203 	and.w	r2, r3, #3
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80ac 	beq.w	8001988 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001830:	4b5e      	ldr	r3, [pc, #376]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4a5d      	ldr	r2, [pc, #372]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6193      	str	r3, [r2, #24]
 800183c:	4b5b      	ldr	r3, [pc, #364]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001848:	4a59      	ldr	r2, [pc, #356]	; (80019b0 <HAL_GPIO_Init+0x2f4>)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	3302      	adds	r3, #2
 8001850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	220f      	movs	r2, #15
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001872:	d025      	beq.n	80018c0 <HAL_GPIO_Init+0x204>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a4f      	ldr	r2, [pc, #316]	; (80019b4 <HAL_GPIO_Init+0x2f8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d01f      	beq.n	80018bc <HAL_GPIO_Init+0x200>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a4e      	ldr	r2, [pc, #312]	; (80019b8 <HAL_GPIO_Init+0x2fc>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d019      	beq.n	80018b8 <HAL_GPIO_Init+0x1fc>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a4d      	ldr	r2, [pc, #308]	; (80019bc <HAL_GPIO_Init+0x300>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d013      	beq.n	80018b4 <HAL_GPIO_Init+0x1f8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a4c      	ldr	r2, [pc, #304]	; (80019c0 <HAL_GPIO_Init+0x304>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d00d      	beq.n	80018b0 <HAL_GPIO_Init+0x1f4>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a4b      	ldr	r2, [pc, #300]	; (80019c4 <HAL_GPIO_Init+0x308>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d007      	beq.n	80018ac <HAL_GPIO_Init+0x1f0>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a4a      	ldr	r2, [pc, #296]	; (80019c8 <HAL_GPIO_Init+0x30c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d101      	bne.n	80018a8 <HAL_GPIO_Init+0x1ec>
 80018a4:	2306      	movs	r3, #6
 80018a6:	e00c      	b.n	80018c2 <HAL_GPIO_Init+0x206>
 80018a8:	2307      	movs	r3, #7
 80018aa:	e00a      	b.n	80018c2 <HAL_GPIO_Init+0x206>
 80018ac:	2305      	movs	r3, #5
 80018ae:	e008      	b.n	80018c2 <HAL_GPIO_Init+0x206>
 80018b0:	2304      	movs	r3, #4
 80018b2:	e006      	b.n	80018c2 <HAL_GPIO_Init+0x206>
 80018b4:	2303      	movs	r3, #3
 80018b6:	e004      	b.n	80018c2 <HAL_GPIO_Init+0x206>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e002      	b.n	80018c2 <HAL_GPIO_Init+0x206>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_GPIO_Init+0x206>
 80018c0:	2300      	movs	r3, #0
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	f002 0203 	and.w	r2, r2, #3
 80018c8:	0092      	lsls	r2, r2, #2
 80018ca:	4093      	lsls	r3, r2
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018d2:	4937      	ldr	r1, [pc, #220]	; (80019b0 <HAL_GPIO_Init+0x2f4>)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018e0:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <HAL_GPIO_Init+0x310>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001904:	4a31      	ldr	r2, [pc, #196]	; (80019cc <HAL_GPIO_Init+0x310>)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800190a:	4b30      	ldr	r3, [pc, #192]	; (80019cc <HAL_GPIO_Init+0x310>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800192e:	4a27      	ldr	r2, [pc, #156]	; (80019cc <HAL_GPIO_Init+0x310>)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_GPIO_Init+0x310>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	43db      	mvns	r3, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001958:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <HAL_GPIO_Init+0x310>)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800195e:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <HAL_GPIO_Init+0x310>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <HAL_GPIO_Init+0x310>)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	f47f ae97 	bne.w	80016cc <HAL_GPIO_Init+0x10>
  }
}
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40010000 	.word	0x40010000
 80019b4:	48000400 	.word	0x48000400
 80019b8:	48000800 	.word	0x48000800
 80019bc:	48000c00 	.word	0x48000c00
 80019c0:	48001000 	.word	0x48001000
 80019c4:	48001400 	.word	0x48001400
 80019c8:	48001800 	.word	0x48001800
 80019cc:	40010400 	.word	0x40010400

080019d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
 80019dc:	4613      	mov	r3, r2
 80019de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e0:	787b      	ldrb	r3, [r7, #1]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019e6:	887a      	ldrh	r2, [r7, #2]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019ec:	e002      	b.n	80019f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ee:	887a      	ldrh	r2, [r7, #2]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a12:	887a      	ldrh	r2, [r7, #2]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4013      	ands	r3, r2
 8001a18:	041a      	lsls	r2, r3, #16
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	43d9      	mvns	r1, r3
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	400b      	ands	r3, r1
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	619a      	str	r2, [r3, #24]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e081      	b.n	8001b4a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff f802 	bl	8000a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2224      	movs	r2, #36	; 0x24
 8001a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0201 	bic.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d107      	bne.n	8001aae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	e006      	b.n	8001abc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001aba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d104      	bne.n	8001ace <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001acc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001af0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69d9      	ldr	r1, [r3, #28]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1a      	ldr	r2, [r3, #32]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2220      	movs	r2, #32
 8001b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	460b      	mov	r3, r1
 8001b62:	817b      	strh	r3, [r7, #10]
 8001b64:	4613      	mov	r3, r2
 8001b66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b20      	cmp	r3, #32
 8001b72:	f040 80da 	bne.w	8001d2a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_I2C_Master_Transmit+0x30>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e0d3      	b.n	8001d2c <HAL_I2C_Master_Transmit+0x1d8>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b8c:	f7ff fb2e 	bl	80011ec <HAL_GetTick>
 8001b90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2319      	movs	r3, #25
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fa00 	bl	8001fa4 <I2C_WaitOnFlagUntilTimeout>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0be      	b.n	8001d2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2221      	movs	r2, #33	; 0x21
 8001bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2210      	movs	r2, #16
 8001bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	893a      	ldrh	r2, [r7, #8]
 8001bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	2bff      	cmp	r3, #255	; 0xff
 8001bde:	d90e      	bls.n	8001bfe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	22ff      	movs	r2, #255	; 0xff
 8001be4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	8979      	ldrh	r1, [r7, #10]
 8001bee:	4b51      	ldr	r3, [pc, #324]	; (8001d34 <HAL_I2C_Master_Transmit+0x1e0>)
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 fc10 	bl	800241c <I2C_TransferConfig>
 8001bfc:	e06c      	b.n	8001cd8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	8979      	ldrh	r1, [r7, #10]
 8001c10:	4b48      	ldr	r3, [pc, #288]	; (8001d34 <HAL_I2C_Master_Transmit+0x1e0>)
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 fbff 	bl	800241c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001c1e:	e05b      	b.n	8001cd8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	6a39      	ldr	r1, [r7, #32]
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 fa0c 	bl	8002042 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e07b      	b.n	8001d2c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d034      	beq.n	8001cd8 <HAL_I2C_Master_Transmit+0x184>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d130      	bne.n	8001cd8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2180      	movs	r1, #128	; 0x80
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 f98f 	bl	8001fa4 <I2C_WaitOnFlagUntilTimeout>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e04d      	b.n	8001d2c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2bff      	cmp	r3, #255	; 0xff
 8001c98:	d90e      	bls.n	8001cb8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	22ff      	movs	r2, #255	; 0xff
 8001c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	8979      	ldrh	r1, [r7, #10]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 fbb3 	bl	800241c <I2C_TransferConfig>
 8001cb6:	e00f      	b.n	8001cd8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	8979      	ldrh	r1, [r7, #10]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 fba2 	bl	800241c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d19e      	bne.n	8001c20 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	6a39      	ldr	r1, [r7, #32]
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f9f2 	bl	80020d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e01a      	b.n	8001d2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_I2C_Master_Transmit+0x1e4>)
 8001d0a:	400b      	ands	r3, r1
 8001d0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001d2a:	2302      	movs	r3, #2
  }
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	80002000 	.word	0x80002000
 8001d38:	fe00e800 	.word	0xfe00e800

08001d3c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	461a      	mov	r2, r3
 8001d48:	460b      	mov	r3, r1
 8001d4a:	817b      	strh	r3, [r7, #10]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	f040 80db 	bne.w	8001f14 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_I2C_Master_Receive+0x30>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e0d4      	b.n	8001f16 <HAL_I2C_Master_Receive+0x1da>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d74:	f7ff fa3a 	bl	80011ec <HAL_GetTick>
 8001d78:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2319      	movs	r3, #25
 8001d80:	2201      	movs	r2, #1
 8001d82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 f90c 	bl	8001fa4 <I2C_WaitOnFlagUntilTimeout>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0bf      	b.n	8001f16 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2222      	movs	r2, #34	; 0x22
 8001d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2210      	movs	r2, #16
 8001da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	893a      	ldrh	r2, [r7, #8]
 8001db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	2bff      	cmp	r3, #255	; 0xff
 8001dc6:	d90e      	bls.n	8001de6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	22ff      	movs	r2, #255	; 0xff
 8001dcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	8979      	ldrh	r1, [r7, #10]
 8001dd6:	4b52      	ldr	r3, [pc, #328]	; (8001f20 <HAL_I2C_Master_Receive+0x1e4>)
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 fb1c 	bl	800241c <I2C_TransferConfig>
 8001de4:	e06d      	b.n	8001ec2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	8979      	ldrh	r1, [r7, #10]
 8001df8:	4b49      	ldr	r3, [pc, #292]	; (8001f20 <HAL_I2C_Master_Receive+0x1e4>)
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 fb0b 	bl	800241c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001e06:	e05c      	b.n	8001ec2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	6a39      	ldr	r1, [r7, #32]
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f9a3 	bl	8002158 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e07c      	b.n	8001f16 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d034      	beq.n	8001ec2 <HAL_I2C_Master_Receive+0x186>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d130      	bne.n	8001ec2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	2200      	movs	r2, #0
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f89a 	bl	8001fa4 <I2C_WaitOnFlagUntilTimeout>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e04d      	b.n	8001f16 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	2bff      	cmp	r3, #255	; 0xff
 8001e82:	d90e      	bls.n	8001ea2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	22ff      	movs	r2, #255	; 0xff
 8001e88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	8979      	ldrh	r1, [r7, #10]
 8001e92:	2300      	movs	r3, #0
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fabe 	bl	800241c <I2C_TransferConfig>
 8001ea0:	e00f      	b.n	8001ec2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	8979      	ldrh	r1, [r7, #10]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 faad 	bl	800241c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d19d      	bne.n	8001e08 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	6a39      	ldr	r1, [r7, #32]
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 f8fd 	bl	80020d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e01a      	b.n	8001f16 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6859      	ldr	r1, [r3, #4]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <HAL_I2C_Master_Receive+0x1e8>)
 8001ef4:	400b      	ands	r3, r1
 8001ef6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	e000      	b.n	8001f16 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001f14:	2302      	movs	r3, #2
  }
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	80002400 	.word	0x80002400
 8001f24:	fe00e800 	.word	0xfe00e800

08001f28 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f36:	b2db      	uxtb	r3, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d103      	bne.n	8001f7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2200      	movs	r2, #0
 8001f78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d007      	beq.n	8001f98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699a      	ldr	r2, [r3, #24]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	619a      	str	r2, [r3, #24]
  }
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fb4:	e031      	b.n	800201a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbc:	d02d      	beq.n	800201a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fbe:	f7ff f915 	bl	80011ec <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d302      	bcc.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d122      	bne.n	800201a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	bf0c      	ite	eq
 8001fe4:	2301      	moveq	r3, #1
 8001fe6:	2300      	movne	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d113      	bne.n	800201a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f043 0220 	orr.w	r2, r3, #32
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e00f      	b.n	800203a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699a      	ldr	r2, [r3, #24]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4013      	ands	r3, r2
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	429a      	cmp	r2, r3
 8002028:	bf0c      	ite	eq
 800202a:	2301      	moveq	r3, #1
 800202c:	2300      	movne	r3, #0
 800202e:	b2db      	uxtb	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	429a      	cmp	r2, r3
 8002036:	d0be      	beq.n	8001fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800204e:	e033      	b.n	80020b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	68b9      	ldr	r1, [r7, #8]
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f901 	bl	800225c <I2C_IsErrorOccurred>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e031      	b.n	80020c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206a:	d025      	beq.n	80020b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800206c:	f7ff f8be 	bl	80011ec <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	429a      	cmp	r2, r3
 800207a:	d302      	bcc.n	8002082 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d11a      	bne.n	80020b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b02      	cmp	r3, #2
 800208e:	d013      	beq.n	80020b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	f043 0220 	orr.w	r2, r3, #32
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2220      	movs	r2, #32
 80020a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e007      	b.n	80020c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d1c4      	bne.n	8002050 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020dc:	e02f      	b.n	800213e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 f8ba 	bl	800225c <I2C_IsErrorOccurred>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e02d      	b.n	800214e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f2:	f7ff f87b 	bl	80011ec <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d302      	bcc.n	8002108 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d11a      	bne.n	800213e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b20      	cmp	r3, #32
 8002114:	d013      	beq.n	800213e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	f043 0220 	orr.w	r2, r3, #32
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2220      	movs	r2, #32
 8002126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e007      	b.n	800214e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b20      	cmp	r3, #32
 800214a:	d1c8      	bne.n	80020de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002164:	e06b      	b.n	800223e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 f876 	bl	800225c <I2C_IsErrorOccurred>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e069      	b.n	800224e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b20      	cmp	r3, #32
 8002186:	d138      	bne.n	80021fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b04      	cmp	r3, #4
 8002194:	d105      	bne.n	80021a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	e055      	b.n	800224e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d107      	bne.n	80021c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2210      	movs	r2, #16
 80021b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2204      	movs	r2, #4
 80021bc:	645a      	str	r2, [r3, #68]	; 0x44
 80021be:	e002      	b.n	80021c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2220      	movs	r2, #32
 80021cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80021da:	400b      	ands	r3, r1
 80021dc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e029      	b.n	800224e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021fa:	f7fe fff7 	bl	80011ec <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	429a      	cmp	r2, r3
 8002208:	d302      	bcc.n	8002210 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d116      	bne.n	800223e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	2b04      	cmp	r3, #4
 800221c:	d00f      	beq.n	800223e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f043 0220 	orr.w	r2, r3, #32
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e007      	b.n	800224e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b04      	cmp	r3, #4
 800224a:	d18c      	bne.n	8002166 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	fe00e800 	.word	0xfe00e800

0800225c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	; 0x28
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	d068      	beq.n	800235a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2210      	movs	r2, #16
 800228e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002290:	e049      	b.n	8002326 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d045      	beq.n	8002326 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800229a:	f7fe ffa7 	bl	80011ec <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d302      	bcc.n	80022b0 <I2C_IsErrorOccurred+0x54>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d13a      	bne.n	8002326 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d2:	d121      	bne.n	8002318 <I2C_IsErrorOccurred+0xbc>
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022da:	d01d      	beq.n	8002318 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	2b20      	cmp	r3, #32
 80022e0:	d01a      	beq.n	8002318 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80022f2:	f7fe ff7b 	bl	80011ec <HAL_GetTick>
 80022f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022f8:	e00e      	b.n	8002318 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80022fa:	f7fe ff77 	bl	80011ec <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b19      	cmp	r3, #25
 8002306:	d907      	bls.n	8002318 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	f043 0320 	orr.w	r3, r3, #32
 800230e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002316:	e006      	b.n	8002326 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b20      	cmp	r3, #32
 8002324:	d1e9      	bne.n	80022fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b20      	cmp	r3, #32
 8002332:	d003      	beq.n	800233c <I2C_IsErrorOccurred+0xe0>
 8002334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0aa      	beq.n	8002292 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800233c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002340:	2b00      	cmp	r3, #0
 8002342:	d103      	bne.n	800234c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2220      	movs	r2, #32
 800234a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	f043 0304 	orr.w	r3, r3, #4
 8002352:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00b      	beq.n	8002384 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800237c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00b      	beq.n	80023a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	f043 0308 	orr.w	r3, r3, #8
 8002394:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800239e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00b      	beq.n	80023c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	f043 0302 	orr.w	r3, r3, #2
 80023b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80023c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01c      	beq.n	800240a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f7ff fdc3 	bl	8001f5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <I2C_IsErrorOccurred+0x1bc>)
 80023e2:	400b      	ands	r3, r1
 80023e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800240a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800240e:	4618      	mov	r0, r3
 8002410:	3728      	adds	r7, #40	; 0x28
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	fe00e800 	.word	0xfe00e800

0800241c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	460b      	mov	r3, r1
 8002428:	817b      	strh	r3, [r7, #10]
 800242a:	4613      	mov	r3, r2
 800242c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800242e:	897b      	ldrh	r3, [r7, #10]
 8002430:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002434:	7a7b      	ldrb	r3, [r7, #9]
 8002436:	041b      	lsls	r3, r3, #16
 8002438:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800243c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	4313      	orrs	r3, r2
 8002446:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800244a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	0d5b      	lsrs	r3, r3, #21
 8002456:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <I2C_TransferConfig+0x60>)
 800245c:	430b      	orrs	r3, r1
 800245e:	43db      	mvns	r3, r3
 8002460:	ea02 0103 	and.w	r1, r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	430a      	orrs	r2, r1
 800246c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800246e:	bf00      	nop
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	03ff63ff 	.word	0x03ff63ff

08002480 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b20      	cmp	r3, #32
 8002494:	d138      	bne.n	8002508 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e032      	b.n	800250a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2224      	movs	r2, #36	; 0x24
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6819      	ldr	r1, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e000      	b.n	800250a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002508:	2302      	movs	r3, #2
  }
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b20      	cmp	r3, #32
 800252a:	d139      	bne.n	80025a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002536:	2302      	movs	r3, #2
 8002538:	e033      	b.n	80025a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2224      	movs	r2, #36	; 0x24
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002568:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	e000      	b.n	80025a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025a0:	2302      	movs	r3, #2
  }
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025c0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d102      	bne.n	80025d6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	f001 b83a 	b.w	800364a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 816f 	beq.w	80028ca <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025ec:	4bb5      	ldr	r3, [pc, #724]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d00c      	beq.n	8002612 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025f8:	4bb2      	ldr	r3, [pc, #712]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d15c      	bne.n	80026be <HAL_RCC_OscConfig+0x10e>
 8002604:	4baf      	ldr	r3, [pc, #700]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002610:	d155      	bne.n	80026be <HAL_RCC_OscConfig+0x10e>
 8002612:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002616:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002626:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	095b      	lsrs	r3, r3, #5
 8002632:	b2db      	uxtb	r3, r3
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b01      	cmp	r3, #1
 800263c:	d102      	bne.n	8002644 <HAL_RCC_OscConfig+0x94>
 800263e:	4ba1      	ldr	r3, [pc, #644]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	e015      	b.n	8002670 <HAL_RCC_OscConfig+0xc0>
 8002644:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002648:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002650:	fa93 f3a3 	rbit	r3, r3
 8002654:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800265c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002660:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800266c:	4b95      	ldr	r3, [pc, #596]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002674:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002678:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800267c:	fa92 f2a2 	rbit	r2, r2
 8002680:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002684:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002688:	fab2 f282 	clz	r2, r2
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	f042 0220 	orr.w	r2, r2, #32
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	f002 021f 	and.w	r2, r2, #31
 8002698:	2101      	movs	r1, #1
 800269a:	fa01 f202 	lsl.w	r2, r1, r2
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 8111 	beq.w	80028c8 <HAL_RCC_OscConfig+0x318>
 80026a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 8108 	bne.w	80028c8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	f000 bfc6 	b.w	800364a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x12e>
 80026d0:	4b7c      	ldr	r3, [pc, #496]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a7b      	ldr	r2, [pc, #492]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 80026d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	e036      	b.n	800274c <HAL_RCC_OscConfig+0x19c>
 80026de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0x158>
 80026ee:	4b75      	ldr	r3, [pc, #468]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a74      	ldr	r2, [pc, #464]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 80026f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b72      	ldr	r3, [pc, #456]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a71      	ldr	r2, [pc, #452]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 8002700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e021      	b.n	800274c <HAL_RCC_OscConfig+0x19c>
 8002708:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800270c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x184>
 800271a:	4b6a      	ldr	r3, [pc, #424]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a69      	ldr	r2, [pc, #420]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 8002720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b67      	ldr	r3, [pc, #412]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a66      	ldr	r2, [pc, #408]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 800272c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e00b      	b.n	800274c <HAL_RCC_OscConfig+0x19c>
 8002734:	4b63      	ldr	r3, [pc, #396]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a62      	ldr	r2, [pc, #392]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 800273a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	4b60      	ldr	r3, [pc, #384]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a5f      	ldr	r2, [pc, #380]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 8002746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800274c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002750:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d059      	beq.n	8002810 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7fe fd46 	bl	80011ec <HAL_GetTick>
 8002760:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002764:	e00a      	b.n	800277c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002766:	f7fe fd41 	bl	80011ec <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d902      	bls.n	800277c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	f000 bf67 	b.w	800364a <HAL_RCC_OscConfig+0x109a>
 800277c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002780:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002788:	fa93 f3a3 	rbit	r3, r3
 800278c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002790:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d102      	bne.n	80027ae <HAL_RCC_OscConfig+0x1fe>
 80027a8:	4b46      	ldr	r3, [pc, #280]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	e015      	b.n	80027da <HAL_RCC_OscConfig+0x22a>
 80027ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027b2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80027c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80027ca:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80027d6:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027de:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80027e2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80027e6:	fa92 f2a2 	rbit	r2, r2
 80027ea:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80027ee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80027f2:	fab2 f282 	clz	r2, r2
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	f042 0220 	orr.w	r2, r2, #32
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	f002 021f 	and.w	r2, r2, #31
 8002802:	2101      	movs	r1, #1
 8002804:	fa01 f202 	lsl.w	r2, r1, r2
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0ab      	beq.n	8002766 <HAL_RCC_OscConfig+0x1b6>
 800280e:	e05c      	b.n	80028ca <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7fe fcec 	bl	80011ec <HAL_GetTick>
 8002814:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800281a:	f7fe fce7 	bl	80011ec <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b64      	cmp	r3, #100	; 0x64
 8002828:	d902      	bls.n	8002830 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	f000 bf0d 	b.w	800364a <HAL_RCC_OscConfig+0x109a>
 8002830:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002834:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002844:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d102      	bne.n	8002862 <HAL_RCC_OscConfig+0x2b2>
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	e015      	b.n	800288e <HAL_RCC_OscConfig+0x2de>
 8002862:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002866:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002876:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800287a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800287e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800288a:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <HAL_RCC_OscConfig+0x314>)
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002892:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002896:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800289a:	fa92 f2a2 	rbit	r2, r2
 800289e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80028a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80028a6:	fab2 f282 	clz	r2, r2
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	f042 0220 	orr.w	r2, r2, #32
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	f002 021f 	and.w	r2, r2, #31
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f202 	lsl.w	r2, r1, r2
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1ab      	bne.n	800281a <HAL_RCC_OscConfig+0x26a>
 80028c2:	e002      	b.n	80028ca <HAL_RCC_OscConfig+0x31a>
 80028c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 817f 	beq.w	8002bde <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028e0:	4ba7      	ldr	r3, [pc, #668]	; (8002b80 <HAL_RCC_OscConfig+0x5d0>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00c      	beq.n	8002906 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028ec:	4ba4      	ldr	r3, [pc, #656]	; (8002b80 <HAL_RCC_OscConfig+0x5d0>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d173      	bne.n	80029e0 <HAL_RCC_OscConfig+0x430>
 80028f8:	4ba1      	ldr	r3, [pc, #644]	; (8002b80 <HAL_RCC_OscConfig+0x5d0>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002904:	d16c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x430>
 8002906:	2302      	movs	r3, #2
 8002908:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002918:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	d102      	bne.n	8002936 <HAL_RCC_OscConfig+0x386>
 8002930:	4b93      	ldr	r3, [pc, #588]	; (8002b80 <HAL_RCC_OscConfig+0x5d0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	e013      	b.n	800295e <HAL_RCC_OscConfig+0x3ae>
 8002936:	2302      	movs	r3, #2
 8002938:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002948:	2302      	movs	r3, #2
 800294a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800294e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800295a:	4b89      	ldr	r3, [pc, #548]	; (8002b80 <HAL_RCC_OscConfig+0x5d0>)
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	2202      	movs	r2, #2
 8002960:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002964:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002968:	fa92 f2a2 	rbit	r2, r2
 800296c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002970:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002974:	fab2 f282 	clz	r2, r2
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	f042 0220 	orr.w	r2, r2, #32
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	f002 021f 	and.w	r2, r2, #31
 8002984:	2101      	movs	r1, #1
 8002986:	fa01 f202 	lsl.w	r2, r1, r2
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCC_OscConfig+0x3f6>
 8002990:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002994:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d002      	beq.n	80029a6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f000 be52 	b.w	800364a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a6:	4b76      	ldr	r3, [pc, #472]	; (8002b80 <HAL_RCC_OscConfig+0x5d0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	21f8      	movs	r1, #248	; 0xf8
 80029bc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80029c4:	fa91 f1a1 	rbit	r1, r1
 80029c8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80029cc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80029d0:	fab1 f181 	clz	r1, r1
 80029d4:	b2c9      	uxtb	r1, r1
 80029d6:	408b      	lsls	r3, r1
 80029d8:	4969      	ldr	r1, [pc, #420]	; (8002b80 <HAL_RCC_OscConfig+0x5d0>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029de:	e0fe      	b.n	8002bde <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8088 	beq.w	8002b02 <HAL_RCC_OscConfig+0x552>
 80029f2:	2301      	movs	r3, #1
 80029f4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002a04:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a12:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fbe5 	bl	80011ec <HAL_GetTick>
 8002a22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a28:	f7fe fbe0 	bl	80011ec <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d902      	bls.n	8002a3e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	f000 be06 	b.w	800364a <HAL_RCC_OscConfig+0x109a>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002a50:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a54:	fab3 f383 	clz	r3, r3
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d102      	bne.n	8002a6e <HAL_RCC_OscConfig+0x4be>
 8002a68:	4b45      	ldr	r3, [pc, #276]	; (8002b80 <HAL_RCC_OscConfig+0x5d0>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	e013      	b.n	8002a96 <HAL_RCC_OscConfig+0x4e6>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002a80:	2302      	movs	r3, #2
 8002a82:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a86:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a92:	4b3b      	ldr	r3, [pc, #236]	; (8002b80 <HAL_RCC_OscConfig+0x5d0>)
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	2202      	movs	r2, #2
 8002a98:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002a9c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002aa0:	fa92 f2a2 	rbit	r2, r2
 8002aa4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002aa8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002aac:	fab2 f282 	clz	r2, r2
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	f042 0220 	orr.w	r2, r2, #32
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	f002 021f 	and.w	r2, r2, #31
 8002abc:	2101      	movs	r1, #1
 8002abe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0af      	beq.n	8002a28 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac8:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <HAL_RCC_OscConfig+0x5d0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	21f8      	movs	r1, #248	; 0xf8
 8002ade:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002ae6:	fa91 f1a1 	rbit	r1, r1
 8002aea:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002aee:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002af2:	fab1 f181 	clz	r1, r1
 8002af6:	b2c9      	uxtb	r1, r1
 8002af8:	408b      	lsls	r3, r1
 8002afa:	4921      	ldr	r1, [pc, #132]	; (8002b80 <HAL_RCC_OscConfig+0x5d0>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
 8002b00:	e06d      	b.n	8002bde <HAL_RCC_OscConfig+0x62e>
 8002b02:	2301      	movs	r3, #1
 8002b04:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002b14:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b18:	fab3 f383 	clz	r3, r3
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7fe fb5d 	bl	80011ec <HAL_GetTick>
 8002b32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b38:	f7fe fb58 	bl	80011ec <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d902      	bls.n	8002b4e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	f000 bd7e 	b.w	800364a <HAL_RCC_OscConfig+0x109a>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002b60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b64:	fab3 f383 	clz	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d105      	bne.n	8002b84 <HAL_RCC_OscConfig+0x5d4>
 8002b78:	4b01      	ldr	r3, [pc, #4]	; (8002b80 <HAL_RCC_OscConfig+0x5d0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	e016      	b.n	8002bac <HAL_RCC_OscConfig+0x5fc>
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000
 8002b84:	2302      	movs	r3, #2
 8002b86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002b96:	2302      	movs	r3, #2
 8002b98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ba0:	fa93 f3a3 	rbit	r3, r3
 8002ba4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ba8:	4bbf      	ldr	r3, [pc, #764]	; (8002ea8 <HAL_RCC_OscConfig+0x8f8>)
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	2202      	movs	r2, #2
 8002bae:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002bb2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002bb6:	fa92 f2a2 	rbit	r2, r2
 8002bba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002bbe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002bc2:	fab2 f282 	clz	r2, r2
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	f042 0220 	orr.w	r2, r2, #32
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	f002 021f 	and.w	r2, r2, #31
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1ac      	bne.n	8002b38 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8113 	beq.w	8002e1a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d07c      	beq.n	8002cfe <HAL_RCC_OscConfig+0x74e>
 8002c04:	2301      	movs	r3, #1
 8002c06:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002c16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	4ba2      	ldr	r3, [pc, #648]	; (8002eac <HAL_RCC_OscConfig+0x8fc>)
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2e:	f7fe fadd 	bl	80011ec <HAL_GetTick>
 8002c32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c38:	f7fe fad8 	bl	80011ec <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d902      	bls.n	8002c4e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	f000 bcfe 	b.w	800364a <HAL_RCC_OscConfig+0x109a>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c58:	fa93 f2a3 	rbit	r2, r3
 8002c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c60:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c6e:	2202      	movs	r2, #2
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	fa93 f2a3 	rbit	r2, r3
 8002c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c92:	2202      	movs	r2, #2
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	fa93 f2a3 	rbit	r2, r3
 8002ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002cac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cae:	4b7e      	ldr	r3, [pc, #504]	; (8002ea8 <HAL_RCC_OscConfig+0x8f8>)
 8002cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cba:	2102      	movs	r1, #2
 8002cbc:	6019      	str	r1, [r3, #0]
 8002cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	fa93 f1a3 	rbit	r1, r3
 8002ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cd0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cd4:	6019      	str	r1, [r3, #0]
  return result;
 8002cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cda:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	fab3 f383 	clz	r3, r3
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d09d      	beq.n	8002c38 <HAL_RCC_OscConfig+0x688>
 8002cfc:	e08d      	b.n	8002e1a <HAL_RCC_OscConfig+0x86a>
 8002cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d02:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d0e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	fa93 f2a3 	rbit	r2, r3
 8002d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d1c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d20:	601a      	str	r2, [r3, #0]
  return result;
 8002d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d26:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d2a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	4b5d      	ldr	r3, [pc, #372]	; (8002eac <HAL_RCC_OscConfig+0x8fc>)
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d40:	f7fe fa54 	bl	80011ec <HAL_GetTick>
 8002d44:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d48:	e00a      	b.n	8002d60 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d4a:	f7fe fa4f 	bl	80011ec <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d902      	bls.n	8002d60 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	f000 bc75 	b.w	800364a <HAL_RCC_OscConfig+0x109a>
 8002d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d64:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d68:	2202      	movs	r2, #2
 8002d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d70:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	fa93 f2a3 	rbit	r2, r3
 8002d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d7e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	fa93 f2a3 	rbit	r2, r3
 8002d9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002db0:	2202      	movs	r2, #2
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002db8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	fa93 f2a3 	rbit	r2, r3
 8002dc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dc6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002dca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dcc:	4b36      	ldr	r3, [pc, #216]	; (8002ea8 <HAL_RCC_OscConfig+0x8f8>)
 8002dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dd4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002dd8:	2102      	movs	r1, #2
 8002dda:	6019      	str	r1, [r3, #0]
 8002ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	fa93 f1a3 	rbit	r1, r3
 8002dea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dee:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002df2:	6019      	str	r1, [r3, #0]
  return result;
 8002df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002df8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	2101      	movs	r1, #1
 8002e10:	fa01 f303 	lsl.w	r3, r1, r3
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d197      	bne.n	8002d4a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 81a5 	beq.w	800317a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e30:	2300      	movs	r3, #0
 8002e32:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e36:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <HAL_RCC_OscConfig+0x8f8>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d116      	bne.n	8002e70 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e42:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_RCC_OscConfig+0x8f8>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	4a18      	ldr	r2, [pc, #96]	; (8002ea8 <HAL_RCC_OscConfig+0x8f8>)
 8002e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	61d3      	str	r3, [r2, #28]
 8002e4e:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <HAL_RCC_OscConfig+0x8f8>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e68:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <HAL_RCC_OscConfig+0x900>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d121      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <HAL_RCC_OscConfig+0x900>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0b      	ldr	r2, [pc, #44]	; (8002eb0 <HAL_RCC_OscConfig+0x900>)
 8002e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e86:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e88:	f7fe f9b0 	bl	80011ec <HAL_GetTick>
 8002e8c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	e010      	b.n	8002eb4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e92:	f7fe f9ab 	bl	80011ec <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d908      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e3d1      	b.n	800364a <HAL_RCC_OscConfig+0x109a>
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	10908120 	.word	0x10908120
 8002eb0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb4:	4b8d      	ldr	r3, [pc, #564]	; (80030ec <HAL_RCC_OscConfig+0xb3c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0e8      	beq.n	8002e92 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d106      	bne.n	8002ede <HAL_RCC_OscConfig+0x92e>
 8002ed0:	4b87      	ldr	r3, [pc, #540]	; (80030f0 <HAL_RCC_OscConfig+0xb40>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4a86      	ldr	r2, [pc, #536]	; (80030f0 <HAL_RCC_OscConfig+0xb40>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6213      	str	r3, [r2, #32]
 8002edc:	e035      	b.n	8002f4a <HAL_RCC_OscConfig+0x99a>
 8002ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ee2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x958>
 8002eee:	4b80      	ldr	r3, [pc, #512]	; (80030f0 <HAL_RCC_OscConfig+0xb40>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4a7f      	ldr	r2, [pc, #508]	; (80030f0 <HAL_RCC_OscConfig+0xb40>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	6213      	str	r3, [r2, #32]
 8002efa:	4b7d      	ldr	r3, [pc, #500]	; (80030f0 <HAL_RCC_OscConfig+0xb40>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a7c      	ldr	r2, [pc, #496]	; (80030f0 <HAL_RCC_OscConfig+0xb40>)
 8002f00:	f023 0304 	bic.w	r3, r3, #4
 8002f04:	6213      	str	r3, [r2, #32]
 8002f06:	e020      	b.n	8002f4a <HAL_RCC_OscConfig+0x99a>
 8002f08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b05      	cmp	r3, #5
 8002f16:	d10c      	bne.n	8002f32 <HAL_RCC_OscConfig+0x982>
 8002f18:	4b75      	ldr	r3, [pc, #468]	; (80030f0 <HAL_RCC_OscConfig+0xb40>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	4a74      	ldr	r2, [pc, #464]	; (80030f0 <HAL_RCC_OscConfig+0xb40>)
 8002f1e:	f043 0304 	orr.w	r3, r3, #4
 8002f22:	6213      	str	r3, [r2, #32]
 8002f24:	4b72      	ldr	r3, [pc, #456]	; (80030f0 <HAL_RCC_OscConfig+0xb40>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a71      	ldr	r2, [pc, #452]	; (80030f0 <HAL_RCC_OscConfig+0xb40>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6213      	str	r3, [r2, #32]
 8002f30:	e00b      	b.n	8002f4a <HAL_RCC_OscConfig+0x99a>
 8002f32:	4b6f      	ldr	r3, [pc, #444]	; (80030f0 <HAL_RCC_OscConfig+0xb40>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a6e      	ldr	r2, [pc, #440]	; (80030f0 <HAL_RCC_OscConfig+0xb40>)
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	6213      	str	r3, [r2, #32]
 8002f3e:	4b6c      	ldr	r3, [pc, #432]	; (80030f0 <HAL_RCC_OscConfig+0xb40>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4a6b      	ldr	r2, [pc, #428]	; (80030f0 <HAL_RCC_OscConfig+0xb40>)
 8002f44:	f023 0304 	bic.w	r3, r3, #4
 8002f48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8081 	beq.w	800305e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5c:	f7fe f946 	bl	80011ec <HAL_GetTick>
 8002f60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f64:	e00b      	b.n	8002f7e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fe f941 	bl	80011ec <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e365      	b.n	800364a <HAL_RCC_OscConfig+0x109a>
 8002f7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f82:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f86:	2202      	movs	r2, #2
 8002f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f8e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	fa93 f2a3 	rbit	r2, r3
 8002f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f9c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002faa:	2202      	movs	r2, #2
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	fa93 f2a3 	rbit	r2, r3
 8002fbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fc4:	601a      	str	r2, [r3, #0]
  return result;
 8002fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fca:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002fce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd0:	fab3 f383 	clz	r3, r3
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	f043 0302 	orr.w	r3, r3, #2
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d102      	bne.n	8002fea <HAL_RCC_OscConfig+0xa3a>
 8002fe4:	4b42      	ldr	r3, [pc, #264]	; (80030f0 <HAL_RCC_OscConfig+0xb40>)
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	e013      	b.n	8003012 <HAL_RCC_OscConfig+0xa62>
 8002fea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ffa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	fa93 f2a3 	rbit	r2, r3
 8003004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003008:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	4b38      	ldr	r3, [pc, #224]	; (80030f0 <HAL_RCC_OscConfig+0xb40>)
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003016:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800301a:	2102      	movs	r1, #2
 800301c:	6011      	str	r1, [r2, #0]
 800301e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003022:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	fa92 f1a2 	rbit	r1, r2
 800302c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003030:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003034:	6011      	str	r1, [r2, #0]
  return result;
 8003036:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800303a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	fab2 f282 	clz	r2, r2
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	f002 021f 	and.w	r2, r2, #31
 8003050:	2101      	movs	r1, #1
 8003052:	fa01 f202 	lsl.w	r2, r1, r2
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d084      	beq.n	8002f66 <HAL_RCC_OscConfig+0x9b6>
 800305c:	e083      	b.n	8003166 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305e:	f7fe f8c5 	bl	80011ec <HAL_GetTick>
 8003062:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003066:	e00b      	b.n	8003080 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7fe f8c0 	bl	80011ec <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e2e4      	b.n	800364a <HAL_RCC_OscConfig+0x109a>
 8003080:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003084:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003088:	2202      	movs	r2, #2
 800308a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003090:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	fa93 f2a3 	rbit	r2, r3
 800309a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800309e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030ac:	2202      	movs	r2, #2
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	fa93 f2a3 	rbit	r2, r3
 80030be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030c6:	601a      	str	r2, [r3, #0]
  return result;
 80030c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030cc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80030d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f043 0302 	orr.w	r3, r3, #2
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d106      	bne.n	80030f4 <HAL_RCC_OscConfig+0xb44>
 80030e6:	4b02      	ldr	r3, [pc, #8]	; (80030f0 <HAL_RCC_OscConfig+0xb40>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	e017      	b.n	800311c <HAL_RCC_OscConfig+0xb6c>
 80030ec:	40007000 	.word	0x40007000
 80030f0:	40021000 	.word	0x40021000
 80030f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030f8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80030fc:	2202      	movs	r2, #2
 80030fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003104:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	fa93 f2a3 	rbit	r2, r3
 800310e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003112:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	4bb3      	ldr	r3, [pc, #716]	; (80033e8 <HAL_RCC_OscConfig+0xe38>)
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003120:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003124:	2102      	movs	r1, #2
 8003126:	6011      	str	r1, [r2, #0]
 8003128:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800312c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	fa92 f1a2 	rbit	r1, r2
 8003136:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800313a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800313e:	6011      	str	r1, [r2, #0]
  return result;
 8003140:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003144:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	fab2 f282 	clz	r2, r2
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	f002 021f 	and.w	r2, r2, #31
 800315a:	2101      	movs	r1, #1
 800315c:	fa01 f202 	lsl.w	r2, r1, r2
 8003160:	4013      	ands	r3, r2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d180      	bne.n	8003068 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003166:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800316a:	2b01      	cmp	r3, #1
 800316c:	d105      	bne.n	800317a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800316e:	4b9e      	ldr	r3, [pc, #632]	; (80033e8 <HAL_RCC_OscConfig+0xe38>)
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	4a9d      	ldr	r2, [pc, #628]	; (80033e8 <HAL_RCC_OscConfig+0xe38>)
 8003174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003178:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800317a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800317e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 825e 	beq.w	8003648 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800318c:	4b96      	ldr	r3, [pc, #600]	; (80033e8 <HAL_RCC_OscConfig+0xe38>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 030c 	and.w	r3, r3, #12
 8003194:	2b08      	cmp	r3, #8
 8003196:	f000 821f 	beq.w	80035d8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800319a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800319e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	f040 8170 	bne.w	800348c <HAL_RCC_OscConfig+0xedc>
 80031ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031b0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031be:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	fa93 f2a3 	rbit	r2, r3
 80031c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031cc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031d0:	601a      	str	r2, [r3, #0]
  return result;
 80031d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80031da:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	461a      	mov	r2, r3
 80031ee:	2300      	movs	r3, #0
 80031f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f2:	f7fd fffb 	bl	80011ec <HAL_GetTick>
 80031f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031fa:	e009      	b.n	8003210 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031fc:	f7fd fff6 	bl	80011ec <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e21c      	b.n	800364a <HAL_RCC_OscConfig+0x109a>
 8003210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003214:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003218:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800321c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003222:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	fa93 f2a3 	rbit	r2, r3
 800322c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003230:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003234:	601a      	str	r2, [r3, #0]
  return result;
 8003236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800323a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800323e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003240:	fab3 f383 	clz	r3, r3
 8003244:	b2db      	uxtb	r3, r3
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	d102      	bne.n	800325a <HAL_RCC_OscConfig+0xcaa>
 8003254:	4b64      	ldr	r3, [pc, #400]	; (80033e8 <HAL_RCC_OscConfig+0xe38>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	e027      	b.n	80032aa <HAL_RCC_OscConfig+0xcfa>
 800325a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800325e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003262:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003266:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003268:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800326c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	fa93 f2a3 	rbit	r2, r3
 8003276:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800327a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003284:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003288:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003292:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	fa93 f2a3 	rbit	r2, r3
 800329c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	4b50      	ldr	r3, [pc, #320]	; (80033e8 <HAL_RCC_OscConfig+0xe38>)
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032ae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032b6:	6011      	str	r1, [r2, #0]
 80032b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032bc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	fa92 f1a2 	rbit	r1, r2
 80032c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032ca:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80032ce:	6011      	str	r1, [r2, #0]
  return result;
 80032d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032d4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80032d8:	6812      	ldr	r2, [r2, #0]
 80032da:	fab2 f282 	clz	r2, r2
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	f042 0220 	orr.w	r2, r2, #32
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	f002 021f 	and.w	r2, r2, #31
 80032ea:	2101      	movs	r1, #1
 80032ec:	fa01 f202 	lsl.w	r2, r1, r2
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d182      	bne.n	80031fc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f6:	4b3c      	ldr	r3, [pc, #240]	; (80033e8 <HAL_RCC_OscConfig+0xe38>)
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	f023 020f 	bic.w	r2, r3, #15
 80032fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003302:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	4937      	ldr	r1, [pc, #220]	; (80033e8 <HAL_RCC_OscConfig+0xe38>)
 800330c:	4313      	orrs	r3, r2
 800330e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003310:	4b35      	ldr	r3, [pc, #212]	; (80033e8 <HAL_RCC_OscConfig+0xe38>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800331c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6a19      	ldr	r1, [r3, #32]
 8003324:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003328:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	430b      	orrs	r3, r1
 8003332:	492d      	ldr	r1, [pc, #180]	; (80033e8 <HAL_RCC_OscConfig+0xe38>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]
 8003338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800333c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800334a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	fa93 f2a3 	rbit	r2, r3
 8003354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003358:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800335c:	601a      	str	r2, [r3, #0]
  return result;
 800335e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003362:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003366:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003368:	fab3 f383 	clz	r3, r3
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003372:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	461a      	mov	r2, r3
 800337a:	2301      	movs	r3, #1
 800337c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337e:	f7fd ff35 	bl	80011ec <HAL_GetTick>
 8003382:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003386:	e009      	b.n	800339c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003388:	f7fd ff30 	bl	80011ec <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e156      	b.n	800364a <HAL_RCC_OscConfig+0x109a>
 800339c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033a0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80033a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ae:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	fa93 f2a3 	rbit	r2, r3
 80033b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033bc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033c0:	601a      	str	r2, [r3, #0]
  return result;
 80033c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80033ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d105      	bne.n	80033ec <HAL_RCC_OscConfig+0xe3c>
 80033e0:	4b01      	ldr	r3, [pc, #4]	; (80033e8 <HAL_RCC_OscConfig+0xe38>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	e02a      	b.n	800343c <HAL_RCC_OscConfig+0xe8c>
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000
 80033ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033f0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80033f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033fe:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	fa93 f2a3 	rbit	r2, r3
 8003408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800340c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003416:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800341a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003424:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	fa93 f2a3 	rbit	r2, r3
 800342e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003432:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	4b86      	ldr	r3, [pc, #536]	; (8003654 <HAL_RCC_OscConfig+0x10a4>)
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003440:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003444:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003448:	6011      	str	r1, [r2, #0]
 800344a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800344e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	fa92 f1a2 	rbit	r1, r2
 8003458:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800345c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003460:	6011      	str	r1, [r2, #0]
  return result;
 8003462:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003466:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	fab2 f282 	clz	r2, r2
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	f042 0220 	orr.w	r2, r2, #32
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	f002 021f 	and.w	r2, r2, #31
 800347c:	2101      	movs	r1, #1
 800347e:	fa01 f202 	lsl.w	r2, r1, r2
 8003482:	4013      	ands	r3, r2
 8003484:	2b00      	cmp	r3, #0
 8003486:	f43f af7f 	beq.w	8003388 <HAL_RCC_OscConfig+0xdd8>
 800348a:	e0dd      	b.n	8003648 <HAL_RCC_OscConfig+0x1098>
 800348c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003490:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003494:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003498:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800349e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	fa93 f2a3 	rbit	r2, r3
 80034a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034b0:	601a      	str	r2, [r3, #0]
  return result;
 80034b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80034ba:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034bc:	fab3 f383 	clz	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	461a      	mov	r2, r3
 80034ce:	2300      	movs	r3, #0
 80034d0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d2:	f7fd fe8b 	bl	80011ec <HAL_GetTick>
 80034d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034da:	e009      	b.n	80034f0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fd fe86 	bl	80011ec <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e0ac      	b.n	800364a <HAL_RCC_OscConfig+0x109a>
 80034f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003502:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	fa93 f2a3 	rbit	r2, r3
 800350c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003510:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003514:	601a      	str	r2, [r3, #0]
  return result;
 8003516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800351a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800351e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003520:	fab3 f383 	clz	r3, r3
 8003524:	b2db      	uxtb	r3, r3
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	b2db      	uxtb	r3, r3
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b01      	cmp	r3, #1
 8003532:	d102      	bne.n	800353a <HAL_RCC_OscConfig+0xf8a>
 8003534:	4b47      	ldr	r3, [pc, #284]	; (8003654 <HAL_RCC_OscConfig+0x10a4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	e027      	b.n	800358a <HAL_RCC_OscConfig+0xfda>
 800353a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800353e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003542:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800354c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	fa93 f2a3 	rbit	r2, r3
 8003556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800355a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003564:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003568:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003572:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	fa93 f2a3 	rbit	r2, r3
 800357c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003580:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	4b33      	ldr	r3, [pc, #204]	; (8003654 <HAL_RCC_OscConfig+0x10a4>)
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800358e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003592:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003596:	6011      	str	r1, [r2, #0]
 8003598:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800359c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	fa92 f1a2 	rbit	r1, r2
 80035a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035aa:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80035ae:	6011      	str	r1, [r2, #0]
  return result;
 80035b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035b4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	fab2 f282 	clz	r2, r2
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	f042 0220 	orr.w	r2, r2, #32
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	f002 021f 	and.w	r2, r2, #31
 80035ca:	2101      	movs	r1, #1
 80035cc:	fa01 f202 	lsl.w	r2, r1, r2
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d182      	bne.n	80034dc <HAL_RCC_OscConfig+0xf2c>
 80035d6:	e037      	b.n	8003648 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e02e      	b.n	800364a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035ec:	4b19      	ldr	r3, [pc, #100]	; (8003654 <HAL_RCC_OscConfig+0x10a4>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80035f4:	4b17      	ldr	r3, [pc, #92]	; (8003654 <HAL_RCC_OscConfig+0x10a4>)
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003600:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003608:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	429a      	cmp	r2, r3
 8003612:	d117      	bne.n	8003644 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003614:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003618:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800361c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003620:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003628:	429a      	cmp	r2, r3
 800362a:	d10b      	bne.n	8003644 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800362c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003630:	f003 020f 	and.w	r2, r3, #15
 8003634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003638:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021000 	.word	0x40021000

08003658 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b09e      	sub	sp, #120	; 0x78
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e162      	b.n	8003936 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003670:	4b90      	ldr	r3, [pc, #576]	; (80038b4 <HAL_RCC_ClockConfig+0x25c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d910      	bls.n	80036a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367e:	4b8d      	ldr	r3, [pc, #564]	; (80038b4 <HAL_RCC_ClockConfig+0x25c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 0207 	bic.w	r2, r3, #7
 8003686:	498b      	ldr	r1, [pc, #556]	; (80038b4 <HAL_RCC_ClockConfig+0x25c>)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368e:	4b89      	ldr	r3, [pc, #548]	; (80038b4 <HAL_RCC_ClockConfig+0x25c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e14a      	b.n	8003936 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ac:	4b82      	ldr	r3, [pc, #520]	; (80038b8 <HAL_RCC_ClockConfig+0x260>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	497f      	ldr	r1, [pc, #508]	; (80038b8 <HAL_RCC_ClockConfig+0x260>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 80dc 	beq.w	8003884 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d13c      	bne.n	800374e <HAL_RCC_ClockConfig+0xf6>
 80036d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036dc:	fa93 f3a3 	rbit	r3, r3
 80036e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80036e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d102      	bne.n	80036fe <HAL_RCC_ClockConfig+0xa6>
 80036f8:	4b6f      	ldr	r3, [pc, #444]	; (80038b8 <HAL_RCC_ClockConfig+0x260>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	e00f      	b.n	800371e <HAL_RCC_ClockConfig+0xc6>
 80036fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003702:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	667b      	str	r3, [r7, #100]	; 0x64
 800370c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003710:	663b      	str	r3, [r7, #96]	; 0x60
 8003712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	65fb      	str	r3, [r7, #92]	; 0x5c
 800371a:	4b67      	ldr	r3, [pc, #412]	; (80038b8 <HAL_RCC_ClockConfig+0x260>)
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003722:	65ba      	str	r2, [r7, #88]	; 0x58
 8003724:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003726:	fa92 f2a2 	rbit	r2, r2
 800372a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800372c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800372e:	fab2 f282 	clz	r2, r2
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	f042 0220 	orr.w	r2, r2, #32
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	f002 021f 	and.w	r2, r2, #31
 800373e:	2101      	movs	r1, #1
 8003740:	fa01 f202 	lsl.w	r2, r1, r2
 8003744:	4013      	ands	r3, r2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d17b      	bne.n	8003842 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e0f3      	b.n	8003936 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d13c      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x178>
 8003756:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800375a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	b2db      	uxtb	r3, r3
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	b2db      	uxtb	r3, r3
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d102      	bne.n	8003780 <HAL_RCC_ClockConfig+0x128>
 800377a:	4b4f      	ldr	r3, [pc, #316]	; (80038b8 <HAL_RCC_ClockConfig+0x260>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	e00f      	b.n	80037a0 <HAL_RCC_ClockConfig+0x148>
 8003780:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003784:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003788:	fa93 f3a3 	rbit	r3, r3
 800378c:	647b      	str	r3, [r7, #68]	; 0x44
 800378e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003792:	643b      	str	r3, [r7, #64]	; 0x40
 8003794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800379c:	4b46      	ldr	r3, [pc, #280]	; (80038b8 <HAL_RCC_ClockConfig+0x260>)
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037a4:	63ba      	str	r2, [r7, #56]	; 0x38
 80037a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037a8:	fa92 f2a2 	rbit	r2, r2
 80037ac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80037ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037b0:	fab2 f282 	clz	r2, r2
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	f042 0220 	orr.w	r2, r2, #32
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	f002 021f 	and.w	r2, r2, #31
 80037c0:	2101      	movs	r1, #1
 80037c2:	fa01 f202 	lsl.w	r2, r1, r2
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d13a      	bne.n	8003842 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0b2      	b.n	8003936 <HAL_RCC_ClockConfig+0x2de>
 80037d0:	2302      	movs	r3, #2
 80037d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	fa93 f3a3 	rbit	r3, r3
 80037da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037de:	fab3 f383 	clz	r3, r3
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d102      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x1a0>
 80037f2:	4b31      	ldr	r3, [pc, #196]	; (80038b8 <HAL_RCC_ClockConfig+0x260>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	e00d      	b.n	8003814 <HAL_RCC_ClockConfig+0x1bc>
 80037f8:	2302      	movs	r3, #2
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	fa93 f3a3 	rbit	r3, r3
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
 8003804:	2302      	movs	r3, #2
 8003806:	623b      	str	r3, [r7, #32]
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	4b29      	ldr	r3, [pc, #164]	; (80038b8 <HAL_RCC_ClockConfig+0x260>)
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	2202      	movs	r2, #2
 8003816:	61ba      	str	r2, [r7, #24]
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	fa92 f2a2 	rbit	r2, r2
 800381e:	617a      	str	r2, [r7, #20]
  return result;
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	fab2 f282 	clz	r2, r2
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	f042 0220 	orr.w	r2, r2, #32
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	f002 021f 	and.w	r2, r2, #31
 8003832:	2101      	movs	r1, #1
 8003834:	fa01 f202 	lsl.w	r2, r1, r2
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e079      	b.n	8003936 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003842:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HAL_RCC_ClockConfig+0x260>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f023 0203 	bic.w	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	491a      	ldr	r1, [pc, #104]	; (80038b8 <HAL_RCC_ClockConfig+0x260>)
 8003850:	4313      	orrs	r3, r2
 8003852:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003854:	f7fd fcca 	bl	80011ec <HAL_GetTick>
 8003858:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385a:	e00a      	b.n	8003872 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800385c:	f7fd fcc6 	bl	80011ec <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	; 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e061      	b.n	8003936 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <HAL_RCC_ClockConfig+0x260>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 020c 	and.w	r2, r3, #12
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	429a      	cmp	r2, r3
 8003882:	d1eb      	bne.n	800385c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCC_ClockConfig+0x25c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d214      	bcs.n	80038bc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003892:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <HAL_RCC_ClockConfig+0x25c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 0207 	bic.w	r2, r3, #7
 800389a:	4906      	ldr	r1, [pc, #24]	; (80038b4 <HAL_RCC_ClockConfig+0x25c>)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	4313      	orrs	r3, r2
 80038a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a2:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <HAL_RCC_ClockConfig+0x25c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e040      	b.n	8003936 <HAL_RCC_ClockConfig+0x2de>
 80038b4:	40022000 	.word	0x40022000
 80038b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c8:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <HAL_RCC_ClockConfig+0x2e8>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	491a      	ldr	r1, [pc, #104]	; (8003940 <HAL_RCC_ClockConfig+0x2e8>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038e6:	4b16      	ldr	r3, [pc, #88]	; (8003940 <HAL_RCC_ClockConfig+0x2e8>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4912      	ldr	r1, [pc, #72]	; (8003940 <HAL_RCC_ClockConfig+0x2e8>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80038fa:	f000 f829 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 80038fe:	4601      	mov	r1, r0
 8003900:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <HAL_RCC_ClockConfig+0x2e8>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003908:	22f0      	movs	r2, #240	; 0xf0
 800390a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	fa92 f2a2 	rbit	r2, r2
 8003912:	60fa      	str	r2, [r7, #12]
  return result;
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	fab2 f282 	clz	r2, r2
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	40d3      	lsrs	r3, r2
 800391e:	4a09      	ldr	r2, [pc, #36]	; (8003944 <HAL_RCC_ClockConfig+0x2ec>)
 8003920:	5cd3      	ldrb	r3, [r2, r3]
 8003922:	fa21 f303 	lsr.w	r3, r1, r3
 8003926:	4a08      	ldr	r2, [pc, #32]	; (8003948 <HAL_RCC_ClockConfig+0x2f0>)
 8003928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800392a:	4b08      	ldr	r3, [pc, #32]	; (800394c <HAL_RCC_ClockConfig+0x2f4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd fc18 	bl	8001164 <HAL_InitTick>
  
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3778      	adds	r7, #120	; 0x78
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000
 8003944:	08005bbc 	.word	0x08005bbc
 8003948:	20000010 	.word	0x20000010
 800394c:	20000014 	.word	0x20000014

08003950 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003950:	b480      	push	{r7}
 8003952:	b08b      	sub	sp, #44	; 0x2c
 8003954:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	2300      	movs	r3, #0
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	2300      	movs	r3, #0
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800396a:	4b2a      	ldr	r3, [pc, #168]	; (8003a14 <HAL_RCC_GetSysClockFreq+0xc4>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b04      	cmp	r3, #4
 8003978:	d002      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x30>
 800397a:	2b08      	cmp	r3, #8
 800397c:	d003      	beq.n	8003986 <HAL_RCC_GetSysClockFreq+0x36>
 800397e:	e03f      	b.n	8003a00 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003980:	4b25      	ldr	r3, [pc, #148]	; (8003a18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003982:	623b      	str	r3, [r7, #32]
      break;
 8003984:	e03f      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800398c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003990:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	fa92 f2a2 	rbit	r2, r2
 8003998:	607a      	str	r2, [r7, #4]
  return result;
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	fab2 f282 	clz	r2, r2
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	40d3      	lsrs	r3, r2
 80039a4:	4a1d      	ldr	r2, [pc, #116]	; (8003a1c <HAL_RCC_GetSysClockFreq+0xcc>)
 80039a6:	5cd3      	ldrb	r3, [r2, r3]
 80039a8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80039aa:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	220f      	movs	r2, #15
 80039b4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	fa92 f2a2 	rbit	r2, r2
 80039bc:	60fa      	str	r2, [r7, #12]
  return result;
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	fab2 f282 	clz	r2, r2
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	40d3      	lsrs	r3, r2
 80039c8:	4a15      	ldr	r2, [pc, #84]	; (8003a20 <HAL_RCC_GetSysClockFreq+0xd0>)
 80039ca:	5cd3      	ldrb	r3, [r2, r3]
 80039cc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039d8:	4a0f      	ldr	r2, [pc, #60]	; (8003a18 <HAL_RCC_GetSysClockFreq+0xc8>)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	fb02 f303 	mul.w	r3, r2, r3
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
 80039e8:	e007      	b.n	80039fa <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039ea:	4a0b      	ldr	r2, [pc, #44]	; (8003a18 <HAL_RCC_GetSysClockFreq+0xc8>)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	fb02 f303 	mul.w	r3, r2, r3
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	623b      	str	r3, [r7, #32]
      break;
 80039fe:	e002      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a02:	623b      	str	r3, [r7, #32]
      break;
 8003a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a06:	6a3b      	ldr	r3, [r7, #32]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	372c      	adds	r7, #44	; 0x2c
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	40021000 	.word	0x40021000
 8003a18:	007a1200 	.word	0x007a1200
 8003a1c:	08005bd4 	.word	0x08005bd4
 8003a20:	08005be4 	.word	0x08005be4

08003a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a28:	4b03      	ldr	r3, [pc, #12]	; (8003a38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	20000010 	.word	0x20000010

08003a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a42:	f7ff ffef 	bl	8003a24 <HAL_RCC_GetHCLKFreq>
 8003a46:	4601      	mov	r1, r0
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a50:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	fa92 f2a2 	rbit	r2, r2
 8003a5c:	603a      	str	r2, [r7, #0]
  return result;
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	fab2 f282 	clz	r2, r2
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	40d3      	lsrs	r3, r2
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003a6a:	5cd3      	ldrb	r3, [r2, r3]
 8003a6c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003a70:	4618      	mov	r0, r3
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	08005bcc 	.word	0x08005bcc

08003a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003a86:	f7ff ffcd 	bl	8003a24 <HAL_RCC_GetHCLKFreq>
 8003a8a:	4601      	mov	r1, r0
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a94:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003a98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	fa92 f2a2 	rbit	r2, r2
 8003aa0:	603a      	str	r2, [r7, #0]
  return result;
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	fab2 f282 	clz	r2, r2
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	40d3      	lsrs	r3, r2
 8003aac:	4a04      	ldr	r2, [pc, #16]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003aae:	5cd3      	ldrb	r3, [r2, r3]
 8003ab0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	08005bcc 	.word	0x08005bcc

08003ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b092      	sub	sp, #72	; 0x48
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 80d4 	beq.w	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae8:	4b4e      	ldr	r3, [pc, #312]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10e      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af4:	4b4b      	ldr	r3, [pc, #300]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	4a4a      	ldr	r2, [pc, #296]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003afe:	61d3      	str	r3, [r2, #28]
 8003b00:	4b48      	ldr	r3, [pc, #288]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b12:	4b45      	ldr	r3, [pc, #276]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d118      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b1e:	4b42      	ldr	r3, [pc, #264]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a41      	ldr	r2, [pc, #260]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b28:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b2a:	f7fd fb5f 	bl	80011ec <HAL_GetTick>
 8003b2e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	e008      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b32:	f7fd fb5b 	bl	80011ec <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b64      	cmp	r3, #100	; 0x64
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e1d6      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	4b38      	ldr	r3, [pc, #224]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b50:	4b34      	ldr	r3, [pc, #208]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b58:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 8084 	beq.w	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d07c      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b70:	4b2c      	ldr	r3, [pc, #176]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	fa93 f3a3 	rbit	r3, r3
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ba2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba6:	fa93 f3a3 	rbit	r3, r3
 8003baa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bae:	fab3 f383 	clz	r3, r3
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4b1d      	ldr	r3, [pc, #116]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bc2:	4a18      	ldr	r2, [pc, #96]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d04b      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd2:	f7fd fb0b 	bl	80011ec <HAL_GetTick>
 8003bd6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fd fb07 	bl	80011ec <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e180      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	623b      	str	r3, [r7, #32]
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	fa93 f3a3 	rbit	r3, r3
 8003c06:	61fb      	str	r3, [r7, #28]
  return result;
 8003c08:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0a:	fab3 f383 	clz	r3, r3
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	f043 0302 	orr.w	r3, r3, #2
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d108      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c1e:	4b01      	ldr	r3, [pc, #4]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	e00d      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40007000 	.word	0x40007000
 8003c2c:	10908100 	.word	0x10908100
 8003c30:	2302      	movs	r3, #2
 8003c32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	fa93 f3a3 	rbit	r3, r3
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	4b9a      	ldr	r3, [pc, #616]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	2202      	movs	r2, #2
 8003c42:	613a      	str	r2, [r7, #16]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	fa92 f2a2 	rbit	r2, r2
 8003c4a:	60fa      	str	r2, [r7, #12]
  return result;
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	fab2 f282 	clz	r2, r2
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	f002 021f 	and.w	r2, r2, #31
 8003c5e:	2101      	movs	r1, #1
 8003c60:	fa01 f202 	lsl.w	r2, r1, r2
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0b7      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c6a:	4b8f      	ldr	r3, [pc, #572]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	498c      	ldr	r1, [pc, #560]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d105      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c84:	4b88      	ldr	r3, [pc, #544]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	4a87      	ldr	r2, [pc, #540]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c9c:	4b82      	ldr	r3, [pc, #520]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	f023 0203 	bic.w	r2, r3, #3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	497f      	ldr	r1, [pc, #508]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cba:	4b7b      	ldr	r3, [pc, #492]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	4978      	ldr	r1, [pc, #480]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cd8:	4b73      	ldr	r3, [pc, #460]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	4970      	ldr	r1, [pc, #448]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cf6:	4b6c      	ldr	r3, [pc, #432]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	f023 0210 	bic.w	r2, r3, #16
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	4969      	ldr	r1, [pc, #420]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d14:	4b64      	ldr	r3, [pc, #400]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d20:	4961      	ldr	r1, [pc, #388]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d008      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d32:	4b5d      	ldr	r3, [pc, #372]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	f023 0220 	bic.w	r2, r3, #32
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	495a      	ldr	r1, [pc, #360]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d50:	4b55      	ldr	r3, [pc, #340]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	4952      	ldr	r1, [pc, #328]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d008      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d6e:	4b4e      	ldr	r3, [pc, #312]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	494b      	ldr	r1, [pc, #300]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d8c:	4b46      	ldr	r3, [pc, #280]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	4943      	ldr	r1, [pc, #268]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003daa:	4b3f      	ldr	r3, [pc, #252]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	493c      	ldr	r1, [pc, #240]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003dc8:	4b37      	ldr	r3, [pc, #220]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	4934      	ldr	r1, [pc, #208]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003de6:	4b30      	ldr	r3, [pc, #192]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	492d      	ldr	r1, [pc, #180]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e04:	4b28      	ldr	r3, [pc, #160]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e10:	4925      	ldr	r1, [pc, #148]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003e22:	4b21      	ldr	r3, [pc, #132]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	491e      	ldr	r1, [pc, #120]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003e40:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	4916      	ldr	r1, [pc, #88]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003e5e:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6a:	490f      	ldr	r1, [pc, #60]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	4907      	ldr	r1, [pc, #28]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00c      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003e9a:	4b03      	ldr	r3, [pc, #12]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	e002      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eae:	4913      	ldr	r1, [pc, #76]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003ec0:	4b0e      	ldr	r3, [pc, #56]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ecc:	490b      	ldr	r1, [pc, #44]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003ede:	4b07      	ldr	r3, [pc, #28]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eea:	4904      	ldr	r1, [pc, #16]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3748      	adds	r7, #72	; 0x48
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40021000 	.word	0x40021000

08003f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e049      	b.n	8003fa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fd f84a 	bl	8000fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	f000 f836 	bl	8003fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a42      	ldr	r2, [pc, #264]	; (80040cc <TIM_Base_SetConfig+0x11c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d013      	beq.n	8003ff0 <TIM_Base_SetConfig+0x40>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fce:	d00f      	beq.n	8003ff0 <TIM_Base_SetConfig+0x40>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a3f      	ldr	r2, [pc, #252]	; (80040d0 <TIM_Base_SetConfig+0x120>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00b      	beq.n	8003ff0 <TIM_Base_SetConfig+0x40>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a3e      	ldr	r2, [pc, #248]	; (80040d4 <TIM_Base_SetConfig+0x124>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d007      	beq.n	8003ff0 <TIM_Base_SetConfig+0x40>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a3d      	ldr	r2, [pc, #244]	; (80040d8 <TIM_Base_SetConfig+0x128>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a3c      	ldr	r2, [pc, #240]	; (80040dc <TIM_Base_SetConfig+0x12c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d108      	bne.n	8004002 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a31      	ldr	r2, [pc, #196]	; (80040cc <TIM_Base_SetConfig+0x11c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01f      	beq.n	800404a <TIM_Base_SetConfig+0x9a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004010:	d01b      	beq.n	800404a <TIM_Base_SetConfig+0x9a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a2e      	ldr	r2, [pc, #184]	; (80040d0 <TIM_Base_SetConfig+0x120>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d017      	beq.n	800404a <TIM_Base_SetConfig+0x9a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2d      	ldr	r2, [pc, #180]	; (80040d4 <TIM_Base_SetConfig+0x124>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <TIM_Base_SetConfig+0x9a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2c      	ldr	r2, [pc, #176]	; (80040d8 <TIM_Base_SetConfig+0x128>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00f      	beq.n	800404a <TIM_Base_SetConfig+0x9a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2c      	ldr	r2, [pc, #176]	; (80040e0 <TIM_Base_SetConfig+0x130>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00b      	beq.n	800404a <TIM_Base_SetConfig+0x9a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a2b      	ldr	r2, [pc, #172]	; (80040e4 <TIM_Base_SetConfig+0x134>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d007      	beq.n	800404a <TIM_Base_SetConfig+0x9a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a2a      	ldr	r2, [pc, #168]	; (80040e8 <TIM_Base_SetConfig+0x138>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d003      	beq.n	800404a <TIM_Base_SetConfig+0x9a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a25      	ldr	r2, [pc, #148]	; (80040dc <TIM_Base_SetConfig+0x12c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d108      	bne.n	800405c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4313      	orrs	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a12      	ldr	r2, [pc, #72]	; (80040cc <TIM_Base_SetConfig+0x11c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d013      	beq.n	80040b0 <TIM_Base_SetConfig+0x100>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a13      	ldr	r2, [pc, #76]	; (80040d8 <TIM_Base_SetConfig+0x128>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00f      	beq.n	80040b0 <TIM_Base_SetConfig+0x100>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <TIM_Base_SetConfig+0x130>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00b      	beq.n	80040b0 <TIM_Base_SetConfig+0x100>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <TIM_Base_SetConfig+0x134>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d007      	beq.n	80040b0 <TIM_Base_SetConfig+0x100>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a11      	ldr	r2, [pc, #68]	; (80040e8 <TIM_Base_SetConfig+0x138>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_Base_SetConfig+0x100>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a0c      	ldr	r2, [pc, #48]	; (80040dc <TIM_Base_SetConfig+0x12c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d103      	bne.n	80040b8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	615a      	str	r2, [r3, #20]
}
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40013400 	.word	0x40013400
 80040dc:	40015000 	.word	0x40015000
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40014400 	.word	0x40014400
 80040e8:	40014800 	.word	0x40014800

080040ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e040      	b.n	8004180 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fc ffa6 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2224      	movs	r2, #36	; 0x24
 8004118:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0201 	bic.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f8b6 	bl	800429c <UART_SetConfig>
 8004130:	4603      	mov	r3, r0
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e022      	b.n	8004180 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fa7e 	bl	8004644 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004156:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004166:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fb05 	bl	8004788 <UART_CheckIdleState>
 800417e:	4603      	mov	r3, r0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af02      	add	r7, sp, #8
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	4613      	mov	r3, r2
 8004196:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800419c:	2b20      	cmp	r3, #32
 800419e:	d178      	bne.n	8004292 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_UART_Transmit+0x24>
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e071      	b.n	8004294 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2221      	movs	r2, #33	; 0x21
 80041bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041be:	f7fd f815 	bl	80011ec <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	88fa      	ldrh	r2, [r7, #6]
 80041c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	88fa      	ldrh	r2, [r7, #6]
 80041d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041dc:	d108      	bne.n	80041f0 <HAL_UART_Transmit+0x68>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d104      	bne.n	80041f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	e003      	b.n	80041f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041f8:	e030      	b.n	800425c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2200      	movs	r2, #0
 8004202:	2180      	movs	r1, #128	; 0x80
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fb67 	bl	80048d8 <UART_WaitOnFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d004      	beq.n	800421a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2220      	movs	r2, #32
 8004214:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e03c      	b.n	8004294 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10b      	bne.n	8004238 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	881a      	ldrh	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800422c:	b292      	uxth	r2, r2
 800422e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	3302      	adds	r3, #2
 8004234:	61bb      	str	r3, [r7, #24]
 8004236:	e008      	b.n	800424a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	781a      	ldrb	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	b292      	uxth	r2, r2
 8004242:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	3301      	adds	r3, #1
 8004248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1c8      	bne.n	80041fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	2200      	movs	r2, #0
 8004270:	2140      	movs	r1, #64	; 0x40
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fb30 	bl	80048d8 <UART_WaitOnFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d004      	beq.n	8004288 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e005      	b.n	8004294 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	e000      	b.n	8004294 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004292:	2302      	movs	r3, #2
  }
}
 8004294:	4618      	mov	r0, r3
 8004296:	3720      	adds	r7, #32
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b92      	ldr	r3, [pc, #584]	; (8004510 <UART_SetConfig+0x274>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	6979      	ldr	r1, [r7, #20]
 80042d0:	430b      	orrs	r3, r1
 80042d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	430a      	orrs	r2, r1
 800430c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a80      	ldr	r2, [pc, #512]	; (8004514 <UART_SetConfig+0x278>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d120      	bne.n	800435a <UART_SetConfig+0xbe>
 8004318:	4b7f      	ldr	r3, [pc, #508]	; (8004518 <UART_SetConfig+0x27c>)
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	2b03      	cmp	r3, #3
 8004322:	d817      	bhi.n	8004354 <UART_SetConfig+0xb8>
 8004324:	a201      	add	r2, pc, #4	; (adr r2, 800432c <UART_SetConfig+0x90>)
 8004326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432a:	bf00      	nop
 800432c:	0800433d 	.word	0x0800433d
 8004330:	08004349 	.word	0x08004349
 8004334:	0800434f 	.word	0x0800434f
 8004338:	08004343 	.word	0x08004343
 800433c:	2301      	movs	r3, #1
 800433e:	77fb      	strb	r3, [r7, #31]
 8004340:	e0b5      	b.n	80044ae <UART_SetConfig+0x212>
 8004342:	2302      	movs	r3, #2
 8004344:	77fb      	strb	r3, [r7, #31]
 8004346:	e0b2      	b.n	80044ae <UART_SetConfig+0x212>
 8004348:	2304      	movs	r3, #4
 800434a:	77fb      	strb	r3, [r7, #31]
 800434c:	e0af      	b.n	80044ae <UART_SetConfig+0x212>
 800434e:	2308      	movs	r3, #8
 8004350:	77fb      	strb	r3, [r7, #31]
 8004352:	e0ac      	b.n	80044ae <UART_SetConfig+0x212>
 8004354:	2310      	movs	r3, #16
 8004356:	77fb      	strb	r3, [r7, #31]
 8004358:	e0a9      	b.n	80044ae <UART_SetConfig+0x212>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a6f      	ldr	r2, [pc, #444]	; (800451c <UART_SetConfig+0x280>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d124      	bne.n	80043ae <UART_SetConfig+0x112>
 8004364:	4b6c      	ldr	r3, [pc, #432]	; (8004518 <UART_SetConfig+0x27c>)
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800436c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004370:	d011      	beq.n	8004396 <UART_SetConfig+0xfa>
 8004372:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004376:	d817      	bhi.n	80043a8 <UART_SetConfig+0x10c>
 8004378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800437c:	d011      	beq.n	80043a2 <UART_SetConfig+0x106>
 800437e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004382:	d811      	bhi.n	80043a8 <UART_SetConfig+0x10c>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <UART_SetConfig+0xf4>
 8004388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800438c:	d006      	beq.n	800439c <UART_SetConfig+0x100>
 800438e:	e00b      	b.n	80043a8 <UART_SetConfig+0x10c>
 8004390:	2300      	movs	r3, #0
 8004392:	77fb      	strb	r3, [r7, #31]
 8004394:	e08b      	b.n	80044ae <UART_SetConfig+0x212>
 8004396:	2302      	movs	r3, #2
 8004398:	77fb      	strb	r3, [r7, #31]
 800439a:	e088      	b.n	80044ae <UART_SetConfig+0x212>
 800439c:	2304      	movs	r3, #4
 800439e:	77fb      	strb	r3, [r7, #31]
 80043a0:	e085      	b.n	80044ae <UART_SetConfig+0x212>
 80043a2:	2308      	movs	r3, #8
 80043a4:	77fb      	strb	r3, [r7, #31]
 80043a6:	e082      	b.n	80044ae <UART_SetConfig+0x212>
 80043a8:	2310      	movs	r3, #16
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e07f      	b.n	80044ae <UART_SetConfig+0x212>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a5b      	ldr	r2, [pc, #364]	; (8004520 <UART_SetConfig+0x284>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d124      	bne.n	8004402 <UART_SetConfig+0x166>
 80043b8:	4b57      	ldr	r3, [pc, #348]	; (8004518 <UART_SetConfig+0x27c>)
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80043c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80043c4:	d011      	beq.n	80043ea <UART_SetConfig+0x14e>
 80043c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80043ca:	d817      	bhi.n	80043fc <UART_SetConfig+0x160>
 80043cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043d0:	d011      	beq.n	80043f6 <UART_SetConfig+0x15a>
 80043d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043d6:	d811      	bhi.n	80043fc <UART_SetConfig+0x160>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <UART_SetConfig+0x148>
 80043dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043e0:	d006      	beq.n	80043f0 <UART_SetConfig+0x154>
 80043e2:	e00b      	b.n	80043fc <UART_SetConfig+0x160>
 80043e4:	2300      	movs	r3, #0
 80043e6:	77fb      	strb	r3, [r7, #31]
 80043e8:	e061      	b.n	80044ae <UART_SetConfig+0x212>
 80043ea:	2302      	movs	r3, #2
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e05e      	b.n	80044ae <UART_SetConfig+0x212>
 80043f0:	2304      	movs	r3, #4
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e05b      	b.n	80044ae <UART_SetConfig+0x212>
 80043f6:	2308      	movs	r3, #8
 80043f8:	77fb      	strb	r3, [r7, #31]
 80043fa:	e058      	b.n	80044ae <UART_SetConfig+0x212>
 80043fc:	2310      	movs	r3, #16
 80043fe:	77fb      	strb	r3, [r7, #31]
 8004400:	e055      	b.n	80044ae <UART_SetConfig+0x212>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a47      	ldr	r2, [pc, #284]	; (8004524 <UART_SetConfig+0x288>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d124      	bne.n	8004456 <UART_SetConfig+0x1ba>
 800440c:	4b42      	ldr	r3, [pc, #264]	; (8004518 <UART_SetConfig+0x27c>)
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004414:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004418:	d011      	beq.n	800443e <UART_SetConfig+0x1a2>
 800441a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800441e:	d817      	bhi.n	8004450 <UART_SetConfig+0x1b4>
 8004420:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004424:	d011      	beq.n	800444a <UART_SetConfig+0x1ae>
 8004426:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800442a:	d811      	bhi.n	8004450 <UART_SetConfig+0x1b4>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <UART_SetConfig+0x19c>
 8004430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004434:	d006      	beq.n	8004444 <UART_SetConfig+0x1a8>
 8004436:	e00b      	b.n	8004450 <UART_SetConfig+0x1b4>
 8004438:	2300      	movs	r3, #0
 800443a:	77fb      	strb	r3, [r7, #31]
 800443c:	e037      	b.n	80044ae <UART_SetConfig+0x212>
 800443e:	2302      	movs	r3, #2
 8004440:	77fb      	strb	r3, [r7, #31]
 8004442:	e034      	b.n	80044ae <UART_SetConfig+0x212>
 8004444:	2304      	movs	r3, #4
 8004446:	77fb      	strb	r3, [r7, #31]
 8004448:	e031      	b.n	80044ae <UART_SetConfig+0x212>
 800444a:	2308      	movs	r3, #8
 800444c:	77fb      	strb	r3, [r7, #31]
 800444e:	e02e      	b.n	80044ae <UART_SetConfig+0x212>
 8004450:	2310      	movs	r3, #16
 8004452:	77fb      	strb	r3, [r7, #31]
 8004454:	e02b      	b.n	80044ae <UART_SetConfig+0x212>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a33      	ldr	r2, [pc, #204]	; (8004528 <UART_SetConfig+0x28c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d124      	bne.n	80044aa <UART_SetConfig+0x20e>
 8004460:	4b2d      	ldr	r3, [pc, #180]	; (8004518 <UART_SetConfig+0x27c>)
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004468:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800446c:	d011      	beq.n	8004492 <UART_SetConfig+0x1f6>
 800446e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004472:	d817      	bhi.n	80044a4 <UART_SetConfig+0x208>
 8004474:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004478:	d011      	beq.n	800449e <UART_SetConfig+0x202>
 800447a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800447e:	d811      	bhi.n	80044a4 <UART_SetConfig+0x208>
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <UART_SetConfig+0x1f0>
 8004484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004488:	d006      	beq.n	8004498 <UART_SetConfig+0x1fc>
 800448a:	e00b      	b.n	80044a4 <UART_SetConfig+0x208>
 800448c:	2300      	movs	r3, #0
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e00d      	b.n	80044ae <UART_SetConfig+0x212>
 8004492:	2302      	movs	r3, #2
 8004494:	77fb      	strb	r3, [r7, #31]
 8004496:	e00a      	b.n	80044ae <UART_SetConfig+0x212>
 8004498:	2304      	movs	r3, #4
 800449a:	77fb      	strb	r3, [r7, #31]
 800449c:	e007      	b.n	80044ae <UART_SetConfig+0x212>
 800449e:	2308      	movs	r3, #8
 80044a0:	77fb      	strb	r3, [r7, #31]
 80044a2:	e004      	b.n	80044ae <UART_SetConfig+0x212>
 80044a4:	2310      	movs	r3, #16
 80044a6:	77fb      	strb	r3, [r7, #31]
 80044a8:	e001      	b.n	80044ae <UART_SetConfig+0x212>
 80044aa:	2310      	movs	r3, #16
 80044ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b6:	d16b      	bne.n	8004590 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80044b8:	7ffb      	ldrb	r3, [r7, #31]
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d838      	bhi.n	8004530 <UART_SetConfig+0x294>
 80044be:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <UART_SetConfig+0x228>)
 80044c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c4:	080044e9 	.word	0x080044e9
 80044c8:	080044f1 	.word	0x080044f1
 80044cc:	080044f9 	.word	0x080044f9
 80044d0:	08004531 	.word	0x08004531
 80044d4:	080044ff 	.word	0x080044ff
 80044d8:	08004531 	.word	0x08004531
 80044dc:	08004531 	.word	0x08004531
 80044e0:	08004531 	.word	0x08004531
 80044e4:	08004507 	.word	0x08004507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044e8:	f7ff faa8 	bl	8003a3c <HAL_RCC_GetPCLK1Freq>
 80044ec:	61b8      	str	r0, [r7, #24]
        break;
 80044ee:	e024      	b.n	800453a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044f0:	f7ff fac6 	bl	8003a80 <HAL_RCC_GetPCLK2Freq>
 80044f4:	61b8      	str	r0, [r7, #24]
        break;
 80044f6:	e020      	b.n	800453a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <UART_SetConfig+0x290>)
 80044fa:	61bb      	str	r3, [r7, #24]
        break;
 80044fc:	e01d      	b.n	800453a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fe:	f7ff fa27 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 8004502:	61b8      	str	r0, [r7, #24]
        break;
 8004504:	e019      	b.n	800453a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800450a:	61bb      	str	r3, [r7, #24]
        break;
 800450c:	e015      	b.n	800453a <UART_SetConfig+0x29e>
 800450e:	bf00      	nop
 8004510:	efff69f3 	.word	0xefff69f3
 8004514:	40013800 	.word	0x40013800
 8004518:	40021000 	.word	0x40021000
 800451c:	40004400 	.word	0x40004400
 8004520:	40004800 	.word	0x40004800
 8004524:	40004c00 	.word	0x40004c00
 8004528:	40005000 	.word	0x40005000
 800452c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	77bb      	strb	r3, [r7, #30]
        break;
 8004538:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d073      	beq.n	8004628 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	005a      	lsls	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	085b      	lsrs	r3, r3, #1
 800454a:	441a      	add	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	fbb2 f3f3 	udiv	r3, r2, r3
 8004554:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b0f      	cmp	r3, #15
 800455a:	d916      	bls.n	800458a <UART_SetConfig+0x2ee>
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004562:	d212      	bcs.n	800458a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	b29b      	uxth	r3, r3
 8004568:	f023 030f 	bic.w	r3, r3, #15
 800456c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	085b      	lsrs	r3, r3, #1
 8004572:	b29b      	uxth	r3, r3
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	b29a      	uxth	r2, r3
 800457a:	89fb      	ldrh	r3, [r7, #14]
 800457c:	4313      	orrs	r3, r2
 800457e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	89fa      	ldrh	r2, [r7, #14]
 8004586:	60da      	str	r2, [r3, #12]
 8004588:	e04e      	b.n	8004628 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	77bb      	strb	r3, [r7, #30]
 800458e:	e04b      	b.n	8004628 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004590:	7ffb      	ldrb	r3, [r7, #31]
 8004592:	2b08      	cmp	r3, #8
 8004594:	d827      	bhi.n	80045e6 <UART_SetConfig+0x34a>
 8004596:	a201      	add	r2, pc, #4	; (adr r2, 800459c <UART_SetConfig+0x300>)
 8004598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045c9 	.word	0x080045c9
 80045a4:	080045d1 	.word	0x080045d1
 80045a8:	080045e7 	.word	0x080045e7
 80045ac:	080045d7 	.word	0x080045d7
 80045b0:	080045e7 	.word	0x080045e7
 80045b4:	080045e7 	.word	0x080045e7
 80045b8:	080045e7 	.word	0x080045e7
 80045bc:	080045df 	.word	0x080045df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c0:	f7ff fa3c 	bl	8003a3c <HAL_RCC_GetPCLK1Freq>
 80045c4:	61b8      	str	r0, [r7, #24]
        break;
 80045c6:	e013      	b.n	80045f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c8:	f7ff fa5a 	bl	8003a80 <HAL_RCC_GetPCLK2Freq>
 80045cc:	61b8      	str	r0, [r7, #24]
        break;
 80045ce:	e00f      	b.n	80045f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d0:	4b1b      	ldr	r3, [pc, #108]	; (8004640 <UART_SetConfig+0x3a4>)
 80045d2:	61bb      	str	r3, [r7, #24]
        break;
 80045d4:	e00c      	b.n	80045f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d6:	f7ff f9bb 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 80045da:	61b8      	str	r0, [r7, #24]
        break;
 80045dc:	e008      	b.n	80045f0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e2:	61bb      	str	r3, [r7, #24]
        break;
 80045e4:	e004      	b.n	80045f0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	77bb      	strb	r3, [r7, #30]
        break;
 80045ee:	bf00      	nop
    }

    if (pclk != 0U)
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d018      	beq.n	8004628 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	085a      	lsrs	r2, r3, #1
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	441a      	add	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	fbb2 f3f3 	udiv	r3, r2, r3
 8004608:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b0f      	cmp	r3, #15
 800460e:	d909      	bls.n	8004624 <UART_SetConfig+0x388>
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004616:	d205      	bcs.n	8004624 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	b29a      	uxth	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60da      	str	r2, [r3, #12]
 8004622:	e001      	b.n	8004628 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004634:	7fbb      	ldrb	r3, [r7, #30]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	007a1200 	.word	0x007a1200

08004644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	f003 0310 	and.w	r3, r3, #16
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01a      	beq.n	800475a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004742:	d10a      	bne.n	800475a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	605a      	str	r2, [r3, #4]
  }
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b098      	sub	sp, #96	; 0x60
 800478c:	af02      	add	r7, sp, #8
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004798:	f7fc fd28 	bl	80011ec <HAL_GetTick>
 800479c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d12e      	bne.n	800480a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b4:	2200      	movs	r2, #0
 80047b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f88c 	bl	80048d8 <UART_WaitOnFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d021      	beq.n	800480a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ce:	e853 3f00 	ldrex	r3, [r3]
 80047d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047da:	653b      	str	r3, [r7, #80]	; 0x50
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	461a      	mov	r2, r3
 80047e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e4:	647b      	str	r3, [r7, #68]	; 0x44
 80047e6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047ec:	e841 2300 	strex	r3, r2, [r1]
 80047f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e6      	bne.n	80047c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e062      	b.n	80048d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b04      	cmp	r3, #4
 8004816:	d149      	bne.n	80048ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004818:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004820:	2200      	movs	r2, #0
 8004822:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f856 	bl	80048d8 <UART_WaitOnFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d03c      	beq.n	80048ac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	e853 3f00 	ldrex	r3, [r3]
 800483e:	623b      	str	r3, [r7, #32]
   return(result);
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004850:	633b      	str	r3, [r7, #48]	; 0x30
 8004852:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004858:	e841 2300 	strex	r3, r2, [r1]
 800485c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e6      	bne.n	8004832 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3308      	adds	r3, #8
 800486a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	60fb      	str	r3, [r7, #12]
   return(result);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	64bb      	str	r3, [r7, #72]	; 0x48
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3308      	adds	r3, #8
 8004882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004884:	61fa      	str	r2, [r7, #28]
 8004886:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	69b9      	ldr	r1, [r7, #24]
 800488a:	69fa      	ldr	r2, [r7, #28]
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	617b      	str	r3, [r7, #20]
   return(result);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e5      	bne.n	8004864 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e011      	b.n	80048d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3758      	adds	r7, #88	; 0x58
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e8:	e049      	b.n	800497e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d045      	beq.n	800497e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f2:	f7fc fc7b 	bl	80011ec <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d302      	bcc.n	8004908 <UART_WaitOnFlagUntilTimeout+0x30>
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e048      	b.n	800499e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d031      	beq.n	800497e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b08      	cmp	r3, #8
 8004926:	d110      	bne.n	800494a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2208      	movs	r2, #8
 800492e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 f838 	bl	80049a6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2208      	movs	r2, #8
 800493a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e029      	b.n	800499e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004958:	d111      	bne.n	800497e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004962:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f81e 	bl	80049a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e00f      	b.n	800499e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4013      	ands	r3, r2
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	429a      	cmp	r2, r3
 800498c:	bf0c      	ite	eq
 800498e:	2301      	moveq	r3, #1
 8004990:	2300      	movne	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	429a      	cmp	r2, r3
 800499a:	d0a6      	beq.n	80048ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b095      	sub	sp, #84	; 0x54
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b6:	e853 3f00 	ldrex	r3, [r3]
 80049ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	461a      	mov	r2, r3
 80049ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049cc:	643b      	str	r3, [r7, #64]	; 0x40
 80049ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049d4:	e841 2300 	strex	r3, r2, [r1]
 80049d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1e6      	bne.n	80049ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3308      	adds	r3, #8
 80049e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	e853 3f00 	ldrex	r3, [r3]
 80049ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f023 0301 	bic.w	r3, r3, #1
 80049f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3308      	adds	r3, #8
 80049fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a08:	e841 2300 	strex	r3, r2, [r1]
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1e5      	bne.n	80049e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d118      	bne.n	8004a4e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f023 0310 	bic.w	r3, r3, #16
 8004a30:	647b      	str	r3, [r7, #68]	; 0x44
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	6979      	ldr	r1, [r7, #20]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	613b      	str	r3, [r7, #16]
   return(result);
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e6      	bne.n	8004a1c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a62:	bf00      	nop
 8004a64:	3754      	adds	r7, #84	; 0x54
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <std>:
 8004a70:	2300      	movs	r3, #0
 8004a72:	b510      	push	{r4, lr}
 8004a74:	4604      	mov	r4, r0
 8004a76:	e9c0 3300 	strd	r3, r3, [r0]
 8004a7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a7e:	6083      	str	r3, [r0, #8]
 8004a80:	8181      	strh	r1, [r0, #12]
 8004a82:	6643      	str	r3, [r0, #100]	; 0x64
 8004a84:	81c2      	strh	r2, [r0, #14]
 8004a86:	6183      	str	r3, [r0, #24]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	2208      	movs	r2, #8
 8004a8c:	305c      	adds	r0, #92	; 0x5c
 8004a8e:	f000 f9f7 	bl	8004e80 <memset>
 8004a92:	4b0d      	ldr	r3, [pc, #52]	; (8004ac8 <std+0x58>)
 8004a94:	6263      	str	r3, [r4, #36]	; 0x24
 8004a96:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <std+0x5c>)
 8004a98:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <std+0x60>)
 8004a9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <std+0x64>)
 8004aa0:	6323      	str	r3, [r4, #48]	; 0x30
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <std+0x68>)
 8004aa4:	6224      	str	r4, [r4, #32]
 8004aa6:	429c      	cmp	r4, r3
 8004aa8:	d006      	beq.n	8004ab8 <std+0x48>
 8004aaa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004aae:	4294      	cmp	r4, r2
 8004ab0:	d002      	beq.n	8004ab8 <std+0x48>
 8004ab2:	33d0      	adds	r3, #208	; 0xd0
 8004ab4:	429c      	cmp	r4, r3
 8004ab6:	d105      	bne.n	8004ac4 <std+0x54>
 8004ab8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ac0:	f000 ba56 	b.w	8004f70 <__retarget_lock_init_recursive>
 8004ac4:	bd10      	pop	{r4, pc}
 8004ac6:	bf00      	nop
 8004ac8:	08004cd1 	.word	0x08004cd1
 8004acc:	08004cf3 	.word	0x08004cf3
 8004ad0:	08004d2b 	.word	0x08004d2b
 8004ad4:	08004d4f 	.word	0x08004d4f
 8004ad8:	20000260 	.word	0x20000260

08004adc <stdio_exit_handler>:
 8004adc:	4a02      	ldr	r2, [pc, #8]	; (8004ae8 <stdio_exit_handler+0xc>)
 8004ade:	4903      	ldr	r1, [pc, #12]	; (8004aec <stdio_exit_handler+0x10>)
 8004ae0:	4803      	ldr	r0, [pc, #12]	; (8004af0 <stdio_exit_handler+0x14>)
 8004ae2:	f000 b869 	b.w	8004bb8 <_fwalk_sglue>
 8004ae6:	bf00      	nop
 8004ae8:	2000001c 	.word	0x2000001c
 8004aec:	0800581d 	.word	0x0800581d
 8004af0:	20000028 	.word	0x20000028

08004af4 <cleanup_stdio>:
 8004af4:	6841      	ldr	r1, [r0, #4]
 8004af6:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <cleanup_stdio+0x34>)
 8004af8:	4299      	cmp	r1, r3
 8004afa:	b510      	push	{r4, lr}
 8004afc:	4604      	mov	r4, r0
 8004afe:	d001      	beq.n	8004b04 <cleanup_stdio+0x10>
 8004b00:	f000 fe8c 	bl	800581c <_fflush_r>
 8004b04:	68a1      	ldr	r1, [r4, #8]
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <cleanup_stdio+0x38>)
 8004b08:	4299      	cmp	r1, r3
 8004b0a:	d002      	beq.n	8004b12 <cleanup_stdio+0x1e>
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f000 fe85 	bl	800581c <_fflush_r>
 8004b12:	68e1      	ldr	r1, [r4, #12]
 8004b14:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <cleanup_stdio+0x3c>)
 8004b16:	4299      	cmp	r1, r3
 8004b18:	d004      	beq.n	8004b24 <cleanup_stdio+0x30>
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b20:	f000 be7c 	b.w	800581c <_fflush_r>
 8004b24:	bd10      	pop	{r4, pc}
 8004b26:	bf00      	nop
 8004b28:	20000260 	.word	0x20000260
 8004b2c:	200002c8 	.word	0x200002c8
 8004b30:	20000330 	.word	0x20000330

08004b34 <global_stdio_init.part.0>:
 8004b34:	b510      	push	{r4, lr}
 8004b36:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <global_stdio_init.part.0+0x30>)
 8004b38:	4c0b      	ldr	r4, [pc, #44]	; (8004b68 <global_stdio_init.part.0+0x34>)
 8004b3a:	4a0c      	ldr	r2, [pc, #48]	; (8004b6c <global_stdio_init.part.0+0x38>)
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	4620      	mov	r0, r4
 8004b40:	2200      	movs	r2, #0
 8004b42:	2104      	movs	r1, #4
 8004b44:	f7ff ff94 	bl	8004a70 <std>
 8004b48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	2109      	movs	r1, #9
 8004b50:	f7ff ff8e 	bl	8004a70 <std>
 8004b54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004b58:	2202      	movs	r2, #2
 8004b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b5e:	2112      	movs	r1, #18
 8004b60:	f7ff bf86 	b.w	8004a70 <std>
 8004b64:	20000398 	.word	0x20000398
 8004b68:	20000260 	.word	0x20000260
 8004b6c:	08004add 	.word	0x08004add

08004b70 <__sfp_lock_acquire>:
 8004b70:	4801      	ldr	r0, [pc, #4]	; (8004b78 <__sfp_lock_acquire+0x8>)
 8004b72:	f000 b9fe 	b.w	8004f72 <__retarget_lock_acquire_recursive>
 8004b76:	bf00      	nop
 8004b78:	200003a1 	.word	0x200003a1

08004b7c <__sfp_lock_release>:
 8004b7c:	4801      	ldr	r0, [pc, #4]	; (8004b84 <__sfp_lock_release+0x8>)
 8004b7e:	f000 b9f9 	b.w	8004f74 <__retarget_lock_release_recursive>
 8004b82:	bf00      	nop
 8004b84:	200003a1 	.word	0x200003a1

08004b88 <__sinit>:
 8004b88:	b510      	push	{r4, lr}
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	f7ff fff0 	bl	8004b70 <__sfp_lock_acquire>
 8004b90:	6a23      	ldr	r3, [r4, #32]
 8004b92:	b11b      	cbz	r3, 8004b9c <__sinit+0x14>
 8004b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b98:	f7ff bff0 	b.w	8004b7c <__sfp_lock_release>
 8004b9c:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <__sinit+0x28>)
 8004b9e:	6223      	str	r3, [r4, #32]
 8004ba0:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <__sinit+0x2c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1f5      	bne.n	8004b94 <__sinit+0xc>
 8004ba8:	f7ff ffc4 	bl	8004b34 <global_stdio_init.part.0>
 8004bac:	e7f2      	b.n	8004b94 <__sinit+0xc>
 8004bae:	bf00      	nop
 8004bb0:	08004af5 	.word	0x08004af5
 8004bb4:	20000398 	.word	0x20000398

08004bb8 <_fwalk_sglue>:
 8004bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bbc:	4607      	mov	r7, r0
 8004bbe:	4688      	mov	r8, r1
 8004bc0:	4614      	mov	r4, r2
 8004bc2:	2600      	movs	r6, #0
 8004bc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bc8:	f1b9 0901 	subs.w	r9, r9, #1
 8004bcc:	d505      	bpl.n	8004bda <_fwalk_sglue+0x22>
 8004bce:	6824      	ldr	r4, [r4, #0]
 8004bd0:	2c00      	cmp	r4, #0
 8004bd2:	d1f7      	bne.n	8004bc4 <_fwalk_sglue+0xc>
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bda:	89ab      	ldrh	r3, [r5, #12]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d907      	bls.n	8004bf0 <_fwalk_sglue+0x38>
 8004be0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004be4:	3301      	adds	r3, #1
 8004be6:	d003      	beq.n	8004bf0 <_fwalk_sglue+0x38>
 8004be8:	4629      	mov	r1, r5
 8004bea:	4638      	mov	r0, r7
 8004bec:	47c0      	blx	r8
 8004bee:	4306      	orrs	r6, r0
 8004bf0:	3568      	adds	r5, #104	; 0x68
 8004bf2:	e7e9      	b.n	8004bc8 <_fwalk_sglue+0x10>

08004bf4 <iprintf>:
 8004bf4:	b40f      	push	{r0, r1, r2, r3}
 8004bf6:	b507      	push	{r0, r1, r2, lr}
 8004bf8:	4906      	ldr	r1, [pc, #24]	; (8004c14 <iprintf+0x20>)
 8004bfa:	ab04      	add	r3, sp, #16
 8004bfc:	6808      	ldr	r0, [r1, #0]
 8004bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c02:	6881      	ldr	r1, [r0, #8]
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	f000 fad9 	bl	80051bc <_vfiprintf_r>
 8004c0a:	b003      	add	sp, #12
 8004c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c10:	b004      	add	sp, #16
 8004c12:	4770      	bx	lr
 8004c14:	20000074 	.word	0x20000074

08004c18 <_puts_r>:
 8004c18:	6a03      	ldr	r3, [r0, #32]
 8004c1a:	b570      	push	{r4, r5, r6, lr}
 8004c1c:	6884      	ldr	r4, [r0, #8]
 8004c1e:	4605      	mov	r5, r0
 8004c20:	460e      	mov	r6, r1
 8004c22:	b90b      	cbnz	r3, 8004c28 <_puts_r+0x10>
 8004c24:	f7ff ffb0 	bl	8004b88 <__sinit>
 8004c28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c2a:	07db      	lsls	r3, r3, #31
 8004c2c:	d405      	bmi.n	8004c3a <_puts_r+0x22>
 8004c2e:	89a3      	ldrh	r3, [r4, #12]
 8004c30:	0598      	lsls	r0, r3, #22
 8004c32:	d402      	bmi.n	8004c3a <_puts_r+0x22>
 8004c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c36:	f000 f99c 	bl	8004f72 <__retarget_lock_acquire_recursive>
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	0719      	lsls	r1, r3, #28
 8004c3e:	d513      	bpl.n	8004c68 <_puts_r+0x50>
 8004c40:	6923      	ldr	r3, [r4, #16]
 8004c42:	b18b      	cbz	r3, 8004c68 <_puts_r+0x50>
 8004c44:	3e01      	subs	r6, #1
 8004c46:	68a3      	ldr	r3, [r4, #8]
 8004c48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	60a3      	str	r3, [r4, #8]
 8004c50:	b9e9      	cbnz	r1, 8004c8e <_puts_r+0x76>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	da2e      	bge.n	8004cb4 <_puts_r+0x9c>
 8004c56:	4622      	mov	r2, r4
 8004c58:	210a      	movs	r1, #10
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	f000 f87b 	bl	8004d56 <__swbuf_r>
 8004c60:	3001      	adds	r0, #1
 8004c62:	d007      	beq.n	8004c74 <_puts_r+0x5c>
 8004c64:	250a      	movs	r5, #10
 8004c66:	e007      	b.n	8004c78 <_puts_r+0x60>
 8004c68:	4621      	mov	r1, r4
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f000 f8b0 	bl	8004dd0 <__swsetup_r>
 8004c70:	2800      	cmp	r0, #0
 8004c72:	d0e7      	beq.n	8004c44 <_puts_r+0x2c>
 8004c74:	f04f 35ff 	mov.w	r5, #4294967295
 8004c78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c7a:	07da      	lsls	r2, r3, #31
 8004c7c:	d405      	bmi.n	8004c8a <_puts_r+0x72>
 8004c7e:	89a3      	ldrh	r3, [r4, #12]
 8004c80:	059b      	lsls	r3, r3, #22
 8004c82:	d402      	bmi.n	8004c8a <_puts_r+0x72>
 8004c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c86:	f000 f975 	bl	8004f74 <__retarget_lock_release_recursive>
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	bd70      	pop	{r4, r5, r6, pc}
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	da04      	bge.n	8004c9c <_puts_r+0x84>
 8004c92:	69a2      	ldr	r2, [r4, #24]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	dc06      	bgt.n	8004ca6 <_puts_r+0x8e>
 8004c98:	290a      	cmp	r1, #10
 8004c9a:	d004      	beq.n	8004ca6 <_puts_r+0x8e>
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	6022      	str	r2, [r4, #0]
 8004ca2:	7019      	strb	r1, [r3, #0]
 8004ca4:	e7cf      	b.n	8004c46 <_puts_r+0x2e>
 8004ca6:	4622      	mov	r2, r4
 8004ca8:	4628      	mov	r0, r5
 8004caa:	f000 f854 	bl	8004d56 <__swbuf_r>
 8004cae:	3001      	adds	r0, #1
 8004cb0:	d1c9      	bne.n	8004c46 <_puts_r+0x2e>
 8004cb2:	e7df      	b.n	8004c74 <_puts_r+0x5c>
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	250a      	movs	r5, #10
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	6022      	str	r2, [r4, #0]
 8004cbc:	701d      	strb	r5, [r3, #0]
 8004cbe:	e7db      	b.n	8004c78 <_puts_r+0x60>

08004cc0 <puts>:
 8004cc0:	4b02      	ldr	r3, [pc, #8]	; (8004ccc <puts+0xc>)
 8004cc2:	4601      	mov	r1, r0
 8004cc4:	6818      	ldr	r0, [r3, #0]
 8004cc6:	f7ff bfa7 	b.w	8004c18 <_puts_r>
 8004cca:	bf00      	nop
 8004ccc:	20000074 	.word	0x20000074

08004cd0 <__sread>:
 8004cd0:	b510      	push	{r4, lr}
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd8:	f000 f8fc 	bl	8004ed4 <_read_r>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	bfab      	itete	ge
 8004ce0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ce2:	89a3      	ldrhlt	r3, [r4, #12]
 8004ce4:	181b      	addge	r3, r3, r0
 8004ce6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cea:	bfac      	ite	ge
 8004cec:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cee:	81a3      	strhlt	r3, [r4, #12]
 8004cf0:	bd10      	pop	{r4, pc}

08004cf2 <__swrite>:
 8004cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf6:	461f      	mov	r7, r3
 8004cf8:	898b      	ldrh	r3, [r1, #12]
 8004cfa:	05db      	lsls	r3, r3, #23
 8004cfc:	4605      	mov	r5, r0
 8004cfe:	460c      	mov	r4, r1
 8004d00:	4616      	mov	r6, r2
 8004d02:	d505      	bpl.n	8004d10 <__swrite+0x1e>
 8004d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d08:	2302      	movs	r3, #2
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f000 f8d0 	bl	8004eb0 <_lseek_r>
 8004d10:	89a3      	ldrh	r3, [r4, #12]
 8004d12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d1a:	81a3      	strh	r3, [r4, #12]
 8004d1c:	4632      	mov	r2, r6
 8004d1e:	463b      	mov	r3, r7
 8004d20:	4628      	mov	r0, r5
 8004d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d26:	f000 b8e7 	b.w	8004ef8 <_write_r>

08004d2a <__sseek>:
 8004d2a:	b510      	push	{r4, lr}
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d32:	f000 f8bd 	bl	8004eb0 <_lseek_r>
 8004d36:	1c43      	adds	r3, r0, #1
 8004d38:	89a3      	ldrh	r3, [r4, #12]
 8004d3a:	bf15      	itete	ne
 8004d3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d46:	81a3      	strheq	r3, [r4, #12]
 8004d48:	bf18      	it	ne
 8004d4a:	81a3      	strhne	r3, [r4, #12]
 8004d4c:	bd10      	pop	{r4, pc}

08004d4e <__sclose>:
 8004d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d52:	f000 b89d 	b.w	8004e90 <_close_r>

08004d56 <__swbuf_r>:
 8004d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d58:	460e      	mov	r6, r1
 8004d5a:	4614      	mov	r4, r2
 8004d5c:	4605      	mov	r5, r0
 8004d5e:	b118      	cbz	r0, 8004d68 <__swbuf_r+0x12>
 8004d60:	6a03      	ldr	r3, [r0, #32]
 8004d62:	b90b      	cbnz	r3, 8004d68 <__swbuf_r+0x12>
 8004d64:	f7ff ff10 	bl	8004b88 <__sinit>
 8004d68:	69a3      	ldr	r3, [r4, #24]
 8004d6a:	60a3      	str	r3, [r4, #8]
 8004d6c:	89a3      	ldrh	r3, [r4, #12]
 8004d6e:	071a      	lsls	r2, r3, #28
 8004d70:	d525      	bpl.n	8004dbe <__swbuf_r+0x68>
 8004d72:	6923      	ldr	r3, [r4, #16]
 8004d74:	b31b      	cbz	r3, 8004dbe <__swbuf_r+0x68>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	6922      	ldr	r2, [r4, #16]
 8004d7a:	1a98      	subs	r0, r3, r2
 8004d7c:	6963      	ldr	r3, [r4, #20]
 8004d7e:	b2f6      	uxtb	r6, r6
 8004d80:	4283      	cmp	r3, r0
 8004d82:	4637      	mov	r7, r6
 8004d84:	dc04      	bgt.n	8004d90 <__swbuf_r+0x3a>
 8004d86:	4621      	mov	r1, r4
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f000 fd47 	bl	800581c <_fflush_r>
 8004d8e:	b9e0      	cbnz	r0, 8004dca <__swbuf_r+0x74>
 8004d90:	68a3      	ldr	r3, [r4, #8]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	60a3      	str	r3, [r4, #8]
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	6022      	str	r2, [r4, #0]
 8004d9c:	701e      	strb	r6, [r3, #0]
 8004d9e:	6962      	ldr	r2, [r4, #20]
 8004da0:	1c43      	adds	r3, r0, #1
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d004      	beq.n	8004db0 <__swbuf_r+0x5a>
 8004da6:	89a3      	ldrh	r3, [r4, #12]
 8004da8:	07db      	lsls	r3, r3, #31
 8004daa:	d506      	bpl.n	8004dba <__swbuf_r+0x64>
 8004dac:	2e0a      	cmp	r6, #10
 8004dae:	d104      	bne.n	8004dba <__swbuf_r+0x64>
 8004db0:	4621      	mov	r1, r4
 8004db2:	4628      	mov	r0, r5
 8004db4:	f000 fd32 	bl	800581c <_fflush_r>
 8004db8:	b938      	cbnz	r0, 8004dca <__swbuf_r+0x74>
 8004dba:	4638      	mov	r0, r7
 8004dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f000 f805 	bl	8004dd0 <__swsetup_r>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	d0d5      	beq.n	8004d76 <__swbuf_r+0x20>
 8004dca:	f04f 37ff 	mov.w	r7, #4294967295
 8004dce:	e7f4      	b.n	8004dba <__swbuf_r+0x64>

08004dd0 <__swsetup_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	4b2a      	ldr	r3, [pc, #168]	; (8004e7c <__swsetup_r+0xac>)
 8004dd4:	4605      	mov	r5, r0
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	460c      	mov	r4, r1
 8004dda:	b118      	cbz	r0, 8004de4 <__swsetup_r+0x14>
 8004ddc:	6a03      	ldr	r3, [r0, #32]
 8004dde:	b90b      	cbnz	r3, 8004de4 <__swsetup_r+0x14>
 8004de0:	f7ff fed2 	bl	8004b88 <__sinit>
 8004de4:	89a3      	ldrh	r3, [r4, #12]
 8004de6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dea:	0718      	lsls	r0, r3, #28
 8004dec:	d422      	bmi.n	8004e34 <__swsetup_r+0x64>
 8004dee:	06d9      	lsls	r1, r3, #27
 8004df0:	d407      	bmi.n	8004e02 <__swsetup_r+0x32>
 8004df2:	2309      	movs	r3, #9
 8004df4:	602b      	str	r3, [r5, #0]
 8004df6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004dfa:	81a3      	strh	r3, [r4, #12]
 8004dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004e00:	e034      	b.n	8004e6c <__swsetup_r+0x9c>
 8004e02:	0758      	lsls	r0, r3, #29
 8004e04:	d512      	bpl.n	8004e2c <__swsetup_r+0x5c>
 8004e06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e08:	b141      	cbz	r1, 8004e1c <__swsetup_r+0x4c>
 8004e0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e0e:	4299      	cmp	r1, r3
 8004e10:	d002      	beq.n	8004e18 <__swsetup_r+0x48>
 8004e12:	4628      	mov	r0, r5
 8004e14:	f000 f8b0 	bl	8004f78 <_free_r>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	6363      	str	r3, [r4, #52]	; 0x34
 8004e1c:	89a3      	ldrh	r3, [r4, #12]
 8004e1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e22:	81a3      	strh	r3, [r4, #12]
 8004e24:	2300      	movs	r3, #0
 8004e26:	6063      	str	r3, [r4, #4]
 8004e28:	6923      	ldr	r3, [r4, #16]
 8004e2a:	6023      	str	r3, [r4, #0]
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	f043 0308 	orr.w	r3, r3, #8
 8004e32:	81a3      	strh	r3, [r4, #12]
 8004e34:	6923      	ldr	r3, [r4, #16]
 8004e36:	b94b      	cbnz	r3, 8004e4c <__swsetup_r+0x7c>
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e42:	d003      	beq.n	8004e4c <__swsetup_r+0x7c>
 8004e44:	4621      	mov	r1, r4
 8004e46:	4628      	mov	r0, r5
 8004e48:	f000 fd36 	bl	80058b8 <__smakebuf_r>
 8004e4c:	89a0      	ldrh	r0, [r4, #12]
 8004e4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e52:	f010 0301 	ands.w	r3, r0, #1
 8004e56:	d00a      	beq.n	8004e6e <__swsetup_r+0x9e>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60a3      	str	r3, [r4, #8]
 8004e5c:	6963      	ldr	r3, [r4, #20]
 8004e5e:	425b      	negs	r3, r3
 8004e60:	61a3      	str	r3, [r4, #24]
 8004e62:	6923      	ldr	r3, [r4, #16]
 8004e64:	b943      	cbnz	r3, 8004e78 <__swsetup_r+0xa8>
 8004e66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e6a:	d1c4      	bne.n	8004df6 <__swsetup_r+0x26>
 8004e6c:	bd38      	pop	{r3, r4, r5, pc}
 8004e6e:	0781      	lsls	r1, r0, #30
 8004e70:	bf58      	it	pl
 8004e72:	6963      	ldrpl	r3, [r4, #20]
 8004e74:	60a3      	str	r3, [r4, #8]
 8004e76:	e7f4      	b.n	8004e62 <__swsetup_r+0x92>
 8004e78:	2000      	movs	r0, #0
 8004e7a:	e7f7      	b.n	8004e6c <__swsetup_r+0x9c>
 8004e7c:	20000074 	.word	0x20000074

08004e80 <memset>:
 8004e80:	4402      	add	r2, r0
 8004e82:	4603      	mov	r3, r0
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d100      	bne.n	8004e8a <memset+0xa>
 8004e88:	4770      	bx	lr
 8004e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e8e:	e7f9      	b.n	8004e84 <memset+0x4>

08004e90 <_close_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	4d06      	ldr	r5, [pc, #24]	; (8004eac <_close_r+0x1c>)
 8004e94:	2300      	movs	r3, #0
 8004e96:	4604      	mov	r4, r0
 8004e98:	4608      	mov	r0, r1
 8004e9a:	602b      	str	r3, [r5, #0]
 8004e9c:	f7fb ffed 	bl	8000e7a <_close>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d102      	bne.n	8004eaa <_close_r+0x1a>
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	b103      	cbz	r3, 8004eaa <_close_r+0x1a>
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	bd38      	pop	{r3, r4, r5, pc}
 8004eac:	2000039c 	.word	0x2000039c

08004eb0 <_lseek_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4d07      	ldr	r5, [pc, #28]	; (8004ed0 <_lseek_r+0x20>)
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	4608      	mov	r0, r1
 8004eb8:	4611      	mov	r1, r2
 8004eba:	2200      	movs	r2, #0
 8004ebc:	602a      	str	r2, [r5, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f7fc f802 	bl	8000ec8 <_lseek>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d102      	bne.n	8004ece <_lseek_r+0x1e>
 8004ec8:	682b      	ldr	r3, [r5, #0]
 8004eca:	b103      	cbz	r3, 8004ece <_lseek_r+0x1e>
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
 8004ed0:	2000039c 	.word	0x2000039c

08004ed4 <_read_r>:
 8004ed4:	b538      	push	{r3, r4, r5, lr}
 8004ed6:	4d07      	ldr	r5, [pc, #28]	; (8004ef4 <_read_r+0x20>)
 8004ed8:	4604      	mov	r4, r0
 8004eda:	4608      	mov	r0, r1
 8004edc:	4611      	mov	r1, r2
 8004ede:	2200      	movs	r2, #0
 8004ee0:	602a      	str	r2, [r5, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f7fb ff90 	bl	8000e08 <_read>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d102      	bne.n	8004ef2 <_read_r+0x1e>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	b103      	cbz	r3, 8004ef2 <_read_r+0x1e>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	2000039c 	.word	0x2000039c

08004ef8 <_write_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4d07      	ldr	r5, [pc, #28]	; (8004f18 <_write_r+0x20>)
 8004efc:	4604      	mov	r4, r0
 8004efe:	4608      	mov	r0, r1
 8004f00:	4611      	mov	r1, r2
 8004f02:	2200      	movs	r2, #0
 8004f04:	602a      	str	r2, [r5, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f7fb ff9b 	bl	8000e42 <_write>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d102      	bne.n	8004f16 <_write_r+0x1e>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	b103      	cbz	r3, 8004f16 <_write_r+0x1e>
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	2000039c 	.word	0x2000039c

08004f1c <__errno>:
 8004f1c:	4b01      	ldr	r3, [pc, #4]	; (8004f24 <__errno+0x8>)
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000074 	.word	0x20000074

08004f28 <__libc_init_array>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	4d0d      	ldr	r5, [pc, #52]	; (8004f60 <__libc_init_array+0x38>)
 8004f2c:	4c0d      	ldr	r4, [pc, #52]	; (8004f64 <__libc_init_array+0x3c>)
 8004f2e:	1b64      	subs	r4, r4, r5
 8004f30:	10a4      	asrs	r4, r4, #2
 8004f32:	2600      	movs	r6, #0
 8004f34:	42a6      	cmp	r6, r4
 8004f36:	d109      	bne.n	8004f4c <__libc_init_array+0x24>
 8004f38:	4d0b      	ldr	r5, [pc, #44]	; (8004f68 <__libc_init_array+0x40>)
 8004f3a:	4c0c      	ldr	r4, [pc, #48]	; (8004f6c <__libc_init_array+0x44>)
 8004f3c:	f000 fd2a 	bl	8005994 <_init>
 8004f40:	1b64      	subs	r4, r4, r5
 8004f42:	10a4      	asrs	r4, r4, #2
 8004f44:	2600      	movs	r6, #0
 8004f46:	42a6      	cmp	r6, r4
 8004f48:	d105      	bne.n	8004f56 <__libc_init_array+0x2e>
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f50:	4798      	blx	r3
 8004f52:	3601      	adds	r6, #1
 8004f54:	e7ee      	b.n	8004f34 <__libc_init_array+0xc>
 8004f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5a:	4798      	blx	r3
 8004f5c:	3601      	adds	r6, #1
 8004f5e:	e7f2      	b.n	8004f46 <__libc_init_array+0x1e>
 8004f60:	08005c28 	.word	0x08005c28
 8004f64:	08005c28 	.word	0x08005c28
 8004f68:	08005c28 	.word	0x08005c28
 8004f6c:	08005c2c 	.word	0x08005c2c

08004f70 <__retarget_lock_init_recursive>:
 8004f70:	4770      	bx	lr

08004f72 <__retarget_lock_acquire_recursive>:
 8004f72:	4770      	bx	lr

08004f74 <__retarget_lock_release_recursive>:
 8004f74:	4770      	bx	lr
	...

08004f78 <_free_r>:
 8004f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f7a:	2900      	cmp	r1, #0
 8004f7c:	d044      	beq.n	8005008 <_free_r+0x90>
 8004f7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f82:	9001      	str	r0, [sp, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f1a1 0404 	sub.w	r4, r1, #4
 8004f8a:	bfb8      	it	lt
 8004f8c:	18e4      	addlt	r4, r4, r3
 8004f8e:	f000 f8df 	bl	8005150 <__malloc_lock>
 8004f92:	4a1e      	ldr	r2, [pc, #120]	; (800500c <_free_r+0x94>)
 8004f94:	9801      	ldr	r0, [sp, #4]
 8004f96:	6813      	ldr	r3, [r2, #0]
 8004f98:	b933      	cbnz	r3, 8004fa8 <_free_r+0x30>
 8004f9a:	6063      	str	r3, [r4, #4]
 8004f9c:	6014      	str	r4, [r2, #0]
 8004f9e:	b003      	add	sp, #12
 8004fa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fa4:	f000 b8da 	b.w	800515c <__malloc_unlock>
 8004fa8:	42a3      	cmp	r3, r4
 8004faa:	d908      	bls.n	8004fbe <_free_r+0x46>
 8004fac:	6825      	ldr	r5, [r4, #0]
 8004fae:	1961      	adds	r1, r4, r5
 8004fb0:	428b      	cmp	r3, r1
 8004fb2:	bf01      	itttt	eq
 8004fb4:	6819      	ldreq	r1, [r3, #0]
 8004fb6:	685b      	ldreq	r3, [r3, #4]
 8004fb8:	1949      	addeq	r1, r1, r5
 8004fba:	6021      	streq	r1, [r4, #0]
 8004fbc:	e7ed      	b.n	8004f9a <_free_r+0x22>
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	b10b      	cbz	r3, 8004fc8 <_free_r+0x50>
 8004fc4:	42a3      	cmp	r3, r4
 8004fc6:	d9fa      	bls.n	8004fbe <_free_r+0x46>
 8004fc8:	6811      	ldr	r1, [r2, #0]
 8004fca:	1855      	adds	r5, r2, r1
 8004fcc:	42a5      	cmp	r5, r4
 8004fce:	d10b      	bne.n	8004fe8 <_free_r+0x70>
 8004fd0:	6824      	ldr	r4, [r4, #0]
 8004fd2:	4421      	add	r1, r4
 8004fd4:	1854      	adds	r4, r2, r1
 8004fd6:	42a3      	cmp	r3, r4
 8004fd8:	6011      	str	r1, [r2, #0]
 8004fda:	d1e0      	bne.n	8004f9e <_free_r+0x26>
 8004fdc:	681c      	ldr	r4, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	6053      	str	r3, [r2, #4]
 8004fe2:	440c      	add	r4, r1
 8004fe4:	6014      	str	r4, [r2, #0]
 8004fe6:	e7da      	b.n	8004f9e <_free_r+0x26>
 8004fe8:	d902      	bls.n	8004ff0 <_free_r+0x78>
 8004fea:	230c      	movs	r3, #12
 8004fec:	6003      	str	r3, [r0, #0]
 8004fee:	e7d6      	b.n	8004f9e <_free_r+0x26>
 8004ff0:	6825      	ldr	r5, [r4, #0]
 8004ff2:	1961      	adds	r1, r4, r5
 8004ff4:	428b      	cmp	r3, r1
 8004ff6:	bf04      	itt	eq
 8004ff8:	6819      	ldreq	r1, [r3, #0]
 8004ffa:	685b      	ldreq	r3, [r3, #4]
 8004ffc:	6063      	str	r3, [r4, #4]
 8004ffe:	bf04      	itt	eq
 8005000:	1949      	addeq	r1, r1, r5
 8005002:	6021      	streq	r1, [r4, #0]
 8005004:	6054      	str	r4, [r2, #4]
 8005006:	e7ca      	b.n	8004f9e <_free_r+0x26>
 8005008:	b003      	add	sp, #12
 800500a:	bd30      	pop	{r4, r5, pc}
 800500c:	200003a4 	.word	0x200003a4

08005010 <sbrk_aligned>:
 8005010:	b570      	push	{r4, r5, r6, lr}
 8005012:	4e0e      	ldr	r6, [pc, #56]	; (800504c <sbrk_aligned+0x3c>)
 8005014:	460c      	mov	r4, r1
 8005016:	6831      	ldr	r1, [r6, #0]
 8005018:	4605      	mov	r5, r0
 800501a:	b911      	cbnz	r1, 8005022 <sbrk_aligned+0x12>
 800501c:	f000 fcaa 	bl	8005974 <_sbrk_r>
 8005020:	6030      	str	r0, [r6, #0]
 8005022:	4621      	mov	r1, r4
 8005024:	4628      	mov	r0, r5
 8005026:	f000 fca5 	bl	8005974 <_sbrk_r>
 800502a:	1c43      	adds	r3, r0, #1
 800502c:	d00a      	beq.n	8005044 <sbrk_aligned+0x34>
 800502e:	1cc4      	adds	r4, r0, #3
 8005030:	f024 0403 	bic.w	r4, r4, #3
 8005034:	42a0      	cmp	r0, r4
 8005036:	d007      	beq.n	8005048 <sbrk_aligned+0x38>
 8005038:	1a21      	subs	r1, r4, r0
 800503a:	4628      	mov	r0, r5
 800503c:	f000 fc9a 	bl	8005974 <_sbrk_r>
 8005040:	3001      	adds	r0, #1
 8005042:	d101      	bne.n	8005048 <sbrk_aligned+0x38>
 8005044:	f04f 34ff 	mov.w	r4, #4294967295
 8005048:	4620      	mov	r0, r4
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	200003a8 	.word	0x200003a8

08005050 <_malloc_r>:
 8005050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005054:	1ccd      	adds	r5, r1, #3
 8005056:	f025 0503 	bic.w	r5, r5, #3
 800505a:	3508      	adds	r5, #8
 800505c:	2d0c      	cmp	r5, #12
 800505e:	bf38      	it	cc
 8005060:	250c      	movcc	r5, #12
 8005062:	2d00      	cmp	r5, #0
 8005064:	4607      	mov	r7, r0
 8005066:	db01      	blt.n	800506c <_malloc_r+0x1c>
 8005068:	42a9      	cmp	r1, r5
 800506a:	d905      	bls.n	8005078 <_malloc_r+0x28>
 800506c:	230c      	movs	r3, #12
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	2600      	movs	r6, #0
 8005072:	4630      	mov	r0, r6
 8005074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005078:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800514c <_malloc_r+0xfc>
 800507c:	f000 f868 	bl	8005150 <__malloc_lock>
 8005080:	f8d8 3000 	ldr.w	r3, [r8]
 8005084:	461c      	mov	r4, r3
 8005086:	bb5c      	cbnz	r4, 80050e0 <_malloc_r+0x90>
 8005088:	4629      	mov	r1, r5
 800508a:	4638      	mov	r0, r7
 800508c:	f7ff ffc0 	bl	8005010 <sbrk_aligned>
 8005090:	1c43      	adds	r3, r0, #1
 8005092:	4604      	mov	r4, r0
 8005094:	d155      	bne.n	8005142 <_malloc_r+0xf2>
 8005096:	f8d8 4000 	ldr.w	r4, [r8]
 800509a:	4626      	mov	r6, r4
 800509c:	2e00      	cmp	r6, #0
 800509e:	d145      	bne.n	800512c <_malloc_r+0xdc>
 80050a0:	2c00      	cmp	r4, #0
 80050a2:	d048      	beq.n	8005136 <_malloc_r+0xe6>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	4631      	mov	r1, r6
 80050a8:	4638      	mov	r0, r7
 80050aa:	eb04 0903 	add.w	r9, r4, r3
 80050ae:	f000 fc61 	bl	8005974 <_sbrk_r>
 80050b2:	4581      	cmp	r9, r0
 80050b4:	d13f      	bne.n	8005136 <_malloc_r+0xe6>
 80050b6:	6821      	ldr	r1, [r4, #0]
 80050b8:	1a6d      	subs	r5, r5, r1
 80050ba:	4629      	mov	r1, r5
 80050bc:	4638      	mov	r0, r7
 80050be:	f7ff ffa7 	bl	8005010 <sbrk_aligned>
 80050c2:	3001      	adds	r0, #1
 80050c4:	d037      	beq.n	8005136 <_malloc_r+0xe6>
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	442b      	add	r3, r5
 80050ca:	6023      	str	r3, [r4, #0]
 80050cc:	f8d8 3000 	ldr.w	r3, [r8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d038      	beq.n	8005146 <_malloc_r+0xf6>
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	42a2      	cmp	r2, r4
 80050d8:	d12b      	bne.n	8005132 <_malloc_r+0xe2>
 80050da:	2200      	movs	r2, #0
 80050dc:	605a      	str	r2, [r3, #4]
 80050de:	e00f      	b.n	8005100 <_malloc_r+0xb0>
 80050e0:	6822      	ldr	r2, [r4, #0]
 80050e2:	1b52      	subs	r2, r2, r5
 80050e4:	d41f      	bmi.n	8005126 <_malloc_r+0xd6>
 80050e6:	2a0b      	cmp	r2, #11
 80050e8:	d917      	bls.n	800511a <_malloc_r+0xca>
 80050ea:	1961      	adds	r1, r4, r5
 80050ec:	42a3      	cmp	r3, r4
 80050ee:	6025      	str	r5, [r4, #0]
 80050f0:	bf18      	it	ne
 80050f2:	6059      	strne	r1, [r3, #4]
 80050f4:	6863      	ldr	r3, [r4, #4]
 80050f6:	bf08      	it	eq
 80050f8:	f8c8 1000 	streq.w	r1, [r8]
 80050fc:	5162      	str	r2, [r4, r5]
 80050fe:	604b      	str	r3, [r1, #4]
 8005100:	4638      	mov	r0, r7
 8005102:	f104 060b 	add.w	r6, r4, #11
 8005106:	f000 f829 	bl	800515c <__malloc_unlock>
 800510a:	f026 0607 	bic.w	r6, r6, #7
 800510e:	1d23      	adds	r3, r4, #4
 8005110:	1af2      	subs	r2, r6, r3
 8005112:	d0ae      	beq.n	8005072 <_malloc_r+0x22>
 8005114:	1b9b      	subs	r3, r3, r6
 8005116:	50a3      	str	r3, [r4, r2]
 8005118:	e7ab      	b.n	8005072 <_malloc_r+0x22>
 800511a:	42a3      	cmp	r3, r4
 800511c:	6862      	ldr	r2, [r4, #4]
 800511e:	d1dd      	bne.n	80050dc <_malloc_r+0x8c>
 8005120:	f8c8 2000 	str.w	r2, [r8]
 8005124:	e7ec      	b.n	8005100 <_malloc_r+0xb0>
 8005126:	4623      	mov	r3, r4
 8005128:	6864      	ldr	r4, [r4, #4]
 800512a:	e7ac      	b.n	8005086 <_malloc_r+0x36>
 800512c:	4634      	mov	r4, r6
 800512e:	6876      	ldr	r6, [r6, #4]
 8005130:	e7b4      	b.n	800509c <_malloc_r+0x4c>
 8005132:	4613      	mov	r3, r2
 8005134:	e7cc      	b.n	80050d0 <_malloc_r+0x80>
 8005136:	230c      	movs	r3, #12
 8005138:	603b      	str	r3, [r7, #0]
 800513a:	4638      	mov	r0, r7
 800513c:	f000 f80e 	bl	800515c <__malloc_unlock>
 8005140:	e797      	b.n	8005072 <_malloc_r+0x22>
 8005142:	6025      	str	r5, [r4, #0]
 8005144:	e7dc      	b.n	8005100 <_malloc_r+0xb0>
 8005146:	605b      	str	r3, [r3, #4]
 8005148:	deff      	udf	#255	; 0xff
 800514a:	bf00      	nop
 800514c:	200003a4 	.word	0x200003a4

08005150 <__malloc_lock>:
 8005150:	4801      	ldr	r0, [pc, #4]	; (8005158 <__malloc_lock+0x8>)
 8005152:	f7ff bf0e 	b.w	8004f72 <__retarget_lock_acquire_recursive>
 8005156:	bf00      	nop
 8005158:	200003a0 	.word	0x200003a0

0800515c <__malloc_unlock>:
 800515c:	4801      	ldr	r0, [pc, #4]	; (8005164 <__malloc_unlock+0x8>)
 800515e:	f7ff bf09 	b.w	8004f74 <__retarget_lock_release_recursive>
 8005162:	bf00      	nop
 8005164:	200003a0 	.word	0x200003a0

08005168 <__sfputc_r>:
 8005168:	6893      	ldr	r3, [r2, #8]
 800516a:	3b01      	subs	r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	b410      	push	{r4}
 8005170:	6093      	str	r3, [r2, #8]
 8005172:	da08      	bge.n	8005186 <__sfputc_r+0x1e>
 8005174:	6994      	ldr	r4, [r2, #24]
 8005176:	42a3      	cmp	r3, r4
 8005178:	db01      	blt.n	800517e <__sfputc_r+0x16>
 800517a:	290a      	cmp	r1, #10
 800517c:	d103      	bne.n	8005186 <__sfputc_r+0x1e>
 800517e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005182:	f7ff bde8 	b.w	8004d56 <__swbuf_r>
 8005186:	6813      	ldr	r3, [r2, #0]
 8005188:	1c58      	adds	r0, r3, #1
 800518a:	6010      	str	r0, [r2, #0]
 800518c:	7019      	strb	r1, [r3, #0]
 800518e:	4608      	mov	r0, r1
 8005190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005194:	4770      	bx	lr

08005196 <__sfputs_r>:
 8005196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005198:	4606      	mov	r6, r0
 800519a:	460f      	mov	r7, r1
 800519c:	4614      	mov	r4, r2
 800519e:	18d5      	adds	r5, r2, r3
 80051a0:	42ac      	cmp	r4, r5
 80051a2:	d101      	bne.n	80051a8 <__sfputs_r+0x12>
 80051a4:	2000      	movs	r0, #0
 80051a6:	e007      	b.n	80051b8 <__sfputs_r+0x22>
 80051a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ac:	463a      	mov	r2, r7
 80051ae:	4630      	mov	r0, r6
 80051b0:	f7ff ffda 	bl	8005168 <__sfputc_r>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d1f3      	bne.n	80051a0 <__sfputs_r+0xa>
 80051b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051bc <_vfiprintf_r>:
 80051bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c0:	460d      	mov	r5, r1
 80051c2:	b09d      	sub	sp, #116	; 0x74
 80051c4:	4614      	mov	r4, r2
 80051c6:	4698      	mov	r8, r3
 80051c8:	4606      	mov	r6, r0
 80051ca:	b118      	cbz	r0, 80051d4 <_vfiprintf_r+0x18>
 80051cc:	6a03      	ldr	r3, [r0, #32]
 80051ce:	b90b      	cbnz	r3, 80051d4 <_vfiprintf_r+0x18>
 80051d0:	f7ff fcda 	bl	8004b88 <__sinit>
 80051d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051d6:	07d9      	lsls	r1, r3, #31
 80051d8:	d405      	bmi.n	80051e6 <_vfiprintf_r+0x2a>
 80051da:	89ab      	ldrh	r3, [r5, #12]
 80051dc:	059a      	lsls	r2, r3, #22
 80051de:	d402      	bmi.n	80051e6 <_vfiprintf_r+0x2a>
 80051e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051e2:	f7ff fec6 	bl	8004f72 <__retarget_lock_acquire_recursive>
 80051e6:	89ab      	ldrh	r3, [r5, #12]
 80051e8:	071b      	lsls	r3, r3, #28
 80051ea:	d501      	bpl.n	80051f0 <_vfiprintf_r+0x34>
 80051ec:	692b      	ldr	r3, [r5, #16]
 80051ee:	b99b      	cbnz	r3, 8005218 <_vfiprintf_r+0x5c>
 80051f0:	4629      	mov	r1, r5
 80051f2:	4630      	mov	r0, r6
 80051f4:	f7ff fdec 	bl	8004dd0 <__swsetup_r>
 80051f8:	b170      	cbz	r0, 8005218 <_vfiprintf_r+0x5c>
 80051fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051fc:	07dc      	lsls	r4, r3, #31
 80051fe:	d504      	bpl.n	800520a <_vfiprintf_r+0x4e>
 8005200:	f04f 30ff 	mov.w	r0, #4294967295
 8005204:	b01d      	add	sp, #116	; 0x74
 8005206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800520a:	89ab      	ldrh	r3, [r5, #12]
 800520c:	0598      	lsls	r0, r3, #22
 800520e:	d4f7      	bmi.n	8005200 <_vfiprintf_r+0x44>
 8005210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005212:	f7ff feaf 	bl	8004f74 <__retarget_lock_release_recursive>
 8005216:	e7f3      	b.n	8005200 <_vfiprintf_r+0x44>
 8005218:	2300      	movs	r3, #0
 800521a:	9309      	str	r3, [sp, #36]	; 0x24
 800521c:	2320      	movs	r3, #32
 800521e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005222:	f8cd 800c 	str.w	r8, [sp, #12]
 8005226:	2330      	movs	r3, #48	; 0x30
 8005228:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80053dc <_vfiprintf_r+0x220>
 800522c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005230:	f04f 0901 	mov.w	r9, #1
 8005234:	4623      	mov	r3, r4
 8005236:	469a      	mov	sl, r3
 8005238:	f813 2b01 	ldrb.w	r2, [r3], #1
 800523c:	b10a      	cbz	r2, 8005242 <_vfiprintf_r+0x86>
 800523e:	2a25      	cmp	r2, #37	; 0x25
 8005240:	d1f9      	bne.n	8005236 <_vfiprintf_r+0x7a>
 8005242:	ebba 0b04 	subs.w	fp, sl, r4
 8005246:	d00b      	beq.n	8005260 <_vfiprintf_r+0xa4>
 8005248:	465b      	mov	r3, fp
 800524a:	4622      	mov	r2, r4
 800524c:	4629      	mov	r1, r5
 800524e:	4630      	mov	r0, r6
 8005250:	f7ff ffa1 	bl	8005196 <__sfputs_r>
 8005254:	3001      	adds	r0, #1
 8005256:	f000 80a9 	beq.w	80053ac <_vfiprintf_r+0x1f0>
 800525a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800525c:	445a      	add	r2, fp
 800525e:	9209      	str	r2, [sp, #36]	; 0x24
 8005260:	f89a 3000 	ldrb.w	r3, [sl]
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80a1 	beq.w	80053ac <_vfiprintf_r+0x1f0>
 800526a:	2300      	movs	r3, #0
 800526c:	f04f 32ff 	mov.w	r2, #4294967295
 8005270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005274:	f10a 0a01 	add.w	sl, sl, #1
 8005278:	9304      	str	r3, [sp, #16]
 800527a:	9307      	str	r3, [sp, #28]
 800527c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005280:	931a      	str	r3, [sp, #104]	; 0x68
 8005282:	4654      	mov	r4, sl
 8005284:	2205      	movs	r2, #5
 8005286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800528a:	4854      	ldr	r0, [pc, #336]	; (80053dc <_vfiprintf_r+0x220>)
 800528c:	f7fa ffa8 	bl	80001e0 <memchr>
 8005290:	9a04      	ldr	r2, [sp, #16]
 8005292:	b9d8      	cbnz	r0, 80052cc <_vfiprintf_r+0x110>
 8005294:	06d1      	lsls	r1, r2, #27
 8005296:	bf44      	itt	mi
 8005298:	2320      	movmi	r3, #32
 800529a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800529e:	0713      	lsls	r3, r2, #28
 80052a0:	bf44      	itt	mi
 80052a2:	232b      	movmi	r3, #43	; 0x2b
 80052a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052a8:	f89a 3000 	ldrb.w	r3, [sl]
 80052ac:	2b2a      	cmp	r3, #42	; 0x2a
 80052ae:	d015      	beq.n	80052dc <_vfiprintf_r+0x120>
 80052b0:	9a07      	ldr	r2, [sp, #28]
 80052b2:	4654      	mov	r4, sl
 80052b4:	2000      	movs	r0, #0
 80052b6:	f04f 0c0a 	mov.w	ip, #10
 80052ba:	4621      	mov	r1, r4
 80052bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052c0:	3b30      	subs	r3, #48	; 0x30
 80052c2:	2b09      	cmp	r3, #9
 80052c4:	d94d      	bls.n	8005362 <_vfiprintf_r+0x1a6>
 80052c6:	b1b0      	cbz	r0, 80052f6 <_vfiprintf_r+0x13a>
 80052c8:	9207      	str	r2, [sp, #28]
 80052ca:	e014      	b.n	80052f6 <_vfiprintf_r+0x13a>
 80052cc:	eba0 0308 	sub.w	r3, r0, r8
 80052d0:	fa09 f303 	lsl.w	r3, r9, r3
 80052d4:	4313      	orrs	r3, r2
 80052d6:	9304      	str	r3, [sp, #16]
 80052d8:	46a2      	mov	sl, r4
 80052da:	e7d2      	b.n	8005282 <_vfiprintf_r+0xc6>
 80052dc:	9b03      	ldr	r3, [sp, #12]
 80052de:	1d19      	adds	r1, r3, #4
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	9103      	str	r1, [sp, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	bfbb      	ittet	lt
 80052e8:	425b      	neglt	r3, r3
 80052ea:	f042 0202 	orrlt.w	r2, r2, #2
 80052ee:	9307      	strge	r3, [sp, #28]
 80052f0:	9307      	strlt	r3, [sp, #28]
 80052f2:	bfb8      	it	lt
 80052f4:	9204      	strlt	r2, [sp, #16]
 80052f6:	7823      	ldrb	r3, [r4, #0]
 80052f8:	2b2e      	cmp	r3, #46	; 0x2e
 80052fa:	d10c      	bne.n	8005316 <_vfiprintf_r+0x15a>
 80052fc:	7863      	ldrb	r3, [r4, #1]
 80052fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005300:	d134      	bne.n	800536c <_vfiprintf_r+0x1b0>
 8005302:	9b03      	ldr	r3, [sp, #12]
 8005304:	1d1a      	adds	r2, r3, #4
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	9203      	str	r2, [sp, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	bfb8      	it	lt
 800530e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005312:	3402      	adds	r4, #2
 8005314:	9305      	str	r3, [sp, #20]
 8005316:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80053ec <_vfiprintf_r+0x230>
 800531a:	7821      	ldrb	r1, [r4, #0]
 800531c:	2203      	movs	r2, #3
 800531e:	4650      	mov	r0, sl
 8005320:	f7fa ff5e 	bl	80001e0 <memchr>
 8005324:	b138      	cbz	r0, 8005336 <_vfiprintf_r+0x17a>
 8005326:	9b04      	ldr	r3, [sp, #16]
 8005328:	eba0 000a 	sub.w	r0, r0, sl
 800532c:	2240      	movs	r2, #64	; 0x40
 800532e:	4082      	lsls	r2, r0
 8005330:	4313      	orrs	r3, r2
 8005332:	3401      	adds	r4, #1
 8005334:	9304      	str	r3, [sp, #16]
 8005336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800533a:	4829      	ldr	r0, [pc, #164]	; (80053e0 <_vfiprintf_r+0x224>)
 800533c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005340:	2206      	movs	r2, #6
 8005342:	f7fa ff4d 	bl	80001e0 <memchr>
 8005346:	2800      	cmp	r0, #0
 8005348:	d03f      	beq.n	80053ca <_vfiprintf_r+0x20e>
 800534a:	4b26      	ldr	r3, [pc, #152]	; (80053e4 <_vfiprintf_r+0x228>)
 800534c:	bb1b      	cbnz	r3, 8005396 <_vfiprintf_r+0x1da>
 800534e:	9b03      	ldr	r3, [sp, #12]
 8005350:	3307      	adds	r3, #7
 8005352:	f023 0307 	bic.w	r3, r3, #7
 8005356:	3308      	adds	r3, #8
 8005358:	9303      	str	r3, [sp, #12]
 800535a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800535c:	443b      	add	r3, r7
 800535e:	9309      	str	r3, [sp, #36]	; 0x24
 8005360:	e768      	b.n	8005234 <_vfiprintf_r+0x78>
 8005362:	fb0c 3202 	mla	r2, ip, r2, r3
 8005366:	460c      	mov	r4, r1
 8005368:	2001      	movs	r0, #1
 800536a:	e7a6      	b.n	80052ba <_vfiprintf_r+0xfe>
 800536c:	2300      	movs	r3, #0
 800536e:	3401      	adds	r4, #1
 8005370:	9305      	str	r3, [sp, #20]
 8005372:	4619      	mov	r1, r3
 8005374:	f04f 0c0a 	mov.w	ip, #10
 8005378:	4620      	mov	r0, r4
 800537a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800537e:	3a30      	subs	r2, #48	; 0x30
 8005380:	2a09      	cmp	r2, #9
 8005382:	d903      	bls.n	800538c <_vfiprintf_r+0x1d0>
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0c6      	beq.n	8005316 <_vfiprintf_r+0x15a>
 8005388:	9105      	str	r1, [sp, #20]
 800538a:	e7c4      	b.n	8005316 <_vfiprintf_r+0x15a>
 800538c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005390:	4604      	mov	r4, r0
 8005392:	2301      	movs	r3, #1
 8005394:	e7f0      	b.n	8005378 <_vfiprintf_r+0x1bc>
 8005396:	ab03      	add	r3, sp, #12
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	462a      	mov	r2, r5
 800539c:	4b12      	ldr	r3, [pc, #72]	; (80053e8 <_vfiprintf_r+0x22c>)
 800539e:	a904      	add	r1, sp, #16
 80053a0:	4630      	mov	r0, r6
 80053a2:	f3af 8000 	nop.w
 80053a6:	4607      	mov	r7, r0
 80053a8:	1c78      	adds	r0, r7, #1
 80053aa:	d1d6      	bne.n	800535a <_vfiprintf_r+0x19e>
 80053ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053ae:	07d9      	lsls	r1, r3, #31
 80053b0:	d405      	bmi.n	80053be <_vfiprintf_r+0x202>
 80053b2:	89ab      	ldrh	r3, [r5, #12]
 80053b4:	059a      	lsls	r2, r3, #22
 80053b6:	d402      	bmi.n	80053be <_vfiprintf_r+0x202>
 80053b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053ba:	f7ff fddb 	bl	8004f74 <__retarget_lock_release_recursive>
 80053be:	89ab      	ldrh	r3, [r5, #12]
 80053c0:	065b      	lsls	r3, r3, #25
 80053c2:	f53f af1d 	bmi.w	8005200 <_vfiprintf_r+0x44>
 80053c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053c8:	e71c      	b.n	8005204 <_vfiprintf_r+0x48>
 80053ca:	ab03      	add	r3, sp, #12
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	462a      	mov	r2, r5
 80053d0:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <_vfiprintf_r+0x22c>)
 80053d2:	a904      	add	r1, sp, #16
 80053d4:	4630      	mov	r0, r6
 80053d6:	f000 f879 	bl	80054cc <_printf_i>
 80053da:	e7e4      	b.n	80053a6 <_vfiprintf_r+0x1ea>
 80053dc:	08005bf4 	.word	0x08005bf4
 80053e0:	08005bfe 	.word	0x08005bfe
 80053e4:	00000000 	.word	0x00000000
 80053e8:	08005197 	.word	0x08005197
 80053ec:	08005bfa 	.word	0x08005bfa

080053f0 <_printf_common>:
 80053f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053f4:	4616      	mov	r6, r2
 80053f6:	4699      	mov	r9, r3
 80053f8:	688a      	ldr	r2, [r1, #8]
 80053fa:	690b      	ldr	r3, [r1, #16]
 80053fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005400:	4293      	cmp	r3, r2
 8005402:	bfb8      	it	lt
 8005404:	4613      	movlt	r3, r2
 8005406:	6033      	str	r3, [r6, #0]
 8005408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800540c:	4607      	mov	r7, r0
 800540e:	460c      	mov	r4, r1
 8005410:	b10a      	cbz	r2, 8005416 <_printf_common+0x26>
 8005412:	3301      	adds	r3, #1
 8005414:	6033      	str	r3, [r6, #0]
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	0699      	lsls	r1, r3, #26
 800541a:	bf42      	ittt	mi
 800541c:	6833      	ldrmi	r3, [r6, #0]
 800541e:	3302      	addmi	r3, #2
 8005420:	6033      	strmi	r3, [r6, #0]
 8005422:	6825      	ldr	r5, [r4, #0]
 8005424:	f015 0506 	ands.w	r5, r5, #6
 8005428:	d106      	bne.n	8005438 <_printf_common+0x48>
 800542a:	f104 0a19 	add.w	sl, r4, #25
 800542e:	68e3      	ldr	r3, [r4, #12]
 8005430:	6832      	ldr	r2, [r6, #0]
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	42ab      	cmp	r3, r5
 8005436:	dc26      	bgt.n	8005486 <_printf_common+0x96>
 8005438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800543c:	1e13      	subs	r3, r2, #0
 800543e:	6822      	ldr	r2, [r4, #0]
 8005440:	bf18      	it	ne
 8005442:	2301      	movne	r3, #1
 8005444:	0692      	lsls	r2, r2, #26
 8005446:	d42b      	bmi.n	80054a0 <_printf_common+0xb0>
 8005448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800544c:	4649      	mov	r1, r9
 800544e:	4638      	mov	r0, r7
 8005450:	47c0      	blx	r8
 8005452:	3001      	adds	r0, #1
 8005454:	d01e      	beq.n	8005494 <_printf_common+0xa4>
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	6922      	ldr	r2, [r4, #16]
 800545a:	f003 0306 	and.w	r3, r3, #6
 800545e:	2b04      	cmp	r3, #4
 8005460:	bf02      	ittt	eq
 8005462:	68e5      	ldreq	r5, [r4, #12]
 8005464:	6833      	ldreq	r3, [r6, #0]
 8005466:	1aed      	subeq	r5, r5, r3
 8005468:	68a3      	ldr	r3, [r4, #8]
 800546a:	bf0c      	ite	eq
 800546c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005470:	2500      	movne	r5, #0
 8005472:	4293      	cmp	r3, r2
 8005474:	bfc4      	itt	gt
 8005476:	1a9b      	subgt	r3, r3, r2
 8005478:	18ed      	addgt	r5, r5, r3
 800547a:	2600      	movs	r6, #0
 800547c:	341a      	adds	r4, #26
 800547e:	42b5      	cmp	r5, r6
 8005480:	d11a      	bne.n	80054b8 <_printf_common+0xc8>
 8005482:	2000      	movs	r0, #0
 8005484:	e008      	b.n	8005498 <_printf_common+0xa8>
 8005486:	2301      	movs	r3, #1
 8005488:	4652      	mov	r2, sl
 800548a:	4649      	mov	r1, r9
 800548c:	4638      	mov	r0, r7
 800548e:	47c0      	blx	r8
 8005490:	3001      	adds	r0, #1
 8005492:	d103      	bne.n	800549c <_printf_common+0xac>
 8005494:	f04f 30ff 	mov.w	r0, #4294967295
 8005498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800549c:	3501      	adds	r5, #1
 800549e:	e7c6      	b.n	800542e <_printf_common+0x3e>
 80054a0:	18e1      	adds	r1, r4, r3
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	2030      	movs	r0, #48	; 0x30
 80054a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054aa:	4422      	add	r2, r4
 80054ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054b4:	3302      	adds	r3, #2
 80054b6:	e7c7      	b.n	8005448 <_printf_common+0x58>
 80054b8:	2301      	movs	r3, #1
 80054ba:	4622      	mov	r2, r4
 80054bc:	4649      	mov	r1, r9
 80054be:	4638      	mov	r0, r7
 80054c0:	47c0      	blx	r8
 80054c2:	3001      	adds	r0, #1
 80054c4:	d0e6      	beq.n	8005494 <_printf_common+0xa4>
 80054c6:	3601      	adds	r6, #1
 80054c8:	e7d9      	b.n	800547e <_printf_common+0x8e>
	...

080054cc <_printf_i>:
 80054cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054d0:	7e0f      	ldrb	r7, [r1, #24]
 80054d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054d4:	2f78      	cmp	r7, #120	; 0x78
 80054d6:	4691      	mov	r9, r2
 80054d8:	4680      	mov	r8, r0
 80054da:	460c      	mov	r4, r1
 80054dc:	469a      	mov	sl, r3
 80054de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054e2:	d807      	bhi.n	80054f4 <_printf_i+0x28>
 80054e4:	2f62      	cmp	r7, #98	; 0x62
 80054e6:	d80a      	bhi.n	80054fe <_printf_i+0x32>
 80054e8:	2f00      	cmp	r7, #0
 80054ea:	f000 80d4 	beq.w	8005696 <_printf_i+0x1ca>
 80054ee:	2f58      	cmp	r7, #88	; 0x58
 80054f0:	f000 80c0 	beq.w	8005674 <_printf_i+0x1a8>
 80054f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054fc:	e03a      	b.n	8005574 <_printf_i+0xa8>
 80054fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005502:	2b15      	cmp	r3, #21
 8005504:	d8f6      	bhi.n	80054f4 <_printf_i+0x28>
 8005506:	a101      	add	r1, pc, #4	; (adr r1, 800550c <_printf_i+0x40>)
 8005508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800550c:	08005565 	.word	0x08005565
 8005510:	08005579 	.word	0x08005579
 8005514:	080054f5 	.word	0x080054f5
 8005518:	080054f5 	.word	0x080054f5
 800551c:	080054f5 	.word	0x080054f5
 8005520:	080054f5 	.word	0x080054f5
 8005524:	08005579 	.word	0x08005579
 8005528:	080054f5 	.word	0x080054f5
 800552c:	080054f5 	.word	0x080054f5
 8005530:	080054f5 	.word	0x080054f5
 8005534:	080054f5 	.word	0x080054f5
 8005538:	0800567d 	.word	0x0800567d
 800553c:	080055a5 	.word	0x080055a5
 8005540:	08005637 	.word	0x08005637
 8005544:	080054f5 	.word	0x080054f5
 8005548:	080054f5 	.word	0x080054f5
 800554c:	0800569f 	.word	0x0800569f
 8005550:	080054f5 	.word	0x080054f5
 8005554:	080055a5 	.word	0x080055a5
 8005558:	080054f5 	.word	0x080054f5
 800555c:	080054f5 	.word	0x080054f5
 8005560:	0800563f 	.word	0x0800563f
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	1d1a      	adds	r2, r3, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	602a      	str	r2, [r5, #0]
 800556c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005574:	2301      	movs	r3, #1
 8005576:	e09f      	b.n	80056b8 <_printf_i+0x1ec>
 8005578:	6820      	ldr	r0, [r4, #0]
 800557a:	682b      	ldr	r3, [r5, #0]
 800557c:	0607      	lsls	r7, r0, #24
 800557e:	f103 0104 	add.w	r1, r3, #4
 8005582:	6029      	str	r1, [r5, #0]
 8005584:	d501      	bpl.n	800558a <_printf_i+0xbe>
 8005586:	681e      	ldr	r6, [r3, #0]
 8005588:	e003      	b.n	8005592 <_printf_i+0xc6>
 800558a:	0646      	lsls	r6, r0, #25
 800558c:	d5fb      	bpl.n	8005586 <_printf_i+0xba>
 800558e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005592:	2e00      	cmp	r6, #0
 8005594:	da03      	bge.n	800559e <_printf_i+0xd2>
 8005596:	232d      	movs	r3, #45	; 0x2d
 8005598:	4276      	negs	r6, r6
 800559a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800559e:	485a      	ldr	r0, [pc, #360]	; (8005708 <_printf_i+0x23c>)
 80055a0:	230a      	movs	r3, #10
 80055a2:	e012      	b.n	80055ca <_printf_i+0xfe>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	6820      	ldr	r0, [r4, #0]
 80055a8:	1d19      	adds	r1, r3, #4
 80055aa:	6029      	str	r1, [r5, #0]
 80055ac:	0605      	lsls	r5, r0, #24
 80055ae:	d501      	bpl.n	80055b4 <_printf_i+0xe8>
 80055b0:	681e      	ldr	r6, [r3, #0]
 80055b2:	e002      	b.n	80055ba <_printf_i+0xee>
 80055b4:	0641      	lsls	r1, r0, #25
 80055b6:	d5fb      	bpl.n	80055b0 <_printf_i+0xe4>
 80055b8:	881e      	ldrh	r6, [r3, #0]
 80055ba:	4853      	ldr	r0, [pc, #332]	; (8005708 <_printf_i+0x23c>)
 80055bc:	2f6f      	cmp	r7, #111	; 0x6f
 80055be:	bf0c      	ite	eq
 80055c0:	2308      	moveq	r3, #8
 80055c2:	230a      	movne	r3, #10
 80055c4:	2100      	movs	r1, #0
 80055c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055ca:	6865      	ldr	r5, [r4, #4]
 80055cc:	60a5      	str	r5, [r4, #8]
 80055ce:	2d00      	cmp	r5, #0
 80055d0:	bfa2      	ittt	ge
 80055d2:	6821      	ldrge	r1, [r4, #0]
 80055d4:	f021 0104 	bicge.w	r1, r1, #4
 80055d8:	6021      	strge	r1, [r4, #0]
 80055da:	b90e      	cbnz	r6, 80055e0 <_printf_i+0x114>
 80055dc:	2d00      	cmp	r5, #0
 80055de:	d04b      	beq.n	8005678 <_printf_i+0x1ac>
 80055e0:	4615      	mov	r5, r2
 80055e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80055e6:	fb03 6711 	mls	r7, r3, r1, r6
 80055ea:	5dc7      	ldrb	r7, [r0, r7]
 80055ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055f0:	4637      	mov	r7, r6
 80055f2:	42bb      	cmp	r3, r7
 80055f4:	460e      	mov	r6, r1
 80055f6:	d9f4      	bls.n	80055e2 <_printf_i+0x116>
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d10b      	bne.n	8005614 <_printf_i+0x148>
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	07de      	lsls	r6, r3, #31
 8005600:	d508      	bpl.n	8005614 <_printf_i+0x148>
 8005602:	6923      	ldr	r3, [r4, #16]
 8005604:	6861      	ldr	r1, [r4, #4]
 8005606:	4299      	cmp	r1, r3
 8005608:	bfde      	ittt	le
 800560a:	2330      	movle	r3, #48	; 0x30
 800560c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005610:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005614:	1b52      	subs	r2, r2, r5
 8005616:	6122      	str	r2, [r4, #16]
 8005618:	f8cd a000 	str.w	sl, [sp]
 800561c:	464b      	mov	r3, r9
 800561e:	aa03      	add	r2, sp, #12
 8005620:	4621      	mov	r1, r4
 8005622:	4640      	mov	r0, r8
 8005624:	f7ff fee4 	bl	80053f0 <_printf_common>
 8005628:	3001      	adds	r0, #1
 800562a:	d14a      	bne.n	80056c2 <_printf_i+0x1f6>
 800562c:	f04f 30ff 	mov.w	r0, #4294967295
 8005630:	b004      	add	sp, #16
 8005632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	f043 0320 	orr.w	r3, r3, #32
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	4833      	ldr	r0, [pc, #204]	; (800570c <_printf_i+0x240>)
 8005640:	2778      	movs	r7, #120	; 0x78
 8005642:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	6829      	ldr	r1, [r5, #0]
 800564a:	061f      	lsls	r7, r3, #24
 800564c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005650:	d402      	bmi.n	8005658 <_printf_i+0x18c>
 8005652:	065f      	lsls	r7, r3, #25
 8005654:	bf48      	it	mi
 8005656:	b2b6      	uxthmi	r6, r6
 8005658:	07df      	lsls	r7, r3, #31
 800565a:	bf48      	it	mi
 800565c:	f043 0320 	orrmi.w	r3, r3, #32
 8005660:	6029      	str	r1, [r5, #0]
 8005662:	bf48      	it	mi
 8005664:	6023      	strmi	r3, [r4, #0]
 8005666:	b91e      	cbnz	r6, 8005670 <_printf_i+0x1a4>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	f023 0320 	bic.w	r3, r3, #32
 800566e:	6023      	str	r3, [r4, #0]
 8005670:	2310      	movs	r3, #16
 8005672:	e7a7      	b.n	80055c4 <_printf_i+0xf8>
 8005674:	4824      	ldr	r0, [pc, #144]	; (8005708 <_printf_i+0x23c>)
 8005676:	e7e4      	b.n	8005642 <_printf_i+0x176>
 8005678:	4615      	mov	r5, r2
 800567a:	e7bd      	b.n	80055f8 <_printf_i+0x12c>
 800567c:	682b      	ldr	r3, [r5, #0]
 800567e:	6826      	ldr	r6, [r4, #0]
 8005680:	6961      	ldr	r1, [r4, #20]
 8005682:	1d18      	adds	r0, r3, #4
 8005684:	6028      	str	r0, [r5, #0]
 8005686:	0635      	lsls	r5, r6, #24
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	d501      	bpl.n	8005690 <_printf_i+0x1c4>
 800568c:	6019      	str	r1, [r3, #0]
 800568e:	e002      	b.n	8005696 <_printf_i+0x1ca>
 8005690:	0670      	lsls	r0, r6, #25
 8005692:	d5fb      	bpl.n	800568c <_printf_i+0x1c0>
 8005694:	8019      	strh	r1, [r3, #0]
 8005696:	2300      	movs	r3, #0
 8005698:	6123      	str	r3, [r4, #16]
 800569a:	4615      	mov	r5, r2
 800569c:	e7bc      	b.n	8005618 <_printf_i+0x14c>
 800569e:	682b      	ldr	r3, [r5, #0]
 80056a0:	1d1a      	adds	r2, r3, #4
 80056a2:	602a      	str	r2, [r5, #0]
 80056a4:	681d      	ldr	r5, [r3, #0]
 80056a6:	6862      	ldr	r2, [r4, #4]
 80056a8:	2100      	movs	r1, #0
 80056aa:	4628      	mov	r0, r5
 80056ac:	f7fa fd98 	bl	80001e0 <memchr>
 80056b0:	b108      	cbz	r0, 80056b6 <_printf_i+0x1ea>
 80056b2:	1b40      	subs	r0, r0, r5
 80056b4:	6060      	str	r0, [r4, #4]
 80056b6:	6863      	ldr	r3, [r4, #4]
 80056b8:	6123      	str	r3, [r4, #16]
 80056ba:	2300      	movs	r3, #0
 80056bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056c0:	e7aa      	b.n	8005618 <_printf_i+0x14c>
 80056c2:	6923      	ldr	r3, [r4, #16]
 80056c4:	462a      	mov	r2, r5
 80056c6:	4649      	mov	r1, r9
 80056c8:	4640      	mov	r0, r8
 80056ca:	47d0      	blx	sl
 80056cc:	3001      	adds	r0, #1
 80056ce:	d0ad      	beq.n	800562c <_printf_i+0x160>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	079b      	lsls	r3, r3, #30
 80056d4:	d413      	bmi.n	80056fe <_printf_i+0x232>
 80056d6:	68e0      	ldr	r0, [r4, #12]
 80056d8:	9b03      	ldr	r3, [sp, #12]
 80056da:	4298      	cmp	r0, r3
 80056dc:	bfb8      	it	lt
 80056de:	4618      	movlt	r0, r3
 80056e0:	e7a6      	b.n	8005630 <_printf_i+0x164>
 80056e2:	2301      	movs	r3, #1
 80056e4:	4632      	mov	r2, r6
 80056e6:	4649      	mov	r1, r9
 80056e8:	4640      	mov	r0, r8
 80056ea:	47d0      	blx	sl
 80056ec:	3001      	adds	r0, #1
 80056ee:	d09d      	beq.n	800562c <_printf_i+0x160>
 80056f0:	3501      	adds	r5, #1
 80056f2:	68e3      	ldr	r3, [r4, #12]
 80056f4:	9903      	ldr	r1, [sp, #12]
 80056f6:	1a5b      	subs	r3, r3, r1
 80056f8:	42ab      	cmp	r3, r5
 80056fa:	dcf2      	bgt.n	80056e2 <_printf_i+0x216>
 80056fc:	e7eb      	b.n	80056d6 <_printf_i+0x20a>
 80056fe:	2500      	movs	r5, #0
 8005700:	f104 0619 	add.w	r6, r4, #25
 8005704:	e7f5      	b.n	80056f2 <_printf_i+0x226>
 8005706:	bf00      	nop
 8005708:	08005c05 	.word	0x08005c05
 800570c:	08005c16 	.word	0x08005c16

08005710 <__sflush_r>:
 8005710:	898a      	ldrh	r2, [r1, #12]
 8005712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005716:	4605      	mov	r5, r0
 8005718:	0710      	lsls	r0, r2, #28
 800571a:	460c      	mov	r4, r1
 800571c:	d458      	bmi.n	80057d0 <__sflush_r+0xc0>
 800571e:	684b      	ldr	r3, [r1, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	dc05      	bgt.n	8005730 <__sflush_r+0x20>
 8005724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005726:	2b00      	cmp	r3, #0
 8005728:	dc02      	bgt.n	8005730 <__sflush_r+0x20>
 800572a:	2000      	movs	r0, #0
 800572c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005732:	2e00      	cmp	r6, #0
 8005734:	d0f9      	beq.n	800572a <__sflush_r+0x1a>
 8005736:	2300      	movs	r3, #0
 8005738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800573c:	682f      	ldr	r7, [r5, #0]
 800573e:	6a21      	ldr	r1, [r4, #32]
 8005740:	602b      	str	r3, [r5, #0]
 8005742:	d032      	beq.n	80057aa <__sflush_r+0x9a>
 8005744:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005746:	89a3      	ldrh	r3, [r4, #12]
 8005748:	075a      	lsls	r2, r3, #29
 800574a:	d505      	bpl.n	8005758 <__sflush_r+0x48>
 800574c:	6863      	ldr	r3, [r4, #4]
 800574e:	1ac0      	subs	r0, r0, r3
 8005750:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005752:	b10b      	cbz	r3, 8005758 <__sflush_r+0x48>
 8005754:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005756:	1ac0      	subs	r0, r0, r3
 8005758:	2300      	movs	r3, #0
 800575a:	4602      	mov	r2, r0
 800575c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800575e:	6a21      	ldr	r1, [r4, #32]
 8005760:	4628      	mov	r0, r5
 8005762:	47b0      	blx	r6
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	89a3      	ldrh	r3, [r4, #12]
 8005768:	d106      	bne.n	8005778 <__sflush_r+0x68>
 800576a:	6829      	ldr	r1, [r5, #0]
 800576c:	291d      	cmp	r1, #29
 800576e:	d82b      	bhi.n	80057c8 <__sflush_r+0xb8>
 8005770:	4a29      	ldr	r2, [pc, #164]	; (8005818 <__sflush_r+0x108>)
 8005772:	410a      	asrs	r2, r1
 8005774:	07d6      	lsls	r6, r2, #31
 8005776:	d427      	bmi.n	80057c8 <__sflush_r+0xb8>
 8005778:	2200      	movs	r2, #0
 800577a:	6062      	str	r2, [r4, #4]
 800577c:	04d9      	lsls	r1, r3, #19
 800577e:	6922      	ldr	r2, [r4, #16]
 8005780:	6022      	str	r2, [r4, #0]
 8005782:	d504      	bpl.n	800578e <__sflush_r+0x7e>
 8005784:	1c42      	adds	r2, r0, #1
 8005786:	d101      	bne.n	800578c <__sflush_r+0x7c>
 8005788:	682b      	ldr	r3, [r5, #0]
 800578a:	b903      	cbnz	r3, 800578e <__sflush_r+0x7e>
 800578c:	6560      	str	r0, [r4, #84]	; 0x54
 800578e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005790:	602f      	str	r7, [r5, #0]
 8005792:	2900      	cmp	r1, #0
 8005794:	d0c9      	beq.n	800572a <__sflush_r+0x1a>
 8005796:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800579a:	4299      	cmp	r1, r3
 800579c:	d002      	beq.n	80057a4 <__sflush_r+0x94>
 800579e:	4628      	mov	r0, r5
 80057a0:	f7ff fbea 	bl	8004f78 <_free_r>
 80057a4:	2000      	movs	r0, #0
 80057a6:	6360      	str	r0, [r4, #52]	; 0x34
 80057a8:	e7c0      	b.n	800572c <__sflush_r+0x1c>
 80057aa:	2301      	movs	r3, #1
 80057ac:	4628      	mov	r0, r5
 80057ae:	47b0      	blx	r6
 80057b0:	1c41      	adds	r1, r0, #1
 80057b2:	d1c8      	bne.n	8005746 <__sflush_r+0x36>
 80057b4:	682b      	ldr	r3, [r5, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0c5      	beq.n	8005746 <__sflush_r+0x36>
 80057ba:	2b1d      	cmp	r3, #29
 80057bc:	d001      	beq.n	80057c2 <__sflush_r+0xb2>
 80057be:	2b16      	cmp	r3, #22
 80057c0:	d101      	bne.n	80057c6 <__sflush_r+0xb6>
 80057c2:	602f      	str	r7, [r5, #0]
 80057c4:	e7b1      	b.n	800572a <__sflush_r+0x1a>
 80057c6:	89a3      	ldrh	r3, [r4, #12]
 80057c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057cc:	81a3      	strh	r3, [r4, #12]
 80057ce:	e7ad      	b.n	800572c <__sflush_r+0x1c>
 80057d0:	690f      	ldr	r7, [r1, #16]
 80057d2:	2f00      	cmp	r7, #0
 80057d4:	d0a9      	beq.n	800572a <__sflush_r+0x1a>
 80057d6:	0793      	lsls	r3, r2, #30
 80057d8:	680e      	ldr	r6, [r1, #0]
 80057da:	bf08      	it	eq
 80057dc:	694b      	ldreq	r3, [r1, #20]
 80057de:	600f      	str	r7, [r1, #0]
 80057e0:	bf18      	it	ne
 80057e2:	2300      	movne	r3, #0
 80057e4:	eba6 0807 	sub.w	r8, r6, r7
 80057e8:	608b      	str	r3, [r1, #8]
 80057ea:	f1b8 0f00 	cmp.w	r8, #0
 80057ee:	dd9c      	ble.n	800572a <__sflush_r+0x1a>
 80057f0:	6a21      	ldr	r1, [r4, #32]
 80057f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057f4:	4643      	mov	r3, r8
 80057f6:	463a      	mov	r2, r7
 80057f8:	4628      	mov	r0, r5
 80057fa:	47b0      	blx	r6
 80057fc:	2800      	cmp	r0, #0
 80057fe:	dc06      	bgt.n	800580e <__sflush_r+0xfe>
 8005800:	89a3      	ldrh	r3, [r4, #12]
 8005802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005806:	81a3      	strh	r3, [r4, #12]
 8005808:	f04f 30ff 	mov.w	r0, #4294967295
 800580c:	e78e      	b.n	800572c <__sflush_r+0x1c>
 800580e:	4407      	add	r7, r0
 8005810:	eba8 0800 	sub.w	r8, r8, r0
 8005814:	e7e9      	b.n	80057ea <__sflush_r+0xda>
 8005816:	bf00      	nop
 8005818:	dfbffffe 	.word	0xdfbffffe

0800581c <_fflush_r>:
 800581c:	b538      	push	{r3, r4, r5, lr}
 800581e:	690b      	ldr	r3, [r1, #16]
 8005820:	4605      	mov	r5, r0
 8005822:	460c      	mov	r4, r1
 8005824:	b913      	cbnz	r3, 800582c <_fflush_r+0x10>
 8005826:	2500      	movs	r5, #0
 8005828:	4628      	mov	r0, r5
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	b118      	cbz	r0, 8005836 <_fflush_r+0x1a>
 800582e:	6a03      	ldr	r3, [r0, #32]
 8005830:	b90b      	cbnz	r3, 8005836 <_fflush_r+0x1a>
 8005832:	f7ff f9a9 	bl	8004b88 <__sinit>
 8005836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f3      	beq.n	8005826 <_fflush_r+0xa>
 800583e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005840:	07d0      	lsls	r0, r2, #31
 8005842:	d404      	bmi.n	800584e <_fflush_r+0x32>
 8005844:	0599      	lsls	r1, r3, #22
 8005846:	d402      	bmi.n	800584e <_fflush_r+0x32>
 8005848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800584a:	f7ff fb92 	bl	8004f72 <__retarget_lock_acquire_recursive>
 800584e:	4628      	mov	r0, r5
 8005850:	4621      	mov	r1, r4
 8005852:	f7ff ff5d 	bl	8005710 <__sflush_r>
 8005856:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005858:	07da      	lsls	r2, r3, #31
 800585a:	4605      	mov	r5, r0
 800585c:	d4e4      	bmi.n	8005828 <_fflush_r+0xc>
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	059b      	lsls	r3, r3, #22
 8005862:	d4e1      	bmi.n	8005828 <_fflush_r+0xc>
 8005864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005866:	f7ff fb85 	bl	8004f74 <__retarget_lock_release_recursive>
 800586a:	e7dd      	b.n	8005828 <_fflush_r+0xc>

0800586c <__swhatbuf_r>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	460c      	mov	r4, r1
 8005870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005874:	2900      	cmp	r1, #0
 8005876:	b096      	sub	sp, #88	; 0x58
 8005878:	4615      	mov	r5, r2
 800587a:	461e      	mov	r6, r3
 800587c:	da0d      	bge.n	800589a <__swhatbuf_r+0x2e>
 800587e:	89a3      	ldrh	r3, [r4, #12]
 8005880:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005884:	f04f 0100 	mov.w	r1, #0
 8005888:	bf0c      	ite	eq
 800588a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800588e:	2340      	movne	r3, #64	; 0x40
 8005890:	2000      	movs	r0, #0
 8005892:	6031      	str	r1, [r6, #0]
 8005894:	602b      	str	r3, [r5, #0]
 8005896:	b016      	add	sp, #88	; 0x58
 8005898:	bd70      	pop	{r4, r5, r6, pc}
 800589a:	466a      	mov	r2, sp
 800589c:	f000 f848 	bl	8005930 <_fstat_r>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	dbec      	blt.n	800587e <__swhatbuf_r+0x12>
 80058a4:	9901      	ldr	r1, [sp, #4]
 80058a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80058aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80058ae:	4259      	negs	r1, r3
 80058b0:	4159      	adcs	r1, r3
 80058b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058b6:	e7eb      	b.n	8005890 <__swhatbuf_r+0x24>

080058b8 <__smakebuf_r>:
 80058b8:	898b      	ldrh	r3, [r1, #12]
 80058ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058bc:	079d      	lsls	r5, r3, #30
 80058be:	4606      	mov	r6, r0
 80058c0:	460c      	mov	r4, r1
 80058c2:	d507      	bpl.n	80058d4 <__smakebuf_r+0x1c>
 80058c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058c8:	6023      	str	r3, [r4, #0]
 80058ca:	6123      	str	r3, [r4, #16]
 80058cc:	2301      	movs	r3, #1
 80058ce:	6163      	str	r3, [r4, #20]
 80058d0:	b002      	add	sp, #8
 80058d2:	bd70      	pop	{r4, r5, r6, pc}
 80058d4:	ab01      	add	r3, sp, #4
 80058d6:	466a      	mov	r2, sp
 80058d8:	f7ff ffc8 	bl	800586c <__swhatbuf_r>
 80058dc:	9900      	ldr	r1, [sp, #0]
 80058de:	4605      	mov	r5, r0
 80058e0:	4630      	mov	r0, r6
 80058e2:	f7ff fbb5 	bl	8005050 <_malloc_r>
 80058e6:	b948      	cbnz	r0, 80058fc <__smakebuf_r+0x44>
 80058e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ec:	059a      	lsls	r2, r3, #22
 80058ee:	d4ef      	bmi.n	80058d0 <__smakebuf_r+0x18>
 80058f0:	f023 0303 	bic.w	r3, r3, #3
 80058f4:	f043 0302 	orr.w	r3, r3, #2
 80058f8:	81a3      	strh	r3, [r4, #12]
 80058fa:	e7e3      	b.n	80058c4 <__smakebuf_r+0xc>
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	6020      	str	r0, [r4, #0]
 8005900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005904:	81a3      	strh	r3, [r4, #12]
 8005906:	9b00      	ldr	r3, [sp, #0]
 8005908:	6163      	str	r3, [r4, #20]
 800590a:	9b01      	ldr	r3, [sp, #4]
 800590c:	6120      	str	r0, [r4, #16]
 800590e:	b15b      	cbz	r3, 8005928 <__smakebuf_r+0x70>
 8005910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005914:	4630      	mov	r0, r6
 8005916:	f000 f81d 	bl	8005954 <_isatty_r>
 800591a:	b128      	cbz	r0, 8005928 <__smakebuf_r+0x70>
 800591c:	89a3      	ldrh	r3, [r4, #12]
 800591e:	f023 0303 	bic.w	r3, r3, #3
 8005922:	f043 0301 	orr.w	r3, r3, #1
 8005926:	81a3      	strh	r3, [r4, #12]
 8005928:	89a3      	ldrh	r3, [r4, #12]
 800592a:	431d      	orrs	r5, r3
 800592c:	81a5      	strh	r5, [r4, #12]
 800592e:	e7cf      	b.n	80058d0 <__smakebuf_r+0x18>

08005930 <_fstat_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4d07      	ldr	r5, [pc, #28]	; (8005950 <_fstat_r+0x20>)
 8005934:	2300      	movs	r3, #0
 8005936:	4604      	mov	r4, r0
 8005938:	4608      	mov	r0, r1
 800593a:	4611      	mov	r1, r2
 800593c:	602b      	str	r3, [r5, #0]
 800593e:	f7fb faa8 	bl	8000e92 <_fstat>
 8005942:	1c43      	adds	r3, r0, #1
 8005944:	d102      	bne.n	800594c <_fstat_r+0x1c>
 8005946:	682b      	ldr	r3, [r5, #0]
 8005948:	b103      	cbz	r3, 800594c <_fstat_r+0x1c>
 800594a:	6023      	str	r3, [r4, #0]
 800594c:	bd38      	pop	{r3, r4, r5, pc}
 800594e:	bf00      	nop
 8005950:	2000039c 	.word	0x2000039c

08005954 <_isatty_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4d06      	ldr	r5, [pc, #24]	; (8005970 <_isatty_r+0x1c>)
 8005958:	2300      	movs	r3, #0
 800595a:	4604      	mov	r4, r0
 800595c:	4608      	mov	r0, r1
 800595e:	602b      	str	r3, [r5, #0]
 8005960:	f7fb faa7 	bl	8000eb2 <_isatty>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d102      	bne.n	800596e <_isatty_r+0x1a>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	b103      	cbz	r3, 800596e <_isatty_r+0x1a>
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	2000039c 	.word	0x2000039c

08005974 <_sbrk_r>:
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	4d06      	ldr	r5, [pc, #24]	; (8005990 <_sbrk_r+0x1c>)
 8005978:	2300      	movs	r3, #0
 800597a:	4604      	mov	r4, r0
 800597c:	4608      	mov	r0, r1
 800597e:	602b      	str	r3, [r5, #0]
 8005980:	f7fb fab0 	bl	8000ee4 <_sbrk>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d102      	bne.n	800598e <_sbrk_r+0x1a>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	b103      	cbz	r3, 800598e <_sbrk_r+0x1a>
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	2000039c 	.word	0x2000039c

08005994 <_init>:
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	bf00      	nop
 8005998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599a:	bc08      	pop	{r3}
 800599c:	469e      	mov	lr, r3
 800599e:	4770      	bx	lr

080059a0 <_fini>:
 80059a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a2:	bf00      	nop
 80059a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059a6:	bc08      	pop	{r3}
 80059a8:	469e      	mov	lr, r3
 80059aa:	4770      	bx	lr
