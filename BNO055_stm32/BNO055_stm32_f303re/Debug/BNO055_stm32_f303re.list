
BNO055_stm32_f303re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cb4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08005e54  08005e54  00015e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e8  080060e8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080060e8  080060e8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060e8  080060e8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080060f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000334  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ac  200003ac  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000129fe  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b36  00000000  00000000  00032ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001078  00000000  00000000  00035620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cca  00000000  00000000  00036698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023795  00000000  00000000  00037362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017b75  00000000  00000000  0005aaf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce68e  00000000  00000000  0007266c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004d64  00000000  00000000  00140cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00145a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e3c 	.word	0x08005e3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005e3c 	.word	0x08005e3c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <bno055_set_i2c_handler>:
    .mag_id = 0,
    .gyr_id = 0,
    .bl_rev_id = 0
};

void bno055_set_i2c_handler(I2C_HandleTypeDef* hi2c){
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
    i2c_dev = hi2c;
 8000298:	4a04      	ldr	r2, [pc, #16]	; (80002ac <bno055_set_i2c_handler+0x1c>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	6013      	str	r3, [r2, #0]
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000094 	.word	0x20000094

080002b0 <bno055_writeData>:

uint8_t bno055_writeData(uint8_t* txdata) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af02      	add	r7, sp, #8
 80002b6:	6078      	str	r0, [r7, #4]
    uint8_t status;
    status = HAL_I2C_Master_Transmit(i2c_dev, BNO055_I2C_ADDR_LO << 1, txdata, sizeof(txdata), 10);
 80002b8:	4b5a      	ldr	r3, [pc, #360]	; (8000424 <bno055_writeData+0x174>)
 80002ba:	6818      	ldr	r0, [r3, #0]
 80002bc:	230a      	movs	r3, #10
 80002be:	9300      	str	r3, [sp, #0]
 80002c0:	2304      	movs	r3, #4
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	2150      	movs	r1, #80	; 0x50
 80002c6:	f001 fcad 	bl	8001c24 <HAL_I2C_Master_Transmit>
 80002ca:	4603      	mov	r3, r0
 80002cc:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 80002ce:	7dfb      	ldrb	r3, [r7, #23]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d101      	bne.n	80002d8 <bno055_writeData+0x28>
        return 0;
 80002d4:	2300      	movs	r3, #0
 80002d6:	e0a1      	b.n	800041c <bno055_writeData+0x16c>
    }

    if (status == HAL_ERROR) {
 80002d8:	7dfb      	ldrb	r3, [r7, #23]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d103      	bne.n	80002e6 <bno055_writeData+0x36>
        printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80002de:	4852      	ldr	r0, [pc, #328]	; (8000428 <bno055_writeData+0x178>)
 80002e0:	f004 fd56 	bl	8004d90 <puts>
 80002e4:	e012      	b.n	800030c <bno055_writeData+0x5c>
    } else if (status == HAL_TIMEOUT) {
 80002e6:	7dfb      	ldrb	r3, [r7, #23]
 80002e8:	2b03      	cmp	r3, #3
 80002ea:	d103      	bne.n	80002f4 <bno055_writeData+0x44>
        printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80002ec:	484f      	ldr	r0, [pc, #316]	; (800042c <bno055_writeData+0x17c>)
 80002ee:	f004 fd4f 	bl	8004d90 <puts>
 80002f2:	e00b      	b.n	800030c <bno055_writeData+0x5c>
    } else if (status == HAL_BUSY) {
 80002f4:	7dfb      	ldrb	r3, [r7, #23]
 80002f6:	2b02      	cmp	r3, #2
 80002f8:	d103      	bne.n	8000302 <bno055_writeData+0x52>
        printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80002fa:	484d      	ldr	r0, [pc, #308]	; (8000430 <bno055_writeData+0x180>)
 80002fc:	f004 fd48 	bl	8004d90 <puts>
 8000300:	e004      	b.n	800030c <bno055_writeData+0x5c>
    } else {
        printf("Unknown status data %d", status);
 8000302:	7dfb      	ldrb	r3, [r7, #23]
 8000304:	4619      	mov	r1, r3
 8000306:	484b      	ldr	r0, [pc, #300]	; (8000434 <bno055_writeData+0x184>)
 8000308:	f004 fcdc 	bl	8004cc4 <iprintf>
    }

    uint32_t error = HAL_I2C_GetError(i2c_dev);
 800030c:	4b45      	ldr	r3, [pc, #276]	; (8000424 <bno055_writeData+0x174>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4618      	mov	r0, r3
 8000312:	f001 fe7f 	bl	8002014 <HAL_I2C_GetError>
 8000316:	6138      	str	r0, [r7, #16]
    if (error == HAL_I2C_ERROR_NONE) {
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d101      	bne.n	8000322 <bno055_writeData+0x72>
        return 1;
 800031e:	2301      	movs	r3, #1
 8000320:	e07c      	b.n	800041c <bno055_writeData+0x16c>
    } else if (error == HAL_I2C_ERROR_BERR) {
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d103      	bne.n	8000330 <bno055_writeData+0x80>
        printf("HAL_I2C_ERROR_BERR\r\n");
 8000328:	4843      	ldr	r0, [pc, #268]	; (8000438 <bno055_writeData+0x188>)
 800032a:	f004 fd31 	bl	8004d90 <puts>
 800032e:	e021      	b.n	8000374 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_ARLO) {
 8000330:	693b      	ldr	r3, [r7, #16]
 8000332:	2b02      	cmp	r3, #2
 8000334:	d103      	bne.n	800033e <bno055_writeData+0x8e>
        printf("HAL_I2C_ERROR_ARLO\r\n");
 8000336:	4841      	ldr	r0, [pc, #260]	; (800043c <bno055_writeData+0x18c>)
 8000338:	f004 fd2a 	bl	8004d90 <puts>
 800033c:	e01a      	b.n	8000374 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_AF) {
 800033e:	693b      	ldr	r3, [r7, #16]
 8000340:	2b04      	cmp	r3, #4
 8000342:	d103      	bne.n	800034c <bno055_writeData+0x9c>
        printf("HAL_I2C_ERROR_AF\r\n");
 8000344:	483e      	ldr	r0, [pc, #248]	; (8000440 <bno055_writeData+0x190>)
 8000346:	f004 fd23 	bl	8004d90 <puts>
 800034a:	e013      	b.n	8000374 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_OVR) {
 800034c:	693b      	ldr	r3, [r7, #16]
 800034e:	2b08      	cmp	r3, #8
 8000350:	d103      	bne.n	800035a <bno055_writeData+0xaa>
        printf("HAL_I2C_ERROR_OVR\r\n");
 8000352:	483c      	ldr	r0, [pc, #240]	; (8000444 <bno055_writeData+0x194>)
 8000354:	f004 fd1c 	bl	8004d90 <puts>
 8000358:	e00c      	b.n	8000374 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_DMA) {
 800035a:	693b      	ldr	r3, [r7, #16]
 800035c:	2b10      	cmp	r3, #16
 800035e:	d103      	bne.n	8000368 <bno055_writeData+0xb8>
        printf("HAL_I2C_ERROR_DMA\r\n");
 8000360:	4839      	ldr	r0, [pc, #228]	; (8000448 <bno055_writeData+0x198>)
 8000362:	f004 fd15 	bl	8004d90 <puts>
 8000366:	e005      	b.n	8000374 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000368:	693b      	ldr	r3, [r7, #16]
 800036a:	2b20      	cmp	r3, #32
 800036c:	d102      	bne.n	8000374 <bno055_writeData+0xc4>
        printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800036e:	4837      	ldr	r0, [pc, #220]	; (800044c <bno055_writeData+0x19c>)
 8000370:	f004 fd0e 	bl	8004d90 <puts>
    }

    HAL_I2C_StateTypeDef state = HAL_I2C_GetState(i2c_dev);
 8000374:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <bno055_writeData+0x174>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4618      	mov	r0, r3
 800037a:	f001 fe3d 	bl	8001ff8 <HAL_I2C_GetState>
 800037e:	4603      	mov	r3, r0
 8000380:	73fb      	strb	r3, [r7, #15]
    if (state == HAL_I2C_STATE_RESET) {
 8000382:	7bfb      	ldrb	r3, [r7, #15]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d103      	bne.n	8000390 <bno055_writeData+0xe0>
        printf("HAL_I2C_STATE_RESET\r\n");
 8000388:	4831      	ldr	r0, [pc, #196]	; (8000450 <bno055_writeData+0x1a0>)
 800038a:	f004 fd01 	bl	8004d90 <puts>
 800038e:	e044      	b.n	800041a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_READY) {
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	2b20      	cmp	r3, #32
 8000394:	d103      	bne.n	800039e <bno055_writeData+0xee>
        printf("HAL_I2C_STATE_RESET\r\n");
 8000396:	482e      	ldr	r0, [pc, #184]	; (8000450 <bno055_writeData+0x1a0>)
 8000398:	f004 fcfa 	bl	8004d90 <puts>
 800039c:	e03d      	b.n	800041a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY) {
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	2b24      	cmp	r3, #36	; 0x24
 80003a2:	d103      	bne.n	80003ac <bno055_writeData+0xfc>
        printf("HAL_I2C_STATE_BUSY\r\n");
 80003a4:	482b      	ldr	r0, [pc, #172]	; (8000454 <bno055_writeData+0x1a4>)
 80003a6:	f004 fcf3 	bl	8004d90 <puts>
 80003aa:	e036      	b.n	800041a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	2b21      	cmp	r3, #33	; 0x21
 80003b0:	d103      	bne.n	80003ba <bno055_writeData+0x10a>
        printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80003b2:	4829      	ldr	r0, [pc, #164]	; (8000458 <bno055_writeData+0x1a8>)
 80003b4:	f004 fcec 	bl	8004d90 <puts>
 80003b8:	e02f      	b.n	800041a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	2b22      	cmp	r3, #34	; 0x22
 80003be:	d103      	bne.n	80003c8 <bno055_writeData+0x118>
        printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80003c0:	4826      	ldr	r0, [pc, #152]	; (800045c <bno055_writeData+0x1ac>)
 80003c2:	f004 fce5 	bl	8004d90 <puts>
 80003c6:	e028      	b.n	800041a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_LISTEN) {
 80003c8:	7bfb      	ldrb	r3, [r7, #15]
 80003ca:	2b28      	cmp	r3, #40	; 0x28
 80003cc:	d103      	bne.n	80003d6 <bno055_writeData+0x126>
        printf("HAL_I2C_STATE_LISTEN\r\n");
 80003ce:	4824      	ldr	r0, [pc, #144]	; (8000460 <bno055_writeData+0x1b0>)
 80003d0:	f004 fcde 	bl	8004d90 <puts>
 80003d4:	e021      	b.n	800041a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
 80003d8:	2b29      	cmp	r3, #41	; 0x29
 80003da:	d103      	bne.n	80003e4 <bno055_writeData+0x134>
        printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80003dc:	4821      	ldr	r0, [pc, #132]	; (8000464 <bno055_writeData+0x1b4>)
 80003de:	f004 fcd7 	bl	8004d90 <puts>
 80003e2:	e01a      	b.n	800041a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80003e4:	7bfb      	ldrb	r3, [r7, #15]
 80003e6:	2b2a      	cmp	r3, #42	; 0x2a
 80003e8:	d103      	bne.n	80003f2 <bno055_writeData+0x142>
        printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80003ea:	481f      	ldr	r0, [pc, #124]	; (8000468 <bno055_writeData+0x1b8>)
 80003ec:	f004 fcd0 	bl	8004d90 <puts>
 80003f0:	e013      	b.n	800041a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_ABORT) {
 80003f2:	7bfb      	ldrb	r3, [r7, #15]
 80003f4:	2b60      	cmp	r3, #96	; 0x60
 80003f6:	d103      	bne.n	8000400 <bno055_writeData+0x150>
        printf("HAL_I2C_STATE_ABORT\r\n");
 80003f8:	481c      	ldr	r0, [pc, #112]	; (800046c <bno055_writeData+0x1bc>)
 80003fa:	f004 fcc9 	bl	8004d90 <puts>
 80003fe:	e00c      	b.n	800041a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000400:	7bfb      	ldrb	r3, [r7, #15]
 8000402:	2ba0      	cmp	r3, #160	; 0xa0
 8000404:	d103      	bne.n	800040e <bno055_writeData+0x15e>
        printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000406:	481a      	ldr	r0, [pc, #104]	; (8000470 <bno055_writeData+0x1c0>)
 8000408:	f004 fcc2 	bl	8004d90 <puts>
 800040c:	e005      	b.n	800041a <bno055_writeData+0x16a>
    } else if (state == HAL_I2C_STATE_ERROR) {
 800040e:	7bfb      	ldrb	r3, [r7, #15]
 8000410:	2be0      	cmp	r3, #224	; 0xe0
 8000412:	d102      	bne.n	800041a <bno055_writeData+0x16a>
        printf("HAL_I2C_STATE_ERROR\r\n");
 8000414:	4817      	ldr	r0, [pc, #92]	; (8000474 <bno055_writeData+0x1c4>)
 8000416:	f004 fcbb 	bl	8004d90 <puts>
    }
    return 1;
 800041a:	2301      	movs	r3, #1
}
 800041c:	4618      	mov	r0, r3
 800041e:	3718      	adds	r7, #24
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000094 	.word	0x20000094
 8000428:	08005e54 	.word	0x08005e54
 800042c:	08005e78 	.word	0x08005e78
 8000430:	08005ea0 	.word	0x08005ea0
 8000434:	08005ec4 	.word	0x08005ec4
 8000438:	08005edc 	.word	0x08005edc
 800043c:	08005ef0 	.word	0x08005ef0
 8000440:	08005f04 	.word	0x08005f04
 8000444:	08005f18 	.word	0x08005f18
 8000448:	08005f2c 	.word	0x08005f2c
 800044c:	08005f40 	.word	0x08005f40
 8000450:	08005f58 	.word	0x08005f58
 8000454:	08005f70 	.word	0x08005f70
 8000458:	08005f84 	.word	0x08005f84
 800045c:	08005f9c 	.word	0x08005f9c
 8000460:	08005fb4 	.word	0x08005fb4
 8000464:	08005fcc 	.word	0x08005fcc
 8000468:	08005fec 	.word	0x08005fec
 800046c:	0800600c 	.word	0x0800600c
 8000470:	08006024 	.word	0x08006024
 8000474:	0800603c 	.word	0x0800603c

08000478 <bno055_readData>:

uint8_t bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af02      	add	r7, sp, #8
 800047e:	4603      	mov	r3, r0
 8000480:	6039      	str	r1, [r7, #0]
 8000482:	71fb      	strb	r3, [r7, #7]
 8000484:	4613      	mov	r3, r2
 8000486:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
	status = HAL_I2C_Master_Transmit(i2c_dev, BNO055_I2C_ADDR_LO << 1, &reg, 1, 10);
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <bno055_readData+0x64>)
 800048a:	6818      	ldr	r0, [r3, #0]
 800048c:	1dfa      	adds	r2, r7, #7
 800048e:	230a      	movs	r3, #10
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	2301      	movs	r3, #1
 8000494:	2150      	movs	r1, #80	; 0x50
 8000496:	f001 fbc5 	bl	8001c24 <HAL_I2C_Master_Transmit>
 800049a:	4603      	mov	r3, r0
 800049c:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <bno055_readData+0x30>
		return 1;
 80004a4:	2301      	movs	r3, #1
 80004a6:	e014      	b.n	80004d2 <bno055_readData+0x5a>
	}
    bno055_delay(100);
 80004a8:	2064      	movs	r0, #100	; 0x64
 80004aa:	f000 f819 	bl	80004e0 <bno055_delay>
    status = HAL_I2C_Master_Receive(i2c_dev, BNO055_I2C_ADDR_LO << 1, data, len, 10);
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <bno055_readData+0x64>)
 80004b0:	6818      	ldr	r0, [r3, #0]
 80004b2:	79bb      	ldrb	r3, [r7, #6]
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	220a      	movs	r2, #10
 80004b8:	9200      	str	r2, [sp, #0]
 80004ba:	683a      	ldr	r2, [r7, #0]
 80004bc:	2150      	movs	r1, #80	; 0x50
 80004be:	f001 fca5 	bl	8001e0c <HAL_I2C_Master_Receive>
 80004c2:	4603      	mov	r3, r0
 80004c4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d101      	bne.n	80004d0 <bno055_readData+0x58>
		return 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	e000      	b.n	80004d2 <bno055_readData+0x5a>
	}
	else{
		return 1;
 80004d0:	2301      	movs	r3, #1
	}
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3710      	adds	r7, #16
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000094 	.word	0x20000094

080004e0 <bno055_delay>:

void bno055_delay(uint32_t ms){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f000 fef3 	bl	80012d4 <HAL_Delay>
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <bno055_init>:

BNO055_FUNC_RETURN bno055_init(bno055_conf_t * bno055_conf, bno055_verification_t * bno055_verification){
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b090      	sub	sp, #64	; 0x40
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	6039      	str	r1, [r7, #0]
    BNO055_FUNC_RETURN ret = ERROR_DEFAULT;
 8000500:	2300      	movs	r3, #0
 8000502:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t conf_page0 [2] = {BNO055_PAGE_ID, 0x00};
 8000506:	2307      	movs	r3, #7
 8000508:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uint8_t op_mode_conf [2] = {BNO055_OPR_MODE, OPERATION_MODE_CONFIG};
 800050a:	233d      	movs	r3, #61	; 0x3d
 800050c:	873b      	strh	r3, [r7, #56]	; 0x38

    ret += bno055_writeData(conf_page0);
 800050e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff fecc 	bl	80002b0 <bno055_writeData>
 8000518:	4603      	mov	r3, r0
 800051a:	461a      	mov	r2, r3
 800051c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000520:	4413      	add	r3, r2
 8000522:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 8000526:	200a      	movs	r0, #10
 8000528:	f7ff ffda 	bl	80004e0 <bno055_delay>

    ret +=bno055_writeData(op_mode_conf);
 800052c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff febd 	bl	80002b0 <bno055_writeData>
 8000536:	4603      	mov	r3, r0
 8000538:	461a      	mov	r2, r3
 800053a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800053e:	4413      	add	r3, r2
 8000540:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(550);
 8000544:	f240 2026 	movw	r0, #550	; 0x226
 8000548:	f7ff ffca 	bl	80004e0 <bno055_delay>

	uint8_t conf_page1 [2] = {BNO055_PAGE_ID, 0x01};
 800054c:	f240 1307 	movw	r3, #263	; 0x107
 8000550:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t acc_conf [2] = {BNO055_ACC_CONFIG, bno055_conf->acc_operation_mode << 5 | bno055_conf->acc_bandwidth << 2 | bno055_conf->acc_g_range };
 8000552:	2308      	movs	r3, #8
 8000554:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	799b      	ldrb	r3, [r3, #6]
 800055c:	015b      	lsls	r3, r3, #5
 800055e:	b25a      	sxtb	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	795b      	ldrb	r3, [r3, #5]
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	b25b      	sxtb	r3, r3
 8000568:	4313      	orrs	r3, r2
 800056a:	b25a      	sxtb	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	791b      	ldrb	r3, [r3, #4]
 8000570:	b25b      	sxtb	r3, r3
 8000572:	4313      	orrs	r3, r2
 8000574:	b25b      	sxtb	r3, r3
 8000576:	b2db      	uxtb	r3, r3
 8000578:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t gyr_conf0 [2] = {BNO055_GYRO_CONFIG_0, bno055_conf->gyr_bandwidth << 3 | bno055_conf->gyr_range };
 800057c:	230a      	movs	r3, #10
 800057e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	7a1b      	ldrb	r3, [r3, #8]
 8000586:	00db      	lsls	r3, r3, #3
 8000588:	b25a      	sxtb	r2, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	79db      	ldrb	r3, [r3, #7]
 800058e:	b25b      	sxtb	r3, r3
 8000590:	4313      	orrs	r3, r2
 8000592:	b25b      	sxtb	r3, r3
 8000594:	b2db      	uxtb	r3, r3
 8000596:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t gyr_conf1 [2] = {BNO055_GYRO_CONFIG_1, bno055_conf->gyr_op_mode };
 800059a:	230b      	movs	r3, #11
 800059c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	7a5b      	ldrb	r3, [r3, #9]
 80005a4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t mag_conf [2] = {BNO055_MAG_CONFIG, bno055_conf->mag_pwr_mode << 5 | bno055_conf->mag_op_mode << 3 | bno055_conf->mag_data_rate };
 80005a8:	2309      	movs	r3, #9
 80005aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7b1b      	ldrb	r3, [r3, #12]
 80005b2:	015b      	lsls	r3, r3, #5
 80005b4:	b25a      	sxtb	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	7adb      	ldrb	r3, [r3, #11]
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	b25b      	sxtb	r3, r3
 80005be:	4313      	orrs	r3, r2
 80005c0:	b25a      	sxtb	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	7a9b      	ldrb	r3, [r3, #10]
 80005c6:	b25b      	sxtb	r3, r3
 80005c8:	4313      	orrs	r3, r2
 80005ca:	b25b      	sxtb	r3, r3
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	ret += bno055_writeData(conf_page1);
 80005d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fe6a 	bl	80002b0 <bno055_writeData>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80005e4:	4413      	add	r3, r2
 80005e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 80005ea:	200a      	movs	r0, #10
 80005ec:	f7ff ff78 	bl	80004e0 <bno055_delay>


	ret += bno055_writeData(acc_conf);
 80005f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fe5b 	bl	80002b0 <bno055_writeData>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000602:	4413      	add	r3, r2
 8000604:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 8000608:	200a      	movs	r0, #10
 800060a:	f7ff ff69 	bl	80004e0 <bno055_delay>

	ret += bno055_writeData(gyr_conf0);
 800060e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fe4c 	bl	80002b0 <bno055_writeData>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000620:	4413      	add	r3, r2
 8000622:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 8000626:	200a      	movs	r0, #10
 8000628:	f7ff ff5a 	bl	80004e0 <bno055_delay>

	ret += bno055_writeData(gyr_conf1);
 800062c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fe3d 	bl	80002b0 <bno055_writeData>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800063e:	4413      	add	r3, r2
 8000640:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 8000644:	200a      	movs	r0, #10
 8000646:	f7ff ff4b 	bl	80004e0 <bno055_delay>

	ret += bno055_writeData(mag_conf);
 800064a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff fe2e 	bl	80002b0 <bno055_writeData>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800065c:	4413      	add	r3, r2
 800065e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 8000662:	200a      	movs	r0, #10
 8000664:	f7ff ff3c 	bl	80004e0 <bno055_delay>


    uint8_t pwr_mode [2] = {BNO055_PWR_MODE, bno055_conf->pwr_mode};
 8000668:	233e      	movs	r3, #62	; 0x3e
 800066a:	f887 3020 	strb.w	r3, [r7, #32]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    uint8_t op_mode [2] = {BNO055_OPR_MODE, bno055_conf->op_mode};
 8000676:	233d      	movs	r3, #61	; 0x3d
 8000678:	773b      	strb	r3, [r7, #28]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	785b      	ldrb	r3, [r3, #1]
 800067e:	777b      	strb	r3, [r7, #29]
    uint8_t axis_remap_conf [2] = {BNO055_AXIS_MAP_CONFIG, bno055_conf->axis_remap_conf};
 8000680:	2341      	movs	r3, #65	; 0x41
 8000682:	763b      	strb	r3, [r7, #24]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	789b      	ldrb	r3, [r3, #2]
 8000688:	767b      	strb	r3, [r7, #25]
    uint8_t axis_remap_sign [2] = {BNO055_AXIS_MAP_SIGN, bno055_conf->axis_remap_sign};
 800068a:	2342      	movs	r3, #66	; 0x42
 800068c:	753b      	strb	r3, [r7, #20]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	78db      	ldrb	r3, [r3, #3]
 8000692:	757b      	strb	r3, [r7, #21]

    uint8_t unit_sel [2] = {BNO055_OPR_MODE, bno055_conf->unit_sel};
 8000694:	233d      	movs	r3, #61	; 0x3d
 8000696:	743b      	strb	r3, [r7, #16]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	7b5b      	ldrb	r3, [r3, #13]
 800069c:	747b      	strb	r3, [r7, #17]

    ret += bno055_writeData(conf_page0);
 800069e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff fe04 	bl	80002b0 <bno055_writeData>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006b0:	4413      	add	r3, r2
 80006b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bno055_delay(10);
 80006b6:	200a      	movs	r0, #10
 80006b8:	f7ff ff12 	bl	80004e0 <bno055_delay>

	ret += bno055_writeData(pwr_mode);
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff fdf5 	bl	80002b0 <bno055_writeData>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006ce:	4413      	add	r3, r2
 80006d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 80006d4:	200a      	movs	r0, #10
 80006d6:	f7ff ff03 	bl	80004e0 <bno055_delay>

    ret += bno055_writeData(axis_remap_conf);
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fde6 	bl	80002b0 <bno055_writeData>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006ec:	4413      	add	r3, r2
 80006ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 80006f2:	200a      	movs	r0, #10
 80006f4:	f7ff fef4 	bl	80004e0 <bno055_delay>

    ret += bno055_writeData(axis_remap_sign);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fdd7 	bl	80002b0 <bno055_writeData>
 8000702:	4603      	mov	r3, r0
 8000704:	461a      	mov	r2, r3
 8000706:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800070a:	4413      	add	r3, r2
 800070c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 8000710:	200a      	movs	r0, #10
 8000712:	f7ff fee5 	bl	80004e0 <bno055_delay>

    ret += bno055_writeData(unit_sel);
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fdc8 	bl	80002b0 <bno055_writeData>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000728:	4413      	add	r3, r2
 800072a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 800072e:	200a      	movs	r0, #10
 8000730:	f7ff fed6 	bl	80004e0 <bno055_delay>

    ret += bno055_writeData(op_mode);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fdb9 	bl	80002b0 <bno055_writeData>
 800073e:	4603      	mov	r3, r0
 8000740:	461a      	mov	r2, r3
 8000742:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000746:	4413      	add	r3, r2
 8000748:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_delay(10);
 800074c:	200a      	movs	r0, #10
 800074e:	f7ff fec7 	bl	80004e0 <bno055_delay>

    uint8_t sw_id[2] = {0, 0};
 8000752:	2300      	movs	r3, #0
 8000754:	81bb      	strh	r3, [r7, #12]
    uint8_t data = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	72fb      	strb	r3, [r7, #11]

    ret += bno055_readData(BNO055_CHIP_ID, &data, 1);
 800075a:	f107 030b 	add.w	r3, r7, #11
 800075e:	2201      	movs	r2, #1
 8000760:	4619      	mov	r1, r3
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff fe88 	bl	8000478 <bno055_readData>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000770:	4413      	add	r3, r2
 8000772:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->chip_id = data;
 8000776:	7afa      	ldrb	r2, [r7, #11]
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	701a      	strb	r2, [r3, #0]
    bno055_delay(10);
 800077c:	200a      	movs	r0, #10
 800077e:	f7ff feaf 	bl	80004e0 <bno055_delay>

    ret += bno055_readData(BNO055_ACC_ID, &data, 1);
 8000782:	f107 030b 	add.w	r3, r7, #11
 8000786:	2201      	movs	r2, #1
 8000788:	4619      	mov	r1, r3
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff fe74 	bl	8000478 <bno055_readData>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000798:	4413      	add	r3, r2
 800079a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->acc_id = data;
 800079e:	7afa      	ldrb	r2, [r7, #11]
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	715a      	strb	r2, [r3, #5]
    bno055_delay(10);
 80007a4:	200a      	movs	r0, #10
 80007a6:	f7ff fe9b 	bl	80004e0 <bno055_delay>

    ret += bno055_readData(BNO055_MAG_ID, &data, 1);
 80007aa:	f107 030b 	add.w	r3, r7, #11
 80007ae:	2201      	movs	r2, #1
 80007b0:	4619      	mov	r1, r3
 80007b2:	2002      	movs	r0, #2
 80007b4:	f7ff fe60 	bl	8000478 <bno055_readData>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007c0:	4413      	add	r3, r2
 80007c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->mag_id = data;
 80007c6:	7afa      	ldrb	r2, [r7, #11]
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	719a      	strb	r2, [r3, #6]
    bno055_delay(10);
 80007cc:	200a      	movs	r0, #10
 80007ce:	f7ff fe87 	bl	80004e0 <bno055_delay>

    ret += bno055_readData(BNO055_GYR_ID, &data, 1);
 80007d2:	f107 030b 	add.w	r3, r7, #11
 80007d6:	2201      	movs	r2, #1
 80007d8:	4619      	mov	r1, r3
 80007da:	2003      	movs	r0, #3
 80007dc:	f7ff fe4c 	bl	8000478 <bno055_readData>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461a      	mov	r2, r3
 80007e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007e8:	4413      	add	r3, r2
 80007ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->gyr_id = data;
 80007ee:	7afa      	ldrb	r2, [r7, #11]
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	71da      	strb	r2, [r3, #7]
    bno055_delay(10);
 80007f4:	200a      	movs	r0, #10
 80007f6:	f7ff fe73 	bl	80004e0 <bno055_delay>

    ret += bno055_readData(BNO055_BL_REV_ID, &data, 1);
 80007fa:	f107 030b 	add.w	r3, r7, #11
 80007fe:	2201      	movs	r2, #1
 8000800:	4619      	mov	r1, r3
 8000802:	2006      	movs	r0, #6
 8000804:	f7ff fe38 	bl	8000478 <bno055_readData>
 8000808:	4603      	mov	r3, r0
 800080a:	461a      	mov	r2, r3
 800080c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000810:	4413      	add	r3, r2
 8000812:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->bl_rev_id = data;
 8000816:	7afa      	ldrb	r2, [r7, #11]
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	721a      	strb	r2, [r3, #8]
    bno055_delay(10);
 800081c:	200a      	movs	r0, #10
 800081e:	f7ff fe5f 	bl	80004e0 <bno055_delay>

    ret += bno055_readData(BNO055_SW_REV_ID_LSB, sw_id, 2);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2202      	movs	r2, #2
 8000828:	4619      	mov	r1, r3
 800082a:	2004      	movs	r0, #4
 800082c:	f7ff fe24 	bl	8000478 <bno055_readData>
 8000830:	4603      	mov	r3, r0
 8000832:	461a      	mov	r2, r3
 8000834:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000838:	4413      	add	r3, r2
 800083a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->sw_rev_id = (uint16_t)((sw_id[1] << 8)|(sw_id[0]));
 800083e:	7b7b      	ldrb	r3, [r7, #13]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b21a      	sxth	r2, r3
 8000844:	7b3b      	ldrb	r3, [r7, #12]
 8000846:	b21b      	sxth	r3, r3
 8000848:	4313      	orrs	r3, r2
 800084a:	b21b      	sxth	r3, r3
 800084c:	b29a      	uxth	r2, r3
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	805a      	strh	r2, [r3, #2]
    bno055_delay(10);
 8000852:	200a      	movs	r0, #10
 8000854:	f7ff fe44 	bl	80004e0 <bno055_delay>

    ret += bno055_readData(BNO055_PAGE_ID, &data, 1);
 8000858:	f107 030b 	add.w	r3, r7, #11
 800085c:	2201      	movs	r2, #1
 800085e:	4619      	mov	r1, r3
 8000860:	2007      	movs	r0, #7
 8000862:	f7ff fe09 	bl	8000478 <bno055_readData>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800086e:	4413      	add	r3, r2
 8000870:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bno055_verification->page_id = data;
 8000874:	7afa      	ldrb	r2, [r7, #11]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	711a      	strb	r2, [r3, #4]
    bno055_delay(100);
 800087a:	2064      	movs	r0, #100	; 0x64
 800087c:	f7ff fe30 	bl	80004e0 <bno055_delay>

    return ret;
 8000880:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8000884:	4618      	mov	r0, r3
 8000886:	3740      	adds	r7, #64	; 0x40
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <bno055_read_euler_h>:
    gyr_xyz->y = (float)(uint16_t)((data[3] << 8)|(data[2]));
    gyr_xyz->z = (float)(uint16_t)((data[5] << 8)|(data[4]));
    return ret;
}

BNO055_FUNC_RETURN bno055_read_euler_h(uint16_t* euler_h){
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    BNO055_FUNC_RETURN ret = ERROR_DEFAULT;
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2] = {0,0};
 8000898:	2300      	movs	r3, #0
 800089a:	81bb      	strh	r3, [r7, #12]
    ret += bno055_readData(BNO055_EUL_HEADING_LSB, data, 2);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2202      	movs	r2, #2
 80008a2:	4619      	mov	r1, r3
 80008a4:	201a      	movs	r0, #26
 80008a6:	f7ff fde7 	bl	8000478 <bno055_readData>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	4413      	add	r3, r2
 80008b2:	73fb      	strb	r3, [r7, #15]
    *euler_h = (uint16_t)((data[1] << 8)|(data[0]));
 80008b4:	7b7b      	ldrb	r3, [r7, #13]
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	b21a      	sxth	r2, r3
 80008ba:	7b3b      	ldrb	r3, [r7, #12]
 80008bc:	b21b      	sxth	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	801a      	strh	r2, [r3, #0]
    return ret;
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <bno055_read_euler_r>:
BNO055_FUNC_RETURN bno055_read_euler_r(uint16_t* euler_r){
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b084      	sub	sp, #16
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
    BNO055_FUNC_RETURN ret = ERROR_DEFAULT;
 80008da:	2300      	movs	r3, #0
 80008dc:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2] = {0,0};
 80008de:	2300      	movs	r3, #0
 80008e0:	81bb      	strh	r3, [r7, #12]
    ret += bno055_readData(BNO055_EUL_ROLL_LSB, data, 2);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	2202      	movs	r2, #2
 80008e8:	4619      	mov	r1, r3
 80008ea:	201c      	movs	r0, #28
 80008ec:	f7ff fdc4 	bl	8000478 <bno055_readData>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	4413      	add	r3, r2
 80008f8:	73fb      	strb	r3, [r7, #15]
    *euler_r = (uint16_t)((data[1] << 8)|(data[0]));
 80008fa:	7b7b      	ldrb	r3, [r7, #13]
 80008fc:	021b      	lsls	r3, r3, #8
 80008fe:	b21a      	sxth	r2, r3
 8000900:	7b3b      	ldrb	r3, [r7, #12]
 8000902:	b21b      	sxth	r3, r3
 8000904:	4313      	orrs	r3, r2
 8000906:	b21b      	sxth	r3, r3
 8000908:	b29a      	uxth	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	801a      	strh	r2, [r3, #0]
    return ret;
 800090e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <bno055_read_euler_p>:
BNO055_FUNC_RETURN bno055_read_euler_p(uint16_t* euler_p){
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
    BNO055_FUNC_RETURN ret = ERROR_DEFAULT;
 8000920:	2300      	movs	r3, #0
 8000922:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2] = {0,0};
 8000924:	2300      	movs	r3, #0
 8000926:	81bb      	strh	r3, [r7, #12]
    ret += bno055_readData(BNO055_EUL_PITCH_LSB, data, 2);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2202      	movs	r2, #2
 800092e:	4619      	mov	r1, r3
 8000930:	201e      	movs	r0, #30
 8000932:	f7ff fda1 	bl	8000478 <bno055_readData>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	4413      	add	r3, r2
 800093e:	73fb      	strb	r3, [r7, #15]
    *euler_p = (uint16_t)((data[1] << 8)|(data[0]));
 8000940:	7b7b      	ldrb	r3, [r7, #13]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	b21a      	sxth	r2, r3
 8000946:	7b3b      	ldrb	r3, [r7, #12]
 8000948:	b21b      	sxth	r3, r3
 800094a:	4313      	orrs	r3, r2
 800094c:	b21b      	sxth	r3, r3
 800094e:	b29a      	uxth	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	801a      	strh	r2, [r3, #0]
    return ret;
 8000954:	7bfb      	ldrb	r3, [r7, #15]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_DMA_Init+0x48>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <MX_DMA_Init+0x48>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_DMA_Init+0x48>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2010      	movs	r0, #16
 8000984:	f000 fda5 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000988:	2010      	movs	r0, #16
 800098a:	f000 fdbe 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	2011      	movs	r0, #17
 8000994:	f000 fd9d 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000998:	2011      	movs	r0, #17
 800099a:	f000 fdb6 	bl	800150a <HAL_NVIC_EnableIRQ>

}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000

080009ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <MX_GPIO_Init+0xc4>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a2a      	ldr	r2, [pc, #168]	; (8000a70 <MX_GPIO_Init+0xc4>)
 80009c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009cc:	6153      	str	r3, [r2, #20]
 80009ce:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <MX_GPIO_Init+0xc4>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009da:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <MX_GPIO_Init+0xc4>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	4a24      	ldr	r2, [pc, #144]	; (8000a70 <MX_GPIO_Init+0xc4>)
 80009e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009e4:	6153      	str	r3, [r2, #20]
 80009e6:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <MX_GPIO_Init+0xc4>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <MX_GPIO_Init+0xc4>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	4a1e      	ldr	r2, [pc, #120]	; (8000a70 <MX_GPIO_Init+0xc4>)
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fc:	6153      	str	r3, [r2, #20]
 80009fe:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <MX_GPIO_Init+0xc4>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_GPIO_Init+0xc4>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4a18      	ldr	r2, [pc, #96]	; (8000a70 <MX_GPIO_Init+0xc4>)
 8000a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a14:	6153      	str	r3, [r2, #20]
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_GPIO_Init+0xc4>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2120      	movs	r1, #32
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2a:	f001 f839 	bl	8001aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a34:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	480b      	ldr	r0, [pc, #44]	; (8000a74 <MX_GPIO_Init+0xc8>)
 8000a46:	f000 fea1 	bl	800178c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a4a:	2320      	movs	r3, #32
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a64:	f000 fe92 	bl	800178c <HAL_GPIO_Init>

}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40021000 	.word	0x40021000
 8000a74:	48000800 	.word	0x48000800

08000a78 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <MX_I2C1_Init+0x74>)
 8000a7e:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <MX_I2C1_Init+0x78>)
 8000a80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_I2C1_Init+0x74>)
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <MX_I2C1_Init+0x7c>)
 8000a86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <MX_I2C1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <MX_I2C1_Init+0x74>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_I2C1_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_I2C1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_I2C1_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_I2C1_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_I2C1_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab2:	480e      	ldr	r0, [pc, #56]	; (8000aec <MX_I2C1_Init+0x74>)
 8000ab4:	f001 f826 	bl	8001b04 <HAL_I2C_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000abe:	f000 f9a3 	bl	8000e08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4809      	ldr	r0, [pc, #36]	; (8000aec <MX_I2C1_Init+0x74>)
 8000ac6:	f001 fd43 	bl	8002550 <HAL_I2CEx_ConfigAnalogFilter>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ad0:	f000 f99a 	bl	8000e08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_I2C1_Init+0x74>)
 8000ad8:	f001 fd85 	bl	80025e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ae2:	f000 f991 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000a4 	.word	0x200000a4
 8000af0:	40005400 	.word	0x40005400
 8000af4:	2000090e 	.word	0x2000090e

08000af8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a4c      	ldr	r2, [pc, #304]	; (8000c48 <HAL_I2C_MspInit+0x150>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	f040 8092 	bne.w	8000c40 <HAL_I2C_MspInit+0x148>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	4b4b      	ldr	r3, [pc, #300]	; (8000c4c <HAL_I2C_MspInit+0x154>)
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	4a4a      	ldr	r2, [pc, #296]	; (8000c4c <HAL_I2C_MspInit+0x154>)
 8000b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b26:	6153      	str	r3, [r2, #20]
 8000b28:	4b48      	ldr	r3, [pc, #288]	; (8000c4c <HAL_I2C_MspInit+0x154>)
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b34:	4b45      	ldr	r3, [pc, #276]	; (8000c4c <HAL_I2C_MspInit+0x154>)
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	4a44      	ldr	r2, [pc, #272]	; (8000c4c <HAL_I2C_MspInit+0x154>)
 8000b3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b3e:	6153      	str	r3, [r2, #20]
 8000b40:	4b42      	ldr	r3, [pc, #264]	; (8000c4c <HAL_I2C_MspInit+0x154>)
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b52:	2312      	movs	r3, #18
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6c:	f000 fe0e 	bl	800178c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b74:	2312      	movs	r3, #18
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b80:	2304      	movs	r3, #4
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4831      	ldr	r0, [pc, #196]	; (8000c50 <HAL_I2C_MspInit+0x158>)
 8000b8c:	f000 fdfe 	bl	800178c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b90:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <HAL_I2C_MspInit+0x154>)
 8000b92:	69db      	ldr	r3, [r3, #28]
 8000b94:	4a2d      	ldr	r2, [pc, #180]	; (8000c4c <HAL_I2C_MspInit+0x154>)
 8000b96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b9a:	61d3      	str	r3, [r2, #28]
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <HAL_I2C_MspInit+0x154>)
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <HAL_I2C_MspInit+0x15c>)
 8000baa:	4a2b      	ldr	r2, [pc, #172]	; (8000c58 <HAL_I2C_MspInit+0x160>)
 8000bac:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <HAL_I2C_MspInit+0x15c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb4:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <HAL_I2C_MspInit+0x15c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bba:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <HAL_I2C_MspInit+0x15c>)
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bc0:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <HAL_I2C_MspInit+0x15c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc6:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <HAL_I2C_MspInit+0x15c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000bcc:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <HAL_I2C_MspInit+0x15c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bd2:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <HAL_I2C_MspInit+0x15c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000bd8:	481e      	ldr	r0, [pc, #120]	; (8000c54 <HAL_I2C_MspInit+0x15c>)
 8000bda:	f000 fcb0 	bl	800153e <HAL_DMA_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_I2C_MspInit+0xf0>
    {
      Error_Handler();
 8000be4:	f000 f910 	bl	8000e08 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a1a      	ldr	r2, [pc, #104]	; (8000c54 <HAL_I2C_MspInit+0x15c>)
 8000bec:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bee:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <HAL_I2C_MspInit+0x15c>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <HAL_I2C_MspInit+0x164>)
 8000bf6:	4a1a      	ldr	r2, [pc, #104]	; (8000c60 <HAL_I2C_MspInit+0x168>)
 8000bf8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_I2C_MspInit+0x164>)
 8000bfc:	2210      	movs	r2, #16
 8000bfe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <HAL_I2C_MspInit+0x164>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_I2C_MspInit+0x164>)
 8000c08:	2280      	movs	r2, #128	; 0x80
 8000c0a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <HAL_I2C_MspInit+0x164>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_I2C_MspInit+0x164>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_I2C_MspInit+0x164>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_I2C_MspInit+0x164>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <HAL_I2C_MspInit+0x164>)
 8000c26:	f000 fc8a 	bl	800153e <HAL_DMA_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_I2C_MspInit+0x13c>
    {
      Error_Handler();
 8000c30:	f000 f8ea 	bl	8000e08 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <HAL_I2C_MspInit+0x164>)
 8000c38:	639a      	str	r2, [r3, #56]	; 0x38
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_I2C_MspInit+0x164>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40005400 	.word	0x40005400
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	48000400 	.word	0x48000400
 8000c54:	200000f8 	.word	0x200000f8
 8000c58:	40020080 	.word	0x40020080
 8000c5c:	2000013c 	.word	0x2000013c
 8000c60:	4002006c 	.word	0x4002006c

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b09e      	sub	sp, #120	; 0x78
 8000c68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6a:	f000 facd 	bl	8001208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6e:	f000 f855 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c72:	f7ff fe9b 	bl	80009ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000c76:	f7ff fe73 	bl	8000960 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c7a:	f000 fa29 	bl	80010d0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c7e:	f7ff fefb 	bl	8000a78 <MX_I2C1_Init>
  MX_TIM17_Init();
 8000c82:	f000 f9df 	bl	8001044 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  bno055_set_i2c_handler(&hi2c1);
 8000c86:	481f      	ldr	r0, [pc, #124]	; (8000d04 <main+0xa0>)
 8000c88:	f7ff fb02 	bl	8000290 <bno055_set_i2c_handler>
  /* USER CODE END 2 */
  // Initialize BNO055 configuration
  ret = bno055_init(&default_bno055_config, &default_bno055_verification);
 8000c8c:	491e      	ldr	r1, [pc, #120]	; (8000d08 <main+0xa4>)
 8000c8e:	481f      	ldr	r0, [pc, #124]	; (8000d0c <main+0xa8>)
 8000c90:	f7ff fc31 	bl	80004f6 <bno055_init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <main+0xac>)
 8000c9a:	701a      	strb	r2, [r3, #0]
  uint16_t gyro_x, gyro_y, gyro_z;
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(300);
 8000c9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ca0:	f000 fb18 	bl	80012d4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000caa:	f000 ff11 	bl	8001ad0 <HAL_GPIO_TogglePin>
	  bno055_read_euler_h(&gyro_x);
 8000cae:	f107 030a 	add.w	r3, r7, #10
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fdea 	bl	800088c <bno055_read_euler_h>
	  bno055_read_euler_r(&gyro_y);
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fe08 	bl	80008d2 <bno055_read_euler_r>
	  bno055_read_euler_p(&gyro_z);
 8000cc2:	1dbb      	adds	r3, r7, #6
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fe27 	bl	8000918 <bno055_read_euler_p>
	  snprintf(buffer, sizeof(buffer), "Gyro: X=%d Y=%d Z=%d\r\n", gyro_x, gyro_y, gyro_z);
 8000cca:	897b      	ldrh	r3, [r7, #10]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	893b      	ldrh	r3, [r7, #8]
 8000cd0:	88fa      	ldrh	r2, [r7, #6]
 8000cd2:	f107 000c 	add.w	r0, r7, #12
 8000cd6:	9201      	str	r2, [sp, #4]
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <main+0xb0>)
 8000cde:	2164      	movs	r1, #100	; 0x64
 8000ce0:	f004 f85e 	bl	8004da0 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fa79 	bl	80001e0 <strlen>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	f107 010c 	add.w	r1, r7, #12
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	4807      	ldr	r0, [pc, #28]	; (8000d18 <main+0xb4>)
 8000cfc:	f003 faac 	bl	8004258 <HAL_UART_Transmit>
	  HAL_Delay(300);
 8000d00:	e7cc      	b.n	8000c9c <main+0x38>
 8000d02:	bf00      	nop
 8000d04:	200000a4 	.word	0x200000a4
 8000d08:	20000098 	.word	0x20000098
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000180 	.word	0x20000180
 8000d14:	08006064 	.word	0x08006064
 8000d18:	200001d4 	.word	0x200001d4

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0a6      	sub	sp, #152	; 0x98
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d26:	2228      	movs	r2, #40	; 0x28
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f004 f944 	bl	8004fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2258      	movs	r2, #88	; 0x58
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f004 f936 	bl	8004fb8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d50:	2301      	movs	r3, #1
 8000d52:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d54:	2310      	movs	r3, #16
 8000d56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d68:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 fc80 	bl	8002680 <HAL_RCC_OscConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d86:	f000 f83f 	bl	8000e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000da0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000da4:	2102      	movs	r1, #2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f002 fcbe 	bl	8003728 <HAL_RCC_ClockConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000db2:	f000 f829 	bl	8000e08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <SystemClock_Config+0xc4>)
 8000db8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f002 fee3 	bl	8003b94 <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000dd4:	f000 f818 	bl	8000e08 <Error_Handler>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	3798      	adds	r7, #152	; 0x98
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	01000022 	.word	0x01000022

08000de4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000dec:	1d39      	adds	r1, r7, #4
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	2201      	movs	r2, #1
 8000df4:	4803      	ldr	r0, [pc, #12]	; (8000e04 <__io_putchar+0x20>)
 8000df6:	f003 fa2f 	bl	8004258 <HAL_UART_Transmit>
  return ch;
 8000dfa:	687b      	ldr	r3, [r7, #4]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200001d4 	.word	0x200001d4

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <Error_Handler+0x8>
	...

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <HAL_MspInit+0x44>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <HAL_MspInit+0x44>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6193      	str	r3, [r2, #24]
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_MspInit+0x44>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_MspInit+0x44>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <HAL_MspInit+0x44>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	61d3      	str	r3, [r2, #28]
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_MspInit+0x44>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e4a:	2007      	movs	r0, #7
 8000e4c:	f000 fb36 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40021000 	.word	0x40021000

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <NMI_Handler+0x4>

08000e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <MemManage_Handler+0x4>

08000e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <BusFault_Handler+0x4>

08000e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <UsageFault_Handler+0x4>

08000e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea8:	f000 f9f4 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <DMA1_Channel6_IRQHandler+0x10>)
 8000eb6:	f000 fb89 	bl	80015cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000013c 	.word	0x2000013c

08000ec4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <DMA1_Channel7_IRQHandler+0x10>)
 8000eca:	f000 fb7f 	bl	80015cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200000f8 	.word	0x200000f8

08000ed8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e00a      	b.n	8000f00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eea:	f3af 8000 	nop.w
 8000eee:	4601      	mov	r1, r0
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	60ba      	str	r2, [r7, #8]
 8000ef6:	b2ca      	uxtb	r2, r1
 8000ef8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbf0      	blt.n	8000eea <_read+0x12>
  }

  return len;
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	e009      	b.n	8000f38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	1c5a      	adds	r2, r3, #1
 8000f28:	60ba      	str	r2, [r7, #8]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff59 	bl	8000de4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dbf1      	blt.n	8000f24 <_write+0x12>
  }
  return len;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_close>:

int _close(int file)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f72:	605a      	str	r2, [r3, #4]
  return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <_isatty>:

int _isatty(int file)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fbc:	4a14      	ldr	r2, [pc, #80]	; (8001010 <_sbrk+0x5c>)
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <_sbrk+0x60>)
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d102      	bne.n	8000fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <_sbrk+0x64>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <_sbrk+0x68>)
 8000fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d207      	bcs.n	8000ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe4:	f004 f836 	bl	8005054 <__errno>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	220c      	movs	r2, #12
 8000fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	e009      	b.n	8001008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <_sbrk+0x64>)
 8001004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20010000 	.word	0x20010000
 8001014:	00000400 	.word	0x00000400
 8001018:	20000184 	.word	0x20000184
 800101c:	200003b0 	.word	0x200003b0

08001020 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <SystemInit+0x20>)
 8001026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <SystemInit+0x20>)
 800102c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_TIM17_Init+0x44>)
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <MX_TIM17_Init+0x48>)
 800104c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_TIM17_Init+0x44>)
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_TIM17_Init+0x44>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_TIM17_Init+0x44>)
 800105c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001060:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_TIM17_Init+0x44>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <MX_TIM17_Init+0x44>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_TIM17_Init+0x44>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <MX_TIM17_Init+0x44>)
 8001076:	f002 ffab 	bl	8003fd0 <HAL_TIM_Base_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001080:	f7ff fec2 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000188 	.word	0x20000188
 800108c:	40014800 	.word	0x40014800

08001090 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <HAL_TIM_Base_MspInit+0x38>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d10b      	bne.n	80010ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_TIM_Base_MspInit+0x3c>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	4a09      	ldr	r2, [pc, #36]	; (80010cc <HAL_TIM_Base_MspInit+0x3c>)
 80010a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ac:	6193      	str	r3, [r2, #24]
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <HAL_TIM_Base_MspInit+0x3c>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40014800 	.word	0x40014800
 80010cc:	40021000 	.word	0x40021000

080010d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010d6:	4a15      	ldr	r2, [pc, #84]	; (800112c <MX_USART2_UART_Init+0x5c>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010dc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80010e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_USART2_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_USART2_UART_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_USART2_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_USART2_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_USART2_UART_Init+0x58>)
 8001114:	f003 f852 	bl	80041bc <HAL_UART_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800111e:	f7ff fe73 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200001d4 	.word	0x200001d4
 800112c:	40004400 	.word	0x40004400

08001130 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a17      	ldr	r2, [pc, #92]	; (80011ac <HAL_UART_MspInit+0x7c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d128      	bne.n	80011a4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <HAL_UART_MspInit+0x80>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <HAL_UART_MspInit+0x80>)
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	61d3      	str	r3, [r2, #28]
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <HAL_UART_MspInit+0x80>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_UART_MspInit+0x80>)
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <HAL_UART_MspInit+0x80>)
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	6153      	str	r3, [r2, #20]
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_UART_MspInit+0x80>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001182:	230c      	movs	r3, #12
 8001184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001192:	2307      	movs	r3, #7
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a0:	f000 faf4 	bl	800178c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	; 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40004400 	.word	0x40004400
 80011b0:	40021000 	.word	0x40021000

080011b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011b8:	f7ff ff32 	bl	8001020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80011be:	490d      	ldr	r1, [pc, #52]	; (80011f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c0:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <LoopForever+0xe>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d4:	4c0a      	ldr	r4, [pc, #40]	; (8001200 <LoopForever+0x16>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e2:	f003 ff3d 	bl	8005060 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011e6:	f7ff fd3d 	bl	8000c64 <main>

080011ea <LoopForever>:

LoopForever:
    b LoopForever
 80011ea:	e7fe      	b.n	80011ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80011f8:	080060f0 	.word	0x080060f0
  ldr r2, =_sbss
 80011fc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001200:	200003ac 	.word	0x200003ac

08001204 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001204:	e7fe      	b.n	8001204 <ADC1_2_IRQHandler>
	...

08001208 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_Init+0x28>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_Init+0x28>)
 8001212:	f043 0310 	orr.w	r3, r3, #16
 8001216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f94f 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121e:	2000      	movs	r0, #0
 8001220:	f000 f808 	bl	8001234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001224:	f7ff fdf6 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40022000 	.word	0x40022000

08001234 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x54>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x58>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f967 	bl	8001526 <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e00e      	b.n	8001280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d80a      	bhi.n	800127e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f000 f92f 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_InitTick+0x5c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000010 	.word	0x20000010
 800128c:	20000018 	.word	0x20000018
 8001290:	20000014 	.word	0x20000014

08001294 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000018 	.word	0x20000018
 80012b8:	2000025c 	.word	0x2000025c

080012bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;  
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2000025c 	.word	0x2000025c

080012d4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ffee 	bl	80012bc <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_Delay+0x44>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffde 	bl	80012bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000018 	.word	0x20000018

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff8e 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff29 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff3e 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff8e 	bl	8001410 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5d 	bl	80013bc <__NVIC_SetPriority>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff31 	bl	8001380 <__NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffa2 	bl	8001478 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e037      	b.n	80015c4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2202      	movs	r2, #2
 8001558:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800156a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800156e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	4313      	orrs	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f8b4 	bl	8001714 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}  
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	2204      	movs	r2, #4
 80015ea:	409a      	lsls	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d024      	beq.n	800163e <HAL_DMA_IRQHandler+0x72>
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d01f      	beq.n	800163e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0320 	and.w	r3, r3, #32
 8001608:	2b00      	cmp	r3, #0
 800160a:	d107      	bne.n	800161c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0204 	bic.w	r2, r2, #4
 800161a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001624:	2104      	movs	r1, #4
 8001626:	fa01 f202 	lsl.w	r2, r1, r2
 800162a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	2b00      	cmp	r3, #0
 8001632:	d06a      	beq.n	800170a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800163c:	e065      	b.n	800170a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	2202      	movs	r2, #2
 8001644:	409a      	lsls	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4013      	ands	r3, r2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d02c      	beq.n	80016a8 <HAL_DMA_IRQHandler+0xdc>
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d027      	beq.n	80016a8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0320 	and.w	r3, r3, #32
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10b      	bne.n	800167e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 020a 	bic.w	r2, r2, #10
 8001674:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001686:	2102      	movs	r1, #2
 8001688:	fa01 f202 	lsl.w	r2, r1, r2
 800168c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	2b00      	cmp	r3, #0
 800169c:	d035      	beq.n	800170a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80016a6:	e030      	b.n	800170a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	2208      	movs	r2, #8
 80016ae:	409a      	lsls	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d028      	beq.n	800170a <HAL_DMA_IRQHandler+0x13e>
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d023      	beq.n	800170a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 020e 	bic.w	r2, r2, #14
 80016d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016da:	2101      	movs	r1, #1
 80016dc:	fa01 f202 	lsl.w	r2, r1, r2
 80016e0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d004      	beq.n	800170a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	4798      	blx	r3
    }
  }
}  
 8001708:	e7ff      	b.n	800170a <HAL_DMA_IRQHandler+0x13e>
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <DMA_CalcBaseAndBitshift+0x60>)
 8001724:	429a      	cmp	r2, r3
 8001726:	d80f      	bhi.n	8001748 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <DMA_CalcBaseAndBitshift+0x64>)
 8001730:	4413      	add	r3, r2
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <DMA_CalcBaseAndBitshift+0x68>)
 8001734:	fba2 2303 	umull	r2, r3, r2, r3
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	009a      	lsls	r2, r3, #2
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <DMA_CalcBaseAndBitshift+0x6c>)
 8001744:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001746:	e00e      	b.n	8001766 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <DMA_CalcBaseAndBitshift+0x70>)
 8001750:	4413      	add	r3, r2
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <DMA_CalcBaseAndBitshift+0x68>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	009a      	lsls	r2, r3, #2
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a09      	ldr	r2, [pc, #36]	; (8001788 <DMA_CalcBaseAndBitshift+0x74>)
 8001764:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40020407 	.word	0x40020407
 8001778:	bffdfff8 	.word	0xbffdfff8
 800177c:	cccccccd 	.word	0xcccccccd
 8001780:	40020000 	.word	0x40020000
 8001784:	bffdfbf8 	.word	0xbffdfbf8
 8001788:	40020400 	.word	0x40020400

0800178c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179a:	e160      	b.n	8001a5e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2101      	movs	r1, #1
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 8152 	beq.w	8001a58 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d005      	beq.n	80017cc <HAL_GPIO_Init+0x40>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d130      	bne.n	800182e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001802:	2201      	movs	r2, #1
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	f003 0201 	and.w	r2, r3, #1
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	2b03      	cmp	r3, #3
 8001838:	d017      	beq.n	800186a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	2203      	movs	r2, #3
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d123      	bne.n	80018be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	08da      	lsrs	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3208      	adds	r2, #8
 800187e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	220f      	movs	r2, #15
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	691a      	ldr	r2, [r3, #16]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	08da      	lsrs	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3208      	adds	r2, #8
 80018b8:	6939      	ldr	r1, [r7, #16]
 80018ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2203      	movs	r2, #3
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0203 	and.w	r2, r3, #3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80ac 	beq.w	8001a58 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001900:	4b5e      	ldr	r3, [pc, #376]	; (8001a7c <HAL_GPIO_Init+0x2f0>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a5d      	ldr	r2, [pc, #372]	; (8001a7c <HAL_GPIO_Init+0x2f0>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b5b      	ldr	r3, [pc, #364]	; (8001a7c <HAL_GPIO_Init+0x2f0>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001918:	4a59      	ldr	r2, [pc, #356]	; (8001a80 <HAL_GPIO_Init+0x2f4>)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	220f      	movs	r2, #15
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001942:	d025      	beq.n	8001990 <HAL_GPIO_Init+0x204>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a4f      	ldr	r2, [pc, #316]	; (8001a84 <HAL_GPIO_Init+0x2f8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d01f      	beq.n	800198c <HAL_GPIO_Init+0x200>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a4e      	ldr	r2, [pc, #312]	; (8001a88 <HAL_GPIO_Init+0x2fc>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d019      	beq.n	8001988 <HAL_GPIO_Init+0x1fc>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a4d      	ldr	r2, [pc, #308]	; (8001a8c <HAL_GPIO_Init+0x300>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d013      	beq.n	8001984 <HAL_GPIO_Init+0x1f8>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a4c      	ldr	r2, [pc, #304]	; (8001a90 <HAL_GPIO_Init+0x304>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d00d      	beq.n	8001980 <HAL_GPIO_Init+0x1f4>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a4b      	ldr	r2, [pc, #300]	; (8001a94 <HAL_GPIO_Init+0x308>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d007      	beq.n	800197c <HAL_GPIO_Init+0x1f0>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a4a      	ldr	r2, [pc, #296]	; (8001a98 <HAL_GPIO_Init+0x30c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d101      	bne.n	8001978 <HAL_GPIO_Init+0x1ec>
 8001974:	2306      	movs	r3, #6
 8001976:	e00c      	b.n	8001992 <HAL_GPIO_Init+0x206>
 8001978:	2307      	movs	r3, #7
 800197a:	e00a      	b.n	8001992 <HAL_GPIO_Init+0x206>
 800197c:	2305      	movs	r3, #5
 800197e:	e008      	b.n	8001992 <HAL_GPIO_Init+0x206>
 8001980:	2304      	movs	r3, #4
 8001982:	e006      	b.n	8001992 <HAL_GPIO_Init+0x206>
 8001984:	2303      	movs	r3, #3
 8001986:	e004      	b.n	8001992 <HAL_GPIO_Init+0x206>
 8001988:	2302      	movs	r3, #2
 800198a:	e002      	b.n	8001992 <HAL_GPIO_Init+0x206>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_GPIO_Init+0x206>
 8001990:	2300      	movs	r3, #0
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	f002 0203 	and.w	r2, r2, #3
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	4093      	lsls	r3, r2
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019a2:	4937      	ldr	r1, [pc, #220]	; (8001a80 <HAL_GPIO_Init+0x2f4>)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	3302      	adds	r3, #2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b0:	4b3a      	ldr	r3, [pc, #232]	; (8001a9c <HAL_GPIO_Init+0x310>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019d4:	4a31      	ldr	r2, [pc, #196]	; (8001a9c <HAL_GPIO_Init+0x310>)
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019da:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <HAL_GPIO_Init+0x310>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019fe:	4a27      	ldr	r2, [pc, #156]	; (8001a9c <HAL_GPIO_Init+0x310>)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <HAL_GPIO_Init+0x310>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a28:	4a1c      	ldr	r2, [pc, #112]	; (8001a9c <HAL_GPIO_Init+0x310>)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_GPIO_Init+0x310>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a52:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <HAL_GPIO_Init+0x310>)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f47f ae97 	bne.w	800179c <HAL_GPIO_Init+0x10>
  }
}
 8001a6e:	bf00      	nop
 8001a70:	bf00      	nop
 8001a72:	371c      	adds	r7, #28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010000 	.word	0x40010000
 8001a84:	48000400 	.word	0x48000400
 8001a88:	48000800 	.word	0x48000800
 8001a8c:	48000c00 	.word	0x48000c00
 8001a90:	48001000 	.word	0x48001000
 8001a94:	48001400 	.word	0x48001400
 8001a98:	48001800 	.word	0x48001800
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	4613      	mov	r3, r2
 8001aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001abc:	e002      	b.n	8001ac4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	041a      	lsls	r2, r3, #16
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	43d9      	mvns	r1, r3
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	400b      	ands	r3, r1
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	619a      	str	r2, [r3, #24]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e081      	b.n	8001c1a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7fe ffe4 	bl	8000af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2224      	movs	r2, #36	; 0x24
 8001b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d107      	bne.n	8001b7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	e006      	b.n	8001b8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d104      	bne.n	8001b9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69d9      	ldr	r1, [r3, #28]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a1a      	ldr	r2, [r3, #32]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2220      	movs	r2, #32
 8001c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	460b      	mov	r3, r1
 8001c32:	817b      	strh	r3, [r7, #10]
 8001c34:	4613      	mov	r3, r2
 8001c36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	f040 80da 	bne.w	8001dfa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_I2C_Master_Transmit+0x30>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e0d3      	b.n	8001dfc <HAL_I2C_Master_Transmit+0x1d8>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c5c:	f7ff fb2e 	bl	80012bc <HAL_GetTick>
 8001c60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2319      	movs	r3, #25
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 fa00 	bl	8002074 <I2C_WaitOnFlagUntilTimeout>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e0be      	b.n	8001dfc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2221      	movs	r2, #33	; 0x21
 8001c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2210      	movs	r2, #16
 8001c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	893a      	ldrh	r2, [r7, #8]
 8001c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2bff      	cmp	r3, #255	; 0xff
 8001cae:	d90e      	bls.n	8001cce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	22ff      	movs	r2, #255	; 0xff
 8001cb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	8979      	ldrh	r1, [r7, #10]
 8001cbe:	4b51      	ldr	r3, [pc, #324]	; (8001e04 <HAL_I2C_Master_Transmit+0x1e0>)
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 fc10 	bl	80024ec <I2C_TransferConfig>
 8001ccc:	e06c      	b.n	8001da8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	8979      	ldrh	r1, [r7, #10]
 8001ce0:	4b48      	ldr	r3, [pc, #288]	; (8001e04 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 fbff 	bl	80024ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001cee:	e05b      	b.n	8001da8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	6a39      	ldr	r1, [r7, #32]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 fa0c 	bl	8002112 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e07b      	b.n	8001dfc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	781a      	ldrb	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d034      	beq.n	8001da8 <HAL_I2C_Master_Transmit+0x184>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d130      	bne.n	8001da8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 f98f 	bl	8002074 <I2C_WaitOnFlagUntilTimeout>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e04d      	b.n	8001dfc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2bff      	cmp	r3, #255	; 0xff
 8001d68:	d90e      	bls.n	8001d88 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	22ff      	movs	r2, #255	; 0xff
 8001d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	8979      	ldrh	r1, [r7, #10]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 fbb3 	bl	80024ec <I2C_TransferConfig>
 8001d86:	e00f      	b.n	8001da8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	8979      	ldrh	r1, [r7, #10]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 fba2 	bl	80024ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d19e      	bne.n	8001cf0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	6a39      	ldr	r1, [r7, #32]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 f9f2 	bl	80021a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e01a      	b.n	8001dfc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_I2C_Master_Transmit+0x1e4>)
 8001dda:	400b      	ands	r3, r1
 8001ddc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2220      	movs	r2, #32
 8001de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001dfa:	2302      	movs	r3, #2
  }
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	80002000 	.word	0x80002000
 8001e08:	fe00e800 	.word	0xfe00e800

08001e0c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	461a      	mov	r2, r3
 8001e18:	460b      	mov	r3, r1
 8001e1a:	817b      	strh	r3, [r7, #10]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	f040 80db 	bne.w	8001fe4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_I2C_Master_Receive+0x30>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e0d4      	b.n	8001fe6 <HAL_I2C_Master_Receive+0x1da>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e44:	f7ff fa3a 	bl	80012bc <HAL_GetTick>
 8001e48:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2319      	movs	r3, #25
 8001e50:	2201      	movs	r2, #1
 8001e52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f90c 	bl	8002074 <I2C_WaitOnFlagUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0bf      	b.n	8001fe6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2222      	movs	r2, #34	; 0x22
 8001e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2210      	movs	r2, #16
 8001e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	893a      	ldrh	r2, [r7, #8]
 8001e86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2bff      	cmp	r3, #255	; 0xff
 8001e96:	d90e      	bls.n	8001eb6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	22ff      	movs	r2, #255	; 0xff
 8001e9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	8979      	ldrh	r1, [r7, #10]
 8001ea6:	4b52      	ldr	r3, [pc, #328]	; (8001ff0 <HAL_I2C_Master_Receive+0x1e4>)
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 fb1c 	bl	80024ec <I2C_TransferConfig>
 8001eb4:	e06d      	b.n	8001f92 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	8979      	ldrh	r1, [r7, #10]
 8001ec8:	4b49      	ldr	r3, [pc, #292]	; (8001ff0 <HAL_I2C_Master_Receive+0x1e4>)
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 fb0b 	bl	80024ec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001ed6:	e05c      	b.n	8001f92 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	6a39      	ldr	r1, [r7, #32]
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 f9a3 	bl	8002228 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e07c      	b.n	8001fe6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d034      	beq.n	8001f92 <HAL_I2C_Master_Receive+0x186>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d130      	bne.n	8001f92 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	2200      	movs	r2, #0
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f89a 	bl	8002074 <I2C_WaitOnFlagUntilTimeout>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e04d      	b.n	8001fe6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2bff      	cmp	r3, #255	; 0xff
 8001f52:	d90e      	bls.n	8001f72 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	22ff      	movs	r2, #255	; 0xff
 8001f58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	8979      	ldrh	r1, [r7, #10]
 8001f62:	2300      	movs	r3, #0
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 fabe 	bl	80024ec <I2C_TransferConfig>
 8001f70:	e00f      	b.n	8001f92 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	8979      	ldrh	r1, [r7, #10]
 8001f84:	2300      	movs	r3, #0
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 faad 	bl	80024ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d19d      	bne.n	8001ed8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	6a39      	ldr	r1, [r7, #32]
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 f8fd 	bl	80021a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e01a      	b.n	8001fe6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6859      	ldr	r1, [r3, #4]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_I2C_Master_Receive+0x1e8>)
 8001fc4:	400b      	ands	r3, r1
 8001fc6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e000      	b.n	8001fe6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001fe4:	2302      	movs	r3, #2
  }
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	80002400 	.word	0x80002400
 8001ff4:	fe00e800 	.word	0xfe00e800

08001ff8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002006:	b2db      	uxtb	r3, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b02      	cmp	r3, #2
 8002040:	d103      	bne.n	800204a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2200      	movs	r2, #0
 8002048:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b01      	cmp	r3, #1
 8002056:	d007      	beq.n	8002068 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699a      	ldr	r2, [r3, #24]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	619a      	str	r2, [r3, #24]
  }
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002084:	e031      	b.n	80020ea <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d02d      	beq.n	80020ea <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800208e:	f7ff f915 	bl	80012bc <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d302      	bcc.n	80020a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d122      	bne.n	80020ea <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	4013      	ands	r3, r2
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d113      	bne.n	80020ea <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	f043 0220 	orr.w	r2, r3, #32
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00f      	b.n	800210a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4013      	ands	r3, r2
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	bf0c      	ite	eq
 80020fa:	2301      	moveq	r3, #1
 80020fc:	2300      	movne	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	429a      	cmp	r2, r3
 8002106:	d0be      	beq.n	8002086 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800211e:	e033      	b.n	8002188 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	68b9      	ldr	r1, [r7, #8]
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f901 	bl	800232c <I2C_IsErrorOccurred>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e031      	b.n	8002198 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213a:	d025      	beq.n	8002188 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800213c:	f7ff f8be 	bl	80012bc <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	429a      	cmp	r2, r3
 800214a:	d302      	bcc.n	8002152 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d11a      	bne.n	8002188 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b02      	cmp	r3, #2
 800215e:	d013      	beq.n	8002188 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002164:	f043 0220 	orr.w	r2, r3, #32
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e007      	b.n	8002198 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b02      	cmp	r3, #2
 8002194:	d1c4      	bne.n	8002120 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021ac:	e02f      	b.n	800220e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 f8ba 	bl	800232c <I2C_IsErrorOccurred>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e02d      	b.n	800221e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021c2:	f7ff f87b 	bl	80012bc <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d302      	bcc.n	80021d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d11a      	bne.n	800220e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	2b20      	cmp	r3, #32
 80021e4:	d013      	beq.n	800220e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	f043 0220 	orr.w	r2, r3, #32
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e007      	b.n	800221e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b20      	cmp	r3, #32
 800221a:	d1c8      	bne.n	80021ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002234:	e06b      	b.n	800230e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f876 	bl	800232c <I2C_IsErrorOccurred>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e069      	b.n	800231e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	2b20      	cmp	r3, #32
 8002256:	d138      	bne.n	80022ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b04      	cmp	r3, #4
 8002264:	d105      	bne.n	8002272 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	e055      	b.n	800231e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b10      	cmp	r3, #16
 800227e:	d107      	bne.n	8002290 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2210      	movs	r2, #16
 8002286:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2204      	movs	r2, #4
 800228c:	645a      	str	r2, [r3, #68]	; 0x44
 800228e:	e002      	b.n	8002296 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2220      	movs	r2, #32
 800229c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80022aa:	400b      	ands	r3, r1
 80022ac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e029      	b.n	800231e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ca:	f7fe fff7 	bl	80012bc <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d302      	bcc.n	80022e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d116      	bne.n	800230e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d00f      	beq.n	800230e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f043 0220 	orr.w	r2, r3, #32
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e007      	b.n	800231e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b04      	cmp	r3, #4
 800231a:	d18c      	bne.n	8002236 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	fe00e800 	.word	0xfe00e800

0800232c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	d068      	beq.n	800242a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2210      	movs	r2, #16
 800235e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002360:	e049      	b.n	80023f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d045      	beq.n	80023f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800236a:	f7fe ffa7 	bl	80012bc <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	429a      	cmp	r2, r3
 8002378:	d302      	bcc.n	8002380 <I2C_IsErrorOccurred+0x54>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d13a      	bne.n	80023f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002392:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800239e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023a2:	d121      	bne.n	80023e8 <I2C_IsErrorOccurred+0xbc>
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023aa:	d01d      	beq.n	80023e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d01a      	beq.n	80023e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023c2:	f7fe ff7b 	bl	80012bc <HAL_GetTick>
 80023c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c8:	e00e      	b.n	80023e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023ca:	f7fe ff77 	bl	80012bc <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b19      	cmp	r3, #25
 80023d6:	d907      	bls.n	80023e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	f043 0320 	orr.w	r3, r3, #32
 80023de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80023e6:	e006      	b.n	80023f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f003 0320 	and.w	r3, r3, #32
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d1e9      	bne.n	80023ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b20      	cmp	r3, #32
 8002402:	d003      	beq.n	800240c <I2C_IsErrorOccurred+0xe0>
 8002404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0aa      	beq.n	8002362 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800240c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002410:	2b00      	cmp	r3, #0
 8002412:	d103      	bne.n	800241c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2220      	movs	r2, #32
 800241a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	f043 0304 	orr.w	r3, r3, #4
 8002422:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00b      	beq.n	8002454 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f44f 7280 	mov.w	r2, #256	; 0x100
 800244c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00b      	beq.n	8002476 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800246e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00b      	beq.n	8002498 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	f043 0302 	orr.w	r3, r3, #2
 8002486:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002490:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01c      	beq.n	80024da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f7ff fdc3 	bl	800202c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6859      	ldr	r1, [r3, #4]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <I2C_IsErrorOccurred+0x1bc>)
 80024b2:	400b      	ands	r3, r1
 80024b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	431a      	orrs	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80024da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3728      	adds	r7, #40	; 0x28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	fe00e800 	.word	0xfe00e800

080024ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	460b      	mov	r3, r1
 80024f8:	817b      	strh	r3, [r7, #10]
 80024fa:	4613      	mov	r3, r2
 80024fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024fe:	897b      	ldrh	r3, [r7, #10]
 8002500:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002504:	7a7b      	ldrb	r3, [r7, #9]
 8002506:	041b      	lsls	r3, r3, #16
 8002508:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800250c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	4313      	orrs	r3, r2
 8002516:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800251a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	0d5b      	lsrs	r3, r3, #21
 8002526:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <I2C_TransferConfig+0x60>)
 800252c:	430b      	orrs	r3, r1
 800252e:	43db      	mvns	r3, r3
 8002530:	ea02 0103 	and.w	r1, r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	430a      	orrs	r2, r1
 800253c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	03ff63ff 	.word	0x03ff63ff

08002550 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b20      	cmp	r3, #32
 8002564:	d138      	bne.n	80025d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002570:	2302      	movs	r3, #2
 8002572:	e032      	b.n	80025da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2224      	movs	r2, #36	; 0x24
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0201 	bic.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6819      	ldr	r1, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025d8:	2302      	movs	r3, #2
  }
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	d139      	bne.n	8002670 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002606:	2302      	movs	r3, #2
 8002608:	e033      	b.n	8002672 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2224      	movs	r2, #36	; 0x24
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0201 	bic.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002638:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	021b      	lsls	r3, r3, #8
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4313      	orrs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	e000      	b.n	8002672 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002670:	2302      	movs	r3, #2
  }
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002686:	af00      	add	r7, sp, #0
 8002688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002690:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002692:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002696:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d102      	bne.n	80026a6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	f001 b83a 	b.w	800371a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 816f 	beq.w	800299a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026bc:	4bb5      	ldr	r3, [pc, #724]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d00c      	beq.n	80026e2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026c8:	4bb2      	ldr	r3, [pc, #712]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 030c 	and.w	r3, r3, #12
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d15c      	bne.n	800278e <HAL_RCC_OscConfig+0x10e>
 80026d4:	4baf      	ldr	r3, [pc, #700]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80026dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e0:	d155      	bne.n	800278e <HAL_RCC_OscConfig+0x10e>
 80026e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d102      	bne.n	8002714 <HAL_RCC_OscConfig+0x94>
 800270e:	4ba1      	ldr	r3, [pc, #644]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	e015      	b.n	8002740 <HAL_RCC_OscConfig+0xc0>
 8002714:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002718:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002728:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800272c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002730:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800273c:	4b95      	ldr	r3, [pc, #596]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002744:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002748:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800274c:	fa92 f2a2 	rbit	r2, r2
 8002750:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002754:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002758:	fab2 f282 	clz	r2, r2
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	f042 0220 	orr.w	r2, r2, #32
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	f002 021f 	and.w	r2, r2, #31
 8002768:	2101      	movs	r1, #1
 800276a:	fa01 f202 	lsl.w	r2, r1, r2
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 8111 	beq.w	8002998 <HAL_RCC_OscConfig+0x318>
 8002776:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800277a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 8108 	bne.w	8002998 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	f000 bfc6 	b.w	800371a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800278e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002792:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279e:	d106      	bne.n	80027ae <HAL_RCC_OscConfig+0x12e>
 80027a0:	4b7c      	ldr	r3, [pc, #496]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a7b      	ldr	r2, [pc, #492]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 80027a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	e036      	b.n	800281c <HAL_RCC_OscConfig+0x19c>
 80027ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x158>
 80027be:	4b75      	ldr	r3, [pc, #468]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a74      	ldr	r2, [pc, #464]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 80027c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b72      	ldr	r3, [pc, #456]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a71      	ldr	r2, [pc, #452]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 80027d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e021      	b.n	800281c <HAL_RCC_OscConfig+0x19c>
 80027d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0x184>
 80027ea:	4b6a      	ldr	r3, [pc, #424]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a69      	ldr	r2, [pc, #420]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 80027f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b67      	ldr	r3, [pc, #412]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a66      	ldr	r2, [pc, #408]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0x19c>
 8002804:	4b63      	ldr	r3, [pc, #396]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a62      	ldr	r2, [pc, #392]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 800280a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b60      	ldr	r3, [pc, #384]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a5f      	ldr	r2, [pc, #380]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 8002816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800281c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002820:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d059      	beq.n	80028e0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe fd46 	bl	80012bc <HAL_GetTick>
 8002830:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002836:	f7fe fd41 	bl	80012bc <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b64      	cmp	r3, #100	; 0x64
 8002844:	d902      	bls.n	800284c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	f000 bf67 	b.w	800371a <HAL_RCC_OscConfig+0x109a>
 800284c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002850:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002860:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002864:	fab3 f383 	clz	r3, r3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b01      	cmp	r3, #1
 8002876:	d102      	bne.n	800287e <HAL_RCC_OscConfig+0x1fe>
 8002878:	4b46      	ldr	r3, [pc, #280]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	e015      	b.n	80028aa <HAL_RCC_OscConfig+0x22a>
 800287e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002882:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002892:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002896:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800289a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80028a6:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028ae:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80028b2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80028b6:	fa92 f2a2 	rbit	r2, r2
 80028ba:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80028be:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80028c2:	fab2 f282 	clz	r2, r2
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	f042 0220 	orr.w	r2, r2, #32
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	f002 021f 	and.w	r2, r2, #31
 80028d2:	2101      	movs	r1, #1
 80028d4:	fa01 f202 	lsl.w	r2, r1, r2
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0ab      	beq.n	8002836 <HAL_RCC_OscConfig+0x1b6>
 80028de:	e05c      	b.n	800299a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe fcec 	bl	80012bc <HAL_GetTick>
 80028e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e8:	e00a      	b.n	8002900 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ea:	f7fe fce7 	bl	80012bc <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d902      	bls.n	8002900 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	f000 bf0d 	b.w	800371a <HAL_RCC_OscConfig+0x109a>
 8002900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002904:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002914:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	b2db      	uxtb	r3, r3
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d102      	bne.n	8002932 <HAL_RCC_OscConfig+0x2b2>
 800292c:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	e015      	b.n	800295e <HAL_RCC_OscConfig+0x2de>
 8002932:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002936:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002946:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800294a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800294e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_RCC_OscConfig+0x314>)
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002962:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002966:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800296a:	fa92 f2a2 	rbit	r2, r2
 800296e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002972:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002976:	fab2 f282 	clz	r2, r2
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	f042 0220 	orr.w	r2, r2, #32
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	f002 021f 	and.w	r2, r2, #31
 8002986:	2101      	movs	r1, #1
 8002988:	fa01 f202 	lsl.w	r2, r1, r2
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1ab      	bne.n	80028ea <HAL_RCC_OscConfig+0x26a>
 8002992:	e002      	b.n	800299a <HAL_RCC_OscConfig+0x31a>
 8002994:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800299e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 817f 	beq.w	8002cae <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029b0:	4ba7      	ldr	r3, [pc, #668]	; (8002c50 <HAL_RCC_OscConfig+0x5d0>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00c      	beq.n	80029d6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029bc:	4ba4      	ldr	r3, [pc, #656]	; (8002c50 <HAL_RCC_OscConfig+0x5d0>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d173      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x430>
 80029c8:	4ba1      	ldr	r3, [pc, #644]	; (8002c50 <HAL_RCC_OscConfig+0x5d0>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80029d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d4:	d16c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x430>
 80029d6:	2302      	movs	r3, #2
 80029d8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80029e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d102      	bne.n	8002a06 <HAL_RCC_OscConfig+0x386>
 8002a00:	4b93      	ldr	r3, [pc, #588]	; (8002c50 <HAL_RCC_OscConfig+0x5d0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	e013      	b.n	8002a2e <HAL_RCC_OscConfig+0x3ae>
 8002a06:	2302      	movs	r3, #2
 8002a08:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002a18:	2302      	movs	r3, #2
 8002a1a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002a1e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002a2a:	4b89      	ldr	r3, [pc, #548]	; (8002c50 <HAL_RCC_OscConfig+0x5d0>)
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002a34:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002a38:	fa92 f2a2 	rbit	r2, r2
 8002a3c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002a40:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002a44:	fab2 f282 	clz	r2, r2
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	f042 0220 	orr.w	r2, r2, #32
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	f002 021f 	and.w	r2, r2, #31
 8002a54:	2101      	movs	r1, #1
 8002a56:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCC_OscConfig+0x3f6>
 8002a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d002      	beq.n	8002a76 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	f000 be52 	b.w	800371a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a76:	4b76      	ldr	r3, [pc, #472]	; (8002c50 <HAL_RCC_OscConfig+0x5d0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	21f8      	movs	r1, #248	; 0xf8
 8002a8c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002a94:	fa91 f1a1 	rbit	r1, r1
 8002a98:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002a9c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002aa0:	fab1 f181 	clz	r1, r1
 8002aa4:	b2c9      	uxtb	r1, r1
 8002aa6:	408b      	lsls	r3, r1
 8002aa8:	4969      	ldr	r1, [pc, #420]	; (8002c50 <HAL_RCC_OscConfig+0x5d0>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	e0fe      	b.n	8002cae <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 8088 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x552>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002acc:	fa93 f3a3 	rbit	r3, r3
 8002ad0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002ad4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad8:	fab3 f383 	clz	r3, r3
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ae2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2301      	movs	r3, #1
 8002aec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aee:	f7fe fbe5 	bl	80012bc <HAL_GetTick>
 8002af2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af6:	e00a      	b.n	8002b0e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af8:	f7fe fbe0 	bl	80012bc <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d902      	bls.n	8002b0e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	f000 be06 	b.w	800371a <HAL_RCC_OscConfig+0x109a>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002b20:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d102      	bne.n	8002b3e <HAL_RCC_OscConfig+0x4be>
 8002b38:	4b45      	ldr	r3, [pc, #276]	; (8002c50 <HAL_RCC_OscConfig+0x5d0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	e013      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e6>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002b50:	2302      	movs	r3, #2
 8002b52:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b56:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b62:	4b3b      	ldr	r3, [pc, #236]	; (8002c50 <HAL_RCC_OscConfig+0x5d0>)
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	2202      	movs	r2, #2
 8002b68:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002b6c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002b70:	fa92 f2a2 	rbit	r2, r2
 8002b74:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002b78:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002b7c:	fab2 f282 	clz	r2, r2
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	f042 0220 	orr.w	r2, r2, #32
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	f002 021f 	and.w	r2, r2, #31
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0af      	beq.n	8002af8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b98:	4b2d      	ldr	r3, [pc, #180]	; (8002c50 <HAL_RCC_OscConfig+0x5d0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	21f8      	movs	r1, #248	; 0xf8
 8002bae:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002bb6:	fa91 f1a1 	rbit	r1, r1
 8002bba:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002bbe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002bc2:	fab1 f181 	clz	r1, r1
 8002bc6:	b2c9      	uxtb	r1, r1
 8002bc8:	408b      	lsls	r3, r1
 8002bca:	4921      	ldr	r1, [pc, #132]	; (8002c50 <HAL_RCC_OscConfig+0x5d0>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	600b      	str	r3, [r1, #0]
 8002bd0:	e06d      	b.n	8002cae <HAL_RCC_OscConfig+0x62e>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002be4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bf2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7fe fb5d 	bl	80012bc <HAL_GetTick>
 8002c02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c08:	f7fe fb58 	bl	80012bc <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d902      	bls.n	8002c1e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	f000 bd7e 	b.w	800371a <HAL_RCC_OscConfig+0x109a>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002c30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c34:	fab3 f383 	clz	r3, r3
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d105      	bne.n	8002c54 <HAL_RCC_OscConfig+0x5d4>
 8002c48:	4b01      	ldr	r3, [pc, #4]	; (8002c50 <HAL_RCC_OscConfig+0x5d0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	e016      	b.n	8002c7c <HAL_RCC_OscConfig+0x5fc>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	2302      	movs	r3, #2
 8002c56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002c66:	2302      	movs	r3, #2
 8002c68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c6c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002c78:	4bbf      	ldr	r3, [pc, #764]	; (8002f78 <HAL_RCC_OscConfig+0x8f8>)
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002c82:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002c86:	fa92 f2a2 	rbit	r2, r2
 8002c8a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002c8e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c92:	fab2 f282 	clz	r2, r2
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	f042 0220 	orr.w	r2, r2, #32
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	f002 021f 	and.w	r2, r2, #31
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1ac      	bne.n	8002c08 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 8113 	beq.w	8002eea <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d07c      	beq.n	8002dce <HAL_RCC_OscConfig+0x74e>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002ce6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4ba2      	ldr	r3, [pc, #648]	; (8002f7c <HAL_RCC_OscConfig+0x8fc>)
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fadd 	bl	80012bc <HAL_GetTick>
 8002d02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d08:	f7fe fad8 	bl	80012bc <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d902      	bls.n	8002d1e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	f000 bcfe 	b.w	800371a <HAL_RCC_OscConfig+0x109a>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d28:	fa93 f2a3 	rbit	r2, r3
 8002d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d30:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d3e:	2202      	movs	r2, #2
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	fa93 f2a3 	rbit	r2, r3
 8002d50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d62:	2202      	movs	r2, #2
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	fa93 f2a3 	rbit	r2, r3
 8002d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d7c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	4b7e      	ldr	r3, [pc, #504]	; (8002f78 <HAL_RCC_OscConfig+0x8f8>)
 8002d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d86:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d8a:	2102      	movs	r1, #2
 8002d8c:	6019      	str	r1, [r3, #0]
 8002d8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	fa93 f1a3 	rbit	r1, r3
 8002d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002da4:	6019      	str	r1, [r3, #0]
  return result;
 8002da6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002daa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	fab3 f383 	clz	r3, r3
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d09d      	beq.n	8002d08 <HAL_RCC_OscConfig+0x688>
 8002dcc:	e08d      	b.n	8002eea <HAL_RCC_OscConfig+0x86a>
 8002dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dd2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dde:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	fa93 f2a3 	rbit	r2, r3
 8002de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002df0:	601a      	str	r2, [r3, #0]
  return result;
 8002df2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002df6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002dfa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dfc:	fab3 f383 	clz	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	4b5d      	ldr	r3, [pc, #372]	; (8002f7c <HAL_RCC_OscConfig+0x8fc>)
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e10:	f7fe fa54 	bl	80012bc <HAL_GetTick>
 8002e14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e1a:	f7fe fa4f 	bl	80012bc <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d902      	bls.n	8002e30 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	f000 bc75 	b.w	800371a <HAL_RCC_OscConfig+0x109a>
 8002e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e34:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002e38:	2202      	movs	r2, #2
 8002e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e40:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	fa93 f2a3 	rbit	r2, r3
 8002e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e4e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	fa93 f2a3 	rbit	r2, r3
 8002e6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e7c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e80:	2202      	movs	r2, #2
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e88:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	fa93 f2a3 	rbit	r2, r3
 8002e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e96:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9c:	4b36      	ldr	r3, [pc, #216]	; (8002f78 <HAL_RCC_OscConfig+0x8f8>)
 8002e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	6019      	str	r1, [r3, #0]
 8002eac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	fa93 f1a3 	rbit	r1, r3
 8002eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ebe:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ec2:	6019      	str	r1, [r3, #0]
  return result;
 8002ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	2101      	movs	r1, #1
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d197      	bne.n	8002e1a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 81a5 	beq.w	800324a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f00:	2300      	movs	r3, #0
 8002f02:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <HAL_RCC_OscConfig+0x8f8>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d116      	bne.n	8002f40 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_RCC_OscConfig+0x8f8>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	4a18      	ldr	r2, [pc, #96]	; (8002f78 <HAL_RCC_OscConfig+0x8f8>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	61d3      	str	r3, [r2, #28]
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <HAL_RCC_OscConfig+0x8f8>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f38:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <HAL_RCC_OscConfig+0x900>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d121      	bne.n	8002f90 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_RCC_OscConfig+0x900>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0b      	ldr	r2, [pc, #44]	; (8002f80 <HAL_RCC_OscConfig+0x900>)
 8002f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f56:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f58:	f7fe f9b0 	bl	80012bc <HAL_GetTick>
 8002f5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	e010      	b.n	8002f84 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f62:	f7fe f9ab 	bl	80012bc <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	; 0x64
 8002f70:	d908      	bls.n	8002f84 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e3d1      	b.n	800371a <HAL_RCC_OscConfig+0x109a>
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	10908120 	.word	0x10908120
 8002f80:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	4b8d      	ldr	r3, [pc, #564]	; (80031bc <HAL_RCC_OscConfig+0xb3c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0e8      	beq.n	8002f62 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f94:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d106      	bne.n	8002fae <HAL_RCC_OscConfig+0x92e>
 8002fa0:	4b87      	ldr	r3, [pc, #540]	; (80031c0 <HAL_RCC_OscConfig+0xb40>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	4a86      	ldr	r2, [pc, #536]	; (80031c0 <HAL_RCC_OscConfig+0xb40>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	6213      	str	r3, [r2, #32]
 8002fac:	e035      	b.n	800301a <HAL_RCC_OscConfig+0x99a>
 8002fae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x958>
 8002fbe:	4b80      	ldr	r3, [pc, #512]	; (80031c0 <HAL_RCC_OscConfig+0xb40>)
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	4a7f      	ldr	r2, [pc, #508]	; (80031c0 <HAL_RCC_OscConfig+0xb40>)
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	6213      	str	r3, [r2, #32]
 8002fca:	4b7d      	ldr	r3, [pc, #500]	; (80031c0 <HAL_RCC_OscConfig+0xb40>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	4a7c      	ldr	r2, [pc, #496]	; (80031c0 <HAL_RCC_OscConfig+0xb40>)
 8002fd0:	f023 0304 	bic.w	r3, r3, #4
 8002fd4:	6213      	str	r3, [r2, #32]
 8002fd6:	e020      	b.n	800301a <HAL_RCC_OscConfig+0x99a>
 8002fd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fdc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b05      	cmp	r3, #5
 8002fe6:	d10c      	bne.n	8003002 <HAL_RCC_OscConfig+0x982>
 8002fe8:	4b75      	ldr	r3, [pc, #468]	; (80031c0 <HAL_RCC_OscConfig+0xb40>)
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4a74      	ldr	r2, [pc, #464]	; (80031c0 <HAL_RCC_OscConfig+0xb40>)
 8002fee:	f043 0304 	orr.w	r3, r3, #4
 8002ff2:	6213      	str	r3, [r2, #32]
 8002ff4:	4b72      	ldr	r3, [pc, #456]	; (80031c0 <HAL_RCC_OscConfig+0xb40>)
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	4a71      	ldr	r2, [pc, #452]	; (80031c0 <HAL_RCC_OscConfig+0xb40>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6213      	str	r3, [r2, #32]
 8003000:	e00b      	b.n	800301a <HAL_RCC_OscConfig+0x99a>
 8003002:	4b6f      	ldr	r3, [pc, #444]	; (80031c0 <HAL_RCC_OscConfig+0xb40>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	4a6e      	ldr	r2, [pc, #440]	; (80031c0 <HAL_RCC_OscConfig+0xb40>)
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	6213      	str	r3, [r2, #32]
 800300e:	4b6c      	ldr	r3, [pc, #432]	; (80031c0 <HAL_RCC_OscConfig+0xb40>)
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	4a6b      	ldr	r2, [pc, #428]	; (80031c0 <HAL_RCC_OscConfig+0xb40>)
 8003014:	f023 0304 	bic.w	r3, r3, #4
 8003018:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800301a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800301e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8081 	beq.w	800312e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302c:	f7fe f946 	bl	80012bc <HAL_GetTick>
 8003030:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003034:	e00b      	b.n	800304e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003036:	f7fe f941 	bl	80012bc <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e365      	b.n	800371a <HAL_RCC_OscConfig+0x109a>
 800304e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003052:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003056:	2202      	movs	r2, #2
 8003058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800305e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	fa93 f2a3 	rbit	r2, r3
 8003068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800306c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003076:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800307a:	2202      	movs	r2, #2
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003082:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	fa93 f2a3 	rbit	r2, r3
 800308c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003090:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003094:	601a      	str	r2, [r3, #0]
  return result;
 8003096:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800309a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800309e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	f043 0302 	orr.w	r3, r3, #2
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d102      	bne.n	80030ba <HAL_RCC_OscConfig+0xa3a>
 80030b4:	4b42      	ldr	r3, [pc, #264]	; (80031c0 <HAL_RCC_OscConfig+0xb40>)
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	e013      	b.n	80030e2 <HAL_RCC_OscConfig+0xa62>
 80030ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030be:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80030c2:	2202      	movs	r2, #2
 80030c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	fa93 f2a3 	rbit	r2, r3
 80030d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030d8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	4b38      	ldr	r3, [pc, #224]	; (80031c0 <HAL_RCC_OscConfig+0xb40>)
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030e6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80030ea:	2102      	movs	r1, #2
 80030ec:	6011      	str	r1, [r2, #0]
 80030ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030f2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	fa92 f1a2 	rbit	r1, r2
 80030fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003100:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003104:	6011      	str	r1, [r2, #0]
  return result;
 8003106:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800310a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	fab2 f282 	clz	r2, r2
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	f002 021f 	and.w	r2, r2, #31
 8003120:	2101      	movs	r1, #1
 8003122:	fa01 f202 	lsl.w	r2, r1, r2
 8003126:	4013      	ands	r3, r2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d084      	beq.n	8003036 <HAL_RCC_OscConfig+0x9b6>
 800312c:	e083      	b.n	8003236 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312e:	f7fe f8c5 	bl	80012bc <HAL_GetTick>
 8003132:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003136:	e00b      	b.n	8003150 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003138:	f7fe f8c0 	bl	80012bc <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	f241 3288 	movw	r2, #5000	; 0x1388
 8003148:	4293      	cmp	r3, r2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e2e4      	b.n	800371a <HAL_RCC_OscConfig+0x109a>
 8003150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003154:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003158:	2202      	movs	r2, #2
 800315a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003160:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	fa93 f2a3 	rbit	r2, r3
 800316a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800316e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003178:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800317c:	2202      	movs	r2, #2
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003184:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	fa93 f2a3 	rbit	r2, r3
 800318e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003192:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003196:	601a      	str	r2, [r3, #0]
  return result;
 8003198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800319c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80031a0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f043 0302 	orr.w	r3, r3, #2
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d106      	bne.n	80031c4 <HAL_RCC_OscConfig+0xb44>
 80031b6:	4b02      	ldr	r3, [pc, #8]	; (80031c0 <HAL_RCC_OscConfig+0xb40>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	e017      	b.n	80031ec <HAL_RCC_OscConfig+0xb6c>
 80031bc:	40007000 	.word	0x40007000
 80031c0:	40021000 	.word	0x40021000
 80031c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031c8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80031cc:	2202      	movs	r2, #2
 80031ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	fa93 f2a3 	rbit	r2, r3
 80031de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	4bb3      	ldr	r3, [pc, #716]	; (80034b8 <HAL_RCC_OscConfig+0xe38>)
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031f0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80031f4:	2102      	movs	r1, #2
 80031f6:	6011      	str	r1, [r2, #0]
 80031f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	fa92 f1a2 	rbit	r1, r2
 8003206:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800320a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800320e:	6011      	str	r1, [r2, #0]
  return result;
 8003210:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003214:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	fab2 f282 	clz	r2, r2
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	f002 021f 	and.w	r2, r2, #31
 800322a:	2101      	movs	r1, #1
 800322c:	fa01 f202 	lsl.w	r2, r1, r2
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d180      	bne.n	8003138 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003236:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800323a:	2b01      	cmp	r3, #1
 800323c:	d105      	bne.n	800324a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323e:	4b9e      	ldr	r3, [pc, #632]	; (80034b8 <HAL_RCC_OscConfig+0xe38>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	4a9d      	ldr	r2, [pc, #628]	; (80034b8 <HAL_RCC_OscConfig+0xe38>)
 8003244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003248:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800324e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 825e 	beq.w	8003718 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800325c:	4b96      	ldr	r3, [pc, #600]	; (80034b8 <HAL_RCC_OscConfig+0xe38>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b08      	cmp	r3, #8
 8003266:	f000 821f 	beq.w	80036a8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800326a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800326e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b02      	cmp	r3, #2
 8003278:	f040 8170 	bne.w	800355c <HAL_RCC_OscConfig+0xedc>
 800327c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003280:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003284:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800328e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	fa93 f2a3 	rbit	r2, r3
 8003298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80032a0:	601a      	str	r2, [r3, #0]
  return result;
 80032a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80032aa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ac:	fab3 f383 	clz	r3, r3
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	461a      	mov	r2, r3
 80032be:	2300      	movs	r3, #0
 80032c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fd fffb 	bl	80012bc <HAL_GetTick>
 80032c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ca:	e009      	b.n	80032e0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fd fff6 	bl	80012bc <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e21c      	b.n	800371a <HAL_RCC_OscConfig+0x109a>
 80032e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80032e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032f2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	fa93 f2a3 	rbit	r2, r3
 80032fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003300:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003304:	601a      	str	r2, [r3, #0]
  return result;
 8003306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800330a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800330e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d102      	bne.n	800332a <HAL_RCC_OscConfig+0xcaa>
 8003324:	4b64      	ldr	r3, [pc, #400]	; (80034b8 <HAL_RCC_OscConfig+0xe38>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	e027      	b.n	800337a <HAL_RCC_OscConfig+0xcfa>
 800332a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800332e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003332:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003336:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800333c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	fa93 f2a3 	rbit	r2, r3
 8003346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800334a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003354:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003358:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003362:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	fa93 f2a3 	rbit	r2, r3
 800336c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003370:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	4b50      	ldr	r3, [pc, #320]	; (80034b8 <HAL_RCC_OscConfig+0xe38>)
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800337e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003382:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003386:	6011      	str	r1, [r2, #0]
 8003388:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800338c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	fa92 f1a2 	rbit	r1, r2
 8003396:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800339a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800339e:	6011      	str	r1, [r2, #0]
  return result;
 80033a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80033a4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	fab2 f282 	clz	r2, r2
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	f042 0220 	orr.w	r2, r2, #32
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	f002 021f 	and.w	r2, r2, #31
 80033ba:	2101      	movs	r1, #1
 80033bc:	fa01 f202 	lsl.w	r2, r1, r2
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d182      	bne.n	80032cc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033c6:	4b3c      	ldr	r3, [pc, #240]	; (80034b8 <HAL_RCC_OscConfig+0xe38>)
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	f023 020f 	bic.w	r2, r3, #15
 80033ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	4937      	ldr	r1, [pc, #220]	; (80034b8 <HAL_RCC_OscConfig+0xe38>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	62cb      	str	r3, [r1, #44]	; 0x2c
 80033e0:	4b35      	ldr	r3, [pc, #212]	; (80034b8 <HAL_RCC_OscConfig+0xe38>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80033e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6a19      	ldr	r1, [r3, #32]
 80033f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	430b      	orrs	r3, r1
 8003402:	492d      	ldr	r1, [pc, #180]	; (80034b8 <HAL_RCC_OscConfig+0xe38>)
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]
 8003408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800340c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003410:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800341a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	fa93 f2a3 	rbit	r2, r3
 8003424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003428:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800342c:	601a      	str	r2, [r3, #0]
  return result;
 800342e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003432:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003436:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003438:	fab3 f383 	clz	r3, r3
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003442:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	461a      	mov	r2, r3
 800344a:	2301      	movs	r3, #1
 800344c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fd ff35 	bl	80012bc <HAL_GetTick>
 8003452:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003456:	e009      	b.n	800346c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003458:	f7fd ff30 	bl	80012bc <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e156      	b.n	800371a <HAL_RCC_OscConfig+0x109a>
 800346c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003470:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003474:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003478:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800347e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	fa93 f2a3 	rbit	r2, r3
 8003488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800348c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003490:	601a      	str	r2, [r3, #0]
  return result;
 8003492:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003496:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800349a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d105      	bne.n	80034bc <HAL_RCC_OscConfig+0xe3c>
 80034b0:	4b01      	ldr	r3, [pc, #4]	; (80034b8 <HAL_RCC_OscConfig+0xe38>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	e02a      	b.n	800350c <HAL_RCC_OscConfig+0xe8c>
 80034b6:	bf00      	nop
 80034b8:	40021000 	.word	0x40021000
 80034bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80034c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ce:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	fa93 f2a3 	rbit	r2, r3
 80034d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034dc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034e6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80034ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	fa93 f2a3 	rbit	r2, r3
 80034fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003502:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	4b86      	ldr	r3, [pc, #536]	; (8003724 <HAL_RCC_OscConfig+0x10a4>)
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003510:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003514:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003518:	6011      	str	r1, [r2, #0]
 800351a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800351e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	fa92 f1a2 	rbit	r1, r2
 8003528:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800352c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003530:	6011      	str	r1, [r2, #0]
  return result;
 8003532:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003536:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	fab2 f282 	clz	r2, r2
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	f042 0220 	orr.w	r2, r2, #32
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	f002 021f 	and.w	r2, r2, #31
 800354c:	2101      	movs	r1, #1
 800354e:	fa01 f202 	lsl.w	r2, r1, r2
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	f43f af7f 	beq.w	8003458 <HAL_RCC_OscConfig+0xdd8>
 800355a:	e0dd      	b.n	8003718 <HAL_RCC_OscConfig+0x1098>
 800355c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003560:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003564:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003568:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800356e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	fa93 f2a3 	rbit	r2, r3
 8003578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800357c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003580:	601a      	str	r2, [r3, #0]
  return result;
 8003582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003586:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800358a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358c:	fab3 f383 	clz	r3, r3
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003596:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	461a      	mov	r2, r3
 800359e:	2300      	movs	r3, #0
 80035a0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a2:	f7fd fe8b 	bl	80012bc <HAL_GetTick>
 80035a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035aa:	e009      	b.n	80035c0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fd fe86 	bl	80012bc <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e0ac      	b.n	800371a <HAL_RCC_OscConfig+0x109a>
 80035c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035c4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80035c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035d2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	fa93 f2a3 	rbit	r2, r3
 80035dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035e0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80035e4:	601a      	str	r2, [r3, #0]
  return result;
 80035e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ea:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80035ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f0:	fab3 f383 	clz	r3, r3
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	d102      	bne.n	800360a <HAL_RCC_OscConfig+0xf8a>
 8003604:	4b47      	ldr	r3, [pc, #284]	; (8003724 <HAL_RCC_OscConfig+0x10a4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	e027      	b.n	800365a <HAL_RCC_OscConfig+0xfda>
 800360a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800360e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003612:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800361c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	fa93 f2a3 	rbit	r2, r3
 8003626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800362a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003634:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003642:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	fa93 f2a3 	rbit	r2, r3
 800364c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003650:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	4b33      	ldr	r3, [pc, #204]	; (8003724 <HAL_RCC_OscConfig+0x10a4>)
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800365e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003662:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003666:	6011      	str	r1, [r2, #0]
 8003668:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800366c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	fa92 f1a2 	rbit	r1, r2
 8003676:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800367a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800367e:	6011      	str	r1, [r2, #0]
  return result;
 8003680:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003684:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	fab2 f282 	clz	r2, r2
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	f042 0220 	orr.w	r2, r2, #32
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	f002 021f 	and.w	r2, r2, #31
 800369a:	2101      	movs	r1, #1
 800369c:	fa01 f202 	lsl.w	r2, r1, r2
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d182      	bne.n	80035ac <HAL_RCC_OscConfig+0xf2c>
 80036a6:	e037      	b.n	8003718 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e02e      	b.n	800371a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036bc:	4b19      	ldr	r3, [pc, #100]	; (8003724 <HAL_RCC_OscConfig+0x10a4>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80036c4:	4b17      	ldr	r3, [pc, #92]	; (8003724 <HAL_RCC_OscConfig+0x10a4>)
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80036d0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80036d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d117      	bne.n	8003714 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80036e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80036e8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d10b      	bne.n	8003714 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80036fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003700:	f003 020f 	and.w	r2, r3, #15
 8003704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003708:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000

08003728 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b09e      	sub	sp, #120	; 0x78
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e162      	b.n	8003a06 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003740:	4b90      	ldr	r3, [pc, #576]	; (8003984 <HAL_RCC_ClockConfig+0x25c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d910      	bls.n	8003770 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374e:	4b8d      	ldr	r3, [pc, #564]	; (8003984 <HAL_RCC_ClockConfig+0x25c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 0207 	bic.w	r2, r3, #7
 8003756:	498b      	ldr	r1, [pc, #556]	; (8003984 <HAL_RCC_ClockConfig+0x25c>)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	4313      	orrs	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b89      	ldr	r3, [pc, #548]	; (8003984 <HAL_RCC_ClockConfig+0x25c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e14a      	b.n	8003a06 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800377c:	4b82      	ldr	r3, [pc, #520]	; (8003988 <HAL_RCC_ClockConfig+0x260>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	497f      	ldr	r1, [pc, #508]	; (8003988 <HAL_RCC_ClockConfig+0x260>)
 800378a:	4313      	orrs	r3, r2
 800378c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 80dc 	beq.w	8003954 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d13c      	bne.n	800381e <HAL_RCC_ClockConfig+0xf6>
 80037a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b4:	fab3 f383 	clz	r3, r3
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d102      	bne.n	80037ce <HAL_RCC_ClockConfig+0xa6>
 80037c8:	4b6f      	ldr	r3, [pc, #444]	; (8003988 <HAL_RCC_ClockConfig+0x260>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	e00f      	b.n	80037ee <HAL_RCC_ClockConfig+0xc6>
 80037ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037d6:	fa93 f3a3 	rbit	r3, r3
 80037da:	667b      	str	r3, [r7, #100]	; 0x64
 80037dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037e0:	663b      	str	r3, [r7, #96]	; 0x60
 80037e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037ea:	4b67      	ldr	r3, [pc, #412]	; (8003988 <HAL_RCC_ClockConfig+0x260>)
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80037f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037f6:	fa92 f2a2 	rbit	r2, r2
 80037fa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80037fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037fe:	fab2 f282 	clz	r2, r2
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	f042 0220 	orr.w	r2, r2, #32
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	f002 021f 	and.w	r2, r2, #31
 800380e:	2101      	movs	r1, #1
 8003810:	fa01 f202 	lsl.w	r2, r1, r2
 8003814:	4013      	ands	r3, r2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d17b      	bne.n	8003912 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e0f3      	b.n	8003a06 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d13c      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x178>
 8003826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800382a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800382e:	fa93 f3a3 	rbit	r3, r3
 8003832:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003836:	fab3 f383 	clz	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b01      	cmp	r3, #1
 8003848:	d102      	bne.n	8003850 <HAL_RCC_ClockConfig+0x128>
 800384a:	4b4f      	ldr	r3, [pc, #316]	; (8003988 <HAL_RCC_ClockConfig+0x260>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	e00f      	b.n	8003870 <HAL_RCC_ClockConfig+0x148>
 8003850:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003854:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003858:	fa93 f3a3 	rbit	r3, r3
 800385c:	647b      	str	r3, [r7, #68]	; 0x44
 800385e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003862:	643b      	str	r3, [r7, #64]	; 0x40
 8003864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800386c:	4b46      	ldr	r3, [pc, #280]	; (8003988 <HAL_RCC_ClockConfig+0x260>)
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003874:	63ba      	str	r2, [r7, #56]	; 0x38
 8003876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003878:	fa92 f2a2 	rbit	r2, r2
 800387c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800387e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003880:	fab2 f282 	clz	r2, r2
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	f042 0220 	orr.w	r2, r2, #32
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	f002 021f 	and.w	r2, r2, #31
 8003890:	2101      	movs	r1, #1
 8003892:	fa01 f202 	lsl.w	r2, r1, r2
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d13a      	bne.n	8003912 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0b2      	b.n	8003a06 <HAL_RCC_ClockConfig+0x2de>
 80038a0:	2302      	movs	r3, #2
 80038a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d102      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x1a0>
 80038c2:	4b31      	ldr	r3, [pc, #196]	; (8003988 <HAL_RCC_ClockConfig+0x260>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	e00d      	b.n	80038e4 <HAL_RCC_ClockConfig+0x1bc>
 80038c8:	2302      	movs	r3, #2
 80038ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
 80038d4:	2302      	movs	r3, #2
 80038d6:	623b      	str	r3, [r7, #32]
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	fa93 f3a3 	rbit	r3, r3
 80038de:	61fb      	str	r3, [r7, #28]
 80038e0:	4b29      	ldr	r3, [pc, #164]	; (8003988 <HAL_RCC_ClockConfig+0x260>)
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	2202      	movs	r2, #2
 80038e6:	61ba      	str	r2, [r7, #24]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	fa92 f2a2 	rbit	r2, r2
 80038ee:	617a      	str	r2, [r7, #20]
  return result;
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	fab2 f282 	clz	r2, r2
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	f042 0220 	orr.w	r2, r2, #32
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	f002 021f 	and.w	r2, r2, #31
 8003902:	2101      	movs	r1, #1
 8003904:	fa01 f202 	lsl.w	r2, r1, r2
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e079      	b.n	8003a06 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003912:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <HAL_RCC_ClockConfig+0x260>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f023 0203 	bic.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	491a      	ldr	r1, [pc, #104]	; (8003988 <HAL_RCC_ClockConfig+0x260>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003924:	f7fd fcca 	bl	80012bc <HAL_GetTick>
 8003928:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	e00a      	b.n	8003942 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392c:	f7fd fcc6 	bl	80012bc <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e061      	b.n	8003a06 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	4b11      	ldr	r3, [pc, #68]	; (8003988 <HAL_RCC_ClockConfig+0x260>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 020c 	and.w	r2, r3, #12
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	429a      	cmp	r2, r3
 8003952:	d1eb      	bne.n	800392c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_ClockConfig+0x25c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d214      	bcs.n	800398c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b08      	ldr	r3, [pc, #32]	; (8003984 <HAL_RCC_ClockConfig+0x25c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 0207 	bic.w	r2, r3, #7
 800396a:	4906      	ldr	r1, [pc, #24]	; (8003984 <HAL_RCC_ClockConfig+0x25c>)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b04      	ldr	r3, [pc, #16]	; (8003984 <HAL_RCC_ClockConfig+0x25c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d005      	beq.n	800398c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e040      	b.n	8003a06 <HAL_RCC_ClockConfig+0x2de>
 8003984:	40022000 	.word	0x40022000
 8003988:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003998:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <HAL_RCC_ClockConfig+0x2e8>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	491a      	ldr	r1, [pc, #104]	; (8003a10 <HAL_RCC_ClockConfig+0x2e8>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d009      	beq.n	80039ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b6:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <HAL_RCC_ClockConfig+0x2e8>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4912      	ldr	r1, [pc, #72]	; (8003a10 <HAL_RCC_ClockConfig+0x2e8>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039ca:	f000 f829 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80039ce:	4601      	mov	r1, r0
 80039d0:	4b0f      	ldr	r3, [pc, #60]	; (8003a10 <HAL_RCC_ClockConfig+0x2e8>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d8:	22f0      	movs	r2, #240	; 0xf0
 80039da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	fa92 f2a2 	rbit	r2, r2
 80039e2:	60fa      	str	r2, [r7, #12]
  return result;
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	fab2 f282 	clz	r2, r2
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	40d3      	lsrs	r3, r2
 80039ee:	4a09      	ldr	r2, [pc, #36]	; (8003a14 <HAL_RCC_ClockConfig+0x2ec>)
 80039f0:	5cd3      	ldrb	r3, [r2, r3]
 80039f2:	fa21 f303 	lsr.w	r3, r1, r3
 80039f6:	4a08      	ldr	r2, [pc, #32]	; (8003a18 <HAL_RCC_ClockConfig+0x2f0>)
 80039f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80039fa:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <HAL_RCC_ClockConfig+0x2f4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fd fc18 	bl	8001234 <HAL_InitTick>
  
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3778      	adds	r7, #120	; 0x78
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000
 8003a14:	0800607c 	.word	0x0800607c
 8003a18:	20000010 	.word	0x20000010
 8003a1c:	20000014 	.word	0x20000014

08003a20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b08b      	sub	sp, #44	; 0x2c
 8003a24:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a3a:	4b2a      	ldr	r3, [pc, #168]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d002      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0x30>
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d003      	beq.n	8003a56 <HAL_RCC_GetSysClockFreq+0x36>
 8003a4e:	e03f      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a50:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a52:	623b      	str	r3, [r7, #32]
      break;
 8003a54:	e03f      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a5c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a60:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	fa92 f2a2 	rbit	r2, r2
 8003a68:	607a      	str	r2, [r7, #4]
  return result;
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	fab2 f282 	clz	r2, r2
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	40d3      	lsrs	r3, r2
 8003a74:	4a1d      	ldr	r2, [pc, #116]	; (8003aec <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a76:	5cd3      	ldrb	r3, [r2, r3]
 8003a78:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	220f      	movs	r2, #15
 8003a84:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	fa92 f2a2 	rbit	r2, r2
 8003a8c:	60fa      	str	r2, [r7, #12]
  return result;
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	fab2 f282 	clz	r2, r2
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	40d3      	lsrs	r3, r2
 8003a98:	4a15      	ldr	r2, [pc, #84]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a9a:	5cd3      	ldrb	r3, [r2, r3]
 8003a9c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003aa8:	4a0f      	ldr	r2, [pc, #60]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab8:	e007      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003aba:	4a0b      	ldr	r2, [pc, #44]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	fb02 f303 	mul.w	r3, r2, r3
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	623b      	str	r3, [r7, #32]
      break;
 8003ace:	e002      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ad2:	623b      	str	r3, [r7, #32]
      break;
 8003ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	372c      	adds	r7, #44	; 0x2c
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	007a1200 	.word	0x007a1200
 8003aec:	08006094 	.word	0x08006094
 8003af0:	080060a4 	.word	0x080060a4

08003af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af8:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003afa:	681b      	ldr	r3, [r3, #0]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20000010 	.word	0x20000010

08003b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b12:	f7ff ffef 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b16:	4601      	mov	r1, r0
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b20:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	fa92 f2a2 	rbit	r2, r2
 8003b2c:	603a      	str	r2, [r7, #0]
  return result;
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	fab2 f282 	clz	r2, r2
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	40d3      	lsrs	r3, r2
 8003b38:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <HAL_RCC_GetPCLK1Freq+0x40>)
 8003b3a:	5cd3      	ldrb	r3, [r2, r3]
 8003b3c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	0800608c 	.word	0x0800608c

08003b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003b56:	f7ff ffcd 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b5a:	4601      	mov	r1, r0
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b64:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003b68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	fa92 f2a2 	rbit	r2, r2
 8003b70:	603a      	str	r2, [r7, #0]
  return result;
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	fab2 f282 	clz	r2, r2
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	40d3      	lsrs	r3, r2
 8003b7c:	4a04      	ldr	r2, [pc, #16]	; (8003b90 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b7e:	5cd3      	ldrb	r3, [r2, r3]
 8003b80:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	0800608c 	.word	0x0800608c

08003b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b092      	sub	sp, #72	; 0x48
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 80d4 	beq.w	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb8:	4b4e      	ldr	r3, [pc, #312]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10e      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc4:	4b4b      	ldr	r3, [pc, #300]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	4a4a      	ldr	r2, [pc, #296]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bce:	61d3      	str	r3, [r2, #28]
 8003bd0:	4b48      	ldr	r3, [pc, #288]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be2:	4b45      	ldr	r3, [pc, #276]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d118      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bee:	4b42      	ldr	r3, [pc, #264]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a41      	ldr	r2, [pc, #260]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfa:	f7fd fb5f 	bl	80012bc <HAL_GetTick>
 8003bfe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c00:	e008      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c02:	f7fd fb5b 	bl	80012bc <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b64      	cmp	r3, #100	; 0x64
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e1d6      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c14:	4b38      	ldr	r3, [pc, #224]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0f0      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c20:	4b34      	ldr	r3, [pc, #208]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c28:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8084 	beq.w	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d07c      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c40:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c52:	fa93 f3a3 	rbit	r3, r3
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c5a:	fab3 f383 	clz	r3, r3
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c76:	fa93 f3a3 	rbit	r3, r3
 8003c7a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c7e:	fab3 f383 	clz	r3, r3
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2300      	movs	r3, #0
 8003c90:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c92:	4a18      	ldr	r2, [pc, #96]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c96:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d04b      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca2:	f7fd fb0b 	bl	80012bc <HAL_GetTick>
 8003ca6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003caa:	f7fd fb07 	bl	80012bc <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e180      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc6:	fa93 f3a3 	rbit	r3, r3
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
 8003ccc:	2302      	movs	r3, #2
 8003cce:	623b      	str	r3, [r7, #32]
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	61fb      	str	r3, [r7, #28]
  return result;
 8003cd8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cda:	fab3 f383 	clz	r3, r3
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	095b      	lsrs	r3, r3, #5
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f043 0302 	orr.w	r3, r3, #2
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d108      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003cee:	4b01      	ldr	r3, [pc, #4]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	e00d      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40007000 	.word	0x40007000
 8003cfc:	10908100 	.word	0x10908100
 8003d00:	2302      	movs	r3, #2
 8003d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	4b9a      	ldr	r3, [pc, #616]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	2202      	movs	r2, #2
 8003d12:	613a      	str	r2, [r7, #16]
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	fa92 f2a2 	rbit	r2, r2
 8003d1a:	60fa      	str	r2, [r7, #12]
  return result;
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	fab2 f282 	clz	r2, r2
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	f002 021f 	and.w	r2, r2, #31
 8003d2e:	2101      	movs	r1, #1
 8003d30:	fa01 f202 	lsl.w	r2, r1, r2
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0b7      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d3a:	4b8f      	ldr	r3, [pc, #572]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	498c      	ldr	r1, [pc, #560]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d105      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d54:	4b88      	ldr	r3, [pc, #544]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	4a87      	ldr	r2, [pc, #540]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d6c:	4b82      	ldr	r3, [pc, #520]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	f023 0203 	bic.w	r2, r3, #3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	497f      	ldr	r1, [pc, #508]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d8a:	4b7b      	ldr	r3, [pc, #492]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	4978      	ldr	r1, [pc, #480]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003da8:	4b73      	ldr	r3, [pc, #460]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	4970      	ldr	r1, [pc, #448]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dc6:	4b6c      	ldr	r3, [pc, #432]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	f023 0210 	bic.w	r2, r3, #16
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	4969      	ldr	r1, [pc, #420]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003de4:	4b64      	ldr	r3, [pc, #400]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df0:	4961      	ldr	r1, [pc, #388]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e02:	4b5d      	ldr	r3, [pc, #372]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	f023 0220 	bic.w	r2, r3, #32
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	495a      	ldr	r1, [pc, #360]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e20:	4b55      	ldr	r3, [pc, #340]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	4952      	ldr	r1, [pc, #328]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d008      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e3e:	4b4e      	ldr	r3, [pc, #312]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	494b      	ldr	r1, [pc, #300]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e5c:	4b46      	ldr	r3, [pc, #280]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	4943      	ldr	r1, [pc, #268]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d008      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e7a:	4b3f      	ldr	r3, [pc, #252]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	493c      	ldr	r1, [pc, #240]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e98:	4b37      	ldr	r3, [pc, #220]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	4934      	ldr	r1, [pc, #208]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d008      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003eb6:	4b30      	ldr	r3, [pc, #192]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	492d      	ldr	r1, [pc, #180]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ed4:	4b28      	ldr	r3, [pc, #160]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee0:	4925      	ldr	r1, [pc, #148]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d008      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ef2:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	491e      	ldr	r1, [pc, #120]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003f10:	4b19      	ldr	r3, [pc, #100]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	4916      	ldr	r1, [pc, #88]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d008      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003f2e:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3a:	490f      	ldr	r1, [pc, #60]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f58:	4907      	ldr	r1, [pc, #28]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00c      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003f6a:	4b03      	ldr	r3, [pc, #12]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	e002      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f7e:	4913      	ldr	r1, [pc, #76]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003f90:	4b0e      	ldr	r3, [pc, #56]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9c:	490b      	ldr	r1, [pc, #44]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d008      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003fae:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fba:	4904      	ldr	r1, [pc, #16]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3748      	adds	r7, #72	; 0x48
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40021000 	.word	0x40021000

08003fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e049      	b.n	8004076 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fd f84a 	bl	8001090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	4619      	mov	r1, r3
 800400e:	4610      	mov	r0, r2
 8004010:	f000 f836 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a42      	ldr	r2, [pc, #264]	; (800419c <TIM_Base_SetConfig+0x11c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d013      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409e:	d00f      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a3f      	ldr	r2, [pc, #252]	; (80041a0 <TIM_Base_SetConfig+0x120>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00b      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a3e      	ldr	r2, [pc, #248]	; (80041a4 <TIM_Base_SetConfig+0x124>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d007      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a3d      	ldr	r2, [pc, #244]	; (80041a8 <TIM_Base_SetConfig+0x128>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <TIM_Base_SetConfig+0x40>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a3c      	ldr	r2, [pc, #240]	; (80041ac <TIM_Base_SetConfig+0x12c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d108      	bne.n	80040d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a31      	ldr	r2, [pc, #196]	; (800419c <TIM_Base_SetConfig+0x11c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d01f      	beq.n	800411a <TIM_Base_SetConfig+0x9a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e0:	d01b      	beq.n	800411a <TIM_Base_SetConfig+0x9a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a2e      	ldr	r2, [pc, #184]	; (80041a0 <TIM_Base_SetConfig+0x120>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d017      	beq.n	800411a <TIM_Base_SetConfig+0x9a>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a2d      	ldr	r2, [pc, #180]	; (80041a4 <TIM_Base_SetConfig+0x124>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d013      	beq.n	800411a <TIM_Base_SetConfig+0x9a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a2c      	ldr	r2, [pc, #176]	; (80041a8 <TIM_Base_SetConfig+0x128>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00f      	beq.n	800411a <TIM_Base_SetConfig+0x9a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a2c      	ldr	r2, [pc, #176]	; (80041b0 <TIM_Base_SetConfig+0x130>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00b      	beq.n	800411a <TIM_Base_SetConfig+0x9a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a2b      	ldr	r2, [pc, #172]	; (80041b4 <TIM_Base_SetConfig+0x134>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d007      	beq.n	800411a <TIM_Base_SetConfig+0x9a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a2a      	ldr	r2, [pc, #168]	; (80041b8 <TIM_Base_SetConfig+0x138>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d003      	beq.n	800411a <TIM_Base_SetConfig+0x9a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a25      	ldr	r2, [pc, #148]	; (80041ac <TIM_Base_SetConfig+0x12c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d108      	bne.n	800412c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a12      	ldr	r2, [pc, #72]	; (800419c <TIM_Base_SetConfig+0x11c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d013      	beq.n	8004180 <TIM_Base_SetConfig+0x100>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a13      	ldr	r2, [pc, #76]	; (80041a8 <TIM_Base_SetConfig+0x128>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00f      	beq.n	8004180 <TIM_Base_SetConfig+0x100>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a13      	ldr	r2, [pc, #76]	; (80041b0 <TIM_Base_SetConfig+0x130>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00b      	beq.n	8004180 <TIM_Base_SetConfig+0x100>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <TIM_Base_SetConfig+0x134>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d007      	beq.n	8004180 <TIM_Base_SetConfig+0x100>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a11      	ldr	r2, [pc, #68]	; (80041b8 <TIM_Base_SetConfig+0x138>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_Base_SetConfig+0x100>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a0c      	ldr	r2, [pc, #48]	; (80041ac <TIM_Base_SetConfig+0x12c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d103      	bne.n	8004188 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	615a      	str	r2, [r3, #20]
}
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40012c00 	.word	0x40012c00
 80041a0:	40000400 	.word	0x40000400
 80041a4:	40000800 	.word	0x40000800
 80041a8:	40013400 	.word	0x40013400
 80041ac:	40015000 	.word	0x40015000
 80041b0:	40014000 	.word	0x40014000
 80041b4:	40014400 	.word	0x40014400
 80041b8:	40014800 	.word	0x40014800

080041bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e040      	b.n	8004250 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d106      	bne.n	80041e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7fc ffa6 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2224      	movs	r2, #36	; 0x24
 80041e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0201 	bic.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f8b6 	bl	800436c <UART_SetConfig>
 8004200:	4603      	mov	r3, r0
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e022      	b.n	8004250 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa7e 	bl	8004714 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004226:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004236:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fb05 	bl	8004858 <UART_CheckIdleState>
 800424e:	4603      	mov	r3, r0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	; 0x28
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800426c:	2b20      	cmp	r3, #32
 800426e:	d178      	bne.n	8004362 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <HAL_UART_Transmit+0x24>
 8004276:	88fb      	ldrh	r3, [r7, #6]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e071      	b.n	8004364 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2221      	movs	r2, #33	; 0x21
 800428c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800428e:	f7fd f815 	bl	80012bc <HAL_GetTick>
 8004292:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	88fa      	ldrh	r2, [r7, #6]
 8004298:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	88fa      	ldrh	r2, [r7, #6]
 80042a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ac:	d108      	bne.n	80042c0 <HAL_UART_Transmit+0x68>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d104      	bne.n	80042c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	e003      	b.n	80042c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042c8:	e030      	b.n	800432c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2200      	movs	r2, #0
 80042d2:	2180      	movs	r1, #128	; 0x80
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 fb67 	bl	80049a8 <UART_WaitOnFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d004      	beq.n	80042ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2220      	movs	r2, #32
 80042e4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e03c      	b.n	8004364 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10b      	bne.n	8004308 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	881a      	ldrh	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042fc:	b292      	uxth	r2, r2
 80042fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	3302      	adds	r3, #2
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	e008      	b.n	800431a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	781a      	ldrb	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	b292      	uxth	r2, r2
 8004312:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	3301      	adds	r3, #1
 8004318:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1c8      	bne.n	80042ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2200      	movs	r2, #0
 8004340:	2140      	movs	r1, #64	; 0x40
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 fb30 	bl	80049a8 <UART_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d004      	beq.n	8004358 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e005      	b.n	8004364 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	e000      	b.n	8004364 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004362:	2302      	movs	r3, #2
  }
}
 8004364:	4618      	mov	r0, r3
 8004366:	3720      	adds	r7, #32
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	4b92      	ldr	r3, [pc, #584]	; (80045e0 <UART_SetConfig+0x274>)
 8004398:	4013      	ands	r3, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	6979      	ldr	r1, [r7, #20]
 80043a0:	430b      	orrs	r3, r1
 80043a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	430a      	orrs	r2, r1
 80043dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a80      	ldr	r2, [pc, #512]	; (80045e4 <UART_SetConfig+0x278>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d120      	bne.n	800442a <UART_SetConfig+0xbe>
 80043e8:	4b7f      	ldr	r3, [pc, #508]	; (80045e8 <UART_SetConfig+0x27c>)
 80043ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	d817      	bhi.n	8004424 <UART_SetConfig+0xb8>
 80043f4:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <UART_SetConfig+0x90>)
 80043f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fa:	bf00      	nop
 80043fc:	0800440d 	.word	0x0800440d
 8004400:	08004419 	.word	0x08004419
 8004404:	0800441f 	.word	0x0800441f
 8004408:	08004413 	.word	0x08004413
 800440c:	2301      	movs	r3, #1
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e0b5      	b.n	800457e <UART_SetConfig+0x212>
 8004412:	2302      	movs	r3, #2
 8004414:	77fb      	strb	r3, [r7, #31]
 8004416:	e0b2      	b.n	800457e <UART_SetConfig+0x212>
 8004418:	2304      	movs	r3, #4
 800441a:	77fb      	strb	r3, [r7, #31]
 800441c:	e0af      	b.n	800457e <UART_SetConfig+0x212>
 800441e:	2308      	movs	r3, #8
 8004420:	77fb      	strb	r3, [r7, #31]
 8004422:	e0ac      	b.n	800457e <UART_SetConfig+0x212>
 8004424:	2310      	movs	r3, #16
 8004426:	77fb      	strb	r3, [r7, #31]
 8004428:	e0a9      	b.n	800457e <UART_SetConfig+0x212>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a6f      	ldr	r2, [pc, #444]	; (80045ec <UART_SetConfig+0x280>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d124      	bne.n	800447e <UART_SetConfig+0x112>
 8004434:	4b6c      	ldr	r3, [pc, #432]	; (80045e8 <UART_SetConfig+0x27c>)
 8004436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800443c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004440:	d011      	beq.n	8004466 <UART_SetConfig+0xfa>
 8004442:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004446:	d817      	bhi.n	8004478 <UART_SetConfig+0x10c>
 8004448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800444c:	d011      	beq.n	8004472 <UART_SetConfig+0x106>
 800444e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004452:	d811      	bhi.n	8004478 <UART_SetConfig+0x10c>
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <UART_SetConfig+0xf4>
 8004458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445c:	d006      	beq.n	800446c <UART_SetConfig+0x100>
 800445e:	e00b      	b.n	8004478 <UART_SetConfig+0x10c>
 8004460:	2300      	movs	r3, #0
 8004462:	77fb      	strb	r3, [r7, #31]
 8004464:	e08b      	b.n	800457e <UART_SetConfig+0x212>
 8004466:	2302      	movs	r3, #2
 8004468:	77fb      	strb	r3, [r7, #31]
 800446a:	e088      	b.n	800457e <UART_SetConfig+0x212>
 800446c:	2304      	movs	r3, #4
 800446e:	77fb      	strb	r3, [r7, #31]
 8004470:	e085      	b.n	800457e <UART_SetConfig+0x212>
 8004472:	2308      	movs	r3, #8
 8004474:	77fb      	strb	r3, [r7, #31]
 8004476:	e082      	b.n	800457e <UART_SetConfig+0x212>
 8004478:	2310      	movs	r3, #16
 800447a:	77fb      	strb	r3, [r7, #31]
 800447c:	e07f      	b.n	800457e <UART_SetConfig+0x212>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a5b      	ldr	r2, [pc, #364]	; (80045f0 <UART_SetConfig+0x284>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d124      	bne.n	80044d2 <UART_SetConfig+0x166>
 8004488:	4b57      	ldr	r3, [pc, #348]	; (80045e8 <UART_SetConfig+0x27c>)
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004490:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004494:	d011      	beq.n	80044ba <UART_SetConfig+0x14e>
 8004496:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800449a:	d817      	bhi.n	80044cc <UART_SetConfig+0x160>
 800449c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044a0:	d011      	beq.n	80044c6 <UART_SetConfig+0x15a>
 80044a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044a6:	d811      	bhi.n	80044cc <UART_SetConfig+0x160>
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <UART_SetConfig+0x148>
 80044ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044b0:	d006      	beq.n	80044c0 <UART_SetConfig+0x154>
 80044b2:	e00b      	b.n	80044cc <UART_SetConfig+0x160>
 80044b4:	2300      	movs	r3, #0
 80044b6:	77fb      	strb	r3, [r7, #31]
 80044b8:	e061      	b.n	800457e <UART_SetConfig+0x212>
 80044ba:	2302      	movs	r3, #2
 80044bc:	77fb      	strb	r3, [r7, #31]
 80044be:	e05e      	b.n	800457e <UART_SetConfig+0x212>
 80044c0:	2304      	movs	r3, #4
 80044c2:	77fb      	strb	r3, [r7, #31]
 80044c4:	e05b      	b.n	800457e <UART_SetConfig+0x212>
 80044c6:	2308      	movs	r3, #8
 80044c8:	77fb      	strb	r3, [r7, #31]
 80044ca:	e058      	b.n	800457e <UART_SetConfig+0x212>
 80044cc:	2310      	movs	r3, #16
 80044ce:	77fb      	strb	r3, [r7, #31]
 80044d0:	e055      	b.n	800457e <UART_SetConfig+0x212>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a47      	ldr	r2, [pc, #284]	; (80045f4 <UART_SetConfig+0x288>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d124      	bne.n	8004526 <UART_SetConfig+0x1ba>
 80044dc:	4b42      	ldr	r3, [pc, #264]	; (80045e8 <UART_SetConfig+0x27c>)
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80044e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044e8:	d011      	beq.n	800450e <UART_SetConfig+0x1a2>
 80044ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044ee:	d817      	bhi.n	8004520 <UART_SetConfig+0x1b4>
 80044f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044f4:	d011      	beq.n	800451a <UART_SetConfig+0x1ae>
 80044f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044fa:	d811      	bhi.n	8004520 <UART_SetConfig+0x1b4>
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <UART_SetConfig+0x19c>
 8004500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004504:	d006      	beq.n	8004514 <UART_SetConfig+0x1a8>
 8004506:	e00b      	b.n	8004520 <UART_SetConfig+0x1b4>
 8004508:	2300      	movs	r3, #0
 800450a:	77fb      	strb	r3, [r7, #31]
 800450c:	e037      	b.n	800457e <UART_SetConfig+0x212>
 800450e:	2302      	movs	r3, #2
 8004510:	77fb      	strb	r3, [r7, #31]
 8004512:	e034      	b.n	800457e <UART_SetConfig+0x212>
 8004514:	2304      	movs	r3, #4
 8004516:	77fb      	strb	r3, [r7, #31]
 8004518:	e031      	b.n	800457e <UART_SetConfig+0x212>
 800451a:	2308      	movs	r3, #8
 800451c:	77fb      	strb	r3, [r7, #31]
 800451e:	e02e      	b.n	800457e <UART_SetConfig+0x212>
 8004520:	2310      	movs	r3, #16
 8004522:	77fb      	strb	r3, [r7, #31]
 8004524:	e02b      	b.n	800457e <UART_SetConfig+0x212>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a33      	ldr	r2, [pc, #204]	; (80045f8 <UART_SetConfig+0x28c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d124      	bne.n	800457a <UART_SetConfig+0x20e>
 8004530:	4b2d      	ldr	r3, [pc, #180]	; (80045e8 <UART_SetConfig+0x27c>)
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004538:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800453c:	d011      	beq.n	8004562 <UART_SetConfig+0x1f6>
 800453e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004542:	d817      	bhi.n	8004574 <UART_SetConfig+0x208>
 8004544:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004548:	d011      	beq.n	800456e <UART_SetConfig+0x202>
 800454a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800454e:	d811      	bhi.n	8004574 <UART_SetConfig+0x208>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <UART_SetConfig+0x1f0>
 8004554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004558:	d006      	beq.n	8004568 <UART_SetConfig+0x1fc>
 800455a:	e00b      	b.n	8004574 <UART_SetConfig+0x208>
 800455c:	2300      	movs	r3, #0
 800455e:	77fb      	strb	r3, [r7, #31]
 8004560:	e00d      	b.n	800457e <UART_SetConfig+0x212>
 8004562:	2302      	movs	r3, #2
 8004564:	77fb      	strb	r3, [r7, #31]
 8004566:	e00a      	b.n	800457e <UART_SetConfig+0x212>
 8004568:	2304      	movs	r3, #4
 800456a:	77fb      	strb	r3, [r7, #31]
 800456c:	e007      	b.n	800457e <UART_SetConfig+0x212>
 800456e:	2308      	movs	r3, #8
 8004570:	77fb      	strb	r3, [r7, #31]
 8004572:	e004      	b.n	800457e <UART_SetConfig+0x212>
 8004574:	2310      	movs	r3, #16
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e001      	b.n	800457e <UART_SetConfig+0x212>
 800457a:	2310      	movs	r3, #16
 800457c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004586:	d16b      	bne.n	8004660 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004588:	7ffb      	ldrb	r3, [r7, #31]
 800458a:	2b08      	cmp	r3, #8
 800458c:	d838      	bhi.n	8004600 <UART_SetConfig+0x294>
 800458e:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <UART_SetConfig+0x228>)
 8004590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004594:	080045b9 	.word	0x080045b9
 8004598:	080045c1 	.word	0x080045c1
 800459c:	080045c9 	.word	0x080045c9
 80045a0:	08004601 	.word	0x08004601
 80045a4:	080045cf 	.word	0x080045cf
 80045a8:	08004601 	.word	0x08004601
 80045ac:	08004601 	.word	0x08004601
 80045b0:	08004601 	.word	0x08004601
 80045b4:	080045d7 	.word	0x080045d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b8:	f7ff faa8 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 80045bc:	61b8      	str	r0, [r7, #24]
        break;
 80045be:	e024      	b.n	800460a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c0:	f7ff fac6 	bl	8003b50 <HAL_RCC_GetPCLK2Freq>
 80045c4:	61b8      	str	r0, [r7, #24]
        break;
 80045c6:	e020      	b.n	800460a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c8:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <UART_SetConfig+0x290>)
 80045ca:	61bb      	str	r3, [r7, #24]
        break;
 80045cc:	e01d      	b.n	800460a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ce:	f7ff fa27 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80045d2:	61b8      	str	r0, [r7, #24]
        break;
 80045d4:	e019      	b.n	800460a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045da:	61bb      	str	r3, [r7, #24]
        break;
 80045dc:	e015      	b.n	800460a <UART_SetConfig+0x29e>
 80045de:	bf00      	nop
 80045e0:	efff69f3 	.word	0xefff69f3
 80045e4:	40013800 	.word	0x40013800
 80045e8:	40021000 	.word	0x40021000
 80045ec:	40004400 	.word	0x40004400
 80045f0:	40004800 	.word	0x40004800
 80045f4:	40004c00 	.word	0x40004c00
 80045f8:	40005000 	.word	0x40005000
 80045fc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	77bb      	strb	r3, [r7, #30]
        break;
 8004608:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d073      	beq.n	80046f8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	005a      	lsls	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	441a      	add	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	2b0f      	cmp	r3, #15
 800462a:	d916      	bls.n	800465a <UART_SetConfig+0x2ee>
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004632:	d212      	bcs.n	800465a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	b29b      	uxth	r3, r3
 8004638:	f023 030f 	bic.w	r3, r3, #15
 800463c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	085b      	lsrs	r3, r3, #1
 8004642:	b29b      	uxth	r3, r3
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	b29a      	uxth	r2, r3
 800464a:	89fb      	ldrh	r3, [r7, #14]
 800464c:	4313      	orrs	r3, r2
 800464e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	89fa      	ldrh	r2, [r7, #14]
 8004656:	60da      	str	r2, [r3, #12]
 8004658:	e04e      	b.n	80046f8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	77bb      	strb	r3, [r7, #30]
 800465e:	e04b      	b.n	80046f8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004660:	7ffb      	ldrb	r3, [r7, #31]
 8004662:	2b08      	cmp	r3, #8
 8004664:	d827      	bhi.n	80046b6 <UART_SetConfig+0x34a>
 8004666:	a201      	add	r2, pc, #4	; (adr r2, 800466c <UART_SetConfig+0x300>)
 8004668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466c:	08004691 	.word	0x08004691
 8004670:	08004699 	.word	0x08004699
 8004674:	080046a1 	.word	0x080046a1
 8004678:	080046b7 	.word	0x080046b7
 800467c:	080046a7 	.word	0x080046a7
 8004680:	080046b7 	.word	0x080046b7
 8004684:	080046b7 	.word	0x080046b7
 8004688:	080046b7 	.word	0x080046b7
 800468c:	080046af 	.word	0x080046af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004690:	f7ff fa3c 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 8004694:	61b8      	str	r0, [r7, #24]
        break;
 8004696:	e013      	b.n	80046c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004698:	f7ff fa5a 	bl	8003b50 <HAL_RCC_GetPCLK2Freq>
 800469c:	61b8      	str	r0, [r7, #24]
        break;
 800469e:	e00f      	b.n	80046c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046a0:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <UART_SetConfig+0x3a4>)
 80046a2:	61bb      	str	r3, [r7, #24]
        break;
 80046a4:	e00c      	b.n	80046c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a6:	f7ff f9bb 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80046aa:	61b8      	str	r0, [r7, #24]
        break;
 80046ac:	e008      	b.n	80046c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046b2:	61bb      	str	r3, [r7, #24]
        break;
 80046b4:	e004      	b.n	80046c0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	77bb      	strb	r3, [r7, #30]
        break;
 80046be:	bf00      	nop
    }

    if (pclk != 0U)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d018      	beq.n	80046f8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	085a      	lsrs	r2, r3, #1
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	441a      	add	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b0f      	cmp	r3, #15
 80046de:	d909      	bls.n	80046f4 <UART_SetConfig+0x388>
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e6:	d205      	bcs.n	80046f4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60da      	str	r2, [r3, #12]
 80046f2:	e001      	b.n	80046f8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004704:	7fbb      	ldrb	r3, [r7, #30]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	007a1200 	.word	0x007a1200

08004714 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d01a      	beq.n	800482a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004812:	d10a      	bne.n	800482a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	605a      	str	r2, [r3, #4]
  }
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b098      	sub	sp, #96	; 0x60
 800485c:	af02      	add	r7, sp, #8
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004868:	f7fc fd28 	bl	80012bc <HAL_GetTick>
 800486c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b08      	cmp	r3, #8
 800487a:	d12e      	bne.n	80048da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800487c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004884:	2200      	movs	r2, #0
 8004886:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f88c 	bl	80049a8 <UART_WaitOnFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d021      	beq.n	80048da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	e853 3f00 	ldrex	r3, [r3]
 80048a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048aa:	653b      	str	r3, [r7, #80]	; 0x50
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b4:	647b      	str	r3, [r7, #68]	; 0x44
 80048b6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e6      	bne.n	8004896 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e062      	b.n	80049a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d149      	bne.n	800497c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f0:	2200      	movs	r2, #0
 80048f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f856 	bl	80049a8 <UART_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d03c      	beq.n	800497c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	623b      	str	r3, [r7, #32]
   return(result);
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004920:	633b      	str	r3, [r7, #48]	; 0x30
 8004922:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e6      	bne.n	8004902 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3308      	adds	r3, #8
 800493a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	e853 3f00 	ldrex	r3, [r3]
 8004942:	60fb      	str	r3, [r7, #12]
   return(result);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0301 	bic.w	r3, r3, #1
 800494a:	64bb      	str	r3, [r7, #72]	; 0x48
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3308      	adds	r3, #8
 8004952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004954:	61fa      	str	r2, [r7, #28]
 8004956:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004958:	69b9      	ldr	r1, [r7, #24]
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	e841 2300 	strex	r3, r2, [r1]
 8004960:	617b      	str	r3, [r7, #20]
   return(result);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e5      	bne.n	8004934 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e011      	b.n	80049a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2220      	movs	r2, #32
 8004986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3758      	adds	r7, #88	; 0x58
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	4613      	mov	r3, r2
 80049b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b8:	e049      	b.n	8004a4e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c0:	d045      	beq.n	8004a4e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c2:	f7fc fc7b 	bl	80012bc <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d302      	bcc.n	80049d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e048      	b.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d031      	beq.n	8004a4e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d110      	bne.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2208      	movs	r2, #8
 80049fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 f838 	bl	8004a76 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2208      	movs	r2, #8
 8004a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e029      	b.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a28:	d111      	bne.n	8004a4e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f81e 	bl	8004a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e00f      	b.n	8004a6e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	4013      	ands	r3, r2
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	bf0c      	ite	eq
 8004a5e:	2301      	moveq	r3, #1
 8004a60:	2300      	movne	r3, #0
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	461a      	mov	r2, r3
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d0a6      	beq.n	80049ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b095      	sub	sp, #84	; 0x54
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a86:	e853 3f00 	ldrex	r3, [r3]
 8004a8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004aa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004aa4:	e841 2300 	strex	r3, r2, [r1]
 8004aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e6      	bne.n	8004a7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3308      	adds	r3, #8
 8004ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	e853 3f00 	ldrex	r3, [r3]
 8004abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f023 0301 	bic.w	r3, r3, #1
 8004ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3308      	adds	r3, #8
 8004ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ad0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e5      	bne.n	8004ab0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d118      	bne.n	8004b1e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f023 0310 	bic.w	r3, r3, #16
 8004b00:	647b      	str	r3, [r7, #68]	; 0x44
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	6979      	ldr	r1, [r7, #20]
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	613b      	str	r3, [r7, #16]
   return(result);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e6      	bne.n	8004aec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b32:	bf00      	nop
 8004b34:	3754      	adds	r7, #84	; 0x54
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <std>:
 8004b40:	2300      	movs	r3, #0
 8004b42:	b510      	push	{r4, lr}
 8004b44:	4604      	mov	r4, r0
 8004b46:	e9c0 3300 	strd	r3, r3, [r0]
 8004b4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b4e:	6083      	str	r3, [r0, #8]
 8004b50:	8181      	strh	r1, [r0, #12]
 8004b52:	6643      	str	r3, [r0, #100]	; 0x64
 8004b54:	81c2      	strh	r2, [r0, #14]
 8004b56:	6183      	str	r3, [r0, #24]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	2208      	movs	r2, #8
 8004b5c:	305c      	adds	r0, #92	; 0x5c
 8004b5e:	f000 fa2b 	bl	8004fb8 <memset>
 8004b62:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <std+0x58>)
 8004b64:	6263      	str	r3, [r4, #36]	; 0x24
 8004b66:	4b0d      	ldr	r3, [pc, #52]	; (8004b9c <std+0x5c>)
 8004b68:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <std+0x60>)
 8004b6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <std+0x64>)
 8004b70:	6323      	str	r3, [r4, #48]	; 0x30
 8004b72:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <std+0x68>)
 8004b74:	6224      	str	r4, [r4, #32]
 8004b76:	429c      	cmp	r4, r3
 8004b78:	d006      	beq.n	8004b88 <std+0x48>
 8004b7a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004b7e:	4294      	cmp	r4, r2
 8004b80:	d002      	beq.n	8004b88 <std+0x48>
 8004b82:	33d0      	adds	r3, #208	; 0xd0
 8004b84:	429c      	cmp	r4, r3
 8004b86:	d105      	bne.n	8004b94 <std+0x54>
 8004b88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b90:	f000 ba8a 	b.w	80050a8 <__retarget_lock_init_recursive>
 8004b94:	bd10      	pop	{r4, pc}
 8004b96:	bf00      	nop
 8004b98:	08004e09 	.word	0x08004e09
 8004b9c:	08004e2b 	.word	0x08004e2b
 8004ba0:	08004e63 	.word	0x08004e63
 8004ba4:	08004e87 	.word	0x08004e87
 8004ba8:	20000260 	.word	0x20000260

08004bac <stdio_exit_handler>:
 8004bac:	4a02      	ldr	r2, [pc, #8]	; (8004bb8 <stdio_exit_handler+0xc>)
 8004bae:	4903      	ldr	r1, [pc, #12]	; (8004bbc <stdio_exit_handler+0x10>)
 8004bb0:	4803      	ldr	r0, [pc, #12]	; (8004bc0 <stdio_exit_handler+0x14>)
 8004bb2:	f000 b869 	b.w	8004c88 <_fwalk_sglue>
 8004bb6:	bf00      	nop
 8004bb8:	2000001c 	.word	0x2000001c
 8004bbc:	08005c05 	.word	0x08005c05
 8004bc0:	20000028 	.word	0x20000028

08004bc4 <cleanup_stdio>:
 8004bc4:	6841      	ldr	r1, [r0, #4]
 8004bc6:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <cleanup_stdio+0x34>)
 8004bc8:	4299      	cmp	r1, r3
 8004bca:	b510      	push	{r4, lr}
 8004bcc:	4604      	mov	r4, r0
 8004bce:	d001      	beq.n	8004bd4 <cleanup_stdio+0x10>
 8004bd0:	f001 f818 	bl	8005c04 <_fflush_r>
 8004bd4:	68a1      	ldr	r1, [r4, #8]
 8004bd6:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <cleanup_stdio+0x38>)
 8004bd8:	4299      	cmp	r1, r3
 8004bda:	d002      	beq.n	8004be2 <cleanup_stdio+0x1e>
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f001 f811 	bl	8005c04 <_fflush_r>
 8004be2:	68e1      	ldr	r1, [r4, #12]
 8004be4:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <cleanup_stdio+0x3c>)
 8004be6:	4299      	cmp	r1, r3
 8004be8:	d004      	beq.n	8004bf4 <cleanup_stdio+0x30>
 8004bea:	4620      	mov	r0, r4
 8004bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bf0:	f001 b808 	b.w	8005c04 <_fflush_r>
 8004bf4:	bd10      	pop	{r4, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000260 	.word	0x20000260
 8004bfc:	200002c8 	.word	0x200002c8
 8004c00:	20000330 	.word	0x20000330

08004c04 <global_stdio_init.part.0>:
 8004c04:	b510      	push	{r4, lr}
 8004c06:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <global_stdio_init.part.0+0x30>)
 8004c08:	4c0b      	ldr	r4, [pc, #44]	; (8004c38 <global_stdio_init.part.0+0x34>)
 8004c0a:	4a0c      	ldr	r2, [pc, #48]	; (8004c3c <global_stdio_init.part.0+0x38>)
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	4620      	mov	r0, r4
 8004c10:	2200      	movs	r2, #0
 8004c12:	2104      	movs	r1, #4
 8004c14:	f7ff ff94 	bl	8004b40 <std>
 8004c18:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	2109      	movs	r1, #9
 8004c20:	f7ff ff8e 	bl	8004b40 <std>
 8004c24:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004c28:	2202      	movs	r2, #2
 8004c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c2e:	2112      	movs	r1, #18
 8004c30:	f7ff bf86 	b.w	8004b40 <std>
 8004c34:	20000398 	.word	0x20000398
 8004c38:	20000260 	.word	0x20000260
 8004c3c:	08004bad 	.word	0x08004bad

08004c40 <__sfp_lock_acquire>:
 8004c40:	4801      	ldr	r0, [pc, #4]	; (8004c48 <__sfp_lock_acquire+0x8>)
 8004c42:	f000 ba32 	b.w	80050aa <__retarget_lock_acquire_recursive>
 8004c46:	bf00      	nop
 8004c48:	200003a1 	.word	0x200003a1

08004c4c <__sfp_lock_release>:
 8004c4c:	4801      	ldr	r0, [pc, #4]	; (8004c54 <__sfp_lock_release+0x8>)
 8004c4e:	f000 ba2d 	b.w	80050ac <__retarget_lock_release_recursive>
 8004c52:	bf00      	nop
 8004c54:	200003a1 	.word	0x200003a1

08004c58 <__sinit>:
 8004c58:	b510      	push	{r4, lr}
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	f7ff fff0 	bl	8004c40 <__sfp_lock_acquire>
 8004c60:	6a23      	ldr	r3, [r4, #32]
 8004c62:	b11b      	cbz	r3, 8004c6c <__sinit+0x14>
 8004c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c68:	f7ff bff0 	b.w	8004c4c <__sfp_lock_release>
 8004c6c:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <__sinit+0x28>)
 8004c6e:	6223      	str	r3, [r4, #32]
 8004c70:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <__sinit+0x2c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f5      	bne.n	8004c64 <__sinit+0xc>
 8004c78:	f7ff ffc4 	bl	8004c04 <global_stdio_init.part.0>
 8004c7c:	e7f2      	b.n	8004c64 <__sinit+0xc>
 8004c7e:	bf00      	nop
 8004c80:	08004bc5 	.word	0x08004bc5
 8004c84:	20000398 	.word	0x20000398

08004c88 <_fwalk_sglue>:
 8004c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c8c:	4607      	mov	r7, r0
 8004c8e:	4688      	mov	r8, r1
 8004c90:	4614      	mov	r4, r2
 8004c92:	2600      	movs	r6, #0
 8004c94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c98:	f1b9 0901 	subs.w	r9, r9, #1
 8004c9c:	d505      	bpl.n	8004caa <_fwalk_sglue+0x22>
 8004c9e:	6824      	ldr	r4, [r4, #0]
 8004ca0:	2c00      	cmp	r4, #0
 8004ca2:	d1f7      	bne.n	8004c94 <_fwalk_sglue+0xc>
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004caa:	89ab      	ldrh	r3, [r5, #12]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d907      	bls.n	8004cc0 <_fwalk_sglue+0x38>
 8004cb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	d003      	beq.n	8004cc0 <_fwalk_sglue+0x38>
 8004cb8:	4629      	mov	r1, r5
 8004cba:	4638      	mov	r0, r7
 8004cbc:	47c0      	blx	r8
 8004cbe:	4306      	orrs	r6, r0
 8004cc0:	3568      	adds	r5, #104	; 0x68
 8004cc2:	e7e9      	b.n	8004c98 <_fwalk_sglue+0x10>

08004cc4 <iprintf>:
 8004cc4:	b40f      	push	{r0, r1, r2, r3}
 8004cc6:	b507      	push	{r0, r1, r2, lr}
 8004cc8:	4906      	ldr	r1, [pc, #24]	; (8004ce4 <iprintf+0x20>)
 8004cca:	ab04      	add	r3, sp, #16
 8004ccc:	6808      	ldr	r0, [r1, #0]
 8004cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cd2:	6881      	ldr	r1, [r0, #8]
 8004cd4:	9301      	str	r3, [sp, #4]
 8004cd6:	f000 fc65 	bl	80055a4 <_vfiprintf_r>
 8004cda:	b003      	add	sp, #12
 8004cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ce0:	b004      	add	sp, #16
 8004ce2:	4770      	bx	lr
 8004ce4:	20000074 	.word	0x20000074

08004ce8 <_puts_r>:
 8004ce8:	6a03      	ldr	r3, [r0, #32]
 8004cea:	b570      	push	{r4, r5, r6, lr}
 8004cec:	6884      	ldr	r4, [r0, #8]
 8004cee:	4605      	mov	r5, r0
 8004cf0:	460e      	mov	r6, r1
 8004cf2:	b90b      	cbnz	r3, 8004cf8 <_puts_r+0x10>
 8004cf4:	f7ff ffb0 	bl	8004c58 <__sinit>
 8004cf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cfa:	07db      	lsls	r3, r3, #31
 8004cfc:	d405      	bmi.n	8004d0a <_puts_r+0x22>
 8004cfe:	89a3      	ldrh	r3, [r4, #12]
 8004d00:	0598      	lsls	r0, r3, #22
 8004d02:	d402      	bmi.n	8004d0a <_puts_r+0x22>
 8004d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d06:	f000 f9d0 	bl	80050aa <__retarget_lock_acquire_recursive>
 8004d0a:	89a3      	ldrh	r3, [r4, #12]
 8004d0c:	0719      	lsls	r1, r3, #28
 8004d0e:	d513      	bpl.n	8004d38 <_puts_r+0x50>
 8004d10:	6923      	ldr	r3, [r4, #16]
 8004d12:	b18b      	cbz	r3, 8004d38 <_puts_r+0x50>
 8004d14:	3e01      	subs	r6, #1
 8004d16:	68a3      	ldr	r3, [r4, #8]
 8004d18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	60a3      	str	r3, [r4, #8]
 8004d20:	b9e9      	cbnz	r1, 8004d5e <_puts_r+0x76>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	da2e      	bge.n	8004d84 <_puts_r+0x9c>
 8004d26:	4622      	mov	r2, r4
 8004d28:	210a      	movs	r1, #10
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f000 f8af 	bl	8004e8e <__swbuf_r>
 8004d30:	3001      	adds	r0, #1
 8004d32:	d007      	beq.n	8004d44 <_puts_r+0x5c>
 8004d34:	250a      	movs	r5, #10
 8004d36:	e007      	b.n	8004d48 <_puts_r+0x60>
 8004d38:	4621      	mov	r1, r4
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f000 f8e4 	bl	8004f08 <__swsetup_r>
 8004d40:	2800      	cmp	r0, #0
 8004d42:	d0e7      	beq.n	8004d14 <_puts_r+0x2c>
 8004d44:	f04f 35ff 	mov.w	r5, #4294967295
 8004d48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d4a:	07da      	lsls	r2, r3, #31
 8004d4c:	d405      	bmi.n	8004d5a <_puts_r+0x72>
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	059b      	lsls	r3, r3, #22
 8004d52:	d402      	bmi.n	8004d5a <_puts_r+0x72>
 8004d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d56:	f000 f9a9 	bl	80050ac <__retarget_lock_release_recursive>
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	bd70      	pop	{r4, r5, r6, pc}
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	da04      	bge.n	8004d6c <_puts_r+0x84>
 8004d62:	69a2      	ldr	r2, [r4, #24]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	dc06      	bgt.n	8004d76 <_puts_r+0x8e>
 8004d68:	290a      	cmp	r1, #10
 8004d6a:	d004      	beq.n	8004d76 <_puts_r+0x8e>
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	6022      	str	r2, [r4, #0]
 8004d72:	7019      	strb	r1, [r3, #0]
 8004d74:	e7cf      	b.n	8004d16 <_puts_r+0x2e>
 8004d76:	4622      	mov	r2, r4
 8004d78:	4628      	mov	r0, r5
 8004d7a:	f000 f888 	bl	8004e8e <__swbuf_r>
 8004d7e:	3001      	adds	r0, #1
 8004d80:	d1c9      	bne.n	8004d16 <_puts_r+0x2e>
 8004d82:	e7df      	b.n	8004d44 <_puts_r+0x5c>
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	250a      	movs	r5, #10
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	6022      	str	r2, [r4, #0]
 8004d8c:	701d      	strb	r5, [r3, #0]
 8004d8e:	e7db      	b.n	8004d48 <_puts_r+0x60>

08004d90 <puts>:
 8004d90:	4b02      	ldr	r3, [pc, #8]	; (8004d9c <puts+0xc>)
 8004d92:	4601      	mov	r1, r0
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	f7ff bfa7 	b.w	8004ce8 <_puts_r>
 8004d9a:	bf00      	nop
 8004d9c:	20000074 	.word	0x20000074

08004da0 <sniprintf>:
 8004da0:	b40c      	push	{r2, r3}
 8004da2:	b530      	push	{r4, r5, lr}
 8004da4:	4b17      	ldr	r3, [pc, #92]	; (8004e04 <sniprintf+0x64>)
 8004da6:	1e0c      	subs	r4, r1, #0
 8004da8:	681d      	ldr	r5, [r3, #0]
 8004daa:	b09d      	sub	sp, #116	; 0x74
 8004dac:	da08      	bge.n	8004dc0 <sniprintf+0x20>
 8004dae:	238b      	movs	r3, #139	; 0x8b
 8004db0:	602b      	str	r3, [r5, #0]
 8004db2:	f04f 30ff 	mov.w	r0, #4294967295
 8004db6:	b01d      	add	sp, #116	; 0x74
 8004db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dbc:	b002      	add	sp, #8
 8004dbe:	4770      	bx	lr
 8004dc0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004dc4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004dc8:	bf14      	ite	ne
 8004dca:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004dce:	4623      	moveq	r3, r4
 8004dd0:	9304      	str	r3, [sp, #16]
 8004dd2:	9307      	str	r3, [sp, #28]
 8004dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004dd8:	9002      	str	r0, [sp, #8]
 8004dda:	9006      	str	r0, [sp, #24]
 8004ddc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004de0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004de2:	ab21      	add	r3, sp, #132	; 0x84
 8004de4:	a902      	add	r1, sp, #8
 8004de6:	4628      	mov	r0, r5
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	f000 fab3 	bl	8005354 <_svfiprintf_r>
 8004dee:	1c43      	adds	r3, r0, #1
 8004df0:	bfbc      	itt	lt
 8004df2:	238b      	movlt	r3, #139	; 0x8b
 8004df4:	602b      	strlt	r3, [r5, #0]
 8004df6:	2c00      	cmp	r4, #0
 8004df8:	d0dd      	beq.n	8004db6 <sniprintf+0x16>
 8004dfa:	9b02      	ldr	r3, [sp, #8]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	e7d9      	b.n	8004db6 <sniprintf+0x16>
 8004e02:	bf00      	nop
 8004e04:	20000074 	.word	0x20000074

08004e08 <__sread>:
 8004e08:	b510      	push	{r4, lr}
 8004e0a:	460c      	mov	r4, r1
 8004e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e10:	f000 f8fc 	bl	800500c <_read_r>
 8004e14:	2800      	cmp	r0, #0
 8004e16:	bfab      	itete	ge
 8004e18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8004e1c:	181b      	addge	r3, r3, r0
 8004e1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e22:	bfac      	ite	ge
 8004e24:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e26:	81a3      	strhlt	r3, [r4, #12]
 8004e28:	bd10      	pop	{r4, pc}

08004e2a <__swrite>:
 8004e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e2e:	461f      	mov	r7, r3
 8004e30:	898b      	ldrh	r3, [r1, #12]
 8004e32:	05db      	lsls	r3, r3, #23
 8004e34:	4605      	mov	r5, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	4616      	mov	r6, r2
 8004e3a:	d505      	bpl.n	8004e48 <__swrite+0x1e>
 8004e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e40:	2302      	movs	r3, #2
 8004e42:	2200      	movs	r2, #0
 8004e44:	f000 f8d0 	bl	8004fe8 <_lseek_r>
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e52:	81a3      	strh	r3, [r4, #12]
 8004e54:	4632      	mov	r2, r6
 8004e56:	463b      	mov	r3, r7
 8004e58:	4628      	mov	r0, r5
 8004e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5e:	f000 b8e7 	b.w	8005030 <_write_r>

08004e62 <__sseek>:
 8004e62:	b510      	push	{r4, lr}
 8004e64:	460c      	mov	r4, r1
 8004e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e6a:	f000 f8bd 	bl	8004fe8 <_lseek_r>
 8004e6e:	1c43      	adds	r3, r0, #1
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	bf15      	itete	ne
 8004e74:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e7e:	81a3      	strheq	r3, [r4, #12]
 8004e80:	bf18      	it	ne
 8004e82:	81a3      	strhne	r3, [r4, #12]
 8004e84:	bd10      	pop	{r4, pc}

08004e86 <__sclose>:
 8004e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e8a:	f000 b89d 	b.w	8004fc8 <_close_r>

08004e8e <__swbuf_r>:
 8004e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e90:	460e      	mov	r6, r1
 8004e92:	4614      	mov	r4, r2
 8004e94:	4605      	mov	r5, r0
 8004e96:	b118      	cbz	r0, 8004ea0 <__swbuf_r+0x12>
 8004e98:	6a03      	ldr	r3, [r0, #32]
 8004e9a:	b90b      	cbnz	r3, 8004ea0 <__swbuf_r+0x12>
 8004e9c:	f7ff fedc 	bl	8004c58 <__sinit>
 8004ea0:	69a3      	ldr	r3, [r4, #24]
 8004ea2:	60a3      	str	r3, [r4, #8]
 8004ea4:	89a3      	ldrh	r3, [r4, #12]
 8004ea6:	071a      	lsls	r2, r3, #28
 8004ea8:	d525      	bpl.n	8004ef6 <__swbuf_r+0x68>
 8004eaa:	6923      	ldr	r3, [r4, #16]
 8004eac:	b31b      	cbz	r3, 8004ef6 <__swbuf_r+0x68>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	6922      	ldr	r2, [r4, #16]
 8004eb2:	1a98      	subs	r0, r3, r2
 8004eb4:	6963      	ldr	r3, [r4, #20]
 8004eb6:	b2f6      	uxtb	r6, r6
 8004eb8:	4283      	cmp	r3, r0
 8004eba:	4637      	mov	r7, r6
 8004ebc:	dc04      	bgt.n	8004ec8 <__swbuf_r+0x3a>
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	f000 fe9f 	bl	8005c04 <_fflush_r>
 8004ec6:	b9e0      	cbnz	r0, 8004f02 <__swbuf_r+0x74>
 8004ec8:	68a3      	ldr	r3, [r4, #8]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	60a3      	str	r3, [r4, #8]
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	6022      	str	r2, [r4, #0]
 8004ed4:	701e      	strb	r6, [r3, #0]
 8004ed6:	6962      	ldr	r2, [r4, #20]
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d004      	beq.n	8004ee8 <__swbuf_r+0x5a>
 8004ede:	89a3      	ldrh	r3, [r4, #12]
 8004ee0:	07db      	lsls	r3, r3, #31
 8004ee2:	d506      	bpl.n	8004ef2 <__swbuf_r+0x64>
 8004ee4:	2e0a      	cmp	r6, #10
 8004ee6:	d104      	bne.n	8004ef2 <__swbuf_r+0x64>
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4628      	mov	r0, r5
 8004eec:	f000 fe8a 	bl	8005c04 <_fflush_r>
 8004ef0:	b938      	cbnz	r0, 8004f02 <__swbuf_r+0x74>
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f000 f805 	bl	8004f08 <__swsetup_r>
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d0d5      	beq.n	8004eae <__swbuf_r+0x20>
 8004f02:	f04f 37ff 	mov.w	r7, #4294967295
 8004f06:	e7f4      	b.n	8004ef2 <__swbuf_r+0x64>

08004f08 <__swsetup_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	4b2a      	ldr	r3, [pc, #168]	; (8004fb4 <__swsetup_r+0xac>)
 8004f0c:	4605      	mov	r5, r0
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	460c      	mov	r4, r1
 8004f12:	b118      	cbz	r0, 8004f1c <__swsetup_r+0x14>
 8004f14:	6a03      	ldr	r3, [r0, #32]
 8004f16:	b90b      	cbnz	r3, 8004f1c <__swsetup_r+0x14>
 8004f18:	f7ff fe9e 	bl	8004c58 <__sinit>
 8004f1c:	89a3      	ldrh	r3, [r4, #12]
 8004f1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f22:	0718      	lsls	r0, r3, #28
 8004f24:	d422      	bmi.n	8004f6c <__swsetup_r+0x64>
 8004f26:	06d9      	lsls	r1, r3, #27
 8004f28:	d407      	bmi.n	8004f3a <__swsetup_r+0x32>
 8004f2a:	2309      	movs	r3, #9
 8004f2c:	602b      	str	r3, [r5, #0]
 8004f2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f32:	81a3      	strh	r3, [r4, #12]
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295
 8004f38:	e034      	b.n	8004fa4 <__swsetup_r+0x9c>
 8004f3a:	0758      	lsls	r0, r3, #29
 8004f3c:	d512      	bpl.n	8004f64 <__swsetup_r+0x5c>
 8004f3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f40:	b141      	cbz	r1, 8004f54 <__swsetup_r+0x4c>
 8004f42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f46:	4299      	cmp	r1, r3
 8004f48:	d002      	beq.n	8004f50 <__swsetup_r+0x48>
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f000 f8b0 	bl	80050b0 <_free_r>
 8004f50:	2300      	movs	r3, #0
 8004f52:	6363      	str	r3, [r4, #52]	; 0x34
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f5a:	81a3      	strh	r3, [r4, #12]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	6063      	str	r3, [r4, #4]
 8004f60:	6923      	ldr	r3, [r4, #16]
 8004f62:	6023      	str	r3, [r4, #0]
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	f043 0308 	orr.w	r3, r3, #8
 8004f6a:	81a3      	strh	r3, [r4, #12]
 8004f6c:	6923      	ldr	r3, [r4, #16]
 8004f6e:	b94b      	cbnz	r3, 8004f84 <__swsetup_r+0x7c>
 8004f70:	89a3      	ldrh	r3, [r4, #12]
 8004f72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f7a:	d003      	beq.n	8004f84 <__swsetup_r+0x7c>
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	4628      	mov	r0, r5
 8004f80:	f000 fe8e 	bl	8005ca0 <__smakebuf_r>
 8004f84:	89a0      	ldrh	r0, [r4, #12]
 8004f86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f8a:	f010 0301 	ands.w	r3, r0, #1
 8004f8e:	d00a      	beq.n	8004fa6 <__swsetup_r+0x9e>
 8004f90:	2300      	movs	r3, #0
 8004f92:	60a3      	str	r3, [r4, #8]
 8004f94:	6963      	ldr	r3, [r4, #20]
 8004f96:	425b      	negs	r3, r3
 8004f98:	61a3      	str	r3, [r4, #24]
 8004f9a:	6923      	ldr	r3, [r4, #16]
 8004f9c:	b943      	cbnz	r3, 8004fb0 <__swsetup_r+0xa8>
 8004f9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fa2:	d1c4      	bne.n	8004f2e <__swsetup_r+0x26>
 8004fa4:	bd38      	pop	{r3, r4, r5, pc}
 8004fa6:	0781      	lsls	r1, r0, #30
 8004fa8:	bf58      	it	pl
 8004faa:	6963      	ldrpl	r3, [r4, #20]
 8004fac:	60a3      	str	r3, [r4, #8]
 8004fae:	e7f4      	b.n	8004f9a <__swsetup_r+0x92>
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	e7f7      	b.n	8004fa4 <__swsetup_r+0x9c>
 8004fb4:	20000074 	.word	0x20000074

08004fb8 <memset>:
 8004fb8:	4402      	add	r2, r0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d100      	bne.n	8004fc2 <memset+0xa>
 8004fc0:	4770      	bx	lr
 8004fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004fc6:	e7f9      	b.n	8004fbc <memset+0x4>

08004fc8 <_close_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	4d06      	ldr	r5, [pc, #24]	; (8004fe4 <_close_r+0x1c>)
 8004fcc:	2300      	movs	r3, #0
 8004fce:	4604      	mov	r4, r0
 8004fd0:	4608      	mov	r0, r1
 8004fd2:	602b      	str	r3, [r5, #0]
 8004fd4:	f7fb ffb9 	bl	8000f4a <_close>
 8004fd8:	1c43      	adds	r3, r0, #1
 8004fda:	d102      	bne.n	8004fe2 <_close_r+0x1a>
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	b103      	cbz	r3, 8004fe2 <_close_r+0x1a>
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	bd38      	pop	{r3, r4, r5, pc}
 8004fe4:	2000039c 	.word	0x2000039c

08004fe8 <_lseek_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	4d07      	ldr	r5, [pc, #28]	; (8005008 <_lseek_r+0x20>)
 8004fec:	4604      	mov	r4, r0
 8004fee:	4608      	mov	r0, r1
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	602a      	str	r2, [r5, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f7fb ffce 	bl	8000f98 <_lseek>
 8004ffc:	1c43      	adds	r3, r0, #1
 8004ffe:	d102      	bne.n	8005006 <_lseek_r+0x1e>
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	b103      	cbz	r3, 8005006 <_lseek_r+0x1e>
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	bd38      	pop	{r3, r4, r5, pc}
 8005008:	2000039c 	.word	0x2000039c

0800500c <_read_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	4d07      	ldr	r5, [pc, #28]	; (800502c <_read_r+0x20>)
 8005010:	4604      	mov	r4, r0
 8005012:	4608      	mov	r0, r1
 8005014:	4611      	mov	r1, r2
 8005016:	2200      	movs	r2, #0
 8005018:	602a      	str	r2, [r5, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	f7fb ff5c 	bl	8000ed8 <_read>
 8005020:	1c43      	adds	r3, r0, #1
 8005022:	d102      	bne.n	800502a <_read_r+0x1e>
 8005024:	682b      	ldr	r3, [r5, #0]
 8005026:	b103      	cbz	r3, 800502a <_read_r+0x1e>
 8005028:	6023      	str	r3, [r4, #0]
 800502a:	bd38      	pop	{r3, r4, r5, pc}
 800502c:	2000039c 	.word	0x2000039c

08005030 <_write_r>:
 8005030:	b538      	push	{r3, r4, r5, lr}
 8005032:	4d07      	ldr	r5, [pc, #28]	; (8005050 <_write_r+0x20>)
 8005034:	4604      	mov	r4, r0
 8005036:	4608      	mov	r0, r1
 8005038:	4611      	mov	r1, r2
 800503a:	2200      	movs	r2, #0
 800503c:	602a      	str	r2, [r5, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	f7fb ff67 	bl	8000f12 <_write>
 8005044:	1c43      	adds	r3, r0, #1
 8005046:	d102      	bne.n	800504e <_write_r+0x1e>
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	b103      	cbz	r3, 800504e <_write_r+0x1e>
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	bd38      	pop	{r3, r4, r5, pc}
 8005050:	2000039c 	.word	0x2000039c

08005054 <__errno>:
 8005054:	4b01      	ldr	r3, [pc, #4]	; (800505c <__errno+0x8>)
 8005056:	6818      	ldr	r0, [r3, #0]
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20000074 	.word	0x20000074

08005060 <__libc_init_array>:
 8005060:	b570      	push	{r4, r5, r6, lr}
 8005062:	4d0d      	ldr	r5, [pc, #52]	; (8005098 <__libc_init_array+0x38>)
 8005064:	4c0d      	ldr	r4, [pc, #52]	; (800509c <__libc_init_array+0x3c>)
 8005066:	1b64      	subs	r4, r4, r5
 8005068:	10a4      	asrs	r4, r4, #2
 800506a:	2600      	movs	r6, #0
 800506c:	42a6      	cmp	r6, r4
 800506e:	d109      	bne.n	8005084 <__libc_init_array+0x24>
 8005070:	4d0b      	ldr	r5, [pc, #44]	; (80050a0 <__libc_init_array+0x40>)
 8005072:	4c0c      	ldr	r4, [pc, #48]	; (80050a4 <__libc_init_array+0x44>)
 8005074:	f000 fee2 	bl	8005e3c <_init>
 8005078:	1b64      	subs	r4, r4, r5
 800507a:	10a4      	asrs	r4, r4, #2
 800507c:	2600      	movs	r6, #0
 800507e:	42a6      	cmp	r6, r4
 8005080:	d105      	bne.n	800508e <__libc_init_array+0x2e>
 8005082:	bd70      	pop	{r4, r5, r6, pc}
 8005084:	f855 3b04 	ldr.w	r3, [r5], #4
 8005088:	4798      	blx	r3
 800508a:	3601      	adds	r6, #1
 800508c:	e7ee      	b.n	800506c <__libc_init_array+0xc>
 800508e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005092:	4798      	blx	r3
 8005094:	3601      	adds	r6, #1
 8005096:	e7f2      	b.n	800507e <__libc_init_array+0x1e>
 8005098:	080060e8 	.word	0x080060e8
 800509c:	080060e8 	.word	0x080060e8
 80050a0:	080060e8 	.word	0x080060e8
 80050a4:	080060ec 	.word	0x080060ec

080050a8 <__retarget_lock_init_recursive>:
 80050a8:	4770      	bx	lr

080050aa <__retarget_lock_acquire_recursive>:
 80050aa:	4770      	bx	lr

080050ac <__retarget_lock_release_recursive>:
 80050ac:	4770      	bx	lr
	...

080050b0 <_free_r>:
 80050b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050b2:	2900      	cmp	r1, #0
 80050b4:	d044      	beq.n	8005140 <_free_r+0x90>
 80050b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050ba:	9001      	str	r0, [sp, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f1a1 0404 	sub.w	r4, r1, #4
 80050c2:	bfb8      	it	lt
 80050c4:	18e4      	addlt	r4, r4, r3
 80050c6:	f000 f8df 	bl	8005288 <__malloc_lock>
 80050ca:	4a1e      	ldr	r2, [pc, #120]	; (8005144 <_free_r+0x94>)
 80050cc:	9801      	ldr	r0, [sp, #4]
 80050ce:	6813      	ldr	r3, [r2, #0]
 80050d0:	b933      	cbnz	r3, 80050e0 <_free_r+0x30>
 80050d2:	6063      	str	r3, [r4, #4]
 80050d4:	6014      	str	r4, [r2, #0]
 80050d6:	b003      	add	sp, #12
 80050d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050dc:	f000 b8da 	b.w	8005294 <__malloc_unlock>
 80050e0:	42a3      	cmp	r3, r4
 80050e2:	d908      	bls.n	80050f6 <_free_r+0x46>
 80050e4:	6825      	ldr	r5, [r4, #0]
 80050e6:	1961      	adds	r1, r4, r5
 80050e8:	428b      	cmp	r3, r1
 80050ea:	bf01      	itttt	eq
 80050ec:	6819      	ldreq	r1, [r3, #0]
 80050ee:	685b      	ldreq	r3, [r3, #4]
 80050f0:	1949      	addeq	r1, r1, r5
 80050f2:	6021      	streq	r1, [r4, #0]
 80050f4:	e7ed      	b.n	80050d2 <_free_r+0x22>
 80050f6:	461a      	mov	r2, r3
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	b10b      	cbz	r3, 8005100 <_free_r+0x50>
 80050fc:	42a3      	cmp	r3, r4
 80050fe:	d9fa      	bls.n	80050f6 <_free_r+0x46>
 8005100:	6811      	ldr	r1, [r2, #0]
 8005102:	1855      	adds	r5, r2, r1
 8005104:	42a5      	cmp	r5, r4
 8005106:	d10b      	bne.n	8005120 <_free_r+0x70>
 8005108:	6824      	ldr	r4, [r4, #0]
 800510a:	4421      	add	r1, r4
 800510c:	1854      	adds	r4, r2, r1
 800510e:	42a3      	cmp	r3, r4
 8005110:	6011      	str	r1, [r2, #0]
 8005112:	d1e0      	bne.n	80050d6 <_free_r+0x26>
 8005114:	681c      	ldr	r4, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	6053      	str	r3, [r2, #4]
 800511a:	440c      	add	r4, r1
 800511c:	6014      	str	r4, [r2, #0]
 800511e:	e7da      	b.n	80050d6 <_free_r+0x26>
 8005120:	d902      	bls.n	8005128 <_free_r+0x78>
 8005122:	230c      	movs	r3, #12
 8005124:	6003      	str	r3, [r0, #0]
 8005126:	e7d6      	b.n	80050d6 <_free_r+0x26>
 8005128:	6825      	ldr	r5, [r4, #0]
 800512a:	1961      	adds	r1, r4, r5
 800512c:	428b      	cmp	r3, r1
 800512e:	bf04      	itt	eq
 8005130:	6819      	ldreq	r1, [r3, #0]
 8005132:	685b      	ldreq	r3, [r3, #4]
 8005134:	6063      	str	r3, [r4, #4]
 8005136:	bf04      	itt	eq
 8005138:	1949      	addeq	r1, r1, r5
 800513a:	6021      	streq	r1, [r4, #0]
 800513c:	6054      	str	r4, [r2, #4]
 800513e:	e7ca      	b.n	80050d6 <_free_r+0x26>
 8005140:	b003      	add	sp, #12
 8005142:	bd30      	pop	{r4, r5, pc}
 8005144:	200003a4 	.word	0x200003a4

08005148 <sbrk_aligned>:
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	4e0e      	ldr	r6, [pc, #56]	; (8005184 <sbrk_aligned+0x3c>)
 800514c:	460c      	mov	r4, r1
 800514e:	6831      	ldr	r1, [r6, #0]
 8005150:	4605      	mov	r5, r0
 8005152:	b911      	cbnz	r1, 800515a <sbrk_aligned+0x12>
 8005154:	f000 fe1c 	bl	8005d90 <_sbrk_r>
 8005158:	6030      	str	r0, [r6, #0]
 800515a:	4621      	mov	r1, r4
 800515c:	4628      	mov	r0, r5
 800515e:	f000 fe17 	bl	8005d90 <_sbrk_r>
 8005162:	1c43      	adds	r3, r0, #1
 8005164:	d00a      	beq.n	800517c <sbrk_aligned+0x34>
 8005166:	1cc4      	adds	r4, r0, #3
 8005168:	f024 0403 	bic.w	r4, r4, #3
 800516c:	42a0      	cmp	r0, r4
 800516e:	d007      	beq.n	8005180 <sbrk_aligned+0x38>
 8005170:	1a21      	subs	r1, r4, r0
 8005172:	4628      	mov	r0, r5
 8005174:	f000 fe0c 	bl	8005d90 <_sbrk_r>
 8005178:	3001      	adds	r0, #1
 800517a:	d101      	bne.n	8005180 <sbrk_aligned+0x38>
 800517c:	f04f 34ff 	mov.w	r4, #4294967295
 8005180:	4620      	mov	r0, r4
 8005182:	bd70      	pop	{r4, r5, r6, pc}
 8005184:	200003a8 	.word	0x200003a8

08005188 <_malloc_r>:
 8005188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800518c:	1ccd      	adds	r5, r1, #3
 800518e:	f025 0503 	bic.w	r5, r5, #3
 8005192:	3508      	adds	r5, #8
 8005194:	2d0c      	cmp	r5, #12
 8005196:	bf38      	it	cc
 8005198:	250c      	movcc	r5, #12
 800519a:	2d00      	cmp	r5, #0
 800519c:	4607      	mov	r7, r0
 800519e:	db01      	blt.n	80051a4 <_malloc_r+0x1c>
 80051a0:	42a9      	cmp	r1, r5
 80051a2:	d905      	bls.n	80051b0 <_malloc_r+0x28>
 80051a4:	230c      	movs	r3, #12
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	2600      	movs	r6, #0
 80051aa:	4630      	mov	r0, r6
 80051ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005284 <_malloc_r+0xfc>
 80051b4:	f000 f868 	bl	8005288 <__malloc_lock>
 80051b8:	f8d8 3000 	ldr.w	r3, [r8]
 80051bc:	461c      	mov	r4, r3
 80051be:	bb5c      	cbnz	r4, 8005218 <_malloc_r+0x90>
 80051c0:	4629      	mov	r1, r5
 80051c2:	4638      	mov	r0, r7
 80051c4:	f7ff ffc0 	bl	8005148 <sbrk_aligned>
 80051c8:	1c43      	adds	r3, r0, #1
 80051ca:	4604      	mov	r4, r0
 80051cc:	d155      	bne.n	800527a <_malloc_r+0xf2>
 80051ce:	f8d8 4000 	ldr.w	r4, [r8]
 80051d2:	4626      	mov	r6, r4
 80051d4:	2e00      	cmp	r6, #0
 80051d6:	d145      	bne.n	8005264 <_malloc_r+0xdc>
 80051d8:	2c00      	cmp	r4, #0
 80051da:	d048      	beq.n	800526e <_malloc_r+0xe6>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	4631      	mov	r1, r6
 80051e0:	4638      	mov	r0, r7
 80051e2:	eb04 0903 	add.w	r9, r4, r3
 80051e6:	f000 fdd3 	bl	8005d90 <_sbrk_r>
 80051ea:	4581      	cmp	r9, r0
 80051ec:	d13f      	bne.n	800526e <_malloc_r+0xe6>
 80051ee:	6821      	ldr	r1, [r4, #0]
 80051f0:	1a6d      	subs	r5, r5, r1
 80051f2:	4629      	mov	r1, r5
 80051f4:	4638      	mov	r0, r7
 80051f6:	f7ff ffa7 	bl	8005148 <sbrk_aligned>
 80051fa:	3001      	adds	r0, #1
 80051fc:	d037      	beq.n	800526e <_malloc_r+0xe6>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	442b      	add	r3, r5
 8005202:	6023      	str	r3, [r4, #0]
 8005204:	f8d8 3000 	ldr.w	r3, [r8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d038      	beq.n	800527e <_malloc_r+0xf6>
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	42a2      	cmp	r2, r4
 8005210:	d12b      	bne.n	800526a <_malloc_r+0xe2>
 8005212:	2200      	movs	r2, #0
 8005214:	605a      	str	r2, [r3, #4]
 8005216:	e00f      	b.n	8005238 <_malloc_r+0xb0>
 8005218:	6822      	ldr	r2, [r4, #0]
 800521a:	1b52      	subs	r2, r2, r5
 800521c:	d41f      	bmi.n	800525e <_malloc_r+0xd6>
 800521e:	2a0b      	cmp	r2, #11
 8005220:	d917      	bls.n	8005252 <_malloc_r+0xca>
 8005222:	1961      	adds	r1, r4, r5
 8005224:	42a3      	cmp	r3, r4
 8005226:	6025      	str	r5, [r4, #0]
 8005228:	bf18      	it	ne
 800522a:	6059      	strne	r1, [r3, #4]
 800522c:	6863      	ldr	r3, [r4, #4]
 800522e:	bf08      	it	eq
 8005230:	f8c8 1000 	streq.w	r1, [r8]
 8005234:	5162      	str	r2, [r4, r5]
 8005236:	604b      	str	r3, [r1, #4]
 8005238:	4638      	mov	r0, r7
 800523a:	f104 060b 	add.w	r6, r4, #11
 800523e:	f000 f829 	bl	8005294 <__malloc_unlock>
 8005242:	f026 0607 	bic.w	r6, r6, #7
 8005246:	1d23      	adds	r3, r4, #4
 8005248:	1af2      	subs	r2, r6, r3
 800524a:	d0ae      	beq.n	80051aa <_malloc_r+0x22>
 800524c:	1b9b      	subs	r3, r3, r6
 800524e:	50a3      	str	r3, [r4, r2]
 8005250:	e7ab      	b.n	80051aa <_malloc_r+0x22>
 8005252:	42a3      	cmp	r3, r4
 8005254:	6862      	ldr	r2, [r4, #4]
 8005256:	d1dd      	bne.n	8005214 <_malloc_r+0x8c>
 8005258:	f8c8 2000 	str.w	r2, [r8]
 800525c:	e7ec      	b.n	8005238 <_malloc_r+0xb0>
 800525e:	4623      	mov	r3, r4
 8005260:	6864      	ldr	r4, [r4, #4]
 8005262:	e7ac      	b.n	80051be <_malloc_r+0x36>
 8005264:	4634      	mov	r4, r6
 8005266:	6876      	ldr	r6, [r6, #4]
 8005268:	e7b4      	b.n	80051d4 <_malloc_r+0x4c>
 800526a:	4613      	mov	r3, r2
 800526c:	e7cc      	b.n	8005208 <_malloc_r+0x80>
 800526e:	230c      	movs	r3, #12
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	4638      	mov	r0, r7
 8005274:	f000 f80e 	bl	8005294 <__malloc_unlock>
 8005278:	e797      	b.n	80051aa <_malloc_r+0x22>
 800527a:	6025      	str	r5, [r4, #0]
 800527c:	e7dc      	b.n	8005238 <_malloc_r+0xb0>
 800527e:	605b      	str	r3, [r3, #4]
 8005280:	deff      	udf	#255	; 0xff
 8005282:	bf00      	nop
 8005284:	200003a4 	.word	0x200003a4

08005288 <__malloc_lock>:
 8005288:	4801      	ldr	r0, [pc, #4]	; (8005290 <__malloc_lock+0x8>)
 800528a:	f7ff bf0e 	b.w	80050aa <__retarget_lock_acquire_recursive>
 800528e:	bf00      	nop
 8005290:	200003a0 	.word	0x200003a0

08005294 <__malloc_unlock>:
 8005294:	4801      	ldr	r0, [pc, #4]	; (800529c <__malloc_unlock+0x8>)
 8005296:	f7ff bf09 	b.w	80050ac <__retarget_lock_release_recursive>
 800529a:	bf00      	nop
 800529c:	200003a0 	.word	0x200003a0

080052a0 <__ssputs_r>:
 80052a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a4:	688e      	ldr	r6, [r1, #8]
 80052a6:	461f      	mov	r7, r3
 80052a8:	42be      	cmp	r6, r7
 80052aa:	680b      	ldr	r3, [r1, #0]
 80052ac:	4682      	mov	sl, r0
 80052ae:	460c      	mov	r4, r1
 80052b0:	4690      	mov	r8, r2
 80052b2:	d82c      	bhi.n	800530e <__ssputs_r+0x6e>
 80052b4:	898a      	ldrh	r2, [r1, #12]
 80052b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052ba:	d026      	beq.n	800530a <__ssputs_r+0x6a>
 80052bc:	6965      	ldr	r5, [r4, #20]
 80052be:	6909      	ldr	r1, [r1, #16]
 80052c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052c4:	eba3 0901 	sub.w	r9, r3, r1
 80052c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052cc:	1c7b      	adds	r3, r7, #1
 80052ce:	444b      	add	r3, r9
 80052d0:	106d      	asrs	r5, r5, #1
 80052d2:	429d      	cmp	r5, r3
 80052d4:	bf38      	it	cc
 80052d6:	461d      	movcc	r5, r3
 80052d8:	0553      	lsls	r3, r2, #21
 80052da:	d527      	bpl.n	800532c <__ssputs_r+0x8c>
 80052dc:	4629      	mov	r1, r5
 80052de:	f7ff ff53 	bl	8005188 <_malloc_r>
 80052e2:	4606      	mov	r6, r0
 80052e4:	b360      	cbz	r0, 8005340 <__ssputs_r+0xa0>
 80052e6:	6921      	ldr	r1, [r4, #16]
 80052e8:	464a      	mov	r2, r9
 80052ea:	f000 fd61 	bl	8005db0 <memcpy>
 80052ee:	89a3      	ldrh	r3, [r4, #12]
 80052f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f8:	81a3      	strh	r3, [r4, #12]
 80052fa:	6126      	str	r6, [r4, #16]
 80052fc:	6165      	str	r5, [r4, #20]
 80052fe:	444e      	add	r6, r9
 8005300:	eba5 0509 	sub.w	r5, r5, r9
 8005304:	6026      	str	r6, [r4, #0]
 8005306:	60a5      	str	r5, [r4, #8]
 8005308:	463e      	mov	r6, r7
 800530a:	42be      	cmp	r6, r7
 800530c:	d900      	bls.n	8005310 <__ssputs_r+0x70>
 800530e:	463e      	mov	r6, r7
 8005310:	6820      	ldr	r0, [r4, #0]
 8005312:	4632      	mov	r2, r6
 8005314:	4641      	mov	r1, r8
 8005316:	f000 fcff 	bl	8005d18 <memmove>
 800531a:	68a3      	ldr	r3, [r4, #8]
 800531c:	1b9b      	subs	r3, r3, r6
 800531e:	60a3      	str	r3, [r4, #8]
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	4433      	add	r3, r6
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	2000      	movs	r0, #0
 8005328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800532c:	462a      	mov	r2, r5
 800532e:	f000 fd4d 	bl	8005dcc <_realloc_r>
 8005332:	4606      	mov	r6, r0
 8005334:	2800      	cmp	r0, #0
 8005336:	d1e0      	bne.n	80052fa <__ssputs_r+0x5a>
 8005338:	6921      	ldr	r1, [r4, #16]
 800533a:	4650      	mov	r0, sl
 800533c:	f7ff feb8 	bl	80050b0 <_free_r>
 8005340:	230c      	movs	r3, #12
 8005342:	f8ca 3000 	str.w	r3, [sl]
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800534c:	81a3      	strh	r3, [r4, #12]
 800534e:	f04f 30ff 	mov.w	r0, #4294967295
 8005352:	e7e9      	b.n	8005328 <__ssputs_r+0x88>

08005354 <_svfiprintf_r>:
 8005354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005358:	4698      	mov	r8, r3
 800535a:	898b      	ldrh	r3, [r1, #12]
 800535c:	061b      	lsls	r3, r3, #24
 800535e:	b09d      	sub	sp, #116	; 0x74
 8005360:	4607      	mov	r7, r0
 8005362:	460d      	mov	r5, r1
 8005364:	4614      	mov	r4, r2
 8005366:	d50e      	bpl.n	8005386 <_svfiprintf_r+0x32>
 8005368:	690b      	ldr	r3, [r1, #16]
 800536a:	b963      	cbnz	r3, 8005386 <_svfiprintf_r+0x32>
 800536c:	2140      	movs	r1, #64	; 0x40
 800536e:	f7ff ff0b 	bl	8005188 <_malloc_r>
 8005372:	6028      	str	r0, [r5, #0]
 8005374:	6128      	str	r0, [r5, #16]
 8005376:	b920      	cbnz	r0, 8005382 <_svfiprintf_r+0x2e>
 8005378:	230c      	movs	r3, #12
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	f04f 30ff 	mov.w	r0, #4294967295
 8005380:	e0d0      	b.n	8005524 <_svfiprintf_r+0x1d0>
 8005382:	2340      	movs	r3, #64	; 0x40
 8005384:	616b      	str	r3, [r5, #20]
 8005386:	2300      	movs	r3, #0
 8005388:	9309      	str	r3, [sp, #36]	; 0x24
 800538a:	2320      	movs	r3, #32
 800538c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005390:	f8cd 800c 	str.w	r8, [sp, #12]
 8005394:	2330      	movs	r3, #48	; 0x30
 8005396:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800553c <_svfiprintf_r+0x1e8>
 800539a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800539e:	f04f 0901 	mov.w	r9, #1
 80053a2:	4623      	mov	r3, r4
 80053a4:	469a      	mov	sl, r3
 80053a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053aa:	b10a      	cbz	r2, 80053b0 <_svfiprintf_r+0x5c>
 80053ac:	2a25      	cmp	r2, #37	; 0x25
 80053ae:	d1f9      	bne.n	80053a4 <_svfiprintf_r+0x50>
 80053b0:	ebba 0b04 	subs.w	fp, sl, r4
 80053b4:	d00b      	beq.n	80053ce <_svfiprintf_r+0x7a>
 80053b6:	465b      	mov	r3, fp
 80053b8:	4622      	mov	r2, r4
 80053ba:	4629      	mov	r1, r5
 80053bc:	4638      	mov	r0, r7
 80053be:	f7ff ff6f 	bl	80052a0 <__ssputs_r>
 80053c2:	3001      	adds	r0, #1
 80053c4:	f000 80a9 	beq.w	800551a <_svfiprintf_r+0x1c6>
 80053c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053ca:	445a      	add	r2, fp
 80053cc:	9209      	str	r2, [sp, #36]	; 0x24
 80053ce:	f89a 3000 	ldrb.w	r3, [sl]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 80a1 	beq.w	800551a <_svfiprintf_r+0x1c6>
 80053d8:	2300      	movs	r3, #0
 80053da:	f04f 32ff 	mov.w	r2, #4294967295
 80053de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053e2:	f10a 0a01 	add.w	sl, sl, #1
 80053e6:	9304      	str	r3, [sp, #16]
 80053e8:	9307      	str	r3, [sp, #28]
 80053ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053ee:	931a      	str	r3, [sp, #104]	; 0x68
 80053f0:	4654      	mov	r4, sl
 80053f2:	2205      	movs	r2, #5
 80053f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f8:	4850      	ldr	r0, [pc, #320]	; (800553c <_svfiprintf_r+0x1e8>)
 80053fa:	f7fa fef9 	bl	80001f0 <memchr>
 80053fe:	9a04      	ldr	r2, [sp, #16]
 8005400:	b9d8      	cbnz	r0, 800543a <_svfiprintf_r+0xe6>
 8005402:	06d0      	lsls	r0, r2, #27
 8005404:	bf44      	itt	mi
 8005406:	2320      	movmi	r3, #32
 8005408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800540c:	0711      	lsls	r1, r2, #28
 800540e:	bf44      	itt	mi
 8005410:	232b      	movmi	r3, #43	; 0x2b
 8005412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005416:	f89a 3000 	ldrb.w	r3, [sl]
 800541a:	2b2a      	cmp	r3, #42	; 0x2a
 800541c:	d015      	beq.n	800544a <_svfiprintf_r+0xf6>
 800541e:	9a07      	ldr	r2, [sp, #28]
 8005420:	4654      	mov	r4, sl
 8005422:	2000      	movs	r0, #0
 8005424:	f04f 0c0a 	mov.w	ip, #10
 8005428:	4621      	mov	r1, r4
 800542a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800542e:	3b30      	subs	r3, #48	; 0x30
 8005430:	2b09      	cmp	r3, #9
 8005432:	d94d      	bls.n	80054d0 <_svfiprintf_r+0x17c>
 8005434:	b1b0      	cbz	r0, 8005464 <_svfiprintf_r+0x110>
 8005436:	9207      	str	r2, [sp, #28]
 8005438:	e014      	b.n	8005464 <_svfiprintf_r+0x110>
 800543a:	eba0 0308 	sub.w	r3, r0, r8
 800543e:	fa09 f303 	lsl.w	r3, r9, r3
 8005442:	4313      	orrs	r3, r2
 8005444:	9304      	str	r3, [sp, #16]
 8005446:	46a2      	mov	sl, r4
 8005448:	e7d2      	b.n	80053f0 <_svfiprintf_r+0x9c>
 800544a:	9b03      	ldr	r3, [sp, #12]
 800544c:	1d19      	adds	r1, r3, #4
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	9103      	str	r1, [sp, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	bfbb      	ittet	lt
 8005456:	425b      	neglt	r3, r3
 8005458:	f042 0202 	orrlt.w	r2, r2, #2
 800545c:	9307      	strge	r3, [sp, #28]
 800545e:	9307      	strlt	r3, [sp, #28]
 8005460:	bfb8      	it	lt
 8005462:	9204      	strlt	r2, [sp, #16]
 8005464:	7823      	ldrb	r3, [r4, #0]
 8005466:	2b2e      	cmp	r3, #46	; 0x2e
 8005468:	d10c      	bne.n	8005484 <_svfiprintf_r+0x130>
 800546a:	7863      	ldrb	r3, [r4, #1]
 800546c:	2b2a      	cmp	r3, #42	; 0x2a
 800546e:	d134      	bne.n	80054da <_svfiprintf_r+0x186>
 8005470:	9b03      	ldr	r3, [sp, #12]
 8005472:	1d1a      	adds	r2, r3, #4
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	9203      	str	r2, [sp, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	bfb8      	it	lt
 800547c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005480:	3402      	adds	r4, #2
 8005482:	9305      	str	r3, [sp, #20]
 8005484:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800554c <_svfiprintf_r+0x1f8>
 8005488:	7821      	ldrb	r1, [r4, #0]
 800548a:	2203      	movs	r2, #3
 800548c:	4650      	mov	r0, sl
 800548e:	f7fa feaf 	bl	80001f0 <memchr>
 8005492:	b138      	cbz	r0, 80054a4 <_svfiprintf_r+0x150>
 8005494:	9b04      	ldr	r3, [sp, #16]
 8005496:	eba0 000a 	sub.w	r0, r0, sl
 800549a:	2240      	movs	r2, #64	; 0x40
 800549c:	4082      	lsls	r2, r0
 800549e:	4313      	orrs	r3, r2
 80054a0:	3401      	adds	r4, #1
 80054a2:	9304      	str	r3, [sp, #16]
 80054a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a8:	4825      	ldr	r0, [pc, #148]	; (8005540 <_svfiprintf_r+0x1ec>)
 80054aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054ae:	2206      	movs	r2, #6
 80054b0:	f7fa fe9e 	bl	80001f0 <memchr>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d038      	beq.n	800552a <_svfiprintf_r+0x1d6>
 80054b8:	4b22      	ldr	r3, [pc, #136]	; (8005544 <_svfiprintf_r+0x1f0>)
 80054ba:	bb1b      	cbnz	r3, 8005504 <_svfiprintf_r+0x1b0>
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	3307      	adds	r3, #7
 80054c0:	f023 0307 	bic.w	r3, r3, #7
 80054c4:	3308      	adds	r3, #8
 80054c6:	9303      	str	r3, [sp, #12]
 80054c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ca:	4433      	add	r3, r6
 80054cc:	9309      	str	r3, [sp, #36]	; 0x24
 80054ce:	e768      	b.n	80053a2 <_svfiprintf_r+0x4e>
 80054d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80054d4:	460c      	mov	r4, r1
 80054d6:	2001      	movs	r0, #1
 80054d8:	e7a6      	b.n	8005428 <_svfiprintf_r+0xd4>
 80054da:	2300      	movs	r3, #0
 80054dc:	3401      	adds	r4, #1
 80054de:	9305      	str	r3, [sp, #20]
 80054e0:	4619      	mov	r1, r3
 80054e2:	f04f 0c0a 	mov.w	ip, #10
 80054e6:	4620      	mov	r0, r4
 80054e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ec:	3a30      	subs	r2, #48	; 0x30
 80054ee:	2a09      	cmp	r2, #9
 80054f0:	d903      	bls.n	80054fa <_svfiprintf_r+0x1a6>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0c6      	beq.n	8005484 <_svfiprintf_r+0x130>
 80054f6:	9105      	str	r1, [sp, #20]
 80054f8:	e7c4      	b.n	8005484 <_svfiprintf_r+0x130>
 80054fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80054fe:	4604      	mov	r4, r0
 8005500:	2301      	movs	r3, #1
 8005502:	e7f0      	b.n	80054e6 <_svfiprintf_r+0x192>
 8005504:	ab03      	add	r3, sp, #12
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	462a      	mov	r2, r5
 800550a:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <_svfiprintf_r+0x1f4>)
 800550c:	a904      	add	r1, sp, #16
 800550e:	4638      	mov	r0, r7
 8005510:	f3af 8000 	nop.w
 8005514:	1c42      	adds	r2, r0, #1
 8005516:	4606      	mov	r6, r0
 8005518:	d1d6      	bne.n	80054c8 <_svfiprintf_r+0x174>
 800551a:	89ab      	ldrh	r3, [r5, #12]
 800551c:	065b      	lsls	r3, r3, #25
 800551e:	f53f af2d 	bmi.w	800537c <_svfiprintf_r+0x28>
 8005522:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005524:	b01d      	add	sp, #116	; 0x74
 8005526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552a:	ab03      	add	r3, sp, #12
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	462a      	mov	r2, r5
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <_svfiprintf_r+0x1f4>)
 8005532:	a904      	add	r1, sp, #16
 8005534:	4638      	mov	r0, r7
 8005536:	f000 f9bd 	bl	80058b4 <_printf_i>
 800553a:	e7eb      	b.n	8005514 <_svfiprintf_r+0x1c0>
 800553c:	080060b4 	.word	0x080060b4
 8005540:	080060be 	.word	0x080060be
 8005544:	00000000 	.word	0x00000000
 8005548:	080052a1 	.word	0x080052a1
 800554c:	080060ba 	.word	0x080060ba

08005550 <__sfputc_r>:
 8005550:	6893      	ldr	r3, [r2, #8]
 8005552:	3b01      	subs	r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	b410      	push	{r4}
 8005558:	6093      	str	r3, [r2, #8]
 800555a:	da08      	bge.n	800556e <__sfputc_r+0x1e>
 800555c:	6994      	ldr	r4, [r2, #24]
 800555e:	42a3      	cmp	r3, r4
 8005560:	db01      	blt.n	8005566 <__sfputc_r+0x16>
 8005562:	290a      	cmp	r1, #10
 8005564:	d103      	bne.n	800556e <__sfputc_r+0x1e>
 8005566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800556a:	f7ff bc90 	b.w	8004e8e <__swbuf_r>
 800556e:	6813      	ldr	r3, [r2, #0]
 8005570:	1c58      	adds	r0, r3, #1
 8005572:	6010      	str	r0, [r2, #0]
 8005574:	7019      	strb	r1, [r3, #0]
 8005576:	4608      	mov	r0, r1
 8005578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800557c:	4770      	bx	lr

0800557e <__sfputs_r>:
 800557e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005580:	4606      	mov	r6, r0
 8005582:	460f      	mov	r7, r1
 8005584:	4614      	mov	r4, r2
 8005586:	18d5      	adds	r5, r2, r3
 8005588:	42ac      	cmp	r4, r5
 800558a:	d101      	bne.n	8005590 <__sfputs_r+0x12>
 800558c:	2000      	movs	r0, #0
 800558e:	e007      	b.n	80055a0 <__sfputs_r+0x22>
 8005590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005594:	463a      	mov	r2, r7
 8005596:	4630      	mov	r0, r6
 8005598:	f7ff ffda 	bl	8005550 <__sfputc_r>
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	d1f3      	bne.n	8005588 <__sfputs_r+0xa>
 80055a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055a4 <_vfiprintf_r>:
 80055a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a8:	460d      	mov	r5, r1
 80055aa:	b09d      	sub	sp, #116	; 0x74
 80055ac:	4614      	mov	r4, r2
 80055ae:	4698      	mov	r8, r3
 80055b0:	4606      	mov	r6, r0
 80055b2:	b118      	cbz	r0, 80055bc <_vfiprintf_r+0x18>
 80055b4:	6a03      	ldr	r3, [r0, #32]
 80055b6:	b90b      	cbnz	r3, 80055bc <_vfiprintf_r+0x18>
 80055b8:	f7ff fb4e 	bl	8004c58 <__sinit>
 80055bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055be:	07d9      	lsls	r1, r3, #31
 80055c0:	d405      	bmi.n	80055ce <_vfiprintf_r+0x2a>
 80055c2:	89ab      	ldrh	r3, [r5, #12]
 80055c4:	059a      	lsls	r2, r3, #22
 80055c6:	d402      	bmi.n	80055ce <_vfiprintf_r+0x2a>
 80055c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ca:	f7ff fd6e 	bl	80050aa <__retarget_lock_acquire_recursive>
 80055ce:	89ab      	ldrh	r3, [r5, #12]
 80055d0:	071b      	lsls	r3, r3, #28
 80055d2:	d501      	bpl.n	80055d8 <_vfiprintf_r+0x34>
 80055d4:	692b      	ldr	r3, [r5, #16]
 80055d6:	b99b      	cbnz	r3, 8005600 <_vfiprintf_r+0x5c>
 80055d8:	4629      	mov	r1, r5
 80055da:	4630      	mov	r0, r6
 80055dc:	f7ff fc94 	bl	8004f08 <__swsetup_r>
 80055e0:	b170      	cbz	r0, 8005600 <_vfiprintf_r+0x5c>
 80055e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055e4:	07dc      	lsls	r4, r3, #31
 80055e6:	d504      	bpl.n	80055f2 <_vfiprintf_r+0x4e>
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ec:	b01d      	add	sp, #116	; 0x74
 80055ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f2:	89ab      	ldrh	r3, [r5, #12]
 80055f4:	0598      	lsls	r0, r3, #22
 80055f6:	d4f7      	bmi.n	80055e8 <_vfiprintf_r+0x44>
 80055f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055fa:	f7ff fd57 	bl	80050ac <__retarget_lock_release_recursive>
 80055fe:	e7f3      	b.n	80055e8 <_vfiprintf_r+0x44>
 8005600:	2300      	movs	r3, #0
 8005602:	9309      	str	r3, [sp, #36]	; 0x24
 8005604:	2320      	movs	r3, #32
 8005606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800560a:	f8cd 800c 	str.w	r8, [sp, #12]
 800560e:	2330      	movs	r3, #48	; 0x30
 8005610:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80057c4 <_vfiprintf_r+0x220>
 8005614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005618:	f04f 0901 	mov.w	r9, #1
 800561c:	4623      	mov	r3, r4
 800561e:	469a      	mov	sl, r3
 8005620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005624:	b10a      	cbz	r2, 800562a <_vfiprintf_r+0x86>
 8005626:	2a25      	cmp	r2, #37	; 0x25
 8005628:	d1f9      	bne.n	800561e <_vfiprintf_r+0x7a>
 800562a:	ebba 0b04 	subs.w	fp, sl, r4
 800562e:	d00b      	beq.n	8005648 <_vfiprintf_r+0xa4>
 8005630:	465b      	mov	r3, fp
 8005632:	4622      	mov	r2, r4
 8005634:	4629      	mov	r1, r5
 8005636:	4630      	mov	r0, r6
 8005638:	f7ff ffa1 	bl	800557e <__sfputs_r>
 800563c:	3001      	adds	r0, #1
 800563e:	f000 80a9 	beq.w	8005794 <_vfiprintf_r+0x1f0>
 8005642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005644:	445a      	add	r2, fp
 8005646:	9209      	str	r2, [sp, #36]	; 0x24
 8005648:	f89a 3000 	ldrb.w	r3, [sl]
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 80a1 	beq.w	8005794 <_vfiprintf_r+0x1f0>
 8005652:	2300      	movs	r3, #0
 8005654:	f04f 32ff 	mov.w	r2, #4294967295
 8005658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800565c:	f10a 0a01 	add.w	sl, sl, #1
 8005660:	9304      	str	r3, [sp, #16]
 8005662:	9307      	str	r3, [sp, #28]
 8005664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005668:	931a      	str	r3, [sp, #104]	; 0x68
 800566a:	4654      	mov	r4, sl
 800566c:	2205      	movs	r2, #5
 800566e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005672:	4854      	ldr	r0, [pc, #336]	; (80057c4 <_vfiprintf_r+0x220>)
 8005674:	f7fa fdbc 	bl	80001f0 <memchr>
 8005678:	9a04      	ldr	r2, [sp, #16]
 800567a:	b9d8      	cbnz	r0, 80056b4 <_vfiprintf_r+0x110>
 800567c:	06d1      	lsls	r1, r2, #27
 800567e:	bf44      	itt	mi
 8005680:	2320      	movmi	r3, #32
 8005682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005686:	0713      	lsls	r3, r2, #28
 8005688:	bf44      	itt	mi
 800568a:	232b      	movmi	r3, #43	; 0x2b
 800568c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005690:	f89a 3000 	ldrb.w	r3, [sl]
 8005694:	2b2a      	cmp	r3, #42	; 0x2a
 8005696:	d015      	beq.n	80056c4 <_vfiprintf_r+0x120>
 8005698:	9a07      	ldr	r2, [sp, #28]
 800569a:	4654      	mov	r4, sl
 800569c:	2000      	movs	r0, #0
 800569e:	f04f 0c0a 	mov.w	ip, #10
 80056a2:	4621      	mov	r1, r4
 80056a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056a8:	3b30      	subs	r3, #48	; 0x30
 80056aa:	2b09      	cmp	r3, #9
 80056ac:	d94d      	bls.n	800574a <_vfiprintf_r+0x1a6>
 80056ae:	b1b0      	cbz	r0, 80056de <_vfiprintf_r+0x13a>
 80056b0:	9207      	str	r2, [sp, #28]
 80056b2:	e014      	b.n	80056de <_vfiprintf_r+0x13a>
 80056b4:	eba0 0308 	sub.w	r3, r0, r8
 80056b8:	fa09 f303 	lsl.w	r3, r9, r3
 80056bc:	4313      	orrs	r3, r2
 80056be:	9304      	str	r3, [sp, #16]
 80056c0:	46a2      	mov	sl, r4
 80056c2:	e7d2      	b.n	800566a <_vfiprintf_r+0xc6>
 80056c4:	9b03      	ldr	r3, [sp, #12]
 80056c6:	1d19      	adds	r1, r3, #4
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	9103      	str	r1, [sp, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	bfbb      	ittet	lt
 80056d0:	425b      	neglt	r3, r3
 80056d2:	f042 0202 	orrlt.w	r2, r2, #2
 80056d6:	9307      	strge	r3, [sp, #28]
 80056d8:	9307      	strlt	r3, [sp, #28]
 80056da:	bfb8      	it	lt
 80056dc:	9204      	strlt	r2, [sp, #16]
 80056de:	7823      	ldrb	r3, [r4, #0]
 80056e0:	2b2e      	cmp	r3, #46	; 0x2e
 80056e2:	d10c      	bne.n	80056fe <_vfiprintf_r+0x15a>
 80056e4:	7863      	ldrb	r3, [r4, #1]
 80056e6:	2b2a      	cmp	r3, #42	; 0x2a
 80056e8:	d134      	bne.n	8005754 <_vfiprintf_r+0x1b0>
 80056ea:	9b03      	ldr	r3, [sp, #12]
 80056ec:	1d1a      	adds	r2, r3, #4
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	9203      	str	r2, [sp, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bfb8      	it	lt
 80056f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80056fa:	3402      	adds	r4, #2
 80056fc:	9305      	str	r3, [sp, #20]
 80056fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80057d4 <_vfiprintf_r+0x230>
 8005702:	7821      	ldrb	r1, [r4, #0]
 8005704:	2203      	movs	r2, #3
 8005706:	4650      	mov	r0, sl
 8005708:	f7fa fd72 	bl	80001f0 <memchr>
 800570c:	b138      	cbz	r0, 800571e <_vfiprintf_r+0x17a>
 800570e:	9b04      	ldr	r3, [sp, #16]
 8005710:	eba0 000a 	sub.w	r0, r0, sl
 8005714:	2240      	movs	r2, #64	; 0x40
 8005716:	4082      	lsls	r2, r0
 8005718:	4313      	orrs	r3, r2
 800571a:	3401      	adds	r4, #1
 800571c:	9304      	str	r3, [sp, #16]
 800571e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005722:	4829      	ldr	r0, [pc, #164]	; (80057c8 <_vfiprintf_r+0x224>)
 8005724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005728:	2206      	movs	r2, #6
 800572a:	f7fa fd61 	bl	80001f0 <memchr>
 800572e:	2800      	cmp	r0, #0
 8005730:	d03f      	beq.n	80057b2 <_vfiprintf_r+0x20e>
 8005732:	4b26      	ldr	r3, [pc, #152]	; (80057cc <_vfiprintf_r+0x228>)
 8005734:	bb1b      	cbnz	r3, 800577e <_vfiprintf_r+0x1da>
 8005736:	9b03      	ldr	r3, [sp, #12]
 8005738:	3307      	adds	r3, #7
 800573a:	f023 0307 	bic.w	r3, r3, #7
 800573e:	3308      	adds	r3, #8
 8005740:	9303      	str	r3, [sp, #12]
 8005742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005744:	443b      	add	r3, r7
 8005746:	9309      	str	r3, [sp, #36]	; 0x24
 8005748:	e768      	b.n	800561c <_vfiprintf_r+0x78>
 800574a:	fb0c 3202 	mla	r2, ip, r2, r3
 800574e:	460c      	mov	r4, r1
 8005750:	2001      	movs	r0, #1
 8005752:	e7a6      	b.n	80056a2 <_vfiprintf_r+0xfe>
 8005754:	2300      	movs	r3, #0
 8005756:	3401      	adds	r4, #1
 8005758:	9305      	str	r3, [sp, #20]
 800575a:	4619      	mov	r1, r3
 800575c:	f04f 0c0a 	mov.w	ip, #10
 8005760:	4620      	mov	r0, r4
 8005762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005766:	3a30      	subs	r2, #48	; 0x30
 8005768:	2a09      	cmp	r2, #9
 800576a:	d903      	bls.n	8005774 <_vfiprintf_r+0x1d0>
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0c6      	beq.n	80056fe <_vfiprintf_r+0x15a>
 8005770:	9105      	str	r1, [sp, #20]
 8005772:	e7c4      	b.n	80056fe <_vfiprintf_r+0x15a>
 8005774:	fb0c 2101 	mla	r1, ip, r1, r2
 8005778:	4604      	mov	r4, r0
 800577a:	2301      	movs	r3, #1
 800577c:	e7f0      	b.n	8005760 <_vfiprintf_r+0x1bc>
 800577e:	ab03      	add	r3, sp, #12
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	462a      	mov	r2, r5
 8005784:	4b12      	ldr	r3, [pc, #72]	; (80057d0 <_vfiprintf_r+0x22c>)
 8005786:	a904      	add	r1, sp, #16
 8005788:	4630      	mov	r0, r6
 800578a:	f3af 8000 	nop.w
 800578e:	4607      	mov	r7, r0
 8005790:	1c78      	adds	r0, r7, #1
 8005792:	d1d6      	bne.n	8005742 <_vfiprintf_r+0x19e>
 8005794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005796:	07d9      	lsls	r1, r3, #31
 8005798:	d405      	bmi.n	80057a6 <_vfiprintf_r+0x202>
 800579a:	89ab      	ldrh	r3, [r5, #12]
 800579c:	059a      	lsls	r2, r3, #22
 800579e:	d402      	bmi.n	80057a6 <_vfiprintf_r+0x202>
 80057a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057a2:	f7ff fc83 	bl	80050ac <__retarget_lock_release_recursive>
 80057a6:	89ab      	ldrh	r3, [r5, #12]
 80057a8:	065b      	lsls	r3, r3, #25
 80057aa:	f53f af1d 	bmi.w	80055e8 <_vfiprintf_r+0x44>
 80057ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057b0:	e71c      	b.n	80055ec <_vfiprintf_r+0x48>
 80057b2:	ab03      	add	r3, sp, #12
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	462a      	mov	r2, r5
 80057b8:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <_vfiprintf_r+0x22c>)
 80057ba:	a904      	add	r1, sp, #16
 80057bc:	4630      	mov	r0, r6
 80057be:	f000 f879 	bl	80058b4 <_printf_i>
 80057c2:	e7e4      	b.n	800578e <_vfiprintf_r+0x1ea>
 80057c4:	080060b4 	.word	0x080060b4
 80057c8:	080060be 	.word	0x080060be
 80057cc:	00000000 	.word	0x00000000
 80057d0:	0800557f 	.word	0x0800557f
 80057d4:	080060ba 	.word	0x080060ba

080057d8 <_printf_common>:
 80057d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057dc:	4616      	mov	r6, r2
 80057de:	4699      	mov	r9, r3
 80057e0:	688a      	ldr	r2, [r1, #8]
 80057e2:	690b      	ldr	r3, [r1, #16]
 80057e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057e8:	4293      	cmp	r3, r2
 80057ea:	bfb8      	it	lt
 80057ec:	4613      	movlt	r3, r2
 80057ee:	6033      	str	r3, [r6, #0]
 80057f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057f4:	4607      	mov	r7, r0
 80057f6:	460c      	mov	r4, r1
 80057f8:	b10a      	cbz	r2, 80057fe <_printf_common+0x26>
 80057fa:	3301      	adds	r3, #1
 80057fc:	6033      	str	r3, [r6, #0]
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	0699      	lsls	r1, r3, #26
 8005802:	bf42      	ittt	mi
 8005804:	6833      	ldrmi	r3, [r6, #0]
 8005806:	3302      	addmi	r3, #2
 8005808:	6033      	strmi	r3, [r6, #0]
 800580a:	6825      	ldr	r5, [r4, #0]
 800580c:	f015 0506 	ands.w	r5, r5, #6
 8005810:	d106      	bne.n	8005820 <_printf_common+0x48>
 8005812:	f104 0a19 	add.w	sl, r4, #25
 8005816:	68e3      	ldr	r3, [r4, #12]
 8005818:	6832      	ldr	r2, [r6, #0]
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	42ab      	cmp	r3, r5
 800581e:	dc26      	bgt.n	800586e <_printf_common+0x96>
 8005820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005824:	1e13      	subs	r3, r2, #0
 8005826:	6822      	ldr	r2, [r4, #0]
 8005828:	bf18      	it	ne
 800582a:	2301      	movne	r3, #1
 800582c:	0692      	lsls	r2, r2, #26
 800582e:	d42b      	bmi.n	8005888 <_printf_common+0xb0>
 8005830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005834:	4649      	mov	r1, r9
 8005836:	4638      	mov	r0, r7
 8005838:	47c0      	blx	r8
 800583a:	3001      	adds	r0, #1
 800583c:	d01e      	beq.n	800587c <_printf_common+0xa4>
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	6922      	ldr	r2, [r4, #16]
 8005842:	f003 0306 	and.w	r3, r3, #6
 8005846:	2b04      	cmp	r3, #4
 8005848:	bf02      	ittt	eq
 800584a:	68e5      	ldreq	r5, [r4, #12]
 800584c:	6833      	ldreq	r3, [r6, #0]
 800584e:	1aed      	subeq	r5, r5, r3
 8005850:	68a3      	ldr	r3, [r4, #8]
 8005852:	bf0c      	ite	eq
 8005854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005858:	2500      	movne	r5, #0
 800585a:	4293      	cmp	r3, r2
 800585c:	bfc4      	itt	gt
 800585e:	1a9b      	subgt	r3, r3, r2
 8005860:	18ed      	addgt	r5, r5, r3
 8005862:	2600      	movs	r6, #0
 8005864:	341a      	adds	r4, #26
 8005866:	42b5      	cmp	r5, r6
 8005868:	d11a      	bne.n	80058a0 <_printf_common+0xc8>
 800586a:	2000      	movs	r0, #0
 800586c:	e008      	b.n	8005880 <_printf_common+0xa8>
 800586e:	2301      	movs	r3, #1
 8005870:	4652      	mov	r2, sl
 8005872:	4649      	mov	r1, r9
 8005874:	4638      	mov	r0, r7
 8005876:	47c0      	blx	r8
 8005878:	3001      	adds	r0, #1
 800587a:	d103      	bne.n	8005884 <_printf_common+0xac>
 800587c:	f04f 30ff 	mov.w	r0, #4294967295
 8005880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005884:	3501      	adds	r5, #1
 8005886:	e7c6      	b.n	8005816 <_printf_common+0x3e>
 8005888:	18e1      	adds	r1, r4, r3
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	2030      	movs	r0, #48	; 0x30
 800588e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005892:	4422      	add	r2, r4
 8005894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800589c:	3302      	adds	r3, #2
 800589e:	e7c7      	b.n	8005830 <_printf_common+0x58>
 80058a0:	2301      	movs	r3, #1
 80058a2:	4622      	mov	r2, r4
 80058a4:	4649      	mov	r1, r9
 80058a6:	4638      	mov	r0, r7
 80058a8:	47c0      	blx	r8
 80058aa:	3001      	adds	r0, #1
 80058ac:	d0e6      	beq.n	800587c <_printf_common+0xa4>
 80058ae:	3601      	adds	r6, #1
 80058b0:	e7d9      	b.n	8005866 <_printf_common+0x8e>
	...

080058b4 <_printf_i>:
 80058b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058b8:	7e0f      	ldrb	r7, [r1, #24]
 80058ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058bc:	2f78      	cmp	r7, #120	; 0x78
 80058be:	4691      	mov	r9, r2
 80058c0:	4680      	mov	r8, r0
 80058c2:	460c      	mov	r4, r1
 80058c4:	469a      	mov	sl, r3
 80058c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058ca:	d807      	bhi.n	80058dc <_printf_i+0x28>
 80058cc:	2f62      	cmp	r7, #98	; 0x62
 80058ce:	d80a      	bhi.n	80058e6 <_printf_i+0x32>
 80058d0:	2f00      	cmp	r7, #0
 80058d2:	f000 80d4 	beq.w	8005a7e <_printf_i+0x1ca>
 80058d6:	2f58      	cmp	r7, #88	; 0x58
 80058d8:	f000 80c0 	beq.w	8005a5c <_printf_i+0x1a8>
 80058dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058e4:	e03a      	b.n	800595c <_printf_i+0xa8>
 80058e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058ea:	2b15      	cmp	r3, #21
 80058ec:	d8f6      	bhi.n	80058dc <_printf_i+0x28>
 80058ee:	a101      	add	r1, pc, #4	; (adr r1, 80058f4 <_printf_i+0x40>)
 80058f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058f4:	0800594d 	.word	0x0800594d
 80058f8:	08005961 	.word	0x08005961
 80058fc:	080058dd 	.word	0x080058dd
 8005900:	080058dd 	.word	0x080058dd
 8005904:	080058dd 	.word	0x080058dd
 8005908:	080058dd 	.word	0x080058dd
 800590c:	08005961 	.word	0x08005961
 8005910:	080058dd 	.word	0x080058dd
 8005914:	080058dd 	.word	0x080058dd
 8005918:	080058dd 	.word	0x080058dd
 800591c:	080058dd 	.word	0x080058dd
 8005920:	08005a65 	.word	0x08005a65
 8005924:	0800598d 	.word	0x0800598d
 8005928:	08005a1f 	.word	0x08005a1f
 800592c:	080058dd 	.word	0x080058dd
 8005930:	080058dd 	.word	0x080058dd
 8005934:	08005a87 	.word	0x08005a87
 8005938:	080058dd 	.word	0x080058dd
 800593c:	0800598d 	.word	0x0800598d
 8005940:	080058dd 	.word	0x080058dd
 8005944:	080058dd 	.word	0x080058dd
 8005948:	08005a27 	.word	0x08005a27
 800594c:	682b      	ldr	r3, [r5, #0]
 800594e:	1d1a      	adds	r2, r3, #4
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	602a      	str	r2, [r5, #0]
 8005954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800595c:	2301      	movs	r3, #1
 800595e:	e09f      	b.n	8005aa0 <_printf_i+0x1ec>
 8005960:	6820      	ldr	r0, [r4, #0]
 8005962:	682b      	ldr	r3, [r5, #0]
 8005964:	0607      	lsls	r7, r0, #24
 8005966:	f103 0104 	add.w	r1, r3, #4
 800596a:	6029      	str	r1, [r5, #0]
 800596c:	d501      	bpl.n	8005972 <_printf_i+0xbe>
 800596e:	681e      	ldr	r6, [r3, #0]
 8005970:	e003      	b.n	800597a <_printf_i+0xc6>
 8005972:	0646      	lsls	r6, r0, #25
 8005974:	d5fb      	bpl.n	800596e <_printf_i+0xba>
 8005976:	f9b3 6000 	ldrsh.w	r6, [r3]
 800597a:	2e00      	cmp	r6, #0
 800597c:	da03      	bge.n	8005986 <_printf_i+0xd2>
 800597e:	232d      	movs	r3, #45	; 0x2d
 8005980:	4276      	negs	r6, r6
 8005982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005986:	485a      	ldr	r0, [pc, #360]	; (8005af0 <_printf_i+0x23c>)
 8005988:	230a      	movs	r3, #10
 800598a:	e012      	b.n	80059b2 <_printf_i+0xfe>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	6820      	ldr	r0, [r4, #0]
 8005990:	1d19      	adds	r1, r3, #4
 8005992:	6029      	str	r1, [r5, #0]
 8005994:	0605      	lsls	r5, r0, #24
 8005996:	d501      	bpl.n	800599c <_printf_i+0xe8>
 8005998:	681e      	ldr	r6, [r3, #0]
 800599a:	e002      	b.n	80059a2 <_printf_i+0xee>
 800599c:	0641      	lsls	r1, r0, #25
 800599e:	d5fb      	bpl.n	8005998 <_printf_i+0xe4>
 80059a0:	881e      	ldrh	r6, [r3, #0]
 80059a2:	4853      	ldr	r0, [pc, #332]	; (8005af0 <_printf_i+0x23c>)
 80059a4:	2f6f      	cmp	r7, #111	; 0x6f
 80059a6:	bf0c      	ite	eq
 80059a8:	2308      	moveq	r3, #8
 80059aa:	230a      	movne	r3, #10
 80059ac:	2100      	movs	r1, #0
 80059ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059b2:	6865      	ldr	r5, [r4, #4]
 80059b4:	60a5      	str	r5, [r4, #8]
 80059b6:	2d00      	cmp	r5, #0
 80059b8:	bfa2      	ittt	ge
 80059ba:	6821      	ldrge	r1, [r4, #0]
 80059bc:	f021 0104 	bicge.w	r1, r1, #4
 80059c0:	6021      	strge	r1, [r4, #0]
 80059c2:	b90e      	cbnz	r6, 80059c8 <_printf_i+0x114>
 80059c4:	2d00      	cmp	r5, #0
 80059c6:	d04b      	beq.n	8005a60 <_printf_i+0x1ac>
 80059c8:	4615      	mov	r5, r2
 80059ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80059ce:	fb03 6711 	mls	r7, r3, r1, r6
 80059d2:	5dc7      	ldrb	r7, [r0, r7]
 80059d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059d8:	4637      	mov	r7, r6
 80059da:	42bb      	cmp	r3, r7
 80059dc:	460e      	mov	r6, r1
 80059de:	d9f4      	bls.n	80059ca <_printf_i+0x116>
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d10b      	bne.n	80059fc <_printf_i+0x148>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	07de      	lsls	r6, r3, #31
 80059e8:	d508      	bpl.n	80059fc <_printf_i+0x148>
 80059ea:	6923      	ldr	r3, [r4, #16]
 80059ec:	6861      	ldr	r1, [r4, #4]
 80059ee:	4299      	cmp	r1, r3
 80059f0:	bfde      	ittt	le
 80059f2:	2330      	movle	r3, #48	; 0x30
 80059f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059fc:	1b52      	subs	r2, r2, r5
 80059fe:	6122      	str	r2, [r4, #16]
 8005a00:	f8cd a000 	str.w	sl, [sp]
 8005a04:	464b      	mov	r3, r9
 8005a06:	aa03      	add	r2, sp, #12
 8005a08:	4621      	mov	r1, r4
 8005a0a:	4640      	mov	r0, r8
 8005a0c:	f7ff fee4 	bl	80057d8 <_printf_common>
 8005a10:	3001      	adds	r0, #1
 8005a12:	d14a      	bne.n	8005aaa <_printf_i+0x1f6>
 8005a14:	f04f 30ff 	mov.w	r0, #4294967295
 8005a18:	b004      	add	sp, #16
 8005a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	f043 0320 	orr.w	r3, r3, #32
 8005a24:	6023      	str	r3, [r4, #0]
 8005a26:	4833      	ldr	r0, [pc, #204]	; (8005af4 <_printf_i+0x240>)
 8005a28:	2778      	movs	r7, #120	; 0x78
 8005a2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	6829      	ldr	r1, [r5, #0]
 8005a32:	061f      	lsls	r7, r3, #24
 8005a34:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a38:	d402      	bmi.n	8005a40 <_printf_i+0x18c>
 8005a3a:	065f      	lsls	r7, r3, #25
 8005a3c:	bf48      	it	mi
 8005a3e:	b2b6      	uxthmi	r6, r6
 8005a40:	07df      	lsls	r7, r3, #31
 8005a42:	bf48      	it	mi
 8005a44:	f043 0320 	orrmi.w	r3, r3, #32
 8005a48:	6029      	str	r1, [r5, #0]
 8005a4a:	bf48      	it	mi
 8005a4c:	6023      	strmi	r3, [r4, #0]
 8005a4e:	b91e      	cbnz	r6, 8005a58 <_printf_i+0x1a4>
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	f023 0320 	bic.w	r3, r3, #32
 8005a56:	6023      	str	r3, [r4, #0]
 8005a58:	2310      	movs	r3, #16
 8005a5a:	e7a7      	b.n	80059ac <_printf_i+0xf8>
 8005a5c:	4824      	ldr	r0, [pc, #144]	; (8005af0 <_printf_i+0x23c>)
 8005a5e:	e7e4      	b.n	8005a2a <_printf_i+0x176>
 8005a60:	4615      	mov	r5, r2
 8005a62:	e7bd      	b.n	80059e0 <_printf_i+0x12c>
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	6826      	ldr	r6, [r4, #0]
 8005a68:	6961      	ldr	r1, [r4, #20]
 8005a6a:	1d18      	adds	r0, r3, #4
 8005a6c:	6028      	str	r0, [r5, #0]
 8005a6e:	0635      	lsls	r5, r6, #24
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	d501      	bpl.n	8005a78 <_printf_i+0x1c4>
 8005a74:	6019      	str	r1, [r3, #0]
 8005a76:	e002      	b.n	8005a7e <_printf_i+0x1ca>
 8005a78:	0670      	lsls	r0, r6, #25
 8005a7a:	d5fb      	bpl.n	8005a74 <_printf_i+0x1c0>
 8005a7c:	8019      	strh	r1, [r3, #0]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	6123      	str	r3, [r4, #16]
 8005a82:	4615      	mov	r5, r2
 8005a84:	e7bc      	b.n	8005a00 <_printf_i+0x14c>
 8005a86:	682b      	ldr	r3, [r5, #0]
 8005a88:	1d1a      	adds	r2, r3, #4
 8005a8a:	602a      	str	r2, [r5, #0]
 8005a8c:	681d      	ldr	r5, [r3, #0]
 8005a8e:	6862      	ldr	r2, [r4, #4]
 8005a90:	2100      	movs	r1, #0
 8005a92:	4628      	mov	r0, r5
 8005a94:	f7fa fbac 	bl	80001f0 <memchr>
 8005a98:	b108      	cbz	r0, 8005a9e <_printf_i+0x1ea>
 8005a9a:	1b40      	subs	r0, r0, r5
 8005a9c:	6060      	str	r0, [r4, #4]
 8005a9e:	6863      	ldr	r3, [r4, #4]
 8005aa0:	6123      	str	r3, [r4, #16]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa8:	e7aa      	b.n	8005a00 <_printf_i+0x14c>
 8005aaa:	6923      	ldr	r3, [r4, #16]
 8005aac:	462a      	mov	r2, r5
 8005aae:	4649      	mov	r1, r9
 8005ab0:	4640      	mov	r0, r8
 8005ab2:	47d0      	blx	sl
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	d0ad      	beq.n	8005a14 <_printf_i+0x160>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	079b      	lsls	r3, r3, #30
 8005abc:	d413      	bmi.n	8005ae6 <_printf_i+0x232>
 8005abe:	68e0      	ldr	r0, [r4, #12]
 8005ac0:	9b03      	ldr	r3, [sp, #12]
 8005ac2:	4298      	cmp	r0, r3
 8005ac4:	bfb8      	it	lt
 8005ac6:	4618      	movlt	r0, r3
 8005ac8:	e7a6      	b.n	8005a18 <_printf_i+0x164>
 8005aca:	2301      	movs	r3, #1
 8005acc:	4632      	mov	r2, r6
 8005ace:	4649      	mov	r1, r9
 8005ad0:	4640      	mov	r0, r8
 8005ad2:	47d0      	blx	sl
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	d09d      	beq.n	8005a14 <_printf_i+0x160>
 8005ad8:	3501      	adds	r5, #1
 8005ada:	68e3      	ldr	r3, [r4, #12]
 8005adc:	9903      	ldr	r1, [sp, #12]
 8005ade:	1a5b      	subs	r3, r3, r1
 8005ae0:	42ab      	cmp	r3, r5
 8005ae2:	dcf2      	bgt.n	8005aca <_printf_i+0x216>
 8005ae4:	e7eb      	b.n	8005abe <_printf_i+0x20a>
 8005ae6:	2500      	movs	r5, #0
 8005ae8:	f104 0619 	add.w	r6, r4, #25
 8005aec:	e7f5      	b.n	8005ada <_printf_i+0x226>
 8005aee:	bf00      	nop
 8005af0:	080060c5 	.word	0x080060c5
 8005af4:	080060d6 	.word	0x080060d6

08005af8 <__sflush_r>:
 8005af8:	898a      	ldrh	r2, [r1, #12]
 8005afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005afe:	4605      	mov	r5, r0
 8005b00:	0710      	lsls	r0, r2, #28
 8005b02:	460c      	mov	r4, r1
 8005b04:	d458      	bmi.n	8005bb8 <__sflush_r+0xc0>
 8005b06:	684b      	ldr	r3, [r1, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	dc05      	bgt.n	8005b18 <__sflush_r+0x20>
 8005b0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	dc02      	bgt.n	8005b18 <__sflush_r+0x20>
 8005b12:	2000      	movs	r0, #0
 8005b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b1a:	2e00      	cmp	r6, #0
 8005b1c:	d0f9      	beq.n	8005b12 <__sflush_r+0x1a>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b24:	682f      	ldr	r7, [r5, #0]
 8005b26:	6a21      	ldr	r1, [r4, #32]
 8005b28:	602b      	str	r3, [r5, #0]
 8005b2a:	d032      	beq.n	8005b92 <__sflush_r+0x9a>
 8005b2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b2e:	89a3      	ldrh	r3, [r4, #12]
 8005b30:	075a      	lsls	r2, r3, #29
 8005b32:	d505      	bpl.n	8005b40 <__sflush_r+0x48>
 8005b34:	6863      	ldr	r3, [r4, #4]
 8005b36:	1ac0      	subs	r0, r0, r3
 8005b38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b3a:	b10b      	cbz	r3, 8005b40 <__sflush_r+0x48>
 8005b3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b3e:	1ac0      	subs	r0, r0, r3
 8005b40:	2300      	movs	r3, #0
 8005b42:	4602      	mov	r2, r0
 8005b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b46:	6a21      	ldr	r1, [r4, #32]
 8005b48:	4628      	mov	r0, r5
 8005b4a:	47b0      	blx	r6
 8005b4c:	1c43      	adds	r3, r0, #1
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	d106      	bne.n	8005b60 <__sflush_r+0x68>
 8005b52:	6829      	ldr	r1, [r5, #0]
 8005b54:	291d      	cmp	r1, #29
 8005b56:	d82b      	bhi.n	8005bb0 <__sflush_r+0xb8>
 8005b58:	4a29      	ldr	r2, [pc, #164]	; (8005c00 <__sflush_r+0x108>)
 8005b5a:	410a      	asrs	r2, r1
 8005b5c:	07d6      	lsls	r6, r2, #31
 8005b5e:	d427      	bmi.n	8005bb0 <__sflush_r+0xb8>
 8005b60:	2200      	movs	r2, #0
 8005b62:	6062      	str	r2, [r4, #4]
 8005b64:	04d9      	lsls	r1, r3, #19
 8005b66:	6922      	ldr	r2, [r4, #16]
 8005b68:	6022      	str	r2, [r4, #0]
 8005b6a:	d504      	bpl.n	8005b76 <__sflush_r+0x7e>
 8005b6c:	1c42      	adds	r2, r0, #1
 8005b6e:	d101      	bne.n	8005b74 <__sflush_r+0x7c>
 8005b70:	682b      	ldr	r3, [r5, #0]
 8005b72:	b903      	cbnz	r3, 8005b76 <__sflush_r+0x7e>
 8005b74:	6560      	str	r0, [r4, #84]	; 0x54
 8005b76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b78:	602f      	str	r7, [r5, #0]
 8005b7a:	2900      	cmp	r1, #0
 8005b7c:	d0c9      	beq.n	8005b12 <__sflush_r+0x1a>
 8005b7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b82:	4299      	cmp	r1, r3
 8005b84:	d002      	beq.n	8005b8c <__sflush_r+0x94>
 8005b86:	4628      	mov	r0, r5
 8005b88:	f7ff fa92 	bl	80050b0 <_free_r>
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	6360      	str	r0, [r4, #52]	; 0x34
 8005b90:	e7c0      	b.n	8005b14 <__sflush_r+0x1c>
 8005b92:	2301      	movs	r3, #1
 8005b94:	4628      	mov	r0, r5
 8005b96:	47b0      	blx	r6
 8005b98:	1c41      	adds	r1, r0, #1
 8005b9a:	d1c8      	bne.n	8005b2e <__sflush_r+0x36>
 8005b9c:	682b      	ldr	r3, [r5, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0c5      	beq.n	8005b2e <__sflush_r+0x36>
 8005ba2:	2b1d      	cmp	r3, #29
 8005ba4:	d001      	beq.n	8005baa <__sflush_r+0xb2>
 8005ba6:	2b16      	cmp	r3, #22
 8005ba8:	d101      	bne.n	8005bae <__sflush_r+0xb6>
 8005baa:	602f      	str	r7, [r5, #0]
 8005bac:	e7b1      	b.n	8005b12 <__sflush_r+0x1a>
 8005bae:	89a3      	ldrh	r3, [r4, #12]
 8005bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb4:	81a3      	strh	r3, [r4, #12]
 8005bb6:	e7ad      	b.n	8005b14 <__sflush_r+0x1c>
 8005bb8:	690f      	ldr	r7, [r1, #16]
 8005bba:	2f00      	cmp	r7, #0
 8005bbc:	d0a9      	beq.n	8005b12 <__sflush_r+0x1a>
 8005bbe:	0793      	lsls	r3, r2, #30
 8005bc0:	680e      	ldr	r6, [r1, #0]
 8005bc2:	bf08      	it	eq
 8005bc4:	694b      	ldreq	r3, [r1, #20]
 8005bc6:	600f      	str	r7, [r1, #0]
 8005bc8:	bf18      	it	ne
 8005bca:	2300      	movne	r3, #0
 8005bcc:	eba6 0807 	sub.w	r8, r6, r7
 8005bd0:	608b      	str	r3, [r1, #8]
 8005bd2:	f1b8 0f00 	cmp.w	r8, #0
 8005bd6:	dd9c      	ble.n	8005b12 <__sflush_r+0x1a>
 8005bd8:	6a21      	ldr	r1, [r4, #32]
 8005bda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005bdc:	4643      	mov	r3, r8
 8005bde:	463a      	mov	r2, r7
 8005be0:	4628      	mov	r0, r5
 8005be2:	47b0      	blx	r6
 8005be4:	2800      	cmp	r0, #0
 8005be6:	dc06      	bgt.n	8005bf6 <__sflush_r+0xfe>
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bee:	81a3      	strh	r3, [r4, #12]
 8005bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf4:	e78e      	b.n	8005b14 <__sflush_r+0x1c>
 8005bf6:	4407      	add	r7, r0
 8005bf8:	eba8 0800 	sub.w	r8, r8, r0
 8005bfc:	e7e9      	b.n	8005bd2 <__sflush_r+0xda>
 8005bfe:	bf00      	nop
 8005c00:	dfbffffe 	.word	0xdfbffffe

08005c04 <_fflush_r>:
 8005c04:	b538      	push	{r3, r4, r5, lr}
 8005c06:	690b      	ldr	r3, [r1, #16]
 8005c08:	4605      	mov	r5, r0
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	b913      	cbnz	r3, 8005c14 <_fflush_r+0x10>
 8005c0e:	2500      	movs	r5, #0
 8005c10:	4628      	mov	r0, r5
 8005c12:	bd38      	pop	{r3, r4, r5, pc}
 8005c14:	b118      	cbz	r0, 8005c1e <_fflush_r+0x1a>
 8005c16:	6a03      	ldr	r3, [r0, #32]
 8005c18:	b90b      	cbnz	r3, 8005c1e <_fflush_r+0x1a>
 8005c1a:	f7ff f81d 	bl	8004c58 <__sinit>
 8005c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0f3      	beq.n	8005c0e <_fflush_r+0xa>
 8005c26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c28:	07d0      	lsls	r0, r2, #31
 8005c2a:	d404      	bmi.n	8005c36 <_fflush_r+0x32>
 8005c2c:	0599      	lsls	r1, r3, #22
 8005c2e:	d402      	bmi.n	8005c36 <_fflush_r+0x32>
 8005c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c32:	f7ff fa3a 	bl	80050aa <__retarget_lock_acquire_recursive>
 8005c36:	4628      	mov	r0, r5
 8005c38:	4621      	mov	r1, r4
 8005c3a:	f7ff ff5d 	bl	8005af8 <__sflush_r>
 8005c3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c40:	07da      	lsls	r2, r3, #31
 8005c42:	4605      	mov	r5, r0
 8005c44:	d4e4      	bmi.n	8005c10 <_fflush_r+0xc>
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	059b      	lsls	r3, r3, #22
 8005c4a:	d4e1      	bmi.n	8005c10 <_fflush_r+0xc>
 8005c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c4e:	f7ff fa2d 	bl	80050ac <__retarget_lock_release_recursive>
 8005c52:	e7dd      	b.n	8005c10 <_fflush_r+0xc>

08005c54 <__swhatbuf_r>:
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	460c      	mov	r4, r1
 8005c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5c:	2900      	cmp	r1, #0
 8005c5e:	b096      	sub	sp, #88	; 0x58
 8005c60:	4615      	mov	r5, r2
 8005c62:	461e      	mov	r6, r3
 8005c64:	da0d      	bge.n	8005c82 <__swhatbuf_r+0x2e>
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c6c:	f04f 0100 	mov.w	r1, #0
 8005c70:	bf0c      	ite	eq
 8005c72:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005c76:	2340      	movne	r3, #64	; 0x40
 8005c78:	2000      	movs	r0, #0
 8005c7a:	6031      	str	r1, [r6, #0]
 8005c7c:	602b      	str	r3, [r5, #0]
 8005c7e:	b016      	add	sp, #88	; 0x58
 8005c80:	bd70      	pop	{r4, r5, r6, pc}
 8005c82:	466a      	mov	r2, sp
 8005c84:	f000 f862 	bl	8005d4c <_fstat_r>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	dbec      	blt.n	8005c66 <__swhatbuf_r+0x12>
 8005c8c:	9901      	ldr	r1, [sp, #4]
 8005c8e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005c92:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005c96:	4259      	negs	r1, r3
 8005c98:	4159      	adcs	r1, r3
 8005c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c9e:	e7eb      	b.n	8005c78 <__swhatbuf_r+0x24>

08005ca0 <__smakebuf_r>:
 8005ca0:	898b      	ldrh	r3, [r1, #12]
 8005ca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ca4:	079d      	lsls	r5, r3, #30
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	460c      	mov	r4, r1
 8005caa:	d507      	bpl.n	8005cbc <__smakebuf_r+0x1c>
 8005cac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	6123      	str	r3, [r4, #16]
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	6163      	str	r3, [r4, #20]
 8005cb8:	b002      	add	sp, #8
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	ab01      	add	r3, sp, #4
 8005cbe:	466a      	mov	r2, sp
 8005cc0:	f7ff ffc8 	bl	8005c54 <__swhatbuf_r>
 8005cc4:	9900      	ldr	r1, [sp, #0]
 8005cc6:	4605      	mov	r5, r0
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f7ff fa5d 	bl	8005188 <_malloc_r>
 8005cce:	b948      	cbnz	r0, 8005ce4 <__smakebuf_r+0x44>
 8005cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cd4:	059a      	lsls	r2, r3, #22
 8005cd6:	d4ef      	bmi.n	8005cb8 <__smakebuf_r+0x18>
 8005cd8:	f023 0303 	bic.w	r3, r3, #3
 8005cdc:	f043 0302 	orr.w	r3, r3, #2
 8005ce0:	81a3      	strh	r3, [r4, #12]
 8005ce2:	e7e3      	b.n	8005cac <__smakebuf_r+0xc>
 8005ce4:	89a3      	ldrh	r3, [r4, #12]
 8005ce6:	6020      	str	r0, [r4, #0]
 8005ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cec:	81a3      	strh	r3, [r4, #12]
 8005cee:	9b00      	ldr	r3, [sp, #0]
 8005cf0:	6163      	str	r3, [r4, #20]
 8005cf2:	9b01      	ldr	r3, [sp, #4]
 8005cf4:	6120      	str	r0, [r4, #16]
 8005cf6:	b15b      	cbz	r3, 8005d10 <__smakebuf_r+0x70>
 8005cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	f000 f837 	bl	8005d70 <_isatty_r>
 8005d02:	b128      	cbz	r0, 8005d10 <__smakebuf_r+0x70>
 8005d04:	89a3      	ldrh	r3, [r4, #12]
 8005d06:	f023 0303 	bic.w	r3, r3, #3
 8005d0a:	f043 0301 	orr.w	r3, r3, #1
 8005d0e:	81a3      	strh	r3, [r4, #12]
 8005d10:	89a3      	ldrh	r3, [r4, #12]
 8005d12:	431d      	orrs	r5, r3
 8005d14:	81a5      	strh	r5, [r4, #12]
 8005d16:	e7cf      	b.n	8005cb8 <__smakebuf_r+0x18>

08005d18 <memmove>:
 8005d18:	4288      	cmp	r0, r1
 8005d1a:	b510      	push	{r4, lr}
 8005d1c:	eb01 0402 	add.w	r4, r1, r2
 8005d20:	d902      	bls.n	8005d28 <memmove+0x10>
 8005d22:	4284      	cmp	r4, r0
 8005d24:	4623      	mov	r3, r4
 8005d26:	d807      	bhi.n	8005d38 <memmove+0x20>
 8005d28:	1e43      	subs	r3, r0, #1
 8005d2a:	42a1      	cmp	r1, r4
 8005d2c:	d008      	beq.n	8005d40 <memmove+0x28>
 8005d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d36:	e7f8      	b.n	8005d2a <memmove+0x12>
 8005d38:	4402      	add	r2, r0
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	428a      	cmp	r2, r1
 8005d3e:	d100      	bne.n	8005d42 <memmove+0x2a>
 8005d40:	bd10      	pop	{r4, pc}
 8005d42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d4a:	e7f7      	b.n	8005d3c <memmove+0x24>

08005d4c <_fstat_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	4d07      	ldr	r5, [pc, #28]	; (8005d6c <_fstat_r+0x20>)
 8005d50:	2300      	movs	r3, #0
 8005d52:	4604      	mov	r4, r0
 8005d54:	4608      	mov	r0, r1
 8005d56:	4611      	mov	r1, r2
 8005d58:	602b      	str	r3, [r5, #0]
 8005d5a:	f7fb f902 	bl	8000f62 <_fstat>
 8005d5e:	1c43      	adds	r3, r0, #1
 8005d60:	d102      	bne.n	8005d68 <_fstat_r+0x1c>
 8005d62:	682b      	ldr	r3, [r5, #0]
 8005d64:	b103      	cbz	r3, 8005d68 <_fstat_r+0x1c>
 8005d66:	6023      	str	r3, [r4, #0]
 8005d68:	bd38      	pop	{r3, r4, r5, pc}
 8005d6a:	bf00      	nop
 8005d6c:	2000039c 	.word	0x2000039c

08005d70 <_isatty_r>:
 8005d70:	b538      	push	{r3, r4, r5, lr}
 8005d72:	4d06      	ldr	r5, [pc, #24]	; (8005d8c <_isatty_r+0x1c>)
 8005d74:	2300      	movs	r3, #0
 8005d76:	4604      	mov	r4, r0
 8005d78:	4608      	mov	r0, r1
 8005d7a:	602b      	str	r3, [r5, #0]
 8005d7c:	f7fb f901 	bl	8000f82 <_isatty>
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	d102      	bne.n	8005d8a <_isatty_r+0x1a>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	b103      	cbz	r3, 8005d8a <_isatty_r+0x1a>
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	bd38      	pop	{r3, r4, r5, pc}
 8005d8c:	2000039c 	.word	0x2000039c

08005d90 <_sbrk_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	4d06      	ldr	r5, [pc, #24]	; (8005dac <_sbrk_r+0x1c>)
 8005d94:	2300      	movs	r3, #0
 8005d96:	4604      	mov	r4, r0
 8005d98:	4608      	mov	r0, r1
 8005d9a:	602b      	str	r3, [r5, #0]
 8005d9c:	f7fb f90a 	bl	8000fb4 <_sbrk>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	d102      	bne.n	8005daa <_sbrk_r+0x1a>
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	b103      	cbz	r3, 8005daa <_sbrk_r+0x1a>
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	bd38      	pop	{r3, r4, r5, pc}
 8005dac:	2000039c 	.word	0x2000039c

08005db0 <memcpy>:
 8005db0:	440a      	add	r2, r1
 8005db2:	4291      	cmp	r1, r2
 8005db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005db8:	d100      	bne.n	8005dbc <memcpy+0xc>
 8005dba:	4770      	bx	lr
 8005dbc:	b510      	push	{r4, lr}
 8005dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dc6:	4291      	cmp	r1, r2
 8005dc8:	d1f9      	bne.n	8005dbe <memcpy+0xe>
 8005dca:	bd10      	pop	{r4, pc}

08005dcc <_realloc_r>:
 8005dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd0:	4680      	mov	r8, r0
 8005dd2:	4614      	mov	r4, r2
 8005dd4:	460e      	mov	r6, r1
 8005dd6:	b921      	cbnz	r1, 8005de2 <_realloc_r+0x16>
 8005dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ddc:	4611      	mov	r1, r2
 8005dde:	f7ff b9d3 	b.w	8005188 <_malloc_r>
 8005de2:	b92a      	cbnz	r2, 8005df0 <_realloc_r+0x24>
 8005de4:	f7ff f964 	bl	80050b0 <_free_r>
 8005de8:	4625      	mov	r5, r4
 8005dea:	4628      	mov	r0, r5
 8005dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df0:	f000 f81b 	bl	8005e2a <_malloc_usable_size_r>
 8005df4:	4284      	cmp	r4, r0
 8005df6:	4607      	mov	r7, r0
 8005df8:	d802      	bhi.n	8005e00 <_realloc_r+0x34>
 8005dfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005dfe:	d812      	bhi.n	8005e26 <_realloc_r+0x5a>
 8005e00:	4621      	mov	r1, r4
 8005e02:	4640      	mov	r0, r8
 8005e04:	f7ff f9c0 	bl	8005188 <_malloc_r>
 8005e08:	4605      	mov	r5, r0
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d0ed      	beq.n	8005dea <_realloc_r+0x1e>
 8005e0e:	42bc      	cmp	r4, r7
 8005e10:	4622      	mov	r2, r4
 8005e12:	4631      	mov	r1, r6
 8005e14:	bf28      	it	cs
 8005e16:	463a      	movcs	r2, r7
 8005e18:	f7ff ffca 	bl	8005db0 <memcpy>
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	4640      	mov	r0, r8
 8005e20:	f7ff f946 	bl	80050b0 <_free_r>
 8005e24:	e7e1      	b.n	8005dea <_realloc_r+0x1e>
 8005e26:	4635      	mov	r5, r6
 8005e28:	e7df      	b.n	8005dea <_realloc_r+0x1e>

08005e2a <_malloc_usable_size_r>:
 8005e2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e2e:	1f18      	subs	r0, r3, #4
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bfbc      	itt	lt
 8005e34:	580b      	ldrlt	r3, [r1, r0]
 8005e36:	18c0      	addlt	r0, r0, r3
 8005e38:	4770      	bx	lr
	...

08005e3c <_init>:
 8005e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3e:	bf00      	nop
 8005e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e42:	bc08      	pop	{r3}
 8005e44:	469e      	mov	lr, r3
 8005e46:	4770      	bx	lr

08005e48 <_fini>:
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4a:	bf00      	nop
 8005e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4e:	bc08      	pop	{r3}
 8005e50:	469e      	mov	lr, r3
 8005e52:	4770      	bx	lr
